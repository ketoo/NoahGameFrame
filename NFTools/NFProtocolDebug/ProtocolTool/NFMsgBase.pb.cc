// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgBase.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NFMsgBase.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NFMsg {

namespace {

const ::google::protobuf::Descriptor* Ident_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ident_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector2_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropertyInt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyInt_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropertyFloat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyFloat_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropertyString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyString_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropertyObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropertyVector2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyVector2_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropertyVector3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyVector3_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordInt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordInt_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordFloat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordFloat_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordString_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordVector2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordVector2_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordVector3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordVector3_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordAddRowStruct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordAddRowStruct_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectRecordBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectRecordBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectPropertyInt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectPropertyInt_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectPropertyFloat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectPropertyFloat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectPropertyString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectPropertyString_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectPropertyObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectPropertyObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectPropertyVector2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectPropertyVector2_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectPropertyVector3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectPropertyVector3_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectRecordInt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectRecordInt_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectRecordFloat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectRecordFloat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectRecordString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectRecordString_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectRecordObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectRecordObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectRecordVector2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectRecordVector2_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectRecordVector3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectRecordVector3_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectRecordSwap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectRecordSwap_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectRecordAddRow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectRecordAddRow_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectRecordRemove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectRecordRemove_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectPropertyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectPropertyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiObjectPropertyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiObjectPropertyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectRecordList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectRecordList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiObjectRecordList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiObjectRecordList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCommand_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqCommand_EGameCommandType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_NFMsgBase_2eproto() {
  protobuf_AddDesc_NFMsgBase_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NFMsgBase.proto");
  GOOGLE_CHECK(file != NULL);
  Ident_descriptor_ = file->message_type(0);
  static const int Ident_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ident, svrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ident, index_),
  };
  Ident_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ident_descriptor_,
      Ident::default_instance_,
      Ident_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ident, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ident, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ident));
  Vector2_descriptor_ = file->message_type(1);
  static const int Vector2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2, y_),
  };
  Vector2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector2_descriptor_,
      Vector2::default_instance_,
      Vector2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector2));
  Vector3_descriptor_ = file->message_type(2);
  static const int Vector3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, z_),
  };
  Vector3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector3_descriptor_,
      Vector3::default_instance_,
      Vector3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector3));
  PropertyInt_descriptor_ = file->message_type(3);
  static const int PropertyInt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyInt, property_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyInt, data_),
  };
  PropertyInt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropertyInt_descriptor_,
      PropertyInt::default_instance_,
      PropertyInt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyInt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyInt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropertyInt));
  PropertyFloat_descriptor_ = file->message_type(4);
  static const int PropertyFloat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyFloat, property_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyFloat, data_),
  };
  PropertyFloat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropertyFloat_descriptor_,
      PropertyFloat::default_instance_,
      PropertyFloat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyFloat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyFloat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropertyFloat));
  PropertyString_descriptor_ = file->message_type(5);
  static const int PropertyString_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyString, property_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyString, data_),
  };
  PropertyString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropertyString_descriptor_,
      PropertyString::default_instance_,
      PropertyString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropertyString));
  PropertyObject_descriptor_ = file->message_type(6);
  static const int PropertyObject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyObject, property_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyObject, data_),
  };
  PropertyObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropertyObject_descriptor_,
      PropertyObject::default_instance_,
      PropertyObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropertyObject));
  PropertyVector2_descriptor_ = file->message_type(7);
  static const int PropertyVector2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyVector2, property_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyVector2, data_),
  };
  PropertyVector2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropertyVector2_descriptor_,
      PropertyVector2::default_instance_,
      PropertyVector2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyVector2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyVector2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropertyVector2));
  PropertyVector3_descriptor_ = file->message_type(8);
  static const int PropertyVector3_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyVector3, property_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyVector3, data_),
  };
  PropertyVector3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropertyVector3_descriptor_,
      PropertyVector3::default_instance_,
      PropertyVector3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyVector3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyVector3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropertyVector3));
  RecordInt_descriptor_ = file->message_type(9);
  static const int RecordInt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInt, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInt, col_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInt, data_),
  };
  RecordInt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordInt_descriptor_,
      RecordInt::default_instance_,
      RecordInt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordInt));
  RecordFloat_descriptor_ = file->message_type(10);
  static const int RecordFloat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordFloat, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordFloat, col_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordFloat, data_),
  };
  RecordFloat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordFloat_descriptor_,
      RecordFloat::default_instance_,
      RecordFloat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordFloat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordFloat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordFloat));
  RecordString_descriptor_ = file->message_type(11);
  static const int RecordString_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordString, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordString, col_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordString, data_),
  };
  RecordString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordString_descriptor_,
      RecordString::default_instance_,
      RecordString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordString));
  RecordObject_descriptor_ = file->message_type(12);
  static const int RecordObject_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordObject, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordObject, col_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordObject, data_),
  };
  RecordObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordObject_descriptor_,
      RecordObject::default_instance_,
      RecordObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordObject));
  RecordVector2_descriptor_ = file->message_type(13);
  static const int RecordVector2_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordVector2, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordVector2, col_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordVector2, data_),
  };
  RecordVector2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordVector2_descriptor_,
      RecordVector2::default_instance_,
      RecordVector2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordVector2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordVector2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordVector2));
  RecordVector3_descriptor_ = file->message_type(14);
  static const int RecordVector3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordVector3, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordVector3, col_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordVector3, data_),
  };
  RecordVector3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordVector3_descriptor_,
      RecordVector3::default_instance_,
      RecordVector3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordVector3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordVector3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordVector3));
  RecordAddRowStruct_descriptor_ = file->message_type(15);
  static const int RecordAddRowStruct_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordAddRowStruct, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordAddRowStruct, record_int_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordAddRowStruct, record_float_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordAddRowStruct, record_string_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordAddRowStruct, record_object_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordAddRowStruct, record_vector2_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordAddRowStruct, record_vector3_list_),
  };
  RecordAddRowStruct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordAddRowStruct_descriptor_,
      RecordAddRowStruct::default_instance_,
      RecordAddRowStruct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordAddRowStruct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordAddRowStruct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordAddRowStruct));
  ObjectRecordBase_descriptor_ = file->message_type(16);
  static const int ObjectRecordBase_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordBase, record_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordBase, row_struct_),
  };
  ObjectRecordBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectRecordBase_descriptor_,
      ObjectRecordBase::default_instance_,
      ObjectRecordBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectRecordBase));
  ObjectPropertyInt_descriptor_ = file->message_type(17);
  static const int ObjectPropertyInt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyInt, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyInt, property_list_),
  };
  ObjectPropertyInt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectPropertyInt_descriptor_,
      ObjectPropertyInt::default_instance_,
      ObjectPropertyInt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyInt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyInt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectPropertyInt));
  ObjectPropertyFloat_descriptor_ = file->message_type(18);
  static const int ObjectPropertyFloat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyFloat, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyFloat, property_list_),
  };
  ObjectPropertyFloat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectPropertyFloat_descriptor_,
      ObjectPropertyFloat::default_instance_,
      ObjectPropertyFloat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyFloat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyFloat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectPropertyFloat));
  ObjectPropertyString_descriptor_ = file->message_type(19);
  static const int ObjectPropertyString_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyString, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyString, property_list_),
  };
  ObjectPropertyString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectPropertyString_descriptor_,
      ObjectPropertyString::default_instance_,
      ObjectPropertyString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectPropertyString));
  ObjectPropertyObject_descriptor_ = file->message_type(20);
  static const int ObjectPropertyObject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyObject, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyObject, property_list_),
  };
  ObjectPropertyObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectPropertyObject_descriptor_,
      ObjectPropertyObject::default_instance_,
      ObjectPropertyObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectPropertyObject));
  ObjectPropertyVector2_descriptor_ = file->message_type(21);
  static const int ObjectPropertyVector2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyVector2, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyVector2, property_list_),
  };
  ObjectPropertyVector2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectPropertyVector2_descriptor_,
      ObjectPropertyVector2::default_instance_,
      ObjectPropertyVector2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyVector2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyVector2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectPropertyVector2));
  ObjectPropertyVector3_descriptor_ = file->message_type(22);
  static const int ObjectPropertyVector3_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyVector3, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyVector3, property_list_),
  };
  ObjectPropertyVector3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectPropertyVector3_descriptor_,
      ObjectPropertyVector3::default_instance_,
      ObjectPropertyVector3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyVector3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyVector3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectPropertyVector3));
  ObjectRecordInt_descriptor_ = file->message_type(23);
  static const int ObjectRecordInt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordInt, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordInt, record_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordInt, property_list_),
  };
  ObjectRecordInt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectRecordInt_descriptor_,
      ObjectRecordInt::default_instance_,
      ObjectRecordInt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordInt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordInt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectRecordInt));
  ObjectRecordFloat_descriptor_ = file->message_type(24);
  static const int ObjectRecordFloat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordFloat, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordFloat, record_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordFloat, property_list_),
  };
  ObjectRecordFloat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectRecordFloat_descriptor_,
      ObjectRecordFloat::default_instance_,
      ObjectRecordFloat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordFloat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordFloat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectRecordFloat));
  ObjectRecordString_descriptor_ = file->message_type(25);
  static const int ObjectRecordString_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordString, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordString, record_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordString, property_list_),
  };
  ObjectRecordString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectRecordString_descriptor_,
      ObjectRecordString::default_instance_,
      ObjectRecordString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectRecordString));
  ObjectRecordObject_descriptor_ = file->message_type(26);
  static const int ObjectRecordObject_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordObject, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordObject, record_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordObject, property_list_),
  };
  ObjectRecordObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectRecordObject_descriptor_,
      ObjectRecordObject::default_instance_,
      ObjectRecordObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectRecordObject));
  ObjectRecordVector2_descriptor_ = file->message_type(27);
  static const int ObjectRecordVector2_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordVector2, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordVector2, record_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordVector2, property_list_),
  };
  ObjectRecordVector2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectRecordVector2_descriptor_,
      ObjectRecordVector2::default_instance_,
      ObjectRecordVector2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordVector2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordVector2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectRecordVector2));
  ObjectRecordVector3_descriptor_ = file->message_type(28);
  static const int ObjectRecordVector3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordVector3, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordVector3, record_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordVector3, property_list_),
  };
  ObjectRecordVector3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectRecordVector3_descriptor_,
      ObjectRecordVector3::default_instance_,
      ObjectRecordVector3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordVector3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordVector3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectRecordVector3));
  ObjectRecordSwap_descriptor_ = file->message_type(29);
  static const int ObjectRecordSwap_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordSwap, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordSwap, origin_record_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordSwap, target_record_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordSwap, row_origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordSwap, row_target_),
  };
  ObjectRecordSwap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectRecordSwap_descriptor_,
      ObjectRecordSwap::default_instance_,
      ObjectRecordSwap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordSwap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordSwap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectRecordSwap));
  ObjectRecordAddRow_descriptor_ = file->message_type(30);
  static const int ObjectRecordAddRow_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordAddRow, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordAddRow, record_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordAddRow, row_data_),
  };
  ObjectRecordAddRow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectRecordAddRow_descriptor_,
      ObjectRecordAddRow::default_instance_,
      ObjectRecordAddRow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordAddRow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordAddRow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectRecordAddRow));
  ObjectRecordRemove_descriptor_ = file->message_type(31);
  static const int ObjectRecordRemove_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordRemove, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordRemove, record_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordRemove, remove_row_),
  };
  ObjectRecordRemove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectRecordRemove_descriptor_,
      ObjectRecordRemove::default_instance_,
      ObjectRecordRemove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordRemove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordRemove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectRecordRemove));
  ObjectPropertyList_descriptor_ = file->message_type(32);
  static const int ObjectPropertyList_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyList, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyList, property_int_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyList, property_float_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyList, property_string_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyList, property_object_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyList, property_vector2_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyList, property_vector3_list_),
  };
  ObjectPropertyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectPropertyList_descriptor_,
      ObjectPropertyList::default_instance_,
      ObjectPropertyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectPropertyList));
  MultiObjectPropertyList_descriptor_ = file->message_type(33);
  static const int MultiObjectPropertyList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiObjectPropertyList, multi_player_property_),
  };
  MultiObjectPropertyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MultiObjectPropertyList_descriptor_,
      MultiObjectPropertyList::default_instance_,
      MultiObjectPropertyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiObjectPropertyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiObjectPropertyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MultiObjectPropertyList));
  ObjectRecordList_descriptor_ = file->message_type(34);
  static const int ObjectRecordList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordList, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordList, record_list_),
  };
  ObjectRecordList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectRecordList_descriptor_,
      ObjectRecordList::default_instance_,
      ObjectRecordList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectRecordList));
  MultiObjectRecordList_descriptor_ = file->message_type(35);
  static const int MultiObjectRecordList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiObjectRecordList, multi_player_record_),
  };
  MultiObjectRecordList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MultiObjectRecordList_descriptor_,
      MultiObjectRecordList::default_instance_,
      MultiObjectRecordList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiObjectRecordList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiObjectRecordList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MultiObjectRecordList));
  MsgBase_descriptor_ = file->message_type(36);
  static const int MsgBase_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBase, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBase, msg_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBase, player_client_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBase, hash_ident_),
  };
  MsgBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBase_descriptor_,
      MsgBase::default_instance_,
      MsgBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBase));
  ReqCommand_descriptor_ = file->message_type(37);
  static const int ReqCommand_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCommand, control_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCommand, command_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCommand, command_str_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCommand, command_value_int_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCommand, command_value_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCommand, command_value_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCommand, command_value_object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCommand, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCommand, col_),
  };
  ReqCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCommand_descriptor_,
      ReqCommand::default_instance_,
      ReqCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCommand));
  ReqCommand_EGameCommandType_descriptor_ = ReqCommand_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NFMsgBase_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ident_descriptor_, &Ident::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector2_descriptor_, &Vector2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector3_descriptor_, &Vector3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropertyInt_descriptor_, &PropertyInt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropertyFloat_descriptor_, &PropertyFloat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropertyString_descriptor_, &PropertyString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropertyObject_descriptor_, &PropertyObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropertyVector2_descriptor_, &PropertyVector2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropertyVector3_descriptor_, &PropertyVector3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordInt_descriptor_, &RecordInt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordFloat_descriptor_, &RecordFloat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordString_descriptor_, &RecordString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordObject_descriptor_, &RecordObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordVector2_descriptor_, &RecordVector2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordVector3_descriptor_, &RecordVector3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordAddRowStruct_descriptor_, &RecordAddRowStruct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectRecordBase_descriptor_, &ObjectRecordBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectPropertyInt_descriptor_, &ObjectPropertyInt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectPropertyFloat_descriptor_, &ObjectPropertyFloat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectPropertyString_descriptor_, &ObjectPropertyString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectPropertyObject_descriptor_, &ObjectPropertyObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectPropertyVector2_descriptor_, &ObjectPropertyVector2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectPropertyVector3_descriptor_, &ObjectPropertyVector3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectRecordInt_descriptor_, &ObjectRecordInt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectRecordFloat_descriptor_, &ObjectRecordFloat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectRecordString_descriptor_, &ObjectRecordString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectRecordObject_descriptor_, &ObjectRecordObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectRecordVector2_descriptor_, &ObjectRecordVector2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectRecordVector3_descriptor_, &ObjectRecordVector3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectRecordSwap_descriptor_, &ObjectRecordSwap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectRecordAddRow_descriptor_, &ObjectRecordAddRow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectRecordRemove_descriptor_, &ObjectRecordRemove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectPropertyList_descriptor_, &ObjectPropertyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MultiObjectPropertyList_descriptor_, &MultiObjectPropertyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectRecordList_descriptor_, &ObjectRecordList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MultiObjectRecordList_descriptor_, &MultiObjectRecordList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBase_descriptor_, &MsgBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCommand_descriptor_, &ReqCommand::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NFMsgBase_2eproto() {
  delete Ident::default_instance_;
  delete Ident_reflection_;
  delete Vector2::default_instance_;
  delete Vector2_reflection_;
  delete Vector3::default_instance_;
  delete Vector3_reflection_;
  delete PropertyInt::default_instance_;
  delete PropertyInt_reflection_;
  delete PropertyFloat::default_instance_;
  delete PropertyFloat_reflection_;
  delete PropertyString::default_instance_;
  delete PropertyString_reflection_;
  delete PropertyObject::default_instance_;
  delete PropertyObject_reflection_;
  delete PropertyVector2::default_instance_;
  delete PropertyVector2_reflection_;
  delete PropertyVector3::default_instance_;
  delete PropertyVector3_reflection_;
  delete RecordInt::default_instance_;
  delete RecordInt_reflection_;
  delete RecordFloat::default_instance_;
  delete RecordFloat_reflection_;
  delete RecordString::default_instance_;
  delete RecordString_reflection_;
  delete RecordObject::default_instance_;
  delete RecordObject_reflection_;
  delete RecordVector2::default_instance_;
  delete RecordVector2_reflection_;
  delete RecordVector3::default_instance_;
  delete RecordVector3_reflection_;
  delete RecordAddRowStruct::default_instance_;
  delete RecordAddRowStruct_reflection_;
  delete ObjectRecordBase::default_instance_;
  delete ObjectRecordBase_reflection_;
  delete ObjectPropertyInt::default_instance_;
  delete ObjectPropertyInt_reflection_;
  delete ObjectPropertyFloat::default_instance_;
  delete ObjectPropertyFloat_reflection_;
  delete ObjectPropertyString::default_instance_;
  delete ObjectPropertyString_reflection_;
  delete ObjectPropertyObject::default_instance_;
  delete ObjectPropertyObject_reflection_;
  delete ObjectPropertyVector2::default_instance_;
  delete ObjectPropertyVector2_reflection_;
  delete ObjectPropertyVector3::default_instance_;
  delete ObjectPropertyVector3_reflection_;
  delete ObjectRecordInt::default_instance_;
  delete ObjectRecordInt_reflection_;
  delete ObjectRecordFloat::default_instance_;
  delete ObjectRecordFloat_reflection_;
  delete ObjectRecordString::default_instance_;
  delete ObjectRecordString_reflection_;
  delete ObjectRecordObject::default_instance_;
  delete ObjectRecordObject_reflection_;
  delete ObjectRecordVector2::default_instance_;
  delete ObjectRecordVector2_reflection_;
  delete ObjectRecordVector3::default_instance_;
  delete ObjectRecordVector3_reflection_;
  delete ObjectRecordSwap::default_instance_;
  delete ObjectRecordSwap_reflection_;
  delete ObjectRecordAddRow::default_instance_;
  delete ObjectRecordAddRow_reflection_;
  delete ObjectRecordRemove::default_instance_;
  delete ObjectRecordRemove_reflection_;
  delete ObjectPropertyList::default_instance_;
  delete ObjectPropertyList_reflection_;
  delete MultiObjectPropertyList::default_instance_;
  delete MultiObjectPropertyList_reflection_;
  delete ObjectRecordList::default_instance_;
  delete ObjectRecordList_reflection_;
  delete MultiObjectRecordList::default_instance_;
  delete MultiObjectRecordList_reflection_;
  delete MsgBase::default_instance_;
  delete MsgBase_reflection_;
  delete ReqCommand::default_instance_;
  delete ReqCommand_reflection_;
}

void protobuf_AddDesc_NFMsgBase_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::NFMsg::protobuf_AddDesc_NFDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017NFMsgBase.proto\022\005NFMsg\032\016NFDefine.proto"
    "\"%\n\005Ident\022\r\n\005svrid\030\001 \002(\003\022\r\n\005index\030\002 \002(\003\""
    "\037\n\007Vector2\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"*\n\007Vect"
    "or3\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\"2\n\013"
    "PropertyInt\022\025\n\rproperty_name\030\001 \002(\014\022\014\n\004da"
    "ta\030\002 \002(\003\"4\n\rPropertyFloat\022\025\n\rproperty_na"
    "me\030\001 \002(\014\022\014\n\004data\030\002 \002(\002\"5\n\016PropertyString"
    "\022\025\n\rproperty_name\030\001 \002(\014\022\014\n\004data\030\002 \002(\014\"C\n"
    "\016PropertyObject\022\025\n\rproperty_name\030\001 \002(\014\022\032"
    "\n\004data\030\002 \002(\0132\014.NFMsg.Ident\"F\n\017PropertyVe"
    "ctor2\022\025\n\rproperty_name\030\001 \002(\014\022\034\n\004data\030\002 \002"
    "(\0132\016.NFMsg.Vector2\"F\n\017PropertyVector3\022\025\n"
    "\rproperty_name\030\001 \002(\014\022\034\n\004data\030\002 \002(\0132\016.NFM"
    "sg.Vector3\"3\n\tRecordInt\022\013\n\003row\030\001 \002(\005\022\013\n\003"
    "col\030\002 \002(\005\022\014\n\004data\030\003 \002(\003\"5\n\013RecordFloat\022\013"
    "\n\003row\030\001 \002(\005\022\013\n\003col\030\002 \002(\005\022\014\n\004data\030\003 \002(\002\"6"
    "\n\014RecordString\022\013\n\003row\030\001 \002(\005\022\013\n\003col\030\002 \002(\005"
    "\022\014\n\004data\030\003 \002(\014\"D\n\014RecordObject\022\013\n\003row\030\001 "
    "\002(\005\022\013\n\003col\030\002 \002(\005\022\032\n\004data\030\003 \002(\0132\014.NFMsg.I"
    "dent\"G\n\rRecordVector2\022\013\n\003row\030\001 \002(\005\022\013\n\003co"
    "l\030\002 \002(\005\022\034\n\004data\030\003 \002(\0132\016.NFMsg.Vector2\"G\n"
    "\rRecordVector3\022\013\n\003row\030\001 \002(\005\022\013\n\003col\030\002 \002(\005"
    "\022\034\n\004data\030\003 \002(\0132\016.NFMsg.Vector3\"\303\002\n\022Recor"
    "dAddRowStruct\022\013\n\003row\030\001 \002(\005\022)\n\017record_int"
    "_list\030\002 \003(\0132\020.NFMsg.RecordInt\022-\n\021record_"
    "float_list\030\003 \003(\0132\022.NFMsg.RecordFloat\022/\n\022"
    "record_string_list\030\004 \003(\0132\023.NFMsg.RecordS"
    "tring\022/\n\022record_object_list\030\005 \003(\0132\023.NFMs"
    "g.RecordObject\0221\n\023record_vector2_list\030\006 "
    "\003(\0132\024.NFMsg.RecordVector2\0221\n\023record_vect"
    "or3_list\030\007 \003(\0132\024.NFMsg.RecordVector3\"V\n\020"
    "ObjectRecordBase\022\023\n\013record_name\030\001 \002(\014\022-\n"
    "\nrow_struct\030\002 \003(\0132\031.NFMsg.RecordAddRowSt"
    "ruct\"_\n\021ObjectPropertyInt\022\037\n\tplayer_id\030\001"
    " \002(\0132\014.NFMsg.Ident\022)\n\rproperty_list\030\002 \003("
    "\0132\022.NFMsg.PropertyInt\"c\n\023ObjectPropertyF"
    "loat\022\037\n\tplayer_id\030\001 \002(\0132\014.NFMsg.Ident\022+\n"
    "\rproperty_list\030\002 \003(\0132\024.NFMsg.PropertyFlo"
    "at\"e\n\024ObjectPropertyString\022\037\n\tplayer_id\030"
    "\001 \002(\0132\014.NFMsg.Ident\022,\n\rproperty_list\030\002 \003"
    "(\0132\025.NFMsg.PropertyString\"e\n\024ObjectPrope"
    "rtyObject\022\037\n\tplayer_id\030\001 \002(\0132\014.NFMsg.Ide"
    "nt\022,\n\rproperty_list\030\002 \003(\0132\025.NFMsg.Proper"
    "tyObject\"g\n\025ObjectPropertyVector2\022\037\n\tpla"
    "yer_id\030\001 \002(\0132\014.NFMsg.Ident\022-\n\rproperty_l"
    "ist\030\002 \003(\0132\026.NFMsg.PropertyVector2\"g\n\025Obj"
    "ectPropertyVector3\022\037\n\tplayer_id\030\001 \002(\0132\014."
    "NFMsg.Ident\022-\n\rproperty_list\030\002 \003(\0132\026.NFM"
    "sg.PropertyVector3\"p\n\017ObjectRecordInt\022\037\n"
    "\tplayer_id\030\001 \002(\0132\014.NFMsg.Ident\022\023\n\013record"
    "_name\030\002 \002(\014\022\'\n\rproperty_list\030\003 \003(\0132\020.NFM"
    "sg.RecordInt\"t\n\021ObjectRecordFloat\022\037\n\tpla"
    "yer_id\030\001 \002(\0132\014.NFMsg.Ident\022\023\n\013record_nam"
    "e\030\002 \002(\014\022)\n\rproperty_list\030\003 \003(\0132\022.NFMsg.R"
    "ecordFloat\"v\n\022ObjectRecordString\022\037\n\tplay"
    "er_id\030\001 \002(\0132\014.NFMsg.Ident\022\023\n\013record_name"
    "\030\002 \002(\014\022*\n\rproperty_list\030\003 \003(\0132\023.NFMsg.Re"
    "cordString\"v\n\022ObjectRecordObject\022\037\n\tplay"
    "er_id\030\001 \002(\0132\014.NFMsg.Ident\022\023\n\013record_name"
    "\030\002 \002(\014\022*\n\rproperty_list\030\003 \003(\0132\023.NFMsg.Re"
    "cordObject\"x\n\023ObjectRecordVector2\022\037\n\tpla"
    "yer_id\030\001 \002(\0132\014.NFMsg.Ident\022\023\n\013record_nam"
    "e\030\002 \002(\014\022+\n\rproperty_list\030\003 \003(\0132\024.NFMsg.R"
    "ecordVector2\"x\n\023ObjectRecordVector3\022\037\n\tp"
    "layer_id\030\001 \002(\0132\014.NFMsg.Ident\022\023\n\013record_n"
    "ame\030\002 \002(\014\022+\n\rproperty_list\030\003 \003(\0132\024.NFMsg"
    ".RecordVector3\"\223\001\n\020ObjectRecordSwap\022\037\n\tp"
    "layer_id\030\001 \002(\0132\014.NFMsg.Ident\022\032\n\022origin_r"
    "ecord_name\030\002 \002(\014\022\032\n\022target_record_name\030\003"
    " \001(\014\022\022\n\nrow_origin\030\004 \002(\005\022\022\n\nrow_target\030\005"
    " \002(\005\"w\n\022ObjectRecordAddRow\022\037\n\tplayer_id\030"
    "\001 \002(\0132\014.NFMsg.Ident\022\023\n\013record_name\030\002 \002(\014"
    "\022+\n\010row_data\030\003 \003(\0132\031.NFMsg.RecordAddRowS"
    "truct\"^\n\022ObjectRecordRemove\022\037\n\tplayer_id"
    "\030\001 \002(\0132\014.NFMsg.Ident\022\023\n\013record_name\030\002 \002("
    "\014\022\022\n\nremove_row\030\003 \003(\005\"\357\002\n\022ObjectProperty"
    "List\022\037\n\tplayer_id\030\001 \002(\0132\014.NFMsg.Ident\022-\n"
    "\021property_int_list\030\002 \003(\0132\022.NFMsg.Propert"
    "yInt\0221\n\023property_float_list\030\003 \003(\0132\024.NFMs"
    "g.PropertyFloat\0223\n\024property_string_list\030"
    "\004 \003(\0132\025.NFMsg.PropertyString\0223\n\024property"
    "_object_list\030\005 \003(\0132\025.NFMsg.PropertyObjec"
    "t\0225\n\025property_vector2_list\030\006 \003(\0132\026.NFMsg"
    ".PropertyVector2\0225\n\025property_vector3_lis"
    "t\030\007 \003(\0132\026.NFMsg.PropertyVector3\"S\n\027Multi"
    "ObjectPropertyList\0228\n\025multi_player_prope"
    "rty\030\001 \003(\0132\031.NFMsg.ObjectPropertyList\"a\n\020"
    "ObjectRecordList\022\037\n\tplayer_id\030\001 \002(\0132\014.NF"
    "Msg.Ident\022,\n\013record_list\030\002 \003(\0132\027.NFMsg.O"
    "bjectRecordBase\"M\n\025MultiObjectRecordList"
    "\0224\n\023multi_player_record\030\001 \003(\0132\027.NFMsg.Ob"
    "jectRecordList\"\210\001\n\007MsgBase\022\037\n\tplayer_id\030"
    "\001 \002(\0132\014.NFMsg.Ident\022\020\n\010msg_data\030\002 \002(\014\022(\n"
    "\022player_Client_list\030\003 \003(\0132\014.NFMsg.Ident\022"
    " \n\nhash_ident\030\004 \001(\0132\014.NFMsg.Ident\"\213\003\n\nRe"
    "qCommand\022 \n\ncontrol_id\030\001 \002(\0132\014.NFMsg.Ide"
    "nt\0226\n\ncommand_id\030\002 \002(\0162\".NFMsg.ReqComman"
    "d.EGameCommandType\022\031\n\021command_str_value\030"
    "\003 \001(\014\022\031\n\021command_value_int\030\004 \001(\003\022\033\n\023comm"
    "and_value_float\030\005 \001(\001\022\031\n\021command_value_s"
    "tr\030\006 \001(\014\022*\n\024command_value_object\030\007 \001(\0132\014"
    ".NFMsg.Ident\022\013\n\003row\030\010 \001(\005\022\013\n\003col\030\t \001(\005\"o"
    "\n\020EGameCommandType\022\027\n\023EGCT_MODIY_PROPERT"
    "Y\020\000\022\023\n\017EGCT_MODIY_ITEM\020\001\022\026\n\022EGCT_CREATE_"
    "OBJECT\020\002\022\025\n\021EGCT_ADD_ROLE_EXP\020\003", 4191);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NFMsgBase.proto", &protobuf_RegisterTypes);
  Ident::default_instance_ = new Ident();
  Vector2::default_instance_ = new Vector2();
  Vector3::default_instance_ = new Vector3();
  PropertyInt::default_instance_ = new PropertyInt();
  PropertyFloat::default_instance_ = new PropertyFloat();
  PropertyString::default_instance_ = new PropertyString();
  PropertyObject::default_instance_ = new PropertyObject();
  PropertyVector2::default_instance_ = new PropertyVector2();
  PropertyVector3::default_instance_ = new PropertyVector3();
  RecordInt::default_instance_ = new RecordInt();
  RecordFloat::default_instance_ = new RecordFloat();
  RecordString::default_instance_ = new RecordString();
  RecordObject::default_instance_ = new RecordObject();
  RecordVector2::default_instance_ = new RecordVector2();
  RecordVector3::default_instance_ = new RecordVector3();
  RecordAddRowStruct::default_instance_ = new RecordAddRowStruct();
  ObjectRecordBase::default_instance_ = new ObjectRecordBase();
  ObjectPropertyInt::default_instance_ = new ObjectPropertyInt();
  ObjectPropertyFloat::default_instance_ = new ObjectPropertyFloat();
  ObjectPropertyString::default_instance_ = new ObjectPropertyString();
  ObjectPropertyObject::default_instance_ = new ObjectPropertyObject();
  ObjectPropertyVector2::default_instance_ = new ObjectPropertyVector2();
  ObjectPropertyVector3::default_instance_ = new ObjectPropertyVector3();
  ObjectRecordInt::default_instance_ = new ObjectRecordInt();
  ObjectRecordFloat::default_instance_ = new ObjectRecordFloat();
  ObjectRecordString::default_instance_ = new ObjectRecordString();
  ObjectRecordObject::default_instance_ = new ObjectRecordObject();
  ObjectRecordVector2::default_instance_ = new ObjectRecordVector2();
  ObjectRecordVector3::default_instance_ = new ObjectRecordVector3();
  ObjectRecordSwap::default_instance_ = new ObjectRecordSwap();
  ObjectRecordAddRow::default_instance_ = new ObjectRecordAddRow();
  ObjectRecordRemove::default_instance_ = new ObjectRecordRemove();
  ObjectPropertyList::default_instance_ = new ObjectPropertyList();
  MultiObjectPropertyList::default_instance_ = new MultiObjectPropertyList();
  ObjectRecordList::default_instance_ = new ObjectRecordList();
  MultiObjectRecordList::default_instance_ = new MultiObjectRecordList();
  MsgBase::default_instance_ = new MsgBase();
  ReqCommand::default_instance_ = new ReqCommand();
  Ident::default_instance_->InitAsDefaultInstance();
  Vector2::default_instance_->InitAsDefaultInstance();
  Vector3::default_instance_->InitAsDefaultInstance();
  PropertyInt::default_instance_->InitAsDefaultInstance();
  PropertyFloat::default_instance_->InitAsDefaultInstance();
  PropertyString::default_instance_->InitAsDefaultInstance();
  PropertyObject::default_instance_->InitAsDefaultInstance();
  PropertyVector2::default_instance_->InitAsDefaultInstance();
  PropertyVector3::default_instance_->InitAsDefaultInstance();
  RecordInt::default_instance_->InitAsDefaultInstance();
  RecordFloat::default_instance_->InitAsDefaultInstance();
  RecordString::default_instance_->InitAsDefaultInstance();
  RecordObject::default_instance_->InitAsDefaultInstance();
  RecordVector2::default_instance_->InitAsDefaultInstance();
  RecordVector3::default_instance_->InitAsDefaultInstance();
  RecordAddRowStruct::default_instance_->InitAsDefaultInstance();
  ObjectRecordBase::default_instance_->InitAsDefaultInstance();
  ObjectPropertyInt::default_instance_->InitAsDefaultInstance();
  ObjectPropertyFloat::default_instance_->InitAsDefaultInstance();
  ObjectPropertyString::default_instance_->InitAsDefaultInstance();
  ObjectPropertyObject::default_instance_->InitAsDefaultInstance();
  ObjectPropertyVector2::default_instance_->InitAsDefaultInstance();
  ObjectPropertyVector3::default_instance_->InitAsDefaultInstance();
  ObjectRecordInt::default_instance_->InitAsDefaultInstance();
  ObjectRecordFloat::default_instance_->InitAsDefaultInstance();
  ObjectRecordString::default_instance_->InitAsDefaultInstance();
  ObjectRecordObject::default_instance_->InitAsDefaultInstance();
  ObjectRecordVector2::default_instance_->InitAsDefaultInstance();
  ObjectRecordVector3::default_instance_->InitAsDefaultInstance();
  ObjectRecordSwap::default_instance_->InitAsDefaultInstance();
  ObjectRecordAddRow::default_instance_->InitAsDefaultInstance();
  ObjectRecordRemove::default_instance_->InitAsDefaultInstance();
  ObjectPropertyList::default_instance_->InitAsDefaultInstance();
  MultiObjectPropertyList::default_instance_->InitAsDefaultInstance();
  ObjectRecordList::default_instance_->InitAsDefaultInstance();
  MultiObjectRecordList::default_instance_->InitAsDefaultInstance();
  MsgBase::default_instance_->InitAsDefaultInstance();
  ReqCommand::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NFMsgBase_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NFMsgBase_2eproto {
  StaticDescriptorInitializer_NFMsgBase_2eproto() {
    protobuf_AddDesc_NFMsgBase_2eproto();
  }
} static_descriptor_initializer_NFMsgBase_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Ident::kSvridFieldNumber;
const int Ident::kIndexFieldNumber;
#endif  // !_MSC_VER

Ident::Ident()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ident::InitAsDefaultInstance() {
}

Ident::Ident(const Ident& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ident::SharedCtor() {
  _cached_size_ = 0;
  svrid_ = GOOGLE_LONGLONG(0);
  index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ident::~Ident() {
  SharedDtor();
}

void Ident::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ident::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ident::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ident_descriptor_;
}

const Ident& Ident::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

Ident* Ident::default_instance_ = NULL;

Ident* Ident::New() const {
  return new Ident;
}

void Ident::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svrid_ = GOOGLE_LONGLONG(0);
    index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ident::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 svrid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &svrid_)));
          set_has_svrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int64 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ident::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 svrid = 1;
  if (has_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->svrid(), output);
  }

  // required int64 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ident::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 svrid = 1;
  if (has_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->svrid(), target);
  }

  // required int64 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ident::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 svrid = 1;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->svrid());
    }

    // required int64 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ident::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ident* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ident*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ident::MergeFrom(const Ident& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svrid()) {
      set_svrid(from.svrid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ident::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ident::CopyFrom(const Ident& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ident::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Ident::Swap(Ident* other) {
  if (other != this) {
    std::swap(svrid_, other->svrid_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ident::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ident_descriptor_;
  metadata.reflection = Ident_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector2::kXFieldNumber;
const int Vector2::kYFieldNumber;
#endif  // !_MSC_VER

Vector2::Vector2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vector2::InitAsDefaultInstance() {
}

Vector2::Vector2(const Vector2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vector2::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector2::~Vector2() {
  SharedDtor();
}

void Vector2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector2_descriptor_;
}

const Vector2& Vector2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

Vector2* Vector2::default_instance_ = NULL;

Vector2* Vector2::New() const {
  return new Vector2;
}

void Vector2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vector2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vector2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector2::MergeFrom(const Vector2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2::CopyFrom(const Vector2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Vector2::Swap(Vector2* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector2_descriptor_;
  metadata.reflection = Vector2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector3::kXFieldNumber;
const int Vector3::kYFieldNumber;
const int Vector3::kZFieldNumber;
#endif  // !_MSC_VER

Vector3::Vector3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vector3::InitAsDefaultInstance() {
}

Vector3::Vector3(const Vector3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vector3::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector3::~Vector3() {
  SharedDtor();
}

void Vector3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3_descriptor_;
}

const Vector3& Vector3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

Vector3* Vector3::default_instance_ = NULL;

Vector3* Vector3::New() const {
  return new Vector3;
}

void Vector3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vector3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vector3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Vector3::Swap(Vector3* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3_descriptor_;
  metadata.reflection = Vector3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropertyInt::kPropertyNameFieldNumber;
const int PropertyInt::kDataFieldNumber;
#endif  // !_MSC_VER

PropertyInt::PropertyInt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PropertyInt::InitAsDefaultInstance() {
}

PropertyInt::PropertyInt(const PropertyInt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PropertyInt::SharedCtor() {
  _cached_size_ = 0;
  property_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyInt::~PropertyInt() {
  SharedDtor();
}

void PropertyInt::SharedDtor() {
  if (property_name_ != &::google::protobuf::internal::kEmptyString) {
    delete property_name_;
  }
  if (this != default_instance_) {
  }
}

void PropertyInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyInt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyInt_descriptor_;
}

const PropertyInt& PropertyInt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

PropertyInt* PropertyInt::default_instance_ = NULL;

PropertyInt* PropertyInt::New() const {
  return new PropertyInt;
}

void PropertyInt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_property_name()) {
      if (property_name_ != &::google::protobuf::internal::kEmptyString) {
        property_name_->clear();
      }
    }
    data_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropertyInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes property_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_property_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_data;
        break;
      }

      // required int64 data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropertyInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes property_name = 1;
  if (has_property_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->property_name(), output);
  }

  // required int64 data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PropertyInt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes property_name = 1;
  if (has_property_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->property_name(), target);
  }

  // required int64 data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PropertyInt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes property_name = 1;
    if (has_property_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->property_name());
    }

    // required int64 data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyInt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropertyInt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropertyInt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropertyInt::MergeFrom(const PropertyInt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_property_name()) {
      set_property_name(from.property_name());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropertyInt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyInt::CopyFrom(const PropertyInt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyInt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PropertyInt::Swap(PropertyInt* other) {
  if (other != this) {
    std::swap(property_name_, other->property_name_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropertyInt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyInt_descriptor_;
  metadata.reflection = PropertyInt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropertyFloat::kPropertyNameFieldNumber;
const int PropertyFloat::kDataFieldNumber;
#endif  // !_MSC_VER

PropertyFloat::PropertyFloat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PropertyFloat::InitAsDefaultInstance() {
}

PropertyFloat::PropertyFloat(const PropertyFloat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PropertyFloat::SharedCtor() {
  _cached_size_ = 0;
  property_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyFloat::~PropertyFloat() {
  SharedDtor();
}

void PropertyFloat::SharedDtor() {
  if (property_name_ != &::google::protobuf::internal::kEmptyString) {
    delete property_name_;
  }
  if (this != default_instance_) {
  }
}

void PropertyFloat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyFloat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyFloat_descriptor_;
}

const PropertyFloat& PropertyFloat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

PropertyFloat* PropertyFloat::default_instance_ = NULL;

PropertyFloat* PropertyFloat::New() const {
  return new PropertyFloat;
}

void PropertyFloat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_property_name()) {
      if (property_name_ != &::google::protobuf::internal::kEmptyString) {
        property_name_->clear();
      }
    }
    data_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropertyFloat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes property_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_property_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_data;
        break;
      }

      // required float data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropertyFloat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes property_name = 1;
  if (has_property_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->property_name(), output);
  }

  // required float data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PropertyFloat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes property_name = 1;
  if (has_property_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->property_name(), target);
  }

  // required float data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PropertyFloat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes property_name = 1;
    if (has_property_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->property_name());
    }

    // required float data = 2;
    if (has_data()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyFloat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropertyFloat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropertyFloat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropertyFloat::MergeFrom(const PropertyFloat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_property_name()) {
      set_property_name(from.property_name());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropertyFloat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyFloat::CopyFrom(const PropertyFloat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyFloat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PropertyFloat::Swap(PropertyFloat* other) {
  if (other != this) {
    std::swap(property_name_, other->property_name_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropertyFloat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyFloat_descriptor_;
  metadata.reflection = PropertyFloat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropertyString::kPropertyNameFieldNumber;
const int PropertyString::kDataFieldNumber;
#endif  // !_MSC_VER

PropertyString::PropertyString()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PropertyString::InitAsDefaultInstance() {
}

PropertyString::PropertyString(const PropertyString& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PropertyString::SharedCtor() {
  _cached_size_ = 0;
  property_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyString::~PropertyString() {
  SharedDtor();
}

void PropertyString::SharedDtor() {
  if (property_name_ != &::google::protobuf::internal::kEmptyString) {
    delete property_name_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void PropertyString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyString_descriptor_;
}

const PropertyString& PropertyString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

PropertyString* PropertyString::default_instance_ = NULL;

PropertyString* PropertyString::New() const {
  return new PropertyString;
}

void PropertyString::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_property_name()) {
      if (property_name_ != &::google::protobuf::internal::kEmptyString) {
        property_name_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropertyString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes property_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_property_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropertyString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes property_name = 1;
  if (has_property_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->property_name(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PropertyString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes property_name = 1;
  if (has_property_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->property_name(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PropertyString::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes property_name = 1;
    if (has_property_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->property_name());
    }

    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropertyString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropertyString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropertyString::MergeFrom(const PropertyString& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_property_name()) {
      set_property_name(from.property_name());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropertyString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyString::CopyFrom(const PropertyString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyString::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PropertyString::Swap(PropertyString* other) {
  if (other != this) {
    std::swap(property_name_, other->property_name_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropertyString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyString_descriptor_;
  metadata.reflection = PropertyString_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropertyObject::kPropertyNameFieldNumber;
const int PropertyObject::kDataFieldNumber;
#endif  // !_MSC_VER

PropertyObject::PropertyObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PropertyObject::InitAsDefaultInstance() {
  data_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

PropertyObject::PropertyObject(const PropertyObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PropertyObject::SharedCtor() {
  _cached_size_ = 0;
  property_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyObject::~PropertyObject() {
  SharedDtor();
}

void PropertyObject::SharedDtor() {
  if (property_name_ != &::google::protobuf::internal::kEmptyString) {
    delete property_name_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void PropertyObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyObject_descriptor_;
}

const PropertyObject& PropertyObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

PropertyObject* PropertyObject::default_instance_ = NULL;

PropertyObject* PropertyObject::New() const {
  return new PropertyObject;
}

void PropertyObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_property_name()) {
      if (property_name_ != &::google::protobuf::internal::kEmptyString) {
        property_name_->clear();
      }
    }
    if (has_data()) {
      if (data_ != NULL) data_->::NFMsg::Ident::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropertyObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes property_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_property_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required .NFMsg.Ident data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropertyObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes property_name = 1;
  if (has_property_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->property_name(), output);
  }

  // required .NFMsg.Ident data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PropertyObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes property_name = 1;
  if (has_property_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->property_name(), target);
  }

  // required .NFMsg.Ident data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PropertyObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes property_name = 1;
    if (has_property_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->property_name());
    }

    // required .NFMsg.Ident data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropertyObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropertyObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropertyObject::MergeFrom(const PropertyObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_property_name()) {
      set_property_name(from.property_name());
    }
    if (from.has_data()) {
      mutable_data()->::NFMsg::Ident::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropertyObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyObject::CopyFrom(const PropertyObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void PropertyObject::Swap(PropertyObject* other) {
  if (other != this) {
    std::swap(property_name_, other->property_name_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropertyObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyObject_descriptor_;
  metadata.reflection = PropertyObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropertyVector2::kPropertyNameFieldNumber;
const int PropertyVector2::kDataFieldNumber;
#endif  // !_MSC_VER

PropertyVector2::PropertyVector2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PropertyVector2::InitAsDefaultInstance() {
  data_ = const_cast< ::NFMsg::Vector2*>(&::NFMsg::Vector2::default_instance());
}

PropertyVector2::PropertyVector2(const PropertyVector2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PropertyVector2::SharedCtor() {
  _cached_size_ = 0;
  property_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyVector2::~PropertyVector2() {
  SharedDtor();
}

void PropertyVector2::SharedDtor() {
  if (property_name_ != &::google::protobuf::internal::kEmptyString) {
    delete property_name_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void PropertyVector2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyVector2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyVector2_descriptor_;
}

const PropertyVector2& PropertyVector2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

PropertyVector2* PropertyVector2::default_instance_ = NULL;

PropertyVector2* PropertyVector2::New() const {
  return new PropertyVector2;
}

void PropertyVector2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_property_name()) {
      if (property_name_ != &::google::protobuf::internal::kEmptyString) {
        property_name_->clear();
      }
    }
    if (has_data()) {
      if (data_ != NULL) data_->::NFMsg::Vector2::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropertyVector2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes property_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_property_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required .NFMsg.Vector2 data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropertyVector2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes property_name = 1;
  if (has_property_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->property_name(), output);
  }

  // required .NFMsg.Vector2 data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PropertyVector2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes property_name = 1;
  if (has_property_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->property_name(), target);
  }

  // required .NFMsg.Vector2 data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PropertyVector2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes property_name = 1;
    if (has_property_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->property_name());
    }

    // required .NFMsg.Vector2 data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyVector2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropertyVector2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropertyVector2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropertyVector2::MergeFrom(const PropertyVector2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_property_name()) {
      set_property_name(from.property_name());
    }
    if (from.has_data()) {
      mutable_data()->::NFMsg::Vector2::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropertyVector2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyVector2::CopyFrom(const PropertyVector2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyVector2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void PropertyVector2::Swap(PropertyVector2* other) {
  if (other != this) {
    std::swap(property_name_, other->property_name_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropertyVector2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyVector2_descriptor_;
  metadata.reflection = PropertyVector2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropertyVector3::kPropertyNameFieldNumber;
const int PropertyVector3::kDataFieldNumber;
#endif  // !_MSC_VER

PropertyVector3::PropertyVector3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PropertyVector3::InitAsDefaultInstance() {
  data_ = const_cast< ::NFMsg::Vector3*>(&::NFMsg::Vector3::default_instance());
}

PropertyVector3::PropertyVector3(const PropertyVector3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PropertyVector3::SharedCtor() {
  _cached_size_ = 0;
  property_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyVector3::~PropertyVector3() {
  SharedDtor();
}

void PropertyVector3::SharedDtor() {
  if (property_name_ != &::google::protobuf::internal::kEmptyString) {
    delete property_name_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void PropertyVector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyVector3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyVector3_descriptor_;
}

const PropertyVector3& PropertyVector3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

PropertyVector3* PropertyVector3::default_instance_ = NULL;

PropertyVector3* PropertyVector3::New() const {
  return new PropertyVector3;
}

void PropertyVector3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_property_name()) {
      if (property_name_ != &::google::protobuf::internal::kEmptyString) {
        property_name_->clear();
      }
    }
    if (has_data()) {
      if (data_ != NULL) data_->::NFMsg::Vector3::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropertyVector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes property_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_property_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required .NFMsg.Vector3 data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropertyVector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes property_name = 1;
  if (has_property_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->property_name(), output);
  }

  // required .NFMsg.Vector3 data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PropertyVector3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes property_name = 1;
  if (has_property_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->property_name(), target);
  }

  // required .NFMsg.Vector3 data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PropertyVector3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes property_name = 1;
    if (has_property_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->property_name());
    }

    // required .NFMsg.Vector3 data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyVector3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropertyVector3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropertyVector3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropertyVector3::MergeFrom(const PropertyVector3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_property_name()) {
      set_property_name(from.property_name());
    }
    if (from.has_data()) {
      mutable_data()->::NFMsg::Vector3::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropertyVector3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyVector3::CopyFrom(const PropertyVector3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyVector3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void PropertyVector3::Swap(PropertyVector3* other) {
  if (other != this) {
    std::swap(property_name_, other->property_name_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropertyVector3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyVector3_descriptor_;
  metadata.reflection = PropertyVector3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordInt::kRowFieldNumber;
const int RecordInt::kColFieldNumber;
const int RecordInt::kDataFieldNumber;
#endif  // !_MSC_VER

RecordInt::RecordInt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordInt::InitAsDefaultInstance() {
}

RecordInt::RecordInt(const RecordInt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordInt::SharedCtor() {
  _cached_size_ = 0;
  row_ = 0;
  col_ = 0;
  data_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordInt::~RecordInt() {
  SharedDtor();
}

void RecordInt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecordInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordInt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordInt_descriptor_;
}

const RecordInt& RecordInt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

RecordInt* RecordInt::default_instance_ = NULL;

RecordInt* RecordInt::New() const {
  return new RecordInt;
}

void RecordInt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    row_ = 0;
    col_ = 0;
    data_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 row = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_col;
        break;
      }

      // required int32 col = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
          set_has_col();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_data;
        break;
      }

      // required int64 data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 row = 1;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row(), output);
  }

  // required int32 col = 2;
  if (has_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->col(), output);
  }

  // required int64 data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordInt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 row = 1;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row(), target);
  }

  // required int32 col = 2;
  if (has_col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->col(), target);
  }

  // required int64 data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordInt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 row = 1;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row());
    }

    // required int32 col = 2;
    if (has_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->col());
    }

    // required int64 data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordInt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordInt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordInt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordInt::MergeFrom(const RecordInt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_col()) {
      set_col(from.col());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordInt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordInt::CopyFrom(const RecordInt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordInt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RecordInt::Swap(RecordInt* other) {
  if (other != this) {
    std::swap(row_, other->row_);
    std::swap(col_, other->col_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordInt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordInt_descriptor_;
  metadata.reflection = RecordInt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordFloat::kRowFieldNumber;
const int RecordFloat::kColFieldNumber;
const int RecordFloat::kDataFieldNumber;
#endif  // !_MSC_VER

RecordFloat::RecordFloat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordFloat::InitAsDefaultInstance() {
}

RecordFloat::RecordFloat(const RecordFloat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordFloat::SharedCtor() {
  _cached_size_ = 0;
  row_ = 0;
  col_ = 0;
  data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordFloat::~RecordFloat() {
  SharedDtor();
}

void RecordFloat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecordFloat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordFloat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordFloat_descriptor_;
}

const RecordFloat& RecordFloat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

RecordFloat* RecordFloat::default_instance_ = NULL;

RecordFloat* RecordFloat::New() const {
  return new RecordFloat;
}

void RecordFloat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    row_ = 0;
    col_ = 0;
    data_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordFloat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 row = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_col;
        break;
      }

      // required int32 col = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
          set_has_col();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_data;
        break;
      }

      // required float data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordFloat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 row = 1;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row(), output);
  }

  // required int32 col = 2;
  if (has_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->col(), output);
  }

  // required float data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordFloat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 row = 1;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row(), target);
  }

  // required int32 col = 2;
  if (has_col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->col(), target);
  }

  // required float data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordFloat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 row = 1;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row());
    }

    // required int32 col = 2;
    if (has_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->col());
    }

    // required float data = 3;
    if (has_data()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordFloat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordFloat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordFloat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordFloat::MergeFrom(const RecordFloat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_col()) {
      set_col(from.col());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordFloat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordFloat::CopyFrom(const RecordFloat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordFloat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RecordFloat::Swap(RecordFloat* other) {
  if (other != this) {
    std::swap(row_, other->row_);
    std::swap(col_, other->col_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordFloat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordFloat_descriptor_;
  metadata.reflection = RecordFloat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordString::kRowFieldNumber;
const int RecordString::kColFieldNumber;
const int RecordString::kDataFieldNumber;
#endif  // !_MSC_VER

RecordString::RecordString()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordString::InitAsDefaultInstance() {
}

RecordString::RecordString(const RecordString& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordString::SharedCtor() {
  _cached_size_ = 0;
  row_ = 0;
  col_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordString::~RecordString() {
  SharedDtor();
}

void RecordString::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void RecordString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordString_descriptor_;
}

const RecordString& RecordString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

RecordString* RecordString::default_instance_ = NULL;

RecordString* RecordString::New() const {
  return new RecordString;
}

void RecordString::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    row_ = 0;
    col_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 row = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_col;
        break;
      }

      // required int32 col = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
          set_has_col();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 row = 1;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row(), output);
  }

  // required int32 col = 2;
  if (has_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->col(), output);
  }

  // required bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 row = 1;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row(), target);
  }

  // required int32 col = 2;
  if (has_col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->col(), target);
  }

  // required bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordString::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 row = 1;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row());
    }

    // required int32 col = 2;
    if (has_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->col());
    }

    // required bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordString::MergeFrom(const RecordString& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_col()) {
      set_col(from.col());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordString::CopyFrom(const RecordString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordString::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RecordString::Swap(RecordString* other) {
  if (other != this) {
    std::swap(row_, other->row_);
    std::swap(col_, other->col_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordString_descriptor_;
  metadata.reflection = RecordString_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordObject::kRowFieldNumber;
const int RecordObject::kColFieldNumber;
const int RecordObject::kDataFieldNumber;
#endif  // !_MSC_VER

RecordObject::RecordObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordObject::InitAsDefaultInstance() {
  data_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

RecordObject::RecordObject(const RecordObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordObject::SharedCtor() {
  _cached_size_ = 0;
  row_ = 0;
  col_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordObject::~RecordObject() {
  SharedDtor();
}

void RecordObject::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void RecordObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordObject_descriptor_;
}

const RecordObject& RecordObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

RecordObject* RecordObject::default_instance_ = NULL;

RecordObject* RecordObject::New() const {
  return new RecordObject;
}

void RecordObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    row_ = 0;
    col_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::NFMsg::Ident::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 row = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_col;
        break;
      }

      // required int32 col = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
          set_has_col();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required .NFMsg.Ident data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 row = 1;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row(), output);
  }

  // required int32 col = 2;
  if (has_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->col(), output);
  }

  // required .NFMsg.Ident data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 row = 1;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row(), target);
  }

  // required int32 col = 2;
  if (has_col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->col(), target);
  }

  // required .NFMsg.Ident data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 row = 1;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row());
    }

    // required int32 col = 2;
    if (has_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->col());
    }

    // required .NFMsg.Ident data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordObject::MergeFrom(const RecordObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_col()) {
      set_col(from.col());
    }
    if (from.has_data()) {
      mutable_data()->::NFMsg::Ident::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordObject::CopyFrom(const RecordObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void RecordObject::Swap(RecordObject* other) {
  if (other != this) {
    std::swap(row_, other->row_);
    std::swap(col_, other->col_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordObject_descriptor_;
  metadata.reflection = RecordObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordVector2::kRowFieldNumber;
const int RecordVector2::kColFieldNumber;
const int RecordVector2::kDataFieldNumber;
#endif  // !_MSC_VER

RecordVector2::RecordVector2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordVector2::InitAsDefaultInstance() {
  data_ = const_cast< ::NFMsg::Vector2*>(&::NFMsg::Vector2::default_instance());
}

RecordVector2::RecordVector2(const RecordVector2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordVector2::SharedCtor() {
  _cached_size_ = 0;
  row_ = 0;
  col_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordVector2::~RecordVector2() {
  SharedDtor();
}

void RecordVector2::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void RecordVector2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordVector2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordVector2_descriptor_;
}

const RecordVector2& RecordVector2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

RecordVector2* RecordVector2::default_instance_ = NULL;

RecordVector2* RecordVector2::New() const {
  return new RecordVector2;
}

void RecordVector2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    row_ = 0;
    col_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::NFMsg::Vector2::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordVector2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 row = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_col;
        break;
      }

      // required int32 col = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
          set_has_col();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required .NFMsg.Vector2 data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordVector2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 row = 1;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row(), output);
  }

  // required int32 col = 2;
  if (has_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->col(), output);
  }

  // required .NFMsg.Vector2 data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordVector2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 row = 1;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row(), target);
  }

  // required int32 col = 2;
  if (has_col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->col(), target);
  }

  // required .NFMsg.Vector2 data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordVector2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 row = 1;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row());
    }

    // required int32 col = 2;
    if (has_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->col());
    }

    // required .NFMsg.Vector2 data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordVector2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordVector2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordVector2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordVector2::MergeFrom(const RecordVector2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_col()) {
      set_col(from.col());
    }
    if (from.has_data()) {
      mutable_data()->::NFMsg::Vector2::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordVector2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordVector2::CopyFrom(const RecordVector2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordVector2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void RecordVector2::Swap(RecordVector2* other) {
  if (other != this) {
    std::swap(row_, other->row_);
    std::swap(col_, other->col_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordVector2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordVector2_descriptor_;
  metadata.reflection = RecordVector2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordVector3::kRowFieldNumber;
const int RecordVector3::kColFieldNumber;
const int RecordVector3::kDataFieldNumber;
#endif  // !_MSC_VER

RecordVector3::RecordVector3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordVector3::InitAsDefaultInstance() {
  data_ = const_cast< ::NFMsg::Vector3*>(&::NFMsg::Vector3::default_instance());
}

RecordVector3::RecordVector3(const RecordVector3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordVector3::SharedCtor() {
  _cached_size_ = 0;
  row_ = 0;
  col_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordVector3::~RecordVector3() {
  SharedDtor();
}

void RecordVector3::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void RecordVector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordVector3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordVector3_descriptor_;
}

const RecordVector3& RecordVector3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

RecordVector3* RecordVector3::default_instance_ = NULL;

RecordVector3* RecordVector3::New() const {
  return new RecordVector3;
}

void RecordVector3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    row_ = 0;
    col_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::NFMsg::Vector3::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordVector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 row = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_col;
        break;
      }

      // required int32 col = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
          set_has_col();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required .NFMsg.Vector3 data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordVector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 row = 1;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row(), output);
  }

  // required int32 col = 2;
  if (has_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->col(), output);
  }

  // required .NFMsg.Vector3 data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordVector3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 row = 1;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row(), target);
  }

  // required int32 col = 2;
  if (has_col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->col(), target);
  }

  // required .NFMsg.Vector3 data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordVector3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 row = 1;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row());
    }

    // required int32 col = 2;
    if (has_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->col());
    }

    // required .NFMsg.Vector3 data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordVector3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordVector3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordVector3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordVector3::MergeFrom(const RecordVector3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_col()) {
      set_col(from.col());
    }
    if (from.has_data()) {
      mutable_data()->::NFMsg::Vector3::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordVector3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordVector3::CopyFrom(const RecordVector3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordVector3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void RecordVector3::Swap(RecordVector3* other) {
  if (other != this) {
    std::swap(row_, other->row_);
    std::swap(col_, other->col_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordVector3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordVector3_descriptor_;
  metadata.reflection = RecordVector3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordAddRowStruct::kRowFieldNumber;
const int RecordAddRowStruct::kRecordIntListFieldNumber;
const int RecordAddRowStruct::kRecordFloatListFieldNumber;
const int RecordAddRowStruct::kRecordStringListFieldNumber;
const int RecordAddRowStruct::kRecordObjectListFieldNumber;
const int RecordAddRowStruct::kRecordVector2ListFieldNumber;
const int RecordAddRowStruct::kRecordVector3ListFieldNumber;
#endif  // !_MSC_VER

RecordAddRowStruct::RecordAddRowStruct()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordAddRowStruct::InitAsDefaultInstance() {
}

RecordAddRowStruct::RecordAddRowStruct(const RecordAddRowStruct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordAddRowStruct::SharedCtor() {
  _cached_size_ = 0;
  row_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordAddRowStruct::~RecordAddRowStruct() {
  SharedDtor();
}

void RecordAddRowStruct::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecordAddRowStruct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordAddRowStruct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordAddRowStruct_descriptor_;
}

const RecordAddRowStruct& RecordAddRowStruct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

RecordAddRowStruct* RecordAddRowStruct::default_instance_ = NULL;

RecordAddRowStruct* RecordAddRowStruct::New() const {
  return new RecordAddRowStruct;
}

void RecordAddRowStruct::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    row_ = 0;
  }
  record_int_list_.Clear();
  record_float_list_.Clear();
  record_string_list_.Clear();
  record_object_list_.Clear();
  record_vector2_list_.Clear();
  record_vector3_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordAddRowStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 row = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_record_int_list;
        break;
      }

      // repeated .NFMsg.RecordInt record_int_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_int_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_int_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_record_int_list;
        if (input->ExpectTag(26)) goto parse_record_float_list;
        break;
      }

      // repeated .NFMsg.RecordFloat record_float_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_float_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_float_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_record_float_list;
        if (input->ExpectTag(34)) goto parse_record_string_list;
        break;
      }

      // repeated .NFMsg.RecordString record_string_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_string_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_string_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_record_string_list;
        if (input->ExpectTag(42)) goto parse_record_object_list;
        break;
      }

      // repeated .NFMsg.RecordObject record_object_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_object_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_object_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_record_object_list;
        if (input->ExpectTag(50)) goto parse_record_vector2_list;
        break;
      }

      // repeated .NFMsg.RecordVector2 record_vector2_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_vector2_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_vector2_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_record_vector2_list;
        if (input->ExpectTag(58)) goto parse_record_vector3_list;
        break;
      }

      // repeated .NFMsg.RecordVector3 record_vector3_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_vector3_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_vector3_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_record_vector3_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordAddRowStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 row = 1;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row(), output);
  }

  // repeated .NFMsg.RecordInt record_int_list = 2;
  for (int i = 0; i < this->record_int_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->record_int_list(i), output);
  }

  // repeated .NFMsg.RecordFloat record_float_list = 3;
  for (int i = 0; i < this->record_float_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->record_float_list(i), output);
  }

  // repeated .NFMsg.RecordString record_string_list = 4;
  for (int i = 0; i < this->record_string_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->record_string_list(i), output);
  }

  // repeated .NFMsg.RecordObject record_object_list = 5;
  for (int i = 0; i < this->record_object_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->record_object_list(i), output);
  }

  // repeated .NFMsg.RecordVector2 record_vector2_list = 6;
  for (int i = 0; i < this->record_vector2_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->record_vector2_list(i), output);
  }

  // repeated .NFMsg.RecordVector3 record_vector3_list = 7;
  for (int i = 0; i < this->record_vector3_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->record_vector3_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordAddRowStruct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 row = 1;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row(), target);
  }

  // repeated .NFMsg.RecordInt record_int_list = 2;
  for (int i = 0; i < this->record_int_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->record_int_list(i), target);
  }

  // repeated .NFMsg.RecordFloat record_float_list = 3;
  for (int i = 0; i < this->record_float_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->record_float_list(i), target);
  }

  // repeated .NFMsg.RecordString record_string_list = 4;
  for (int i = 0; i < this->record_string_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->record_string_list(i), target);
  }

  // repeated .NFMsg.RecordObject record_object_list = 5;
  for (int i = 0; i < this->record_object_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->record_object_list(i), target);
  }

  // repeated .NFMsg.RecordVector2 record_vector2_list = 6;
  for (int i = 0; i < this->record_vector2_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->record_vector2_list(i), target);
  }

  // repeated .NFMsg.RecordVector3 record_vector3_list = 7;
  for (int i = 0; i < this->record_vector3_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->record_vector3_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordAddRowStruct::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 row = 1;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row());
    }

  }
  // repeated .NFMsg.RecordInt record_int_list = 2;
  total_size += 1 * this->record_int_list_size();
  for (int i = 0; i < this->record_int_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record_int_list(i));
  }

  // repeated .NFMsg.RecordFloat record_float_list = 3;
  total_size += 1 * this->record_float_list_size();
  for (int i = 0; i < this->record_float_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record_float_list(i));
  }

  // repeated .NFMsg.RecordString record_string_list = 4;
  total_size += 1 * this->record_string_list_size();
  for (int i = 0; i < this->record_string_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record_string_list(i));
  }

  // repeated .NFMsg.RecordObject record_object_list = 5;
  total_size += 1 * this->record_object_list_size();
  for (int i = 0; i < this->record_object_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record_object_list(i));
  }

  // repeated .NFMsg.RecordVector2 record_vector2_list = 6;
  total_size += 1 * this->record_vector2_list_size();
  for (int i = 0; i < this->record_vector2_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record_vector2_list(i));
  }

  // repeated .NFMsg.RecordVector3 record_vector3_list = 7;
  total_size += 1 * this->record_vector3_list_size();
  for (int i = 0; i < this->record_vector3_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record_vector3_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordAddRowStruct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordAddRowStruct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordAddRowStruct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordAddRowStruct::MergeFrom(const RecordAddRowStruct& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_int_list_.MergeFrom(from.record_int_list_);
  record_float_list_.MergeFrom(from.record_float_list_);
  record_string_list_.MergeFrom(from.record_string_list_);
  record_object_list_.MergeFrom(from.record_object_list_);
  record_vector2_list_.MergeFrom(from.record_vector2_list_);
  record_vector3_list_.MergeFrom(from.record_vector3_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row()) {
      set_row(from.row());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordAddRowStruct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordAddRowStruct::CopyFrom(const RecordAddRowStruct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordAddRowStruct::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < record_int_list_size(); i++) {
    if (!this->record_int_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < record_float_list_size(); i++) {
    if (!this->record_float_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < record_string_list_size(); i++) {
    if (!this->record_string_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < record_object_list_size(); i++) {
    if (!this->record_object_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < record_vector2_list_size(); i++) {
    if (!this->record_vector2_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < record_vector3_list_size(); i++) {
    if (!this->record_vector3_list(i).IsInitialized()) return false;
  }
  return true;
}

void RecordAddRowStruct::Swap(RecordAddRowStruct* other) {
  if (other != this) {
    std::swap(row_, other->row_);
    record_int_list_.Swap(&other->record_int_list_);
    record_float_list_.Swap(&other->record_float_list_);
    record_string_list_.Swap(&other->record_string_list_);
    record_object_list_.Swap(&other->record_object_list_);
    record_vector2_list_.Swap(&other->record_vector2_list_);
    record_vector3_list_.Swap(&other->record_vector3_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordAddRowStruct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordAddRowStruct_descriptor_;
  metadata.reflection = RecordAddRowStruct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectRecordBase::kRecordNameFieldNumber;
const int ObjectRecordBase::kRowStructFieldNumber;
#endif  // !_MSC_VER

ObjectRecordBase::ObjectRecordBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectRecordBase::InitAsDefaultInstance() {
}

ObjectRecordBase::ObjectRecordBase(const ObjectRecordBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectRecordBase::SharedCtor() {
  _cached_size_ = 0;
  record_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectRecordBase::~ObjectRecordBase() {
  SharedDtor();
}

void ObjectRecordBase::SharedDtor() {
  if (record_name_ != &::google::protobuf::internal::kEmptyString) {
    delete record_name_;
  }
  if (this != default_instance_) {
  }
}

void ObjectRecordBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectRecordBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectRecordBase_descriptor_;
}

const ObjectRecordBase& ObjectRecordBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

ObjectRecordBase* ObjectRecordBase::default_instance_ = NULL;

ObjectRecordBase* ObjectRecordBase::New() const {
  return new ObjectRecordBase;
}

void ObjectRecordBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_record_name()) {
      if (record_name_ != &::google::protobuf::internal::kEmptyString) {
        record_name_->clear();
      }
    }
  }
  row_struct_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectRecordBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes record_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_record_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_row_struct;
        break;
      }

      // repeated .NFMsg.RecordAddRowStruct row_struct = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_row_struct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_row_struct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_row_struct;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectRecordBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes record_name = 1;
  if (has_record_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->record_name(), output);
  }

  // repeated .NFMsg.RecordAddRowStruct row_struct = 2;
  for (int i = 0; i < this->row_struct_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->row_struct(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectRecordBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes record_name = 1;
  if (has_record_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->record_name(), target);
  }

  // repeated .NFMsg.RecordAddRowStruct row_struct = 2;
  for (int i = 0; i < this->row_struct_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->row_struct(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectRecordBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes record_name = 1;
    if (has_record_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->record_name());
    }

  }
  // repeated .NFMsg.RecordAddRowStruct row_struct = 2;
  total_size += 1 * this->row_struct_size();
  for (int i = 0; i < this->row_struct_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->row_struct(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectRecordBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectRecordBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectRecordBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectRecordBase::MergeFrom(const ObjectRecordBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  row_struct_.MergeFrom(from.row_struct_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_record_name()) {
      set_record_name(from.record_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectRecordBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordBase::CopyFrom(const ObjectRecordBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < row_struct_size(); i++) {
    if (!this->row_struct(i).IsInitialized()) return false;
  }
  return true;
}

void ObjectRecordBase::Swap(ObjectRecordBase* other) {
  if (other != this) {
    std::swap(record_name_, other->record_name_);
    row_struct_.Swap(&other->row_struct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectRecordBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectRecordBase_descriptor_;
  metadata.reflection = ObjectRecordBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectPropertyInt::kPlayerIdFieldNumber;
const int ObjectPropertyInt::kPropertyListFieldNumber;
#endif  // !_MSC_VER

ObjectPropertyInt::ObjectPropertyInt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectPropertyInt::InitAsDefaultInstance() {
  player_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ObjectPropertyInt::ObjectPropertyInt(const ObjectPropertyInt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectPropertyInt::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectPropertyInt::~ObjectPropertyInt() {
  SharedDtor();
}

void ObjectPropertyInt::SharedDtor() {
  if (this != default_instance_) {
    delete player_id_;
  }
}

void ObjectPropertyInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectPropertyInt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectPropertyInt_descriptor_;
}

const ObjectPropertyInt& ObjectPropertyInt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

ObjectPropertyInt* ObjectPropertyInt::default_instance_ = NULL;

ObjectPropertyInt* ObjectPropertyInt::New() const {
  return new ObjectPropertyInt;
}

void ObjectPropertyInt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
    }
  }
  property_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectPropertyInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_property_list;
        break;
      }

      // repeated .NFMsg.PropertyInt property_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_property_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectPropertyInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_id(), output);
  }

  // repeated .NFMsg.PropertyInt property_list = 2;
  for (int i = 0; i < this->property_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->property_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectPropertyInt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_id(), target);
  }

  // repeated .NFMsg.PropertyInt property_list = 2;
  for (int i = 0; i < this->property_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->property_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectPropertyInt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_id());
    }

  }
  // repeated .NFMsg.PropertyInt property_list = 2;
  total_size += 1 * this->property_list_size();
  for (int i = 0; i < this->property_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectPropertyInt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectPropertyInt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectPropertyInt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectPropertyInt::MergeFrom(const ObjectPropertyInt& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_list_.MergeFrom(from.property_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectPropertyInt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyInt::CopyFrom(const ObjectPropertyInt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyInt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_player_id()) {
    if (!this->player_id().IsInitialized()) return false;
  }
  for (int i = 0; i < property_list_size(); i++) {
    if (!this->property_list(i).IsInitialized()) return false;
  }
  return true;
}

void ObjectPropertyInt::Swap(ObjectPropertyInt* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    property_list_.Swap(&other->property_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectPropertyInt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectPropertyInt_descriptor_;
  metadata.reflection = ObjectPropertyInt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectPropertyFloat::kPlayerIdFieldNumber;
const int ObjectPropertyFloat::kPropertyListFieldNumber;
#endif  // !_MSC_VER

ObjectPropertyFloat::ObjectPropertyFloat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectPropertyFloat::InitAsDefaultInstance() {
  player_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ObjectPropertyFloat::ObjectPropertyFloat(const ObjectPropertyFloat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectPropertyFloat::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectPropertyFloat::~ObjectPropertyFloat() {
  SharedDtor();
}

void ObjectPropertyFloat::SharedDtor() {
  if (this != default_instance_) {
    delete player_id_;
  }
}

void ObjectPropertyFloat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectPropertyFloat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectPropertyFloat_descriptor_;
}

const ObjectPropertyFloat& ObjectPropertyFloat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

ObjectPropertyFloat* ObjectPropertyFloat::default_instance_ = NULL;

ObjectPropertyFloat* ObjectPropertyFloat::New() const {
  return new ObjectPropertyFloat;
}

void ObjectPropertyFloat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
    }
  }
  property_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectPropertyFloat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_property_list;
        break;
      }

      // repeated .NFMsg.PropertyFloat property_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_property_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectPropertyFloat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_id(), output);
  }

  // repeated .NFMsg.PropertyFloat property_list = 2;
  for (int i = 0; i < this->property_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->property_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectPropertyFloat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_id(), target);
  }

  // repeated .NFMsg.PropertyFloat property_list = 2;
  for (int i = 0; i < this->property_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->property_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectPropertyFloat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_id());
    }

  }
  // repeated .NFMsg.PropertyFloat property_list = 2;
  total_size += 1 * this->property_list_size();
  for (int i = 0; i < this->property_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectPropertyFloat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectPropertyFloat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectPropertyFloat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectPropertyFloat::MergeFrom(const ObjectPropertyFloat& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_list_.MergeFrom(from.property_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectPropertyFloat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyFloat::CopyFrom(const ObjectPropertyFloat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyFloat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_player_id()) {
    if (!this->player_id().IsInitialized()) return false;
  }
  for (int i = 0; i < property_list_size(); i++) {
    if (!this->property_list(i).IsInitialized()) return false;
  }
  return true;
}

void ObjectPropertyFloat::Swap(ObjectPropertyFloat* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    property_list_.Swap(&other->property_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectPropertyFloat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectPropertyFloat_descriptor_;
  metadata.reflection = ObjectPropertyFloat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectPropertyString::kPlayerIdFieldNumber;
const int ObjectPropertyString::kPropertyListFieldNumber;
#endif  // !_MSC_VER

ObjectPropertyString::ObjectPropertyString()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectPropertyString::InitAsDefaultInstance() {
  player_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ObjectPropertyString::ObjectPropertyString(const ObjectPropertyString& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectPropertyString::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectPropertyString::~ObjectPropertyString() {
  SharedDtor();
}

void ObjectPropertyString::SharedDtor() {
  if (this != default_instance_) {
    delete player_id_;
  }
}

void ObjectPropertyString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectPropertyString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectPropertyString_descriptor_;
}

const ObjectPropertyString& ObjectPropertyString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

ObjectPropertyString* ObjectPropertyString::default_instance_ = NULL;

ObjectPropertyString* ObjectPropertyString::New() const {
  return new ObjectPropertyString;
}

void ObjectPropertyString::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
    }
  }
  property_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectPropertyString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_property_list;
        break;
      }

      // repeated .NFMsg.PropertyString property_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_property_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectPropertyString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_id(), output);
  }

  // repeated .NFMsg.PropertyString property_list = 2;
  for (int i = 0; i < this->property_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->property_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectPropertyString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_id(), target);
  }

  // repeated .NFMsg.PropertyString property_list = 2;
  for (int i = 0; i < this->property_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->property_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectPropertyString::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_id());
    }

  }
  // repeated .NFMsg.PropertyString property_list = 2;
  total_size += 1 * this->property_list_size();
  for (int i = 0; i < this->property_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectPropertyString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectPropertyString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectPropertyString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectPropertyString::MergeFrom(const ObjectPropertyString& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_list_.MergeFrom(from.property_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectPropertyString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyString::CopyFrom(const ObjectPropertyString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyString::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_player_id()) {
    if (!this->player_id().IsInitialized()) return false;
  }
  for (int i = 0; i < property_list_size(); i++) {
    if (!this->property_list(i).IsInitialized()) return false;
  }
  return true;
}

void ObjectPropertyString::Swap(ObjectPropertyString* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    property_list_.Swap(&other->property_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectPropertyString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectPropertyString_descriptor_;
  metadata.reflection = ObjectPropertyString_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectPropertyObject::kPlayerIdFieldNumber;
const int ObjectPropertyObject::kPropertyListFieldNumber;
#endif  // !_MSC_VER

ObjectPropertyObject::ObjectPropertyObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectPropertyObject::InitAsDefaultInstance() {
  player_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ObjectPropertyObject::ObjectPropertyObject(const ObjectPropertyObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectPropertyObject::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectPropertyObject::~ObjectPropertyObject() {
  SharedDtor();
}

void ObjectPropertyObject::SharedDtor() {
  if (this != default_instance_) {
    delete player_id_;
  }
}

void ObjectPropertyObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectPropertyObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectPropertyObject_descriptor_;
}

const ObjectPropertyObject& ObjectPropertyObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

ObjectPropertyObject* ObjectPropertyObject::default_instance_ = NULL;

ObjectPropertyObject* ObjectPropertyObject::New() const {
  return new ObjectPropertyObject;
}

void ObjectPropertyObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
    }
  }
  property_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectPropertyObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_property_list;
        break;
      }

      // repeated .NFMsg.PropertyObject property_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_property_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectPropertyObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_id(), output);
  }

  // repeated .NFMsg.PropertyObject property_list = 2;
  for (int i = 0; i < this->property_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->property_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectPropertyObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_id(), target);
  }

  // repeated .NFMsg.PropertyObject property_list = 2;
  for (int i = 0; i < this->property_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->property_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectPropertyObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_id());
    }

  }
  // repeated .NFMsg.PropertyObject property_list = 2;
  total_size += 1 * this->property_list_size();
  for (int i = 0; i < this->property_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectPropertyObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectPropertyObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectPropertyObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectPropertyObject::MergeFrom(const ObjectPropertyObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_list_.MergeFrom(from.property_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectPropertyObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyObject::CopyFrom(const ObjectPropertyObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_player_id()) {
    if (!this->player_id().IsInitialized()) return false;
  }
  for (int i = 0; i < property_list_size(); i++) {
    if (!this->property_list(i).IsInitialized()) return false;
  }
  return true;
}

void ObjectPropertyObject::Swap(ObjectPropertyObject* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    property_list_.Swap(&other->property_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectPropertyObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectPropertyObject_descriptor_;
  metadata.reflection = ObjectPropertyObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectPropertyVector2::kPlayerIdFieldNumber;
const int ObjectPropertyVector2::kPropertyListFieldNumber;
#endif  // !_MSC_VER

ObjectPropertyVector2::ObjectPropertyVector2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectPropertyVector2::InitAsDefaultInstance() {
  player_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ObjectPropertyVector2::ObjectPropertyVector2(const ObjectPropertyVector2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectPropertyVector2::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectPropertyVector2::~ObjectPropertyVector2() {
  SharedDtor();
}

void ObjectPropertyVector2::SharedDtor() {
  if (this != default_instance_) {
    delete player_id_;
  }
}

void ObjectPropertyVector2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectPropertyVector2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectPropertyVector2_descriptor_;
}

const ObjectPropertyVector2& ObjectPropertyVector2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

ObjectPropertyVector2* ObjectPropertyVector2::default_instance_ = NULL;

ObjectPropertyVector2* ObjectPropertyVector2::New() const {
  return new ObjectPropertyVector2;
}

void ObjectPropertyVector2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
    }
  }
  property_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectPropertyVector2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_property_list;
        break;
      }

      // repeated .NFMsg.PropertyVector2 property_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_property_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectPropertyVector2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_id(), output);
  }

  // repeated .NFMsg.PropertyVector2 property_list = 2;
  for (int i = 0; i < this->property_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->property_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectPropertyVector2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_id(), target);
  }

  // repeated .NFMsg.PropertyVector2 property_list = 2;
  for (int i = 0; i < this->property_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->property_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectPropertyVector2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_id());
    }

  }
  // repeated .NFMsg.PropertyVector2 property_list = 2;
  total_size += 1 * this->property_list_size();
  for (int i = 0; i < this->property_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectPropertyVector2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectPropertyVector2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectPropertyVector2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectPropertyVector2::MergeFrom(const ObjectPropertyVector2& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_list_.MergeFrom(from.property_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectPropertyVector2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyVector2::CopyFrom(const ObjectPropertyVector2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyVector2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_player_id()) {
    if (!this->player_id().IsInitialized()) return false;
  }
  for (int i = 0; i < property_list_size(); i++) {
    if (!this->property_list(i).IsInitialized()) return false;
  }
  return true;
}

void ObjectPropertyVector2::Swap(ObjectPropertyVector2* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    property_list_.Swap(&other->property_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectPropertyVector2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectPropertyVector2_descriptor_;
  metadata.reflection = ObjectPropertyVector2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectPropertyVector3::kPlayerIdFieldNumber;
const int ObjectPropertyVector3::kPropertyListFieldNumber;
#endif  // !_MSC_VER

ObjectPropertyVector3::ObjectPropertyVector3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectPropertyVector3::InitAsDefaultInstance() {
  player_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ObjectPropertyVector3::ObjectPropertyVector3(const ObjectPropertyVector3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectPropertyVector3::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectPropertyVector3::~ObjectPropertyVector3() {
  SharedDtor();
}

void ObjectPropertyVector3::SharedDtor() {
  if (this != default_instance_) {
    delete player_id_;
  }
}

void ObjectPropertyVector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectPropertyVector3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectPropertyVector3_descriptor_;
}

const ObjectPropertyVector3& ObjectPropertyVector3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

ObjectPropertyVector3* ObjectPropertyVector3::default_instance_ = NULL;

ObjectPropertyVector3* ObjectPropertyVector3::New() const {
  return new ObjectPropertyVector3;
}

void ObjectPropertyVector3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
    }
  }
  property_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectPropertyVector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_property_list;
        break;
      }

      // repeated .NFMsg.PropertyVector3 property_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_property_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectPropertyVector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_id(), output);
  }

  // repeated .NFMsg.PropertyVector3 property_list = 2;
  for (int i = 0; i < this->property_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->property_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectPropertyVector3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_id(), target);
  }

  // repeated .NFMsg.PropertyVector3 property_list = 2;
  for (int i = 0; i < this->property_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->property_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectPropertyVector3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_id());
    }

  }
  // repeated .NFMsg.PropertyVector3 property_list = 2;
  total_size += 1 * this->property_list_size();
  for (int i = 0; i < this->property_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectPropertyVector3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectPropertyVector3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectPropertyVector3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectPropertyVector3::MergeFrom(const ObjectPropertyVector3& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_list_.MergeFrom(from.property_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectPropertyVector3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyVector3::CopyFrom(const ObjectPropertyVector3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyVector3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_player_id()) {
    if (!this->player_id().IsInitialized()) return false;
  }
  for (int i = 0; i < property_list_size(); i++) {
    if (!this->property_list(i).IsInitialized()) return false;
  }
  return true;
}

void ObjectPropertyVector3::Swap(ObjectPropertyVector3* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    property_list_.Swap(&other->property_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectPropertyVector3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectPropertyVector3_descriptor_;
  metadata.reflection = ObjectPropertyVector3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectRecordInt::kPlayerIdFieldNumber;
const int ObjectRecordInt::kRecordNameFieldNumber;
const int ObjectRecordInt::kPropertyListFieldNumber;
#endif  // !_MSC_VER

ObjectRecordInt::ObjectRecordInt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectRecordInt::InitAsDefaultInstance() {
  player_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ObjectRecordInt::ObjectRecordInt(const ObjectRecordInt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectRecordInt::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
  record_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectRecordInt::~ObjectRecordInt() {
  SharedDtor();
}

void ObjectRecordInt::SharedDtor() {
  if (record_name_ != &::google::protobuf::internal::kEmptyString) {
    delete record_name_;
  }
  if (this != default_instance_) {
    delete player_id_;
  }
}

void ObjectRecordInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectRecordInt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectRecordInt_descriptor_;
}

const ObjectRecordInt& ObjectRecordInt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

ObjectRecordInt* ObjectRecordInt::default_instance_ = NULL;

ObjectRecordInt* ObjectRecordInt::New() const {
  return new ObjectRecordInt;
}

void ObjectRecordInt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
    }
    if (has_record_name()) {
      if (record_name_ != &::google::protobuf::internal::kEmptyString) {
        record_name_->clear();
      }
    }
  }
  property_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectRecordInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_record_name;
        break;
      }

      // required bytes record_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_record_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_property_list;
        break;
      }

      // repeated .NFMsg.RecordInt property_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_property_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectRecordInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_id(), output);
  }

  // required bytes record_name = 2;
  if (has_record_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->record_name(), output);
  }

  // repeated .NFMsg.RecordInt property_list = 3;
  for (int i = 0; i < this->property_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->property_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectRecordInt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_id(), target);
  }

  // required bytes record_name = 2;
  if (has_record_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->record_name(), target);
  }

  // repeated .NFMsg.RecordInt property_list = 3;
  for (int i = 0; i < this->property_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->property_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectRecordInt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_id());
    }

    // required bytes record_name = 2;
    if (has_record_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->record_name());
    }

  }
  // repeated .NFMsg.RecordInt property_list = 3;
  total_size += 1 * this->property_list_size();
  for (int i = 0; i < this->property_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectRecordInt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectRecordInt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectRecordInt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectRecordInt::MergeFrom(const ObjectRecordInt& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_list_.MergeFrom(from.property_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
    if (from.has_record_name()) {
      set_record_name(from.record_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectRecordInt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordInt::CopyFrom(const ObjectRecordInt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordInt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_player_id()) {
    if (!this->player_id().IsInitialized()) return false;
  }
  for (int i = 0; i < property_list_size(); i++) {
    if (!this->property_list(i).IsInitialized()) return false;
  }
  return true;
}

void ObjectRecordInt::Swap(ObjectRecordInt* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(record_name_, other->record_name_);
    property_list_.Swap(&other->property_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectRecordInt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectRecordInt_descriptor_;
  metadata.reflection = ObjectRecordInt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectRecordFloat::kPlayerIdFieldNumber;
const int ObjectRecordFloat::kRecordNameFieldNumber;
const int ObjectRecordFloat::kPropertyListFieldNumber;
#endif  // !_MSC_VER

ObjectRecordFloat::ObjectRecordFloat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectRecordFloat::InitAsDefaultInstance() {
  player_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ObjectRecordFloat::ObjectRecordFloat(const ObjectRecordFloat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectRecordFloat::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
  record_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectRecordFloat::~ObjectRecordFloat() {
  SharedDtor();
}

void ObjectRecordFloat::SharedDtor() {
  if (record_name_ != &::google::protobuf::internal::kEmptyString) {
    delete record_name_;
  }
  if (this != default_instance_) {
    delete player_id_;
  }
}

void ObjectRecordFloat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectRecordFloat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectRecordFloat_descriptor_;
}

const ObjectRecordFloat& ObjectRecordFloat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

ObjectRecordFloat* ObjectRecordFloat::default_instance_ = NULL;

ObjectRecordFloat* ObjectRecordFloat::New() const {
  return new ObjectRecordFloat;
}

void ObjectRecordFloat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
    }
    if (has_record_name()) {
      if (record_name_ != &::google::protobuf::internal::kEmptyString) {
        record_name_->clear();
      }
    }
  }
  property_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectRecordFloat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_record_name;
        break;
      }

      // required bytes record_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_record_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_property_list;
        break;
      }

      // repeated .NFMsg.RecordFloat property_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_property_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectRecordFloat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_id(), output);
  }

  // required bytes record_name = 2;
  if (has_record_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->record_name(), output);
  }

  // repeated .NFMsg.RecordFloat property_list = 3;
  for (int i = 0; i < this->property_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->property_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectRecordFloat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_id(), target);
  }

  // required bytes record_name = 2;
  if (has_record_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->record_name(), target);
  }

  // repeated .NFMsg.RecordFloat property_list = 3;
  for (int i = 0; i < this->property_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->property_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectRecordFloat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_id());
    }

    // required bytes record_name = 2;
    if (has_record_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->record_name());
    }

  }
  // repeated .NFMsg.RecordFloat property_list = 3;
  total_size += 1 * this->property_list_size();
  for (int i = 0; i < this->property_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectRecordFloat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectRecordFloat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectRecordFloat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectRecordFloat::MergeFrom(const ObjectRecordFloat& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_list_.MergeFrom(from.property_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
    if (from.has_record_name()) {
      set_record_name(from.record_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectRecordFloat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordFloat::CopyFrom(const ObjectRecordFloat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordFloat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_player_id()) {
    if (!this->player_id().IsInitialized()) return false;
  }
  for (int i = 0; i < property_list_size(); i++) {
    if (!this->property_list(i).IsInitialized()) return false;
  }
  return true;
}

void ObjectRecordFloat::Swap(ObjectRecordFloat* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(record_name_, other->record_name_);
    property_list_.Swap(&other->property_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectRecordFloat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectRecordFloat_descriptor_;
  metadata.reflection = ObjectRecordFloat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectRecordString::kPlayerIdFieldNumber;
const int ObjectRecordString::kRecordNameFieldNumber;
const int ObjectRecordString::kPropertyListFieldNumber;
#endif  // !_MSC_VER

ObjectRecordString::ObjectRecordString()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectRecordString::InitAsDefaultInstance() {
  player_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ObjectRecordString::ObjectRecordString(const ObjectRecordString& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectRecordString::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
  record_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectRecordString::~ObjectRecordString() {
  SharedDtor();
}

void ObjectRecordString::SharedDtor() {
  if (record_name_ != &::google::protobuf::internal::kEmptyString) {
    delete record_name_;
  }
  if (this != default_instance_) {
    delete player_id_;
  }
}

void ObjectRecordString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectRecordString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectRecordString_descriptor_;
}

const ObjectRecordString& ObjectRecordString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

ObjectRecordString* ObjectRecordString::default_instance_ = NULL;

ObjectRecordString* ObjectRecordString::New() const {
  return new ObjectRecordString;
}

void ObjectRecordString::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
    }
    if (has_record_name()) {
      if (record_name_ != &::google::protobuf::internal::kEmptyString) {
        record_name_->clear();
      }
    }
  }
  property_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectRecordString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_record_name;
        break;
      }

      // required bytes record_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_record_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_property_list;
        break;
      }

      // repeated .NFMsg.RecordString property_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_property_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectRecordString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_id(), output);
  }

  // required bytes record_name = 2;
  if (has_record_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->record_name(), output);
  }

  // repeated .NFMsg.RecordString property_list = 3;
  for (int i = 0; i < this->property_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->property_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectRecordString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_id(), target);
  }

  // required bytes record_name = 2;
  if (has_record_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->record_name(), target);
  }

  // repeated .NFMsg.RecordString property_list = 3;
  for (int i = 0; i < this->property_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->property_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectRecordString::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_id());
    }

    // required bytes record_name = 2;
    if (has_record_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->record_name());
    }

  }
  // repeated .NFMsg.RecordString property_list = 3;
  total_size += 1 * this->property_list_size();
  for (int i = 0; i < this->property_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectRecordString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectRecordString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectRecordString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectRecordString::MergeFrom(const ObjectRecordString& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_list_.MergeFrom(from.property_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
    if (from.has_record_name()) {
      set_record_name(from.record_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectRecordString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordString::CopyFrom(const ObjectRecordString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordString::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_player_id()) {
    if (!this->player_id().IsInitialized()) return false;
  }
  for (int i = 0; i < property_list_size(); i++) {
    if (!this->property_list(i).IsInitialized()) return false;
  }
  return true;
}

void ObjectRecordString::Swap(ObjectRecordString* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(record_name_, other->record_name_);
    property_list_.Swap(&other->property_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectRecordString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectRecordString_descriptor_;
  metadata.reflection = ObjectRecordString_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectRecordObject::kPlayerIdFieldNumber;
const int ObjectRecordObject::kRecordNameFieldNumber;
const int ObjectRecordObject::kPropertyListFieldNumber;
#endif  // !_MSC_VER

ObjectRecordObject::ObjectRecordObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectRecordObject::InitAsDefaultInstance() {
  player_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ObjectRecordObject::ObjectRecordObject(const ObjectRecordObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectRecordObject::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
  record_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectRecordObject::~ObjectRecordObject() {
  SharedDtor();
}

void ObjectRecordObject::SharedDtor() {
  if (record_name_ != &::google::protobuf::internal::kEmptyString) {
    delete record_name_;
  }
  if (this != default_instance_) {
    delete player_id_;
  }
}

void ObjectRecordObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectRecordObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectRecordObject_descriptor_;
}

const ObjectRecordObject& ObjectRecordObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

ObjectRecordObject* ObjectRecordObject::default_instance_ = NULL;

ObjectRecordObject* ObjectRecordObject::New() const {
  return new ObjectRecordObject;
}

void ObjectRecordObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
    }
    if (has_record_name()) {
      if (record_name_ != &::google::protobuf::internal::kEmptyString) {
        record_name_->clear();
      }
    }
  }
  property_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectRecordObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_record_name;
        break;
      }

      // required bytes record_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_record_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_property_list;
        break;
      }

      // repeated .NFMsg.RecordObject property_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_property_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectRecordObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_id(), output);
  }

  // required bytes record_name = 2;
  if (has_record_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->record_name(), output);
  }

  // repeated .NFMsg.RecordObject property_list = 3;
  for (int i = 0; i < this->property_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->property_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectRecordObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_id(), target);
  }

  // required bytes record_name = 2;
  if (has_record_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->record_name(), target);
  }

  // repeated .NFMsg.RecordObject property_list = 3;
  for (int i = 0; i < this->property_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->property_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectRecordObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_id());
    }

    // required bytes record_name = 2;
    if (has_record_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->record_name());
    }

  }
  // repeated .NFMsg.RecordObject property_list = 3;
  total_size += 1 * this->property_list_size();
  for (int i = 0; i < this->property_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectRecordObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectRecordObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectRecordObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectRecordObject::MergeFrom(const ObjectRecordObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_list_.MergeFrom(from.property_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
    if (from.has_record_name()) {
      set_record_name(from.record_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectRecordObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordObject::CopyFrom(const ObjectRecordObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_player_id()) {
    if (!this->player_id().IsInitialized()) return false;
  }
  for (int i = 0; i < property_list_size(); i++) {
    if (!this->property_list(i).IsInitialized()) return false;
  }
  return true;
}

void ObjectRecordObject::Swap(ObjectRecordObject* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(record_name_, other->record_name_);
    property_list_.Swap(&other->property_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectRecordObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectRecordObject_descriptor_;
  metadata.reflection = ObjectRecordObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectRecordVector2::kPlayerIdFieldNumber;
const int ObjectRecordVector2::kRecordNameFieldNumber;
const int ObjectRecordVector2::kPropertyListFieldNumber;
#endif  // !_MSC_VER

ObjectRecordVector2::ObjectRecordVector2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectRecordVector2::InitAsDefaultInstance() {
  player_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ObjectRecordVector2::ObjectRecordVector2(const ObjectRecordVector2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectRecordVector2::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
  record_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectRecordVector2::~ObjectRecordVector2() {
  SharedDtor();
}

void ObjectRecordVector2::SharedDtor() {
  if (record_name_ != &::google::protobuf::internal::kEmptyString) {
    delete record_name_;
  }
  if (this != default_instance_) {
    delete player_id_;
  }
}

void ObjectRecordVector2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectRecordVector2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectRecordVector2_descriptor_;
}

const ObjectRecordVector2& ObjectRecordVector2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

ObjectRecordVector2* ObjectRecordVector2::default_instance_ = NULL;

ObjectRecordVector2* ObjectRecordVector2::New() const {
  return new ObjectRecordVector2;
}

void ObjectRecordVector2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
    }
    if (has_record_name()) {
      if (record_name_ != &::google::protobuf::internal::kEmptyString) {
        record_name_->clear();
      }
    }
  }
  property_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectRecordVector2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_record_name;
        break;
      }

      // required bytes record_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_record_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_property_list;
        break;
      }

      // repeated .NFMsg.RecordVector2 property_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_property_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectRecordVector2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_id(), output);
  }

  // required bytes record_name = 2;
  if (has_record_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->record_name(), output);
  }

  // repeated .NFMsg.RecordVector2 property_list = 3;
  for (int i = 0; i < this->property_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->property_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectRecordVector2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_id(), target);
  }

  // required bytes record_name = 2;
  if (has_record_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->record_name(), target);
  }

  // repeated .NFMsg.RecordVector2 property_list = 3;
  for (int i = 0; i < this->property_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->property_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectRecordVector2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_id());
    }

    // required bytes record_name = 2;
    if (has_record_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->record_name());
    }

  }
  // repeated .NFMsg.RecordVector2 property_list = 3;
  total_size += 1 * this->property_list_size();
  for (int i = 0; i < this->property_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectRecordVector2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectRecordVector2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectRecordVector2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectRecordVector2::MergeFrom(const ObjectRecordVector2& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_list_.MergeFrom(from.property_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
    if (from.has_record_name()) {
      set_record_name(from.record_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectRecordVector2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordVector2::CopyFrom(const ObjectRecordVector2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordVector2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_player_id()) {
    if (!this->player_id().IsInitialized()) return false;
  }
  for (int i = 0; i < property_list_size(); i++) {
    if (!this->property_list(i).IsInitialized()) return false;
  }
  return true;
}

void ObjectRecordVector2::Swap(ObjectRecordVector2* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(record_name_, other->record_name_);
    property_list_.Swap(&other->property_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectRecordVector2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectRecordVector2_descriptor_;
  metadata.reflection = ObjectRecordVector2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectRecordVector3::kPlayerIdFieldNumber;
const int ObjectRecordVector3::kRecordNameFieldNumber;
const int ObjectRecordVector3::kPropertyListFieldNumber;
#endif  // !_MSC_VER

ObjectRecordVector3::ObjectRecordVector3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectRecordVector3::InitAsDefaultInstance() {
  player_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ObjectRecordVector3::ObjectRecordVector3(const ObjectRecordVector3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectRecordVector3::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
  record_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectRecordVector3::~ObjectRecordVector3() {
  SharedDtor();
}

void ObjectRecordVector3::SharedDtor() {
  if (record_name_ != &::google::protobuf::internal::kEmptyString) {
    delete record_name_;
  }
  if (this != default_instance_) {
    delete player_id_;
  }
}

void ObjectRecordVector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectRecordVector3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectRecordVector3_descriptor_;
}

const ObjectRecordVector3& ObjectRecordVector3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

ObjectRecordVector3* ObjectRecordVector3::default_instance_ = NULL;

ObjectRecordVector3* ObjectRecordVector3::New() const {
  return new ObjectRecordVector3;
}

void ObjectRecordVector3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
    }
    if (has_record_name()) {
      if (record_name_ != &::google::protobuf::internal::kEmptyString) {
        record_name_->clear();
      }
    }
  }
  property_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectRecordVector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_record_name;
        break;
      }

      // required bytes record_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_record_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_property_list;
        break;
      }

      // repeated .NFMsg.RecordVector3 property_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_property_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectRecordVector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_id(), output);
  }

  // required bytes record_name = 2;
  if (has_record_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->record_name(), output);
  }

  // repeated .NFMsg.RecordVector3 property_list = 3;
  for (int i = 0; i < this->property_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->property_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectRecordVector3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_id(), target);
  }

  // required bytes record_name = 2;
  if (has_record_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->record_name(), target);
  }

  // repeated .NFMsg.RecordVector3 property_list = 3;
  for (int i = 0; i < this->property_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->property_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectRecordVector3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_id());
    }

    // required bytes record_name = 2;
    if (has_record_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->record_name());
    }

  }
  // repeated .NFMsg.RecordVector3 property_list = 3;
  total_size += 1 * this->property_list_size();
  for (int i = 0; i < this->property_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectRecordVector3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectRecordVector3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectRecordVector3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectRecordVector3::MergeFrom(const ObjectRecordVector3& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_list_.MergeFrom(from.property_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
    if (from.has_record_name()) {
      set_record_name(from.record_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectRecordVector3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordVector3::CopyFrom(const ObjectRecordVector3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordVector3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_player_id()) {
    if (!this->player_id().IsInitialized()) return false;
  }
  for (int i = 0; i < property_list_size(); i++) {
    if (!this->property_list(i).IsInitialized()) return false;
  }
  return true;
}

void ObjectRecordVector3::Swap(ObjectRecordVector3* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(record_name_, other->record_name_);
    property_list_.Swap(&other->property_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectRecordVector3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectRecordVector3_descriptor_;
  metadata.reflection = ObjectRecordVector3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectRecordSwap::kPlayerIdFieldNumber;
const int ObjectRecordSwap::kOriginRecordNameFieldNumber;
const int ObjectRecordSwap::kTargetRecordNameFieldNumber;
const int ObjectRecordSwap::kRowOriginFieldNumber;
const int ObjectRecordSwap::kRowTargetFieldNumber;
#endif  // !_MSC_VER

ObjectRecordSwap::ObjectRecordSwap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectRecordSwap::InitAsDefaultInstance() {
  player_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ObjectRecordSwap::ObjectRecordSwap(const ObjectRecordSwap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectRecordSwap::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
  origin_record_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_record_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  row_origin_ = 0;
  row_target_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectRecordSwap::~ObjectRecordSwap() {
  SharedDtor();
}

void ObjectRecordSwap::SharedDtor() {
  if (origin_record_name_ != &::google::protobuf::internal::kEmptyString) {
    delete origin_record_name_;
  }
  if (target_record_name_ != &::google::protobuf::internal::kEmptyString) {
    delete target_record_name_;
  }
  if (this != default_instance_) {
    delete player_id_;
  }
}

void ObjectRecordSwap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectRecordSwap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectRecordSwap_descriptor_;
}

const ObjectRecordSwap& ObjectRecordSwap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

ObjectRecordSwap* ObjectRecordSwap::default_instance_ = NULL;

ObjectRecordSwap* ObjectRecordSwap::New() const {
  return new ObjectRecordSwap;
}

void ObjectRecordSwap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
    }
    if (has_origin_record_name()) {
      if (origin_record_name_ != &::google::protobuf::internal::kEmptyString) {
        origin_record_name_->clear();
      }
    }
    if (has_target_record_name()) {
      if (target_record_name_ != &::google::protobuf::internal::kEmptyString) {
        target_record_name_->clear();
      }
    }
    row_origin_ = 0;
    row_target_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectRecordSwap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_origin_record_name;
        break;
      }

      // required bytes origin_record_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_origin_record_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_origin_record_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target_record_name;
        break;
      }

      // optional bytes target_record_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_record_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_target_record_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_row_origin;
        break;
      }

      // required int32 row_origin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row_origin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_origin_)));
          set_has_row_origin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_row_target;
        break;
      }

      // required int32 row_target = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_target_)));
          set_has_row_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectRecordSwap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_id(), output);
  }

  // required bytes origin_record_name = 2;
  if (has_origin_record_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->origin_record_name(), output);
  }

  // optional bytes target_record_name = 3;
  if (has_target_record_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->target_record_name(), output);
  }

  // required int32 row_origin = 4;
  if (has_row_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->row_origin(), output);
  }

  // required int32 row_target = 5;
  if (has_row_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->row_target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectRecordSwap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_id(), target);
  }

  // required bytes origin_record_name = 2;
  if (has_origin_record_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->origin_record_name(), target);
  }

  // optional bytes target_record_name = 3;
  if (has_target_record_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->target_record_name(), target);
  }

  // required int32 row_origin = 4;
  if (has_row_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->row_origin(), target);
  }

  // required int32 row_target = 5;
  if (has_row_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->row_target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectRecordSwap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_id());
    }

    // required bytes origin_record_name = 2;
    if (has_origin_record_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->origin_record_name());
    }

    // optional bytes target_record_name = 3;
    if (has_target_record_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->target_record_name());
    }

    // required int32 row_origin = 4;
    if (has_row_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row_origin());
    }

    // required int32 row_target = 5;
    if (has_row_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row_target());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectRecordSwap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectRecordSwap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectRecordSwap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectRecordSwap::MergeFrom(const ObjectRecordSwap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
    if (from.has_origin_record_name()) {
      set_origin_record_name(from.origin_record_name());
    }
    if (from.has_target_record_name()) {
      set_target_record_name(from.target_record_name());
    }
    if (from.has_row_origin()) {
      set_row_origin(from.row_origin());
    }
    if (from.has_row_target()) {
      set_row_target(from.row_target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectRecordSwap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordSwap::CopyFrom(const ObjectRecordSwap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordSwap::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  if (has_player_id()) {
    if (!this->player_id().IsInitialized()) return false;
  }
  return true;
}

void ObjectRecordSwap::Swap(ObjectRecordSwap* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(origin_record_name_, other->origin_record_name_);
    std::swap(target_record_name_, other->target_record_name_);
    std::swap(row_origin_, other->row_origin_);
    std::swap(row_target_, other->row_target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectRecordSwap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectRecordSwap_descriptor_;
  metadata.reflection = ObjectRecordSwap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectRecordAddRow::kPlayerIdFieldNumber;
const int ObjectRecordAddRow::kRecordNameFieldNumber;
const int ObjectRecordAddRow::kRowDataFieldNumber;
#endif  // !_MSC_VER

ObjectRecordAddRow::ObjectRecordAddRow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectRecordAddRow::InitAsDefaultInstance() {
  player_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ObjectRecordAddRow::ObjectRecordAddRow(const ObjectRecordAddRow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectRecordAddRow::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
  record_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectRecordAddRow::~ObjectRecordAddRow() {
  SharedDtor();
}

void ObjectRecordAddRow::SharedDtor() {
  if (record_name_ != &::google::protobuf::internal::kEmptyString) {
    delete record_name_;
  }
  if (this != default_instance_) {
    delete player_id_;
  }
}

void ObjectRecordAddRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectRecordAddRow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectRecordAddRow_descriptor_;
}

const ObjectRecordAddRow& ObjectRecordAddRow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

ObjectRecordAddRow* ObjectRecordAddRow::default_instance_ = NULL;

ObjectRecordAddRow* ObjectRecordAddRow::New() const {
  return new ObjectRecordAddRow;
}

void ObjectRecordAddRow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
    }
    if (has_record_name()) {
      if (record_name_ != &::google::protobuf::internal::kEmptyString) {
        record_name_->clear();
      }
    }
  }
  row_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectRecordAddRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_record_name;
        break;
      }

      // required bytes record_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_record_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_row_data;
        break;
      }

      // repeated .NFMsg.RecordAddRowStruct row_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_row_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_row_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_row_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectRecordAddRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_id(), output);
  }

  // required bytes record_name = 2;
  if (has_record_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->record_name(), output);
  }

  // repeated .NFMsg.RecordAddRowStruct row_data = 3;
  for (int i = 0; i < this->row_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->row_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectRecordAddRow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_id(), target);
  }

  // required bytes record_name = 2;
  if (has_record_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->record_name(), target);
  }

  // repeated .NFMsg.RecordAddRowStruct row_data = 3;
  for (int i = 0; i < this->row_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->row_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectRecordAddRow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_id());
    }

    // required bytes record_name = 2;
    if (has_record_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->record_name());
    }

  }
  // repeated .NFMsg.RecordAddRowStruct row_data = 3;
  total_size += 1 * this->row_data_size();
  for (int i = 0; i < this->row_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->row_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectRecordAddRow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectRecordAddRow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectRecordAddRow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectRecordAddRow::MergeFrom(const ObjectRecordAddRow& from) {
  GOOGLE_CHECK_NE(&from, this);
  row_data_.MergeFrom(from.row_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
    if (from.has_record_name()) {
      set_record_name(from.record_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectRecordAddRow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordAddRow::CopyFrom(const ObjectRecordAddRow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordAddRow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_player_id()) {
    if (!this->player_id().IsInitialized()) return false;
  }
  for (int i = 0; i < row_data_size(); i++) {
    if (!this->row_data(i).IsInitialized()) return false;
  }
  return true;
}

void ObjectRecordAddRow::Swap(ObjectRecordAddRow* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(record_name_, other->record_name_);
    row_data_.Swap(&other->row_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectRecordAddRow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectRecordAddRow_descriptor_;
  metadata.reflection = ObjectRecordAddRow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectRecordRemove::kPlayerIdFieldNumber;
const int ObjectRecordRemove::kRecordNameFieldNumber;
const int ObjectRecordRemove::kRemoveRowFieldNumber;
#endif  // !_MSC_VER

ObjectRecordRemove::ObjectRecordRemove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectRecordRemove::InitAsDefaultInstance() {
  player_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ObjectRecordRemove::ObjectRecordRemove(const ObjectRecordRemove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectRecordRemove::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
  record_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectRecordRemove::~ObjectRecordRemove() {
  SharedDtor();
}

void ObjectRecordRemove::SharedDtor() {
  if (record_name_ != &::google::protobuf::internal::kEmptyString) {
    delete record_name_;
  }
  if (this != default_instance_) {
    delete player_id_;
  }
}

void ObjectRecordRemove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectRecordRemove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectRecordRemove_descriptor_;
}

const ObjectRecordRemove& ObjectRecordRemove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

ObjectRecordRemove* ObjectRecordRemove::default_instance_ = NULL;

ObjectRecordRemove* ObjectRecordRemove::New() const {
  return new ObjectRecordRemove;
}

void ObjectRecordRemove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
    }
    if (has_record_name()) {
      if (record_name_ != &::google::protobuf::internal::kEmptyString) {
        record_name_->clear();
      }
    }
  }
  remove_row_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectRecordRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_record_name;
        break;
      }

      // required bytes record_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_record_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remove_row;
        break;
      }

      // repeated int32 remove_row = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remove_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_remove_row())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_remove_row())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remove_row;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectRecordRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_id(), output);
  }

  // required bytes record_name = 2;
  if (has_record_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->record_name(), output);
  }

  // repeated int32 remove_row = 3;
  for (int i = 0; i < this->remove_row_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->remove_row(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectRecordRemove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_id(), target);
  }

  // required bytes record_name = 2;
  if (has_record_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->record_name(), target);
  }

  // repeated int32 remove_row = 3;
  for (int i = 0; i < this->remove_row_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->remove_row(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectRecordRemove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_id());
    }

    // required bytes record_name = 2;
    if (has_record_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->record_name());
    }

  }
  // repeated int32 remove_row = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->remove_row_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->remove_row(i));
    }
    total_size += 1 * this->remove_row_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectRecordRemove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectRecordRemove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectRecordRemove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectRecordRemove::MergeFrom(const ObjectRecordRemove& from) {
  GOOGLE_CHECK_NE(&from, this);
  remove_row_.MergeFrom(from.remove_row_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
    if (from.has_record_name()) {
      set_record_name(from.record_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectRecordRemove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordRemove::CopyFrom(const ObjectRecordRemove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordRemove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_player_id()) {
    if (!this->player_id().IsInitialized()) return false;
  }
  return true;
}

void ObjectRecordRemove::Swap(ObjectRecordRemove* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(record_name_, other->record_name_);
    remove_row_.Swap(&other->remove_row_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectRecordRemove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectRecordRemove_descriptor_;
  metadata.reflection = ObjectRecordRemove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectPropertyList::kPlayerIdFieldNumber;
const int ObjectPropertyList::kPropertyIntListFieldNumber;
const int ObjectPropertyList::kPropertyFloatListFieldNumber;
const int ObjectPropertyList::kPropertyStringListFieldNumber;
const int ObjectPropertyList::kPropertyObjectListFieldNumber;
const int ObjectPropertyList::kPropertyVector2ListFieldNumber;
const int ObjectPropertyList::kPropertyVector3ListFieldNumber;
#endif  // !_MSC_VER

ObjectPropertyList::ObjectPropertyList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectPropertyList::InitAsDefaultInstance() {
  player_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ObjectPropertyList::ObjectPropertyList(const ObjectPropertyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectPropertyList::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectPropertyList::~ObjectPropertyList() {
  SharedDtor();
}

void ObjectPropertyList::SharedDtor() {
  if (this != default_instance_) {
    delete player_id_;
  }
}

void ObjectPropertyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectPropertyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectPropertyList_descriptor_;
}

const ObjectPropertyList& ObjectPropertyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

ObjectPropertyList* ObjectPropertyList::default_instance_ = NULL;

ObjectPropertyList* ObjectPropertyList::New() const {
  return new ObjectPropertyList;
}

void ObjectPropertyList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
    }
  }
  property_int_list_.Clear();
  property_float_list_.Clear();
  property_string_list_.Clear();
  property_object_list_.Clear();
  property_vector2_list_.Clear();
  property_vector3_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectPropertyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_property_int_list;
        break;
      }

      // repeated .NFMsg.PropertyInt property_int_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property_int_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_int_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_property_int_list;
        if (input->ExpectTag(26)) goto parse_property_float_list;
        break;
      }

      // repeated .NFMsg.PropertyFloat property_float_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property_float_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_float_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_property_float_list;
        if (input->ExpectTag(34)) goto parse_property_string_list;
        break;
      }

      // repeated .NFMsg.PropertyString property_string_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property_string_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_string_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_property_string_list;
        if (input->ExpectTag(42)) goto parse_property_object_list;
        break;
      }

      // repeated .NFMsg.PropertyObject property_object_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property_object_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_object_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_property_object_list;
        if (input->ExpectTag(50)) goto parse_property_vector2_list;
        break;
      }

      // repeated .NFMsg.PropertyVector2 property_vector2_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property_vector2_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_vector2_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_property_vector2_list;
        if (input->ExpectTag(58)) goto parse_property_vector3_list;
        break;
      }

      // repeated .NFMsg.PropertyVector3 property_vector3_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property_vector3_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_vector3_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_property_vector3_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectPropertyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_id(), output);
  }

  // repeated .NFMsg.PropertyInt property_int_list = 2;
  for (int i = 0; i < this->property_int_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->property_int_list(i), output);
  }

  // repeated .NFMsg.PropertyFloat property_float_list = 3;
  for (int i = 0; i < this->property_float_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->property_float_list(i), output);
  }

  // repeated .NFMsg.PropertyString property_string_list = 4;
  for (int i = 0; i < this->property_string_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->property_string_list(i), output);
  }

  // repeated .NFMsg.PropertyObject property_object_list = 5;
  for (int i = 0; i < this->property_object_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->property_object_list(i), output);
  }

  // repeated .NFMsg.PropertyVector2 property_vector2_list = 6;
  for (int i = 0; i < this->property_vector2_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->property_vector2_list(i), output);
  }

  // repeated .NFMsg.PropertyVector3 property_vector3_list = 7;
  for (int i = 0; i < this->property_vector3_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->property_vector3_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectPropertyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_id(), target);
  }

  // repeated .NFMsg.PropertyInt property_int_list = 2;
  for (int i = 0; i < this->property_int_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->property_int_list(i), target);
  }

  // repeated .NFMsg.PropertyFloat property_float_list = 3;
  for (int i = 0; i < this->property_float_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->property_float_list(i), target);
  }

  // repeated .NFMsg.PropertyString property_string_list = 4;
  for (int i = 0; i < this->property_string_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->property_string_list(i), target);
  }

  // repeated .NFMsg.PropertyObject property_object_list = 5;
  for (int i = 0; i < this->property_object_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->property_object_list(i), target);
  }

  // repeated .NFMsg.PropertyVector2 property_vector2_list = 6;
  for (int i = 0; i < this->property_vector2_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->property_vector2_list(i), target);
  }

  // repeated .NFMsg.PropertyVector3 property_vector3_list = 7;
  for (int i = 0; i < this->property_vector3_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->property_vector3_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectPropertyList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_id());
    }

  }
  // repeated .NFMsg.PropertyInt property_int_list = 2;
  total_size += 1 * this->property_int_list_size();
  for (int i = 0; i < this->property_int_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property_int_list(i));
  }

  // repeated .NFMsg.PropertyFloat property_float_list = 3;
  total_size += 1 * this->property_float_list_size();
  for (int i = 0; i < this->property_float_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property_float_list(i));
  }

  // repeated .NFMsg.PropertyString property_string_list = 4;
  total_size += 1 * this->property_string_list_size();
  for (int i = 0; i < this->property_string_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property_string_list(i));
  }

  // repeated .NFMsg.PropertyObject property_object_list = 5;
  total_size += 1 * this->property_object_list_size();
  for (int i = 0; i < this->property_object_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property_object_list(i));
  }

  // repeated .NFMsg.PropertyVector2 property_vector2_list = 6;
  total_size += 1 * this->property_vector2_list_size();
  for (int i = 0; i < this->property_vector2_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property_vector2_list(i));
  }

  // repeated .NFMsg.PropertyVector3 property_vector3_list = 7;
  total_size += 1 * this->property_vector3_list_size();
  for (int i = 0; i < this->property_vector3_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property_vector3_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectPropertyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectPropertyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectPropertyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectPropertyList::MergeFrom(const ObjectPropertyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_int_list_.MergeFrom(from.property_int_list_);
  property_float_list_.MergeFrom(from.property_float_list_);
  property_string_list_.MergeFrom(from.property_string_list_);
  property_object_list_.MergeFrom(from.property_object_list_);
  property_vector2_list_.MergeFrom(from.property_vector2_list_);
  property_vector3_list_.MergeFrom(from.property_vector3_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectPropertyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyList::CopyFrom(const ObjectPropertyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_player_id()) {
    if (!this->player_id().IsInitialized()) return false;
  }
  for (int i = 0; i < property_int_list_size(); i++) {
    if (!this->property_int_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < property_float_list_size(); i++) {
    if (!this->property_float_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < property_string_list_size(); i++) {
    if (!this->property_string_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < property_object_list_size(); i++) {
    if (!this->property_object_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < property_vector2_list_size(); i++) {
    if (!this->property_vector2_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < property_vector3_list_size(); i++) {
    if (!this->property_vector3_list(i).IsInitialized()) return false;
  }
  return true;
}

void ObjectPropertyList::Swap(ObjectPropertyList* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    property_int_list_.Swap(&other->property_int_list_);
    property_float_list_.Swap(&other->property_float_list_);
    property_string_list_.Swap(&other->property_string_list_);
    property_object_list_.Swap(&other->property_object_list_);
    property_vector2_list_.Swap(&other->property_vector2_list_);
    property_vector3_list_.Swap(&other->property_vector3_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectPropertyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectPropertyList_descriptor_;
  metadata.reflection = ObjectPropertyList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MultiObjectPropertyList::kMultiPlayerPropertyFieldNumber;
#endif  // !_MSC_VER

MultiObjectPropertyList::MultiObjectPropertyList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MultiObjectPropertyList::InitAsDefaultInstance() {
}

MultiObjectPropertyList::MultiObjectPropertyList(const MultiObjectPropertyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MultiObjectPropertyList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultiObjectPropertyList::~MultiObjectPropertyList() {
  SharedDtor();
}

void MultiObjectPropertyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MultiObjectPropertyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiObjectPropertyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiObjectPropertyList_descriptor_;
}

const MultiObjectPropertyList& MultiObjectPropertyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

MultiObjectPropertyList* MultiObjectPropertyList::default_instance_ = NULL;

MultiObjectPropertyList* MultiObjectPropertyList::New() const {
  return new MultiObjectPropertyList;
}

void MultiObjectPropertyList::Clear() {
  multi_player_property_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MultiObjectPropertyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFMsg.ObjectPropertyList multi_player_property = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_multi_player_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_multi_player_property()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_multi_player_property;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MultiObjectPropertyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NFMsg.ObjectPropertyList multi_player_property = 1;
  for (int i = 0; i < this->multi_player_property_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->multi_player_property(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MultiObjectPropertyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NFMsg.ObjectPropertyList multi_player_property = 1;
  for (int i = 0; i < this->multi_player_property_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->multi_player_property(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MultiObjectPropertyList::ByteSize() const {
  int total_size = 0;

  // repeated .NFMsg.ObjectPropertyList multi_player_property = 1;
  total_size += 1 * this->multi_player_property_size();
  for (int i = 0; i < this->multi_player_property_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->multi_player_property(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiObjectPropertyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MultiObjectPropertyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MultiObjectPropertyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MultiObjectPropertyList::MergeFrom(const MultiObjectPropertyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  multi_player_property_.MergeFrom(from.multi_player_property_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MultiObjectPropertyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiObjectPropertyList::CopyFrom(const MultiObjectPropertyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiObjectPropertyList::IsInitialized() const {

  for (int i = 0; i < multi_player_property_size(); i++) {
    if (!this->multi_player_property(i).IsInitialized()) return false;
  }
  return true;
}

void MultiObjectPropertyList::Swap(MultiObjectPropertyList* other) {
  if (other != this) {
    multi_player_property_.Swap(&other->multi_player_property_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MultiObjectPropertyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiObjectPropertyList_descriptor_;
  metadata.reflection = MultiObjectPropertyList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectRecordList::kPlayerIdFieldNumber;
const int ObjectRecordList::kRecordListFieldNumber;
#endif  // !_MSC_VER

ObjectRecordList::ObjectRecordList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectRecordList::InitAsDefaultInstance() {
  player_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ObjectRecordList::ObjectRecordList(const ObjectRecordList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectRecordList::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectRecordList::~ObjectRecordList() {
  SharedDtor();
}

void ObjectRecordList::SharedDtor() {
  if (this != default_instance_) {
    delete player_id_;
  }
}

void ObjectRecordList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectRecordList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectRecordList_descriptor_;
}

const ObjectRecordList& ObjectRecordList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

ObjectRecordList* ObjectRecordList::default_instance_ = NULL;

ObjectRecordList* ObjectRecordList::New() const {
  return new ObjectRecordList;
}

void ObjectRecordList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
    }
  }
  record_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectRecordList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_record_list;
        break;
      }

      // repeated .NFMsg.ObjectRecordBase record_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_record_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectRecordList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_id(), output);
  }

  // repeated .NFMsg.ObjectRecordBase record_list = 2;
  for (int i = 0; i < this->record_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->record_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectRecordList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_id(), target);
  }

  // repeated .NFMsg.ObjectRecordBase record_list = 2;
  for (int i = 0; i < this->record_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->record_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectRecordList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_id());
    }

  }
  // repeated .NFMsg.ObjectRecordBase record_list = 2;
  total_size += 1 * this->record_list_size();
  for (int i = 0; i < this->record_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectRecordList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectRecordList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectRecordList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectRecordList::MergeFrom(const ObjectRecordList& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_list_.MergeFrom(from.record_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectRecordList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordList::CopyFrom(const ObjectRecordList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_player_id()) {
    if (!this->player_id().IsInitialized()) return false;
  }
  for (int i = 0; i < record_list_size(); i++) {
    if (!this->record_list(i).IsInitialized()) return false;
  }
  return true;
}

void ObjectRecordList::Swap(ObjectRecordList* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    record_list_.Swap(&other->record_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectRecordList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectRecordList_descriptor_;
  metadata.reflection = ObjectRecordList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MultiObjectRecordList::kMultiPlayerRecordFieldNumber;
#endif  // !_MSC_VER

MultiObjectRecordList::MultiObjectRecordList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MultiObjectRecordList::InitAsDefaultInstance() {
}

MultiObjectRecordList::MultiObjectRecordList(const MultiObjectRecordList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MultiObjectRecordList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultiObjectRecordList::~MultiObjectRecordList() {
  SharedDtor();
}

void MultiObjectRecordList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MultiObjectRecordList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiObjectRecordList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiObjectRecordList_descriptor_;
}

const MultiObjectRecordList& MultiObjectRecordList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

MultiObjectRecordList* MultiObjectRecordList::default_instance_ = NULL;

MultiObjectRecordList* MultiObjectRecordList::New() const {
  return new MultiObjectRecordList;
}

void MultiObjectRecordList::Clear() {
  multi_player_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MultiObjectRecordList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFMsg.ObjectRecordList multi_player_record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_multi_player_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_multi_player_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_multi_player_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MultiObjectRecordList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NFMsg.ObjectRecordList multi_player_record = 1;
  for (int i = 0; i < this->multi_player_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->multi_player_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MultiObjectRecordList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NFMsg.ObjectRecordList multi_player_record = 1;
  for (int i = 0; i < this->multi_player_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->multi_player_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MultiObjectRecordList::ByteSize() const {
  int total_size = 0;

  // repeated .NFMsg.ObjectRecordList multi_player_record = 1;
  total_size += 1 * this->multi_player_record_size();
  for (int i = 0; i < this->multi_player_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->multi_player_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiObjectRecordList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MultiObjectRecordList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MultiObjectRecordList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MultiObjectRecordList::MergeFrom(const MultiObjectRecordList& from) {
  GOOGLE_CHECK_NE(&from, this);
  multi_player_record_.MergeFrom(from.multi_player_record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MultiObjectRecordList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiObjectRecordList::CopyFrom(const MultiObjectRecordList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiObjectRecordList::IsInitialized() const {

  for (int i = 0; i < multi_player_record_size(); i++) {
    if (!this->multi_player_record(i).IsInitialized()) return false;
  }
  return true;
}

void MultiObjectRecordList::Swap(MultiObjectRecordList* other) {
  if (other != this) {
    multi_player_record_.Swap(&other->multi_player_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MultiObjectRecordList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiObjectRecordList_descriptor_;
  metadata.reflection = MultiObjectRecordList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgBase::kPlayerIdFieldNumber;
const int MsgBase::kMsgDataFieldNumber;
const int MsgBase::kPlayerClientListFieldNumber;
const int MsgBase::kHashIdentFieldNumber;
#endif  // !_MSC_VER

MsgBase::MsgBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgBase::InitAsDefaultInstance() {
  player_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  hash_ident_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

MsgBase::MsgBase(const MsgBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgBase::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
  msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hash_ident_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBase::~MsgBase() {
  SharedDtor();
}

void MsgBase::SharedDtor() {
  if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_data_;
  }
  if (this != default_instance_) {
    delete player_id_;
    delete hash_ident_;
  }
}

void MsgBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBase_descriptor_;
}

const MsgBase& MsgBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

MsgBase* MsgBase::default_instance_ = NULL;

MsgBase* MsgBase::New() const {
  return new MsgBase;
}

void MsgBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
    }
    if (has_msg_data()) {
      if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
        msg_data_->clear();
      }
    }
    if (has_hash_ident()) {
      if (hash_ident_ != NULL) hash_ident_->::NFMsg::Ident::Clear();
    }
  }
  player_client_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg_data;
        break;
      }

      // required bytes msg_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player_Client_list;
        break;
      }

      // repeated .NFMsg.Ident player_Client_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_Client_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_client_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player_Client_list;
        if (input->ExpectTag(34)) goto parse_hash_ident;
        break;
      }

      // optional .NFMsg.Ident hash_ident = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hash_ident:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hash_ident()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_id(), output);
  }

  // required bytes msg_data = 2;
  if (has_msg_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->msg_data(), output);
  }

  // repeated .NFMsg.Ident player_Client_list = 3;
  for (int i = 0; i < this->player_client_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_client_list(i), output);
  }

  // optional .NFMsg.Ident hash_ident = 4;
  if (has_hash_ident()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->hash_ident(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_id(), target);
  }

  // required bytes msg_data = 2;
  if (has_msg_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg_data(), target);
  }

  // repeated .NFMsg.Ident player_Client_list = 3;
  for (int i = 0; i < this->player_client_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player_client_list(i), target);
  }

  // optional .NFMsg.Ident hash_ident = 4;
  if (has_hash_ident()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->hash_ident(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_id());
    }

    // required bytes msg_data = 2;
    if (has_msg_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_data());
    }

    // optional .NFMsg.Ident hash_ident = 4;
    if (has_hash_ident()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hash_ident());
    }

  }
  // repeated .NFMsg.Ident player_Client_list = 3;
  total_size += 1 * this->player_client_list_size();
  for (int i = 0; i < this->player_client_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_client_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBase::MergeFrom(const MsgBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_client_list_.MergeFrom(from.player_client_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
    if (from.has_msg_data()) {
      set_msg_data(from.msg_data());
    }
    if (from.has_hash_ident()) {
      mutable_hash_ident()->::NFMsg::Ident::MergeFrom(from.hash_ident());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBase::CopyFrom(const MsgBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_player_id()) {
    if (!this->player_id().IsInitialized()) return false;
  }
  for (int i = 0; i < player_client_list_size(); i++) {
    if (!this->player_client_list(i).IsInitialized()) return false;
  }
  if (has_hash_ident()) {
    if (!this->hash_ident().IsInitialized()) return false;
  }
  return true;
}

void MsgBase::Swap(MsgBase* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(msg_data_, other->msg_data_);
    player_client_list_.Swap(&other->player_client_list_);
    std::swap(hash_ident_, other->hash_ident_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBase_descriptor_;
  metadata.reflection = MsgBase_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqCommand_EGameCommandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCommand_EGameCommandType_descriptor_;
}
bool ReqCommand_EGameCommandType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqCommand_EGameCommandType ReqCommand::EGCT_MODIY_PROPERTY;
const ReqCommand_EGameCommandType ReqCommand::EGCT_MODIY_ITEM;
const ReqCommand_EGameCommandType ReqCommand::EGCT_CREATE_OBJECT;
const ReqCommand_EGameCommandType ReqCommand::EGCT_ADD_ROLE_EXP;
const ReqCommand_EGameCommandType ReqCommand::EGameCommandType_MIN;
const ReqCommand_EGameCommandType ReqCommand::EGameCommandType_MAX;
const int ReqCommand::EGameCommandType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReqCommand::kControlIdFieldNumber;
const int ReqCommand::kCommandIdFieldNumber;
const int ReqCommand::kCommandStrValueFieldNumber;
const int ReqCommand::kCommandValueIntFieldNumber;
const int ReqCommand::kCommandValueFloatFieldNumber;
const int ReqCommand::kCommandValueStrFieldNumber;
const int ReqCommand::kCommandValueObjectFieldNumber;
const int ReqCommand::kRowFieldNumber;
const int ReqCommand::kColFieldNumber;
#endif  // !_MSC_VER

ReqCommand::ReqCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqCommand::InitAsDefaultInstance() {
  control_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  command_value_object_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqCommand::ReqCommand(const ReqCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqCommand::SharedCtor() {
  _cached_size_ = 0;
  control_id_ = NULL;
  command_id_ = 0;
  command_str_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  command_value_int_ = GOOGLE_LONGLONG(0);
  command_value_float_ = 0;
  command_value_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  command_value_object_ = NULL;
  row_ = 0;
  col_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCommand::~ReqCommand() {
  SharedDtor();
}

void ReqCommand::SharedDtor() {
  if (command_str_value_ != &::google::protobuf::internal::kEmptyString) {
    delete command_str_value_;
  }
  if (command_value_str_ != &::google::protobuf::internal::kEmptyString) {
    delete command_value_str_;
  }
  if (this != default_instance_) {
    delete control_id_;
    delete command_value_object_;
  }
}

void ReqCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCommand_descriptor_;
}

const ReqCommand& ReqCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgBase_2eproto();
  return *default_instance_;
}

ReqCommand* ReqCommand::default_instance_ = NULL;

ReqCommand* ReqCommand::New() const {
  return new ReqCommand;
}

void ReqCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_control_id()) {
      if (control_id_ != NULL) control_id_->::NFMsg::Ident::Clear();
    }
    command_id_ = 0;
    if (has_command_str_value()) {
      if (command_str_value_ != &::google::protobuf::internal::kEmptyString) {
        command_str_value_->clear();
      }
    }
    command_value_int_ = GOOGLE_LONGLONG(0);
    command_value_float_ = 0;
    if (has_command_value_str()) {
      if (command_value_str_ != &::google::protobuf::internal::kEmptyString) {
        command_value_str_->clear();
      }
    }
    if (has_command_value_object()) {
      if (command_value_object_ != NULL) command_value_object_->::NFMsg::Ident::Clear();
    }
    row_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    col_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident control_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_control_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_command_id;
        break;
      }

      // required .NFMsg.ReqCommand.EGameCommandType command_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_command_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::ReqCommand_EGameCommandType_IsValid(value)) {
            set_command_id(static_cast< ::NFMsg::ReqCommand_EGameCommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_command_str_value;
        break;
      }

      // optional bytes command_str_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command_str_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_command_str_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_command_value_int;
        break;
      }

      // optional int64 command_value_int = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_command_value_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &command_value_int_)));
          set_has_command_value_int();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_command_value_float;
        break;
      }

      // optional double command_value_float = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_command_value_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &command_value_float_)));
          set_has_command_value_float();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_command_value_str;
        break;
      }

      // optional bytes command_value_str = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command_value_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_command_value_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_command_value_object;
        break;
      }

      // optional .NFMsg.Ident command_value_object = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command_value_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command_value_object()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_row;
        break;
      }

      // optional int32 row = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_col;
        break;
      }

      // optional int32 col = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
          set_has_col();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident control_id = 1;
  if (has_control_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->control_id(), output);
  }

  // required .NFMsg.ReqCommand.EGameCommandType command_id = 2;
  if (has_command_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->command_id(), output);
  }

  // optional bytes command_str_value = 3;
  if (has_command_str_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->command_str_value(), output);
  }

  // optional int64 command_value_int = 4;
  if (has_command_value_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->command_value_int(), output);
  }

  // optional double command_value_float = 5;
  if (has_command_value_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->command_value_float(), output);
  }

  // optional bytes command_value_str = 6;
  if (has_command_value_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->command_value_str(), output);
  }

  // optional .NFMsg.Ident command_value_object = 7;
  if (has_command_value_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->command_value_object(), output);
  }

  // optional int32 row = 8;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->row(), output);
  }

  // optional int32 col = 9;
  if (has_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->col(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident control_id = 1;
  if (has_control_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->control_id(), target);
  }

  // required .NFMsg.ReqCommand.EGameCommandType command_id = 2;
  if (has_command_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->command_id(), target);
  }

  // optional bytes command_str_value = 3;
  if (has_command_str_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->command_str_value(), target);
  }

  // optional int64 command_value_int = 4;
  if (has_command_value_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->command_value_int(), target);
  }

  // optional double command_value_float = 5;
  if (has_command_value_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->command_value_float(), target);
  }

  // optional bytes command_value_str = 6;
  if (has_command_value_str()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->command_value_str(), target);
  }

  // optional .NFMsg.Ident command_value_object = 7;
  if (has_command_value_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->command_value_object(), target);
  }

  // optional int32 row = 8;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->row(), target);
  }

  // optional int32 col = 9;
  if (has_col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->col(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident control_id = 1;
    if (has_control_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_id());
    }

    // required .NFMsg.ReqCommand.EGameCommandType command_id = 2;
    if (has_command_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command_id());
    }

    // optional bytes command_str_value = 3;
    if (has_command_str_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->command_str_value());
    }

    // optional int64 command_value_int = 4;
    if (has_command_value_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->command_value_int());
    }

    // optional double command_value_float = 5;
    if (has_command_value_float()) {
      total_size += 1 + 8;
    }

    // optional bytes command_value_str = 6;
    if (has_command_value_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->command_value_str());
    }

    // optional .NFMsg.Ident command_value_object = 7;
    if (has_command_value_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command_value_object());
    }

    // optional int32 row = 8;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 col = 9;
    if (has_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->col());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCommand::MergeFrom(const ReqCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_control_id()) {
      mutable_control_id()->::NFMsg::Ident::MergeFrom(from.control_id());
    }
    if (from.has_command_id()) {
      set_command_id(from.command_id());
    }
    if (from.has_command_str_value()) {
      set_command_str_value(from.command_str_value());
    }
    if (from.has_command_value_int()) {
      set_command_value_int(from.command_value_int());
    }
    if (from.has_command_value_float()) {
      set_command_value_float(from.command_value_float());
    }
    if (from.has_command_value_str()) {
      set_command_value_str(from.command_value_str());
    }
    if (from.has_command_value_object()) {
      mutable_command_value_object()->::NFMsg::Ident::MergeFrom(from.command_value_object());
    }
    if (from.has_row()) {
      set_row(from.row());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_col()) {
      set_col(from.col());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCommand::CopyFrom(const ReqCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_control_id()) {
    if (!this->control_id().IsInitialized()) return false;
  }
  if (has_command_value_object()) {
    if (!this->command_value_object().IsInitialized()) return false;
  }
  return true;
}

void ReqCommand::Swap(ReqCommand* other) {
  if (other != this) {
    std::swap(control_id_, other->control_id_);
    std::swap(command_id_, other->command_id_);
    std::swap(command_str_value_, other->command_str_value_);
    std::swap(command_value_int_, other->command_value_int_);
    std::swap(command_value_float_, other->command_value_float_);
    std::swap(command_value_str_, other->command_value_str_);
    std::swap(command_value_object_, other->command_value_object_);
    std::swap(row_, other->row_);
    std::swap(col_, other->col_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCommand_descriptor_;
  metadata.reflection = ReqCommand_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

// @@protoc_insertion_point(global_scope)
