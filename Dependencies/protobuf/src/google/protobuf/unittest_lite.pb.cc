// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/unittest_lite.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/protobuf/unittest_lite.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace protobuf_unittest {

void protobuf_ShutdownFile_google_2fprotobuf_2funittest_5flite_2eproto() {
  delete TestAllTypesLite::default_instance_;
  delete TestAllTypesLite::_default_default_string_;
  delete TestAllTypesLite::_default_default_bytes_;
  delete TestAllTypesLite::_default_default_string_piece_;
  delete TestAllTypesLite::_default_default_cord_;
  delete TestAllTypesLite_NestedMessage::default_instance_;
  delete TestAllTypesLite_OptionalGroup::default_instance_;
  delete TestAllTypesLite_RepeatedGroup::default_instance_;
  delete ForeignMessageLite::default_instance_;
  delete TestPackedTypesLite::default_instance_;
  delete TestAllExtensionsLite::default_instance_;
  delete OptionalGroup_extension_lite::default_instance_;
  delete RepeatedGroup_extension_lite::default_instance_;
  delete TestPackedExtensionsLite::default_instance_;
  delete TestNestedExtensionLite::default_instance_;
  delete TestDeprecatedLite::default_instance_;
  delete TestParsingMergeLite::default_instance_;
  delete TestParsingMergeLite_RepeatedFieldsGenerator::default_instance_;
  delete TestParsingMergeLite_RepeatedFieldsGenerator_Group1::default_instance_;
  delete TestParsingMergeLite_RepeatedFieldsGenerator_Group2::default_instance_;
  delete TestParsingMergeLite_OptionalGroup::default_instance_;
  delete TestParsingMergeLite_RepeatedGroup::default_instance_;
}

void protobuf_AddDesc_google_2fprotobuf_2funittest_5flite_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_unittest_import::protobuf_AddDesc_google_2fprotobuf_2funittest_5fimport_5flite_2eproto();
  TestAllTypesLite::_default_default_string_ =
      new ::std::string("hello", 5);
  TestAllTypesLite::_default_default_bytes_ =
      new ::std::string("world", 5);
  TestAllTypesLite::_default_default_string_piece_ =
      new ::std::string("abc", 3);
  TestAllTypesLite::_default_default_cord_ =
      new ::std::string("123", 3);
  TestAllTypesLite::default_instance_ = new TestAllTypesLite();
  TestAllTypesLite_NestedMessage::default_instance_ = new TestAllTypesLite_NestedMessage();
  TestAllTypesLite_OptionalGroup::default_instance_ = new TestAllTypesLite_OptionalGroup();
  TestAllTypesLite_RepeatedGroup::default_instance_ = new TestAllTypesLite_RepeatedGroup();
  ForeignMessageLite::default_instance_ = new ForeignMessageLite();
  TestPackedTypesLite::default_instance_ = new TestPackedTypesLite();
  TestAllExtensionsLite::default_instance_ = new TestAllExtensionsLite();
  OptionalGroup_extension_lite::default_instance_ = new OptionalGroup_extension_lite();
  RepeatedGroup_extension_lite::default_instance_ = new RepeatedGroup_extension_lite();
  TestPackedExtensionsLite::default_instance_ = new TestPackedExtensionsLite();
  TestNestedExtensionLite::default_instance_ = new TestNestedExtensionLite();
  TestDeprecatedLite::default_instance_ = new TestDeprecatedLite();
  TestParsingMergeLite::default_instance_ = new TestParsingMergeLite();
  TestParsingMergeLite_RepeatedFieldsGenerator::default_instance_ = new TestParsingMergeLite_RepeatedFieldsGenerator();
  TestParsingMergeLite_RepeatedFieldsGenerator_Group1::default_instance_ = new TestParsingMergeLite_RepeatedFieldsGenerator_Group1();
  TestParsingMergeLite_RepeatedFieldsGenerator_Group2::default_instance_ = new TestParsingMergeLite_RepeatedFieldsGenerator_Group2();
  TestParsingMergeLite_OptionalGroup::default_instance_ = new TestParsingMergeLite_OptionalGroup();
  TestParsingMergeLite_RepeatedGroup::default_instance_ = new TestParsingMergeLite_RepeatedGroup();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    1, 5, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    2, 3, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    3, 13, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    4, 4, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    5, 17, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    6, 18, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    7, 7, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    8, 6, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    9, 15, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    10, 16, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    11, 2, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    12, 1, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    13, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    14, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    15, 12, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    16, 10, false, false,
    &::protobuf_unittest::OptionalGroup_extension_lite::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    18, 11, false, false,
    &::protobuf_unittest::TestAllTypesLite_NestedMessage::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    19, 11, false, false,
    &::protobuf_unittest::ForeignMessageLite::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    20, 11, false, false,
    &::protobuf_unittest_import::ImportMessageLite::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterEnumExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    21, 14, false, false,
    &::protobuf_unittest::TestAllTypesLite_NestedEnum_IsValid);
  ::google::protobuf::internal::ExtensionSet::RegisterEnumExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    22, 14, false, false,
    &::protobuf_unittest::ForeignEnumLite_IsValid);
  ::google::protobuf::internal::ExtensionSet::RegisterEnumExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    23, 14, false, false,
    &::protobuf_unittest_import::ImportEnumLite_IsValid);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    24, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    25, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    26, 11, false, false,
    &::protobuf_unittest_import::PublicImportMessageLite::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    27, 11, false, false,
    &::protobuf_unittest::TestAllTypesLite_NestedMessage::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    31, 5, true, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    32, 3, true, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    33, 13, true, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    34, 4, true, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    35, 17, true, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    36, 18, true, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    37, 7, true, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    38, 6, true, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    39, 15, true, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    40, 16, true, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    41, 2, true, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    42, 1, true, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    43, 8, true, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    44, 9, true, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    45, 12, true, false);
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    46, 10, true, false,
    &::protobuf_unittest::RepeatedGroup_extension_lite::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    48, 11, true, false,
    &::protobuf_unittest::TestAllTypesLite_NestedMessage::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    49, 11, true, false,
    &::protobuf_unittest::ForeignMessageLite::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    50, 11, true, false,
    &::protobuf_unittest_import::ImportMessageLite::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterEnumExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    51, 14, true, false,
    &::protobuf_unittest::TestAllTypesLite_NestedEnum_IsValid);
  ::google::protobuf::internal::ExtensionSet::RegisterEnumExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    52, 14, true, false,
    &::protobuf_unittest::ForeignEnumLite_IsValid);
  ::google::protobuf::internal::ExtensionSet::RegisterEnumExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    53, 14, true, false,
    &::protobuf_unittest_import::ImportEnumLite_IsValid);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    54, 9, true, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    55, 9, true, false);
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    57, 11, true, false,
    &::protobuf_unittest::TestAllTypesLite_NestedMessage::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    61, 5, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    62, 3, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    63, 13, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    64, 4, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    65, 17, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    66, 18, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    67, 7, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    68, 6, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    69, 15, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    70, 16, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    71, 2, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    72, 1, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    73, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    74, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    75, 12, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterEnumExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    81, 14, false, false,
    &::protobuf_unittest::TestAllTypesLite_NestedEnum_IsValid);
  ::google::protobuf::internal::ExtensionSet::RegisterEnumExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    82, 14, false, false,
    &::protobuf_unittest::ForeignEnumLite_IsValid);
  ::google::protobuf::internal::ExtensionSet::RegisterEnumExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    83, 14, false, false,
    &::protobuf_unittest_import::ImportEnumLite_IsValid);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    84, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    85, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestPackedExtensionsLite::default_instance(),
    90, 5, true, true);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestPackedExtensionsLite::default_instance(),
    91, 3, true, true);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestPackedExtensionsLite::default_instance(),
    92, 13, true, true);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestPackedExtensionsLite::default_instance(),
    93, 4, true, true);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestPackedExtensionsLite::default_instance(),
    94, 17, true, true);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestPackedExtensionsLite::default_instance(),
    95, 18, true, true);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestPackedExtensionsLite::default_instance(),
    96, 7, true, true);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestPackedExtensionsLite::default_instance(),
    97, 6, true, true);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestPackedExtensionsLite::default_instance(),
    98, 15, true, true);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestPackedExtensionsLite::default_instance(),
    99, 16, true, true);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestPackedExtensionsLite::default_instance(),
    100, 2, true, true);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestPackedExtensionsLite::default_instance(),
    101, 1, true, true);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestPackedExtensionsLite::default_instance(),
    102, 8, true, true);
  ::google::protobuf::internal::ExtensionSet::RegisterEnumExtension(
    &::protobuf_unittest::TestPackedExtensionsLite::default_instance(),
    103, 14, true, true,
    &::protobuf_unittest::ForeignEnumLite_IsValid);
  TestAllTypesLite::default_instance_->InitAsDefaultInstance();
  TestAllTypesLite_NestedMessage::default_instance_->InitAsDefaultInstance();
  TestAllTypesLite_OptionalGroup::default_instance_->InitAsDefaultInstance();
  TestAllTypesLite_RepeatedGroup::default_instance_->InitAsDefaultInstance();
  ForeignMessageLite::default_instance_->InitAsDefaultInstance();
  TestPackedTypesLite::default_instance_->InitAsDefaultInstance();
  TestAllExtensionsLite::default_instance_->InitAsDefaultInstance();
  OptionalGroup_extension_lite::default_instance_->InitAsDefaultInstance();
  RepeatedGroup_extension_lite::default_instance_->InitAsDefaultInstance();
  TestPackedExtensionsLite::default_instance_->InitAsDefaultInstance();
  TestNestedExtensionLite::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestAllExtensionsLite::default_instance(),
    12345, 5, false, false);
  TestDeprecatedLite::default_instance_->InitAsDefaultInstance();
  TestParsingMergeLite::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::protobuf_unittest::TestParsingMergeLite::default_instance(),
    1000, 11, false, false,
    &::protobuf_unittest::TestAllTypesLite::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::protobuf_unittest::TestParsingMergeLite::default_instance(),
    1001, 11, true, false,
    &::protobuf_unittest::TestAllTypesLite::default_instance());
  TestParsingMergeLite_RepeatedFieldsGenerator::default_instance_->InitAsDefaultInstance();
  TestParsingMergeLite_RepeatedFieldsGenerator_Group1::default_instance_->InitAsDefaultInstance();
  TestParsingMergeLite_RepeatedFieldsGenerator_Group2::default_instance_->InitAsDefaultInstance();
  TestParsingMergeLite_OptionalGroup::default_instance_->InitAsDefaultInstance();
  TestParsingMergeLite_RepeatedGroup::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fprotobuf_2funittest_5flite_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fprotobuf_2funittest_5flite_2eproto {
  StaticDescriptorInitializer_google_2fprotobuf_2funittest_5flite_2eproto() {
    protobuf_AddDesc_google_2fprotobuf_2funittest_5flite_2eproto();
  }
} static_descriptor_initializer_google_2fprotobuf_2funittest_5flite_2eproto_;
bool ForeignEnumLite_IsValid(int value) {
  switch(value) {
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

bool TestAllTypesLite_NestedEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TestAllTypesLite_NestedEnum TestAllTypesLite::FOO;
const TestAllTypesLite_NestedEnum TestAllTypesLite::BAR;
const TestAllTypesLite_NestedEnum TestAllTypesLite::BAZ;
const TestAllTypesLite_NestedEnum TestAllTypesLite::NestedEnum_MIN;
const TestAllTypesLite_NestedEnum TestAllTypesLite::NestedEnum_MAX;
const int TestAllTypesLite::NestedEnum_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TestAllTypesLite_NestedMessage::kBbFieldNumber;
#endif  // !_MSC_VER

TestAllTypesLite_NestedMessage::TestAllTypesLite_NestedMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TestAllTypesLite_NestedMessage::InitAsDefaultInstance() {
}

TestAllTypesLite_NestedMessage::TestAllTypesLite_NestedMessage(const TestAllTypesLite_NestedMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TestAllTypesLite_NestedMessage::SharedCtor() {
  _cached_size_ = 0;
  bb_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestAllTypesLite_NestedMessage::~TestAllTypesLite_NestedMessage() {
  SharedDtor();
}

void TestAllTypesLite_NestedMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestAllTypesLite_NestedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestAllTypesLite_NestedMessage& TestAllTypesLite_NestedMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2funittest_5flite_2eproto();
  return *default_instance_;
}

TestAllTypesLite_NestedMessage* TestAllTypesLite_NestedMessage::default_instance_ = NULL;

TestAllTypesLite_NestedMessage* TestAllTypesLite_NestedMessage::New() const {
  return new TestAllTypesLite_NestedMessage;
}

void TestAllTypesLite_NestedMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bb_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TestAllTypesLite_NestedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bb = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bb_)));
          set_has_bb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestAllTypesLite_NestedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bb = 1;
  if (has_bb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bb(), output);
  }

}

int TestAllTypesLite_NestedMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bb = 1;
    if (has_bb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bb());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestAllTypesLite_NestedMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestAllTypesLite_NestedMessage*>(&from));
}

void TestAllTypesLite_NestedMessage::MergeFrom(const TestAllTypesLite_NestedMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bb()) {
      set_bb(from.bb());
    }
  }
}

void TestAllTypesLite_NestedMessage::CopyFrom(const TestAllTypesLite_NestedMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypesLite_NestedMessage::IsInitialized() const {

  return true;
}

void TestAllTypesLite_NestedMessage::Swap(TestAllTypesLite_NestedMessage* other) {
  if (other != this) {
    std::swap(bb_, other->bb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TestAllTypesLite_NestedMessage::GetTypeName() const {
  return "protobuf_unittest.TestAllTypesLite.NestedMessage";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TestAllTypesLite_OptionalGroup::kAFieldNumber;
#endif  // !_MSC_VER

TestAllTypesLite_OptionalGroup::TestAllTypesLite_OptionalGroup()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TestAllTypesLite_OptionalGroup::InitAsDefaultInstance() {
}

TestAllTypesLite_OptionalGroup::TestAllTypesLite_OptionalGroup(const TestAllTypesLite_OptionalGroup& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TestAllTypesLite_OptionalGroup::SharedCtor() {
  _cached_size_ = 0;
  a_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestAllTypesLite_OptionalGroup::~TestAllTypesLite_OptionalGroup() {
  SharedDtor();
}

void TestAllTypesLite_OptionalGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestAllTypesLite_OptionalGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestAllTypesLite_OptionalGroup& TestAllTypesLite_OptionalGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2funittest_5flite_2eproto();
  return *default_instance_;
}

TestAllTypesLite_OptionalGroup* TestAllTypesLite_OptionalGroup::default_instance_ = NULL;

TestAllTypesLite_OptionalGroup* TestAllTypesLite_OptionalGroup::New() const {
  return new TestAllTypesLite_OptionalGroup;
}

void TestAllTypesLite_OptionalGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    a_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TestAllTypesLite_OptionalGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 a = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestAllTypesLite_OptionalGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 a = 17;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->a(), output);
  }

}

int TestAllTypesLite_OptionalGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 a = 17;
    if (has_a()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestAllTypesLite_OptionalGroup::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestAllTypesLite_OptionalGroup*>(&from));
}

void TestAllTypesLite_OptionalGroup::MergeFrom(const TestAllTypesLite_OptionalGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_a()) {
      set_a(from.a());
    }
  }
}

void TestAllTypesLite_OptionalGroup::CopyFrom(const TestAllTypesLite_OptionalGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypesLite_OptionalGroup::IsInitialized() const {

  return true;
}

void TestAllTypesLite_OptionalGroup::Swap(TestAllTypesLite_OptionalGroup* other) {
  if (other != this) {
    std::swap(a_, other->a_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TestAllTypesLite_OptionalGroup::GetTypeName() const {
  return "protobuf_unittest.TestAllTypesLite.OptionalGroup";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TestAllTypesLite_RepeatedGroup::kAFieldNumber;
#endif  // !_MSC_VER

TestAllTypesLite_RepeatedGroup::TestAllTypesLite_RepeatedGroup()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TestAllTypesLite_RepeatedGroup::InitAsDefaultInstance() {
}

TestAllTypesLite_RepeatedGroup::TestAllTypesLite_RepeatedGroup(const TestAllTypesLite_RepeatedGroup& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TestAllTypesLite_RepeatedGroup::SharedCtor() {
  _cached_size_ = 0;
  a_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestAllTypesLite_RepeatedGroup::~TestAllTypesLite_RepeatedGroup() {
  SharedDtor();
}

void TestAllTypesLite_RepeatedGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestAllTypesLite_RepeatedGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestAllTypesLite_RepeatedGroup& TestAllTypesLite_RepeatedGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2funittest_5flite_2eproto();
  return *default_instance_;
}

TestAllTypesLite_RepeatedGroup* TestAllTypesLite_RepeatedGroup::default_instance_ = NULL;

TestAllTypesLite_RepeatedGroup* TestAllTypesLite_RepeatedGroup::New() const {
  return new TestAllTypesLite_RepeatedGroup;
}

void TestAllTypesLite_RepeatedGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    a_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TestAllTypesLite_RepeatedGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 a = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestAllTypesLite_RepeatedGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 a = 47;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->a(), output);
  }

}

int TestAllTypesLite_RepeatedGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 a = 47;
    if (has_a()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestAllTypesLite_RepeatedGroup::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestAllTypesLite_RepeatedGroup*>(&from));
}

void TestAllTypesLite_RepeatedGroup::MergeFrom(const TestAllTypesLite_RepeatedGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_a()) {
      set_a(from.a());
    }
  }
}

void TestAllTypesLite_RepeatedGroup::CopyFrom(const TestAllTypesLite_RepeatedGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypesLite_RepeatedGroup::IsInitialized() const {

  return true;
}

void TestAllTypesLite_RepeatedGroup::Swap(TestAllTypesLite_RepeatedGroup* other) {
  if (other != this) {
    std::swap(a_, other->a_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TestAllTypesLite_RepeatedGroup::GetTypeName() const {
  return "protobuf_unittest.TestAllTypesLite.RepeatedGroup";
}


// -------------------------------------------------------------------

::std::string* TestAllTypesLite::_default_default_string_ = NULL;
::std::string* TestAllTypesLite::_default_default_bytes_ = NULL;
::std::string* TestAllTypesLite::_default_default_string_piece_ = NULL;
::std::string* TestAllTypesLite::_default_default_cord_ = NULL;
#ifndef _MSC_VER
const int TestAllTypesLite::kOptionalInt32FieldNumber;
const int TestAllTypesLite::kOptionalInt64FieldNumber;
const int TestAllTypesLite::kOptionalUint32FieldNumber;
const int TestAllTypesLite::kOptionalUint64FieldNumber;
const int TestAllTypesLite::kOptionalSint32FieldNumber;
const int TestAllTypesLite::kOptionalSint64FieldNumber;
const int TestAllTypesLite::kOptionalFixed32FieldNumber;
const int TestAllTypesLite::kOptionalFixed64FieldNumber;
const int TestAllTypesLite::kOptionalSfixed32FieldNumber;
const int TestAllTypesLite::kOptionalSfixed64FieldNumber;
const int TestAllTypesLite::kOptionalFloatFieldNumber;
const int TestAllTypesLite::kOptionalDoubleFieldNumber;
const int TestAllTypesLite::kOptionalBoolFieldNumber;
const int TestAllTypesLite::kOptionalStringFieldNumber;
const int TestAllTypesLite::kOptionalBytesFieldNumber;
const int TestAllTypesLite::kOptionalgroupFieldNumber;
const int TestAllTypesLite::kOptionalNestedMessageFieldNumber;
const int TestAllTypesLite::kOptionalForeignMessageFieldNumber;
const int TestAllTypesLite::kOptionalImportMessageFieldNumber;
const int TestAllTypesLite::kOptionalNestedEnumFieldNumber;
const int TestAllTypesLite::kOptionalForeignEnumFieldNumber;
const int TestAllTypesLite::kOptionalImportEnumFieldNumber;
const int TestAllTypesLite::kOptionalStringPieceFieldNumber;
const int TestAllTypesLite::kOptionalCordFieldNumber;
const int TestAllTypesLite::kOptionalPublicImportMessageFieldNumber;
const int TestAllTypesLite::kOptionalLazyMessageFieldNumber;
const int TestAllTypesLite::kRepeatedInt32FieldNumber;
const int TestAllTypesLite::kRepeatedInt64FieldNumber;
const int TestAllTypesLite::kRepeatedUint32FieldNumber;
const int TestAllTypesLite::kRepeatedUint64FieldNumber;
const int TestAllTypesLite::kRepeatedSint32FieldNumber;
const int TestAllTypesLite::kRepeatedSint64FieldNumber;
const int TestAllTypesLite::kRepeatedFixed32FieldNumber;
const int TestAllTypesLite::kRepeatedFixed64FieldNumber;
const int TestAllTypesLite::kRepeatedSfixed32FieldNumber;
const int TestAllTypesLite::kRepeatedSfixed64FieldNumber;
const int TestAllTypesLite::kRepeatedFloatFieldNumber;
const int TestAllTypesLite::kRepeatedDoubleFieldNumber;
const int TestAllTypesLite::kRepeatedBoolFieldNumber;
const int TestAllTypesLite::kRepeatedStringFieldNumber;
const int TestAllTypesLite::kRepeatedBytesFieldNumber;
const int TestAllTypesLite::kRepeatedgroupFieldNumber;
const int TestAllTypesLite::kRepeatedNestedMessageFieldNumber;
const int TestAllTypesLite::kRepeatedForeignMessageFieldNumber;
const int TestAllTypesLite::kRepeatedImportMessageFieldNumber;
const int TestAllTypesLite::kRepeatedNestedEnumFieldNumber;
const int TestAllTypesLite::kRepeatedForeignEnumFieldNumber;
const int TestAllTypesLite::kRepeatedImportEnumFieldNumber;
const int TestAllTypesLite::kRepeatedStringPieceFieldNumber;
const int TestAllTypesLite::kRepeatedCordFieldNumber;
const int TestAllTypesLite::kRepeatedLazyMessageFieldNumber;
const int TestAllTypesLite::kDefaultInt32FieldNumber;
const int TestAllTypesLite::kDefaultInt64FieldNumber;
const int TestAllTypesLite::kDefaultUint32FieldNumber;
const int TestAllTypesLite::kDefaultUint64FieldNumber;
const int TestAllTypesLite::kDefaultSint32FieldNumber;
const int TestAllTypesLite::kDefaultSint64FieldNumber;
const int TestAllTypesLite::kDefaultFixed32FieldNumber;
const int TestAllTypesLite::kDefaultFixed64FieldNumber;
const int TestAllTypesLite::kDefaultSfixed32FieldNumber;
const int TestAllTypesLite::kDefaultSfixed64FieldNumber;
const int TestAllTypesLite::kDefaultFloatFieldNumber;
const int TestAllTypesLite::kDefaultDoubleFieldNumber;
const int TestAllTypesLite::kDefaultBoolFieldNumber;
const int TestAllTypesLite::kDefaultStringFieldNumber;
const int TestAllTypesLite::kDefaultBytesFieldNumber;
const int TestAllTypesLite::kDefaultNestedEnumFieldNumber;
const int TestAllTypesLite::kDefaultForeignEnumFieldNumber;
const int TestAllTypesLite::kDefaultImportEnumFieldNumber;
const int TestAllTypesLite::kDefaultStringPieceFieldNumber;
const int TestAllTypesLite::kDefaultCordFieldNumber;
#endif  // !_MSC_VER

TestAllTypesLite::TestAllTypesLite()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TestAllTypesLite::InitAsDefaultInstance() {
  optionalgroup_ = const_cast< ::protobuf_unittest::TestAllTypesLite_OptionalGroup*>(&::protobuf_unittest::TestAllTypesLite_OptionalGroup::default_instance());
  optional_nested_message_ = const_cast< ::protobuf_unittest::TestAllTypesLite_NestedMessage*>(&::protobuf_unittest::TestAllTypesLite_NestedMessage::default_instance());
  optional_foreign_message_ = const_cast< ::protobuf_unittest::ForeignMessageLite*>(&::protobuf_unittest::ForeignMessageLite::default_instance());
  optional_import_message_ = const_cast< ::protobuf_unittest_import::ImportMessageLite*>(&::protobuf_unittest_import::ImportMessageLite::default_instance());
  optional_public_import_message_ = const_cast< ::protobuf_unittest_import::PublicImportMessageLite*>(&::protobuf_unittest_import::PublicImportMessageLite::default_instance());
  optional_lazy_message_ = const_cast< ::protobuf_unittest::TestAllTypesLite_NestedMessage*>(&::protobuf_unittest::TestAllTypesLite_NestedMessage::default_instance());
}

TestAllTypesLite::TestAllTypesLite(const TestAllTypesLite& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TestAllTypesLite::SharedCtor() {
  _cached_size_ = 0;
  optional_int32_ = 0;
  optional_int64_ = GOOGLE_LONGLONG(0);
  optional_uint32_ = 0u;
  optional_uint64_ = GOOGLE_ULONGLONG(0);
  optional_sint32_ = 0;
  optional_sint64_ = GOOGLE_LONGLONG(0);
  optional_fixed32_ = 0u;
  optional_fixed64_ = GOOGLE_ULONGLONG(0);
  optional_sfixed32_ = 0;
  optional_sfixed64_ = GOOGLE_LONGLONG(0);
  optional_float_ = 0;
  optional_double_ = 0;
  optional_bool_ = false;
  optional_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  optional_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  optionalgroup_ = NULL;
  optional_nested_message_ = NULL;
  optional_foreign_message_ = NULL;
  optional_import_message_ = NULL;
  optional_nested_enum_ = 1;
  optional_foreign_enum_ = 4;
  optional_import_enum_ = 7;
  optional_string_piece_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  optional_cord_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  optional_public_import_message_ = NULL;
  optional_lazy_message_ = NULL;
  default_int32_ = 41;
  default_int64_ = GOOGLE_LONGLONG(42);
  default_uint32_ = 43u;
  default_uint64_ = GOOGLE_ULONGLONG(44);
  default_sint32_ = -45;
  default_sint64_ = GOOGLE_LONGLONG(46);
  default_fixed32_ = 47u;
  default_fixed64_ = GOOGLE_ULONGLONG(48);
  default_sfixed32_ = 49;
  default_sfixed64_ = GOOGLE_LONGLONG(-50);
  default_float_ = 51.5f;
  default_double_ = 52000;
  default_bool_ = true;
  default_string_ = const_cast< ::std::string*>(_default_default_string_);
  default_bytes_ = const_cast< ::std::string*>(_default_default_bytes_);
  default_nested_enum_ = 2;
  default_foreign_enum_ = 5;
  default_import_enum_ = 8;
  default_string_piece_ = const_cast< ::std::string*>(_default_default_string_piece_);
  default_cord_ = const_cast< ::std::string*>(_default_default_cord_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestAllTypesLite::~TestAllTypesLite() {
  SharedDtor();
}

void TestAllTypesLite::SharedDtor() {
  if (optional_string_ != &::google::protobuf::internal::kEmptyString) {
    delete optional_string_;
  }
  if (optional_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete optional_bytes_;
  }
  if (optional_string_piece_ != &::google::protobuf::internal::kEmptyString) {
    delete optional_string_piece_;
  }
  if (optional_cord_ != &::google::protobuf::internal::kEmptyString) {
    delete optional_cord_;
  }
  if (default_string_ != _default_default_string_) {
    delete default_string_;
  }
  if (default_bytes_ != _default_default_bytes_) {
    delete default_bytes_;
  }
  if (default_string_piece_ != _default_default_string_piece_) {
    delete default_string_piece_;
  }
  if (default_cord_ != _default_default_cord_) {
    delete default_cord_;
  }
  if (this != default_instance_) {
    delete optionalgroup_;
    delete optional_nested_message_;
    delete optional_foreign_message_;
    delete optional_import_message_;
    delete optional_public_import_message_;
    delete optional_lazy_message_;
  }
}

void TestAllTypesLite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestAllTypesLite& TestAllTypesLite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2funittest_5flite_2eproto();
  return *default_instance_;
}

TestAllTypesLite* TestAllTypesLite::default_instance_ = NULL;

TestAllTypesLite* TestAllTypesLite::New() const {
  return new TestAllTypesLite;
}

void TestAllTypesLite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    optional_int32_ = 0;
    optional_int64_ = GOOGLE_LONGLONG(0);
    optional_uint32_ = 0u;
    optional_uint64_ = GOOGLE_ULONGLONG(0);
    optional_sint32_ = 0;
    optional_sint64_ = GOOGLE_LONGLONG(0);
    optional_fixed32_ = 0u;
    optional_fixed64_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    optional_sfixed32_ = 0;
    optional_sfixed64_ = GOOGLE_LONGLONG(0);
    optional_float_ = 0;
    optional_double_ = 0;
    optional_bool_ = false;
    if (has_optional_string()) {
      if (optional_string_ != &::google::protobuf::internal::kEmptyString) {
        optional_string_->clear();
      }
    }
    if (has_optional_bytes()) {
      if (optional_bytes_ != &::google::protobuf::internal::kEmptyString) {
        optional_bytes_->clear();
      }
    }
    if (has_optionalgroup()) {
      if (optionalgroup_ != NULL) optionalgroup_->::protobuf_unittest::TestAllTypesLite_OptionalGroup::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_optional_nested_message()) {
      if (optional_nested_message_ != NULL) optional_nested_message_->::protobuf_unittest::TestAllTypesLite_NestedMessage::Clear();
    }
    if (has_optional_foreign_message()) {
      if (optional_foreign_message_ != NULL) optional_foreign_message_->::protobuf_unittest::ForeignMessageLite::Clear();
    }
    if (has_optional_import_message()) {
      if (optional_import_message_ != NULL) optional_import_message_->::protobuf_unittest_import::ImportMessageLite::Clear();
    }
    optional_nested_enum_ = 1;
    optional_foreign_enum_ = 4;
    optional_import_enum_ = 7;
    if (has_optional_string_piece()) {
      if (optional_string_piece_ != &::google::protobuf::internal::kEmptyString) {
        optional_string_piece_->clear();
      }
    }
    if (has_optional_cord()) {
      if (optional_cord_ != &::google::protobuf::internal::kEmptyString) {
        optional_cord_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_optional_public_import_message()) {
      if (optional_public_import_message_ != NULL) optional_public_import_message_->::protobuf_unittest_import::PublicImportMessageLite::Clear();
    }
    if (has_optional_lazy_message()) {
      if (optional_lazy_message_ != NULL) optional_lazy_message_->::protobuf_unittest::TestAllTypesLite_NestedMessage::Clear();
    }
  }
  if (_has_bits_[51 / 32] & (0xffu << (51 % 32))) {
    default_int32_ = 41;
    default_int64_ = GOOGLE_LONGLONG(42);
    default_uint32_ = 43u;
    default_uint64_ = GOOGLE_ULONGLONG(44);
    default_sint32_ = -45;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    default_sint64_ = GOOGLE_LONGLONG(46);
    default_fixed32_ = 47u;
    default_fixed64_ = GOOGLE_ULONGLONG(48);
    default_sfixed32_ = 49;
    default_sfixed64_ = GOOGLE_LONGLONG(-50);
    default_float_ = 51.5f;
    default_double_ = 52000;
    default_bool_ = true;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (has_default_string()) {
      if (default_string_ != _default_default_string_) {
        default_string_->assign(*_default_default_string_);
      }
    }
    if (has_default_bytes()) {
      if (default_bytes_ != _default_default_bytes_) {
        default_bytes_->assign(*_default_default_bytes_);
      }
    }
    default_nested_enum_ = 2;
    default_foreign_enum_ = 5;
    default_import_enum_ = 8;
    if (has_default_string_piece()) {
      if (default_string_piece_ != _default_default_string_piece_) {
        default_string_piece_->assign(*_default_default_string_piece_);
      }
    }
    if (has_default_cord()) {
      if (default_cord_ != _default_default_cord_) {
        default_cord_->assign(*_default_default_cord_);
      }
    }
  }
  repeated_int32_.Clear();
  repeated_int64_.Clear();
  repeated_uint32_.Clear();
  repeated_uint64_.Clear();
  repeated_sint32_.Clear();
  repeated_sint64_.Clear();
  repeated_fixed32_.Clear();
  repeated_fixed64_.Clear();
  repeated_sfixed32_.Clear();
  repeated_sfixed64_.Clear();
  repeated_float_.Clear();
  repeated_double_.Clear();
  repeated_bool_.Clear();
  repeated_string_.Clear();
  repeated_bytes_.Clear();
  repeatedgroup_.Clear();
  repeated_nested_message_.Clear();
  repeated_foreign_message_.Clear();
  repeated_import_message_.Clear();
  repeated_nested_enum_.Clear();
  repeated_foreign_enum_.Clear();
  repeated_import_enum_.Clear();
  repeated_string_piece_.Clear();
  repeated_cord_.Clear();
  repeated_lazy_message_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TestAllTypesLite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 optional_int32 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optional_int32_)));
          set_has_optional_int32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_optional_int64;
        break;
      }

      // optional int64 optional_int64 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_optional_int64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &optional_int64_)));
          set_has_optional_int64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_optional_uint32;
        break;
      }

      // optional uint32 optional_uint32 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_optional_uint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optional_uint32_)));
          set_has_optional_uint32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_optional_uint64;
        break;
      }

      // optional uint64 optional_uint64 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_optional_uint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &optional_uint64_)));
          set_has_optional_uint64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_optional_sint32;
        break;
      }

      // optional sint32 optional_sint32 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_optional_sint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &optional_sint32_)));
          set_has_optional_sint32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_optional_sint64;
        break;
      }

      // optional sint64 optional_sint64 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_optional_sint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &optional_sint64_)));
          set_has_optional_sint64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_optional_fixed32;
        break;
      }

      // optional fixed32 optional_fixed32 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_optional_fixed32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &optional_fixed32_)));
          set_has_optional_fixed32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_optional_fixed64;
        break;
      }

      // optional fixed64 optional_fixed64 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_optional_fixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &optional_fixed64_)));
          set_has_optional_fixed64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_optional_sfixed32;
        break;
      }

      // optional sfixed32 optional_sfixed32 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_optional_sfixed32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &optional_sfixed32_)));
          set_has_optional_sfixed32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_optional_sfixed64;
        break;
      }

      // optional sfixed64 optional_sfixed64 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_optional_sfixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &optional_sfixed64_)));
          set_has_optional_sfixed64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_optional_float;
        break;
      }

      // optional float optional_float = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_optional_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &optional_float_)));
          set_has_optional_float();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_optional_double;
        break;
      }

      // optional double optional_double = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_optional_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &optional_double_)));
          set_has_optional_double();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_optional_bool;
        break;
      }

      // optional bool optional_bool = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_optional_bool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optional_bool_)));
          set_has_optional_bool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_optional_string;
        break;
      }

      // optional string optional_string = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_optional_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_optional_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_optional_bytes;
        break;
      }

      // optional bytes optional_bytes = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_optional_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_optional_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(131)) goto parse_optionalgroup;
        break;
      }

      // optional group OptionalGroup = 16 {
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_optionalgroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                16, input, mutable_optionalgroup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_optional_nested_message;
        break;
      }

      // optional .protobuf_unittest.TestAllTypesLite.NestedMessage optional_nested_message = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_optional_nested_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optional_nested_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_optional_foreign_message;
        break;
      }

      // optional .protobuf_unittest.ForeignMessageLite optional_foreign_message = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_optional_foreign_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optional_foreign_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_optional_import_message;
        break;
      }

      // optional .protobuf_unittest_import.ImportMessageLite optional_import_message = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_optional_import_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optional_import_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_optional_nested_enum;
        break;
      }

      // optional .protobuf_unittest.TestAllTypesLite.NestedEnum optional_nested_enum = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_optional_nested_enum:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf_unittest::TestAllTypesLite_NestedEnum_IsValid(value)) {
            set_optional_nested_enum(static_cast< ::protobuf_unittest::TestAllTypesLite_NestedEnum >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_optional_foreign_enum;
        break;
      }

      // optional .protobuf_unittest.ForeignEnumLite optional_foreign_enum = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_optional_foreign_enum:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf_unittest::ForeignEnumLite_IsValid(value)) {
            set_optional_foreign_enum(static_cast< ::protobuf_unittest::ForeignEnumLite >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_optional_import_enum;
        break;
      }

      // optional .protobuf_unittest_import.ImportEnumLite optional_import_enum = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_optional_import_enum:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf_unittest_import::ImportEnumLite_IsValid(value)) {
            set_optional_import_enum(static_cast< ::protobuf_unittest_import::ImportEnumLite >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_optional_string_piece;
        break;
      }

      // optional string optional_string_piece = 24 [ctype = STRING_PIECE];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_optional_string_piece:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_optional_string_piece()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_optional_cord;
        break;
      }

      // optional string optional_cord = 25 [ctype = CORD];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_optional_cord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_optional_cord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_optional_public_import_message;
        break;
      }

      // optional .protobuf_unittest_import.PublicImportMessageLite optional_public_import_message = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_optional_public_import_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optional_public_import_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_optional_lazy_message;
        break;
      }

      // optional .protobuf_unittest.TestAllTypesLite.NestedMessage optional_lazy_message = 27 [lazy = true];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_optional_lazy_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optional_lazy_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_repeated_int32;
        break;
      }

      // repeated int32 repeated_int32 = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeated_int32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 248, input, this->mutable_repeated_int32())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_repeated_int32())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_repeated_int32;
        if (input->ExpectTag(256)) goto parse_repeated_int64;
        break;
      }

      // repeated int64 repeated_int64 = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeated_int64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 256, input, this->mutable_repeated_int64())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_repeated_int64())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_repeated_int64;
        if (input->ExpectTag(264)) goto parse_repeated_uint32;
        break;
      }

      // repeated uint32 repeated_uint32 = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeated_uint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 264, input, this->mutable_repeated_uint32())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_repeated_uint32())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_repeated_uint32;
        if (input->ExpectTag(272)) goto parse_repeated_uint64;
        break;
      }

      // repeated uint64 repeated_uint64 = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeated_uint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 272, input, this->mutable_repeated_uint64())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_repeated_uint64())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_repeated_uint64;
        if (input->ExpectTag(280)) goto parse_repeated_sint32;
        break;
      }

      // repeated sint32 repeated_sint32 = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeated_sint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 2, 280, input, this->mutable_repeated_sint32())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_repeated_sint32())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_repeated_sint32;
        if (input->ExpectTag(288)) goto parse_repeated_sint64;
        break;
      }

      // repeated sint64 repeated_sint64 = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeated_sint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 2, 288, input, this->mutable_repeated_sint64())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_repeated_sint64())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_repeated_sint64;
        if (input->ExpectTag(301)) goto parse_repeated_fixed32;
        break;
      }

      // repeated fixed32 repeated_fixed32 = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_repeated_fixed32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 2, 301, input, this->mutable_repeated_fixed32())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_repeated_fixed32())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(301)) goto parse_repeated_fixed32;
        if (input->ExpectTag(305)) goto parse_repeated_fixed64;
        break;
      }

      // repeated fixed64 repeated_fixed64 = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_repeated_fixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 2, 305, input, this->mutable_repeated_fixed64())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_repeated_fixed64())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(305)) goto parse_repeated_fixed64;
        if (input->ExpectTag(317)) goto parse_repeated_sfixed32;
        break;
      }

      // repeated sfixed32 repeated_sfixed32 = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_repeated_sfixed32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 2, 317, input, this->mutable_repeated_sfixed32())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, this->mutable_repeated_sfixed32())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(317)) goto parse_repeated_sfixed32;
        if (input->ExpectTag(321)) goto parse_repeated_sfixed64;
        break;
      }

      // repeated sfixed64 repeated_sfixed64 = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_repeated_sfixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 2, 321, input, this->mutable_repeated_sfixed64())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, this->mutable_repeated_sfixed64())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(321)) goto parse_repeated_sfixed64;
        if (input->ExpectTag(333)) goto parse_repeated_float;
        break;
      }

      // repeated float repeated_float = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_repeated_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 333, input, this->mutable_repeated_float())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_repeated_float())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(333)) goto parse_repeated_float;
        if (input->ExpectTag(337)) goto parse_repeated_double;
        break;
      }

      // repeated double repeated_double = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_repeated_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 337, input, this->mutable_repeated_double())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_repeated_double())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(337)) goto parse_repeated_double;
        if (input->ExpectTag(344)) goto parse_repeated_bool;
        break;
      }

      // repeated bool repeated_bool = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeated_bool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 344, input, this->mutable_repeated_bool())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_repeated_bool())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_repeated_bool;
        if (input->ExpectTag(354)) goto parse_repeated_string;
        break;
      }

      // repeated string repeated_string = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_repeated_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_repeated_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_repeated_string;
        if (input->ExpectTag(362)) goto parse_repeated_bytes;
        break;
      }

      // repeated bytes repeated_bytes = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_repeated_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_repeated_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_repeated_bytes;
        if (input->ExpectTag(371)) goto parse_repeatedgroup;
        break;
      }

      // repeated group RepeatedGroup = 46 {
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_repeatedgroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                46, input, add_repeatedgroup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(371)) goto parse_repeatedgroup;
        if (input->ExpectTag(386)) goto parse_repeated_nested_message;
        break;
      }

      // repeated .protobuf_unittest.TestAllTypesLite.NestedMessage repeated_nested_message = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_repeated_nested_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_repeated_nested_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(386)) goto parse_repeated_nested_message;
        if (input->ExpectTag(394)) goto parse_repeated_foreign_message;
        break;
      }

      // repeated .protobuf_unittest.ForeignMessageLite repeated_foreign_message = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_repeated_foreign_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_repeated_foreign_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse_repeated_foreign_message;
        if (input->ExpectTag(402)) goto parse_repeated_import_message;
        break;
      }

      // repeated .protobuf_unittest_import.ImportMessageLite repeated_import_message = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_repeated_import_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_repeated_import_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_repeated_import_message;
        if (input->ExpectTag(408)) goto parse_repeated_nested_enum;
        break;
      }

      // repeated .protobuf_unittest.TestAllTypesLite.NestedEnum repeated_nested_enum = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeated_nested_enum:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf_unittest::TestAllTypesLite_NestedEnum_IsValid(value)) {
            add_repeated_nested_enum(static_cast< ::protobuf_unittest::TestAllTypesLite_NestedEnum >(value));
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::protobuf_unittest::TestAllTypesLite_NestedEnum_IsValid,
                 this->mutable_repeated_nested_enum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_repeated_nested_enum;
        if (input->ExpectTag(416)) goto parse_repeated_foreign_enum;
        break;
      }

      // repeated .protobuf_unittest.ForeignEnumLite repeated_foreign_enum = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeated_foreign_enum:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf_unittest::ForeignEnumLite_IsValid(value)) {
            add_repeated_foreign_enum(static_cast< ::protobuf_unittest::ForeignEnumLite >(value));
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::protobuf_unittest::ForeignEnumLite_IsValid,
                 this->mutable_repeated_foreign_enum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_repeated_foreign_enum;
        if (input->ExpectTag(424)) goto parse_repeated_import_enum;
        break;
      }

      // repeated .protobuf_unittest_import.ImportEnumLite repeated_import_enum = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeated_import_enum:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf_unittest_import::ImportEnumLite_IsValid(value)) {
            add_repeated_import_enum(static_cast< ::protobuf_unittest_import::ImportEnumLite >(value));
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::protobuf_unittest_import::ImportEnumLite_IsValid,
                 this->mutable_repeated_import_enum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_repeated_import_enum;
        if (input->ExpectTag(434)) goto parse_repeated_string_piece;
        break;
      }

      // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_repeated_string_piece:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_repeated_string_piece()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse_repeated_string_piece;
        if (input->ExpectTag(442)) goto parse_repeated_cord;
        break;
      }

      // repeated string repeated_cord = 55 [ctype = CORD];
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_repeated_cord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_repeated_cord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(442)) goto parse_repeated_cord;
        if (input->ExpectTag(458)) goto parse_repeated_lazy_message;
        break;
      }

      // repeated .protobuf_unittest.TestAllTypesLite.NestedMessage repeated_lazy_message = 57 [lazy = true];
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_repeated_lazy_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_repeated_lazy_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(458)) goto parse_repeated_lazy_message;
        if (input->ExpectTag(488)) goto parse_default_int32;
        break;
      }

      // optional int32 default_int32 = 61 [default = 41];
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_int32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &default_int32_)));
          set_has_default_int32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_default_int64;
        break;
      }

      // optional int64 default_int64 = 62 [default = 42];
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_int64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &default_int64_)));
          set_has_default_int64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_default_uint32;
        break;
      }

      // optional uint32 default_uint32 = 63 [default = 43];
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_uint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &default_uint32_)));
          set_has_default_uint32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_default_uint64;
        break;
      }

      // optional uint64 default_uint64 = 64 [default = 44];
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_uint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &default_uint64_)));
          set_has_default_uint64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_default_sint32;
        break;
      }

      // optional sint32 default_sint32 = 65 [default = -45];
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_sint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &default_sint32_)));
          set_has_default_sint32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_default_sint64;
        break;
      }

      // optional sint64 default_sint64 = 66 [default = 46];
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_sint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &default_sint64_)));
          set_has_default_sint64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(541)) goto parse_default_fixed32;
        break;
      }

      // optional fixed32 default_fixed32 = 67 [default = 47];
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_default_fixed32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &default_fixed32_)));
          set_has_default_fixed32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(545)) goto parse_default_fixed64;
        break;
      }

      // optional fixed64 default_fixed64 = 68 [default = 48];
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_default_fixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &default_fixed64_)));
          set_has_default_fixed64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(557)) goto parse_default_sfixed32;
        break;
      }

      // optional sfixed32 default_sfixed32 = 69 [default = 49];
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_default_sfixed32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &default_sfixed32_)));
          set_has_default_sfixed32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(561)) goto parse_default_sfixed64;
        break;
      }

      // optional sfixed64 default_sfixed64 = 70 [default = -50];
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_default_sfixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &default_sfixed64_)));
          set_has_default_sfixed64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(573)) goto parse_default_float;
        break;
      }

      // optional float default_float = 71 [default = 51.5];
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_default_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &default_float_)));
          set_has_default_float();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(577)) goto parse_default_double;
        break;
      }

      // optional double default_double = 72 [default = 52000];
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_default_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default_double_)));
          set_has_default_double();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(584)) goto parse_default_bool;
        break;
      }

      // optional bool default_bool = 73 [default = true];
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_bool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &default_bool_)));
          set_has_default_bool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(594)) goto parse_default_string;
        break;
      }

      // optional string default_string = 74 [default = "hello"];
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_default_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(602)) goto parse_default_bytes;
        break;
      }

      // optional bytes default_bytes = 75 [default = "world"];
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_default_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_default_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(648)) goto parse_default_nested_enum;
        break;
      }

      // optional .protobuf_unittest.TestAllTypesLite.NestedEnum default_nested_enum = 81 [default = BAR];
      case 81: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_nested_enum:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf_unittest::TestAllTypesLite_NestedEnum_IsValid(value)) {
            set_default_nested_enum(static_cast< ::protobuf_unittest::TestAllTypesLite_NestedEnum >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(656)) goto parse_default_foreign_enum;
        break;
      }

      // optional .protobuf_unittest.ForeignEnumLite default_foreign_enum = 82 [default = FOREIGN_LITE_BAR];
      case 82: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_foreign_enum:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf_unittest::ForeignEnumLite_IsValid(value)) {
            set_default_foreign_enum(static_cast< ::protobuf_unittest::ForeignEnumLite >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(664)) goto parse_default_import_enum;
        break;
      }

      // optional .protobuf_unittest_import.ImportEnumLite default_import_enum = 83 [default = IMPORT_LITE_BAR];
      case 83: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_import_enum:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf_unittest_import::ImportEnumLite_IsValid(value)) {
            set_default_import_enum(static_cast< ::protobuf_unittest_import::ImportEnumLite >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(674)) goto parse_default_string_piece;
        break;
      }

      // optional string default_string_piece = 84 [default = "abc", ctype = STRING_PIECE];
      case 84: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_default_string_piece:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_string_piece()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(682)) goto parse_default_cord;
        break;
      }

      // optional string default_cord = 85 [default = "123", ctype = CORD];
      case 85: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_default_cord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_cord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestAllTypesLite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 optional_int32 = 1;
  if (has_optional_int32()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->optional_int32(), output);
  }

  // optional int64 optional_int64 = 2;
  if (has_optional_int64()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->optional_int64(), output);
  }

  // optional uint32 optional_uint32 = 3;
  if (has_optional_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->optional_uint32(), output);
  }

  // optional uint64 optional_uint64 = 4;
  if (has_optional_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->optional_uint64(), output);
  }

  // optional sint32 optional_sint32 = 5;
  if (has_optional_sint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->optional_sint32(), output);
  }

  // optional sint64 optional_sint64 = 6;
  if (has_optional_sint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->optional_sint64(), output);
  }

  // optional fixed32 optional_fixed32 = 7;
  if (has_optional_fixed32()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->optional_fixed32(), output);
  }

  // optional fixed64 optional_fixed64 = 8;
  if (has_optional_fixed64()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->optional_fixed64(), output);
  }

  // optional sfixed32 optional_sfixed32 = 9;
  if (has_optional_sfixed32()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(9, this->optional_sfixed32(), output);
  }

  // optional sfixed64 optional_sfixed64 = 10;
  if (has_optional_sfixed64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(10, this->optional_sfixed64(), output);
  }

  // optional float optional_float = 11;
  if (has_optional_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->optional_float(), output);
  }

  // optional double optional_double = 12;
  if (has_optional_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->optional_double(), output);
  }

  // optional bool optional_bool = 13;
  if (has_optional_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->optional_bool(), output);
  }

  // optional string optional_string = 14;
  if (has_optional_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->optional_string(), output);
  }

  // optional bytes optional_bytes = 15;
  if (has_optional_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      15, this->optional_bytes(), output);
  }

  // optional group OptionalGroup = 16 {
  if (has_optionalgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteGroup(
      16, this->optionalgroup(), output);
  }

  // optional .protobuf_unittest.TestAllTypesLite.NestedMessage optional_nested_message = 18;
  if (has_optional_nested_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->optional_nested_message(), output);
  }

  // optional .protobuf_unittest.ForeignMessageLite optional_foreign_message = 19;
  if (has_optional_foreign_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->optional_foreign_message(), output);
  }

  // optional .protobuf_unittest_import.ImportMessageLite optional_import_message = 20;
  if (has_optional_import_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->optional_import_message(), output);
  }

  // optional .protobuf_unittest.TestAllTypesLite.NestedEnum optional_nested_enum = 21;
  if (has_optional_nested_enum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->optional_nested_enum(), output);
  }

  // optional .protobuf_unittest.ForeignEnumLite optional_foreign_enum = 22;
  if (has_optional_foreign_enum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->optional_foreign_enum(), output);
  }

  // optional .protobuf_unittest_import.ImportEnumLite optional_import_enum = 23;
  if (has_optional_import_enum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->optional_import_enum(), output);
  }

  // optional string optional_string_piece = 24 [ctype = STRING_PIECE];
  if (has_optional_string_piece()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->optional_string_piece(), output);
  }

  // optional string optional_cord = 25 [ctype = CORD];
  if (has_optional_cord()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->optional_cord(), output);
  }

  // optional .protobuf_unittest_import.PublicImportMessageLite optional_public_import_message = 26;
  if (has_optional_public_import_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      26, this->optional_public_import_message(), output);
  }

  // optional .protobuf_unittest.TestAllTypesLite.NestedMessage optional_lazy_message = 27 [lazy = true];
  if (has_optional_lazy_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      27, this->optional_lazy_message(), output);
  }

  // repeated int32 repeated_int32 = 31;
  for (int i = 0; i < this->repeated_int32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      31, this->repeated_int32(i), output);
  }

  // repeated int64 repeated_int64 = 32;
  for (int i = 0; i < this->repeated_int64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      32, this->repeated_int64(i), output);
  }

  // repeated uint32 repeated_uint32 = 33;
  for (int i = 0; i < this->repeated_uint32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      33, this->repeated_uint32(i), output);
  }

  // repeated uint64 repeated_uint64 = 34;
  for (int i = 0; i < this->repeated_uint64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      34, this->repeated_uint64(i), output);
  }

  // repeated sint32 repeated_sint32 = 35;
  for (int i = 0; i < this->repeated_sint32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      35, this->repeated_sint32(i), output);
  }

  // repeated sint64 repeated_sint64 = 36;
  for (int i = 0; i < this->repeated_sint64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      36, this->repeated_sint64(i), output);
  }

  // repeated fixed32 repeated_fixed32 = 37;
  for (int i = 0; i < this->repeated_fixed32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      37, this->repeated_fixed32(i), output);
  }

  // repeated fixed64 repeated_fixed64 = 38;
  for (int i = 0; i < this->repeated_fixed64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      38, this->repeated_fixed64(i), output);
  }

  // repeated sfixed32 repeated_sfixed32 = 39;
  for (int i = 0; i < this->repeated_sfixed32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(
      39, this->repeated_sfixed32(i), output);
  }

  // repeated sfixed64 repeated_sfixed64 = 40;
  for (int i = 0; i < this->repeated_sfixed64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(
      40, this->repeated_sfixed64(i), output);
  }

  // repeated float repeated_float = 41;
  for (int i = 0; i < this->repeated_float_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      41, this->repeated_float(i), output);
  }

  // repeated double repeated_double = 42;
  for (int i = 0; i < this->repeated_double_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      42, this->repeated_double(i), output);
  }

  // repeated bool repeated_bool = 43;
  for (int i = 0; i < this->repeated_bool_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      43, this->repeated_bool(i), output);
  }

  // repeated string repeated_string = 44;
  for (int i = 0; i < this->repeated_string_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      44, this->repeated_string(i), output);
  }

  // repeated bytes repeated_bytes = 45;
  for (int i = 0; i < this->repeated_bytes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      45, this->repeated_bytes(i), output);
  }

  // repeated group RepeatedGroup = 46 {
  for (int i = 0; i < this->repeatedgroup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroup(
      46, this->repeatedgroup(i), output);
  }

  // repeated .protobuf_unittest.TestAllTypesLite.NestedMessage repeated_nested_message = 48;
  for (int i = 0; i < this->repeated_nested_message_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      48, this->repeated_nested_message(i), output);
  }

  // repeated .protobuf_unittest.ForeignMessageLite repeated_foreign_message = 49;
  for (int i = 0; i < this->repeated_foreign_message_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      49, this->repeated_foreign_message(i), output);
  }

  // repeated .protobuf_unittest_import.ImportMessageLite repeated_import_message = 50;
  for (int i = 0; i < this->repeated_import_message_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      50, this->repeated_import_message(i), output);
  }

  // repeated .protobuf_unittest.TestAllTypesLite.NestedEnum repeated_nested_enum = 51;
  for (int i = 0; i < this->repeated_nested_enum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      51, this->repeated_nested_enum(i), output);
  }

  // repeated .protobuf_unittest.ForeignEnumLite repeated_foreign_enum = 52;
  for (int i = 0; i < this->repeated_foreign_enum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      52, this->repeated_foreign_enum(i), output);
  }

  // repeated .protobuf_unittest_import.ImportEnumLite repeated_import_enum = 53;
  for (int i = 0; i < this->repeated_import_enum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      53, this->repeated_import_enum(i), output);
  }

  // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
  for (int i = 0; i < this->repeated_string_piece_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      54, this->repeated_string_piece(i), output);
  }

  // repeated string repeated_cord = 55 [ctype = CORD];
  for (int i = 0; i < this->repeated_cord_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      55, this->repeated_cord(i), output);
  }

  // repeated .protobuf_unittest.TestAllTypesLite.NestedMessage repeated_lazy_message = 57 [lazy = true];
  for (int i = 0; i < this->repeated_lazy_message_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      57, this->repeated_lazy_message(i), output);
  }

  // optional int32 default_int32 = 61 [default = 41];
  if (has_default_int32()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->default_int32(), output);
  }

  // optional int64 default_int64 = 62 [default = 42];
  if (has_default_int64()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(62, this->default_int64(), output);
  }

  // optional uint32 default_uint32 = 63 [default = 43];
  if (has_default_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(63, this->default_uint32(), output);
  }

  // optional uint64 default_uint64 = 64 [default = 44];
  if (has_default_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(64, this->default_uint64(), output);
  }

  // optional sint32 default_sint32 = 65 [default = -45];
  if (has_default_sint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(65, this->default_sint32(), output);
  }

  // optional sint64 default_sint64 = 66 [default = 46];
  if (has_default_sint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(66, this->default_sint64(), output);
  }

  // optional fixed32 default_fixed32 = 67 [default = 47];
  if (has_default_fixed32()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(67, this->default_fixed32(), output);
  }

  // optional fixed64 default_fixed64 = 68 [default = 48];
  if (has_default_fixed64()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(68, this->default_fixed64(), output);
  }

  // optional sfixed32 default_sfixed32 = 69 [default = 49];
  if (has_default_sfixed32()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(69, this->default_sfixed32(), output);
  }

  // optional sfixed64 default_sfixed64 = 70 [default = -50];
  if (has_default_sfixed64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(70, this->default_sfixed64(), output);
  }

  // optional float default_float = 71 [default = 51.5];
  if (has_default_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(71, this->default_float(), output);
  }

  // optional double default_double = 72 [default = 52000];
  if (has_default_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(72, this->default_double(), output);
  }

  // optional bool default_bool = 73 [default = true];
  if (has_default_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(73, this->default_bool(), output);
  }

  // optional string default_string = 74 [default = "hello"];
  if (has_default_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      74, this->default_string(), output);
  }

  // optional bytes default_bytes = 75 [default = "world"];
  if (has_default_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      75, this->default_bytes(), output);
  }

  // optional .protobuf_unittest.TestAllTypesLite.NestedEnum default_nested_enum = 81 [default = BAR];
  if (has_default_nested_enum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      81, this->default_nested_enum(), output);
  }

  // optional .protobuf_unittest.ForeignEnumLite default_foreign_enum = 82 [default = FOREIGN_LITE_BAR];
  if (has_default_foreign_enum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      82, this->default_foreign_enum(), output);
  }

  // optional .protobuf_unittest_import.ImportEnumLite default_import_enum = 83 [default = IMPORT_LITE_BAR];
  if (has_default_import_enum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      83, this->default_import_enum(), output);
  }

  // optional string default_string_piece = 84 [default = "abc", ctype = STRING_PIECE];
  if (has_default_string_piece()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      84, this->default_string_piece(), output);
  }

  // optional string default_cord = 85 [default = "123", ctype = CORD];
  if (has_default_cord()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      85, this->default_cord(), output);
  }

}

int TestAllTypesLite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 optional_int32 = 1;
    if (has_optional_int32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optional_int32());
    }

    // optional int64 optional_int64 = 2;
    if (has_optional_int64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->optional_int64());
    }

    // optional uint32 optional_uint32 = 3;
    if (has_optional_uint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optional_uint32());
    }

    // optional uint64 optional_uint64 = 4;
    if (has_optional_uint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->optional_uint64());
    }

    // optional sint32 optional_sint32 = 5;
    if (has_optional_sint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->optional_sint32());
    }

    // optional sint64 optional_sint64 = 6;
    if (has_optional_sint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->optional_sint64());
    }

    // optional fixed32 optional_fixed32 = 7;
    if (has_optional_fixed32()) {
      total_size += 1 + 4;
    }

    // optional fixed64 optional_fixed64 = 8;
    if (has_optional_fixed64()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sfixed32 optional_sfixed32 = 9;
    if (has_optional_sfixed32()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 optional_sfixed64 = 10;
    if (has_optional_sfixed64()) {
      total_size += 1 + 8;
    }

    // optional float optional_float = 11;
    if (has_optional_float()) {
      total_size += 1 + 4;
    }

    // optional double optional_double = 12;
    if (has_optional_double()) {
      total_size += 1 + 8;
    }

    // optional bool optional_bool = 13;
    if (has_optional_bool()) {
      total_size += 1 + 1;
    }

    // optional string optional_string = 14;
    if (has_optional_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->optional_string());
    }

    // optional bytes optional_bytes = 15;
    if (has_optional_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->optional_bytes());
    }

    // optional group OptionalGroup = 16 {
    if (has_optionalgroup()) {
      total_size += 4 +
        ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
          this->optionalgroup());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .protobuf_unittest.TestAllTypesLite.NestedMessage optional_nested_message = 18;
    if (has_optional_nested_message()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->optional_nested_message());
    }

    // optional .protobuf_unittest.ForeignMessageLite optional_foreign_message = 19;
    if (has_optional_foreign_message()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->optional_foreign_message());
    }

    // optional .protobuf_unittest_import.ImportMessageLite optional_import_message = 20;
    if (has_optional_import_message()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->optional_import_message());
    }

    // optional .protobuf_unittest.TestAllTypesLite.NestedEnum optional_nested_enum = 21;
    if (has_optional_nested_enum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->optional_nested_enum());
    }

    // optional .protobuf_unittest.ForeignEnumLite optional_foreign_enum = 22;
    if (has_optional_foreign_enum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->optional_foreign_enum());
    }

    // optional .protobuf_unittest_import.ImportEnumLite optional_import_enum = 23;
    if (has_optional_import_enum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->optional_import_enum());
    }

    // optional string optional_string_piece = 24 [ctype = STRING_PIECE];
    if (has_optional_string_piece()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->optional_string_piece());
    }

    // optional string optional_cord = 25 [ctype = CORD];
    if (has_optional_cord()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->optional_cord());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .protobuf_unittest_import.PublicImportMessageLite optional_public_import_message = 26;
    if (has_optional_public_import_message()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->optional_public_import_message());
    }

    // optional .protobuf_unittest.TestAllTypesLite.NestedMessage optional_lazy_message = 27 [lazy = true];
    if (has_optional_lazy_message()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->optional_lazy_message());
    }

  }
  if (_has_bits_[51 / 32] & (0xffu << (51 % 32))) {
    // optional int32 default_int32 = 61 [default = 41];
    if (has_default_int32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->default_int32());
    }

    // optional int64 default_int64 = 62 [default = 42];
    if (has_default_int64()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->default_int64());
    }

    // optional uint32 default_uint32 = 63 [default = 43];
    if (has_default_uint32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->default_uint32());
    }

    // optional uint64 default_uint64 = 64 [default = 44];
    if (has_default_uint64()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->default_uint64());
    }

    // optional sint32 default_sint32 = 65 [default = -45];
    if (has_default_sint32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->default_sint32());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional sint64 default_sint64 = 66 [default = 46];
    if (has_default_sint64()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->default_sint64());
    }

    // optional fixed32 default_fixed32 = 67 [default = 47];
    if (has_default_fixed32()) {
      total_size += 2 + 4;
    }

    // optional fixed64 default_fixed64 = 68 [default = 48];
    if (has_default_fixed64()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 default_sfixed32 = 69 [default = 49];
    if (has_default_sfixed32()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 default_sfixed64 = 70 [default = -50];
    if (has_default_sfixed64()) {
      total_size += 2 + 8;
    }

    // optional float default_float = 71 [default = 51.5];
    if (has_default_float()) {
      total_size += 2 + 4;
    }

    // optional double default_double = 72 [default = 52000];
    if (has_default_double()) {
      total_size += 2 + 8;
    }

    // optional bool default_bool = 73 [default = true];
    if (has_default_bool()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional string default_string = 74 [default = "hello"];
    if (has_default_string()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->default_string());
    }

    // optional bytes default_bytes = 75 [default = "world"];
    if (has_default_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->default_bytes());
    }

    // optional .protobuf_unittest.TestAllTypesLite.NestedEnum default_nested_enum = 81 [default = BAR];
    if (has_default_nested_enum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->default_nested_enum());
    }

    // optional .protobuf_unittest.ForeignEnumLite default_foreign_enum = 82 [default = FOREIGN_LITE_BAR];
    if (has_default_foreign_enum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->default_foreign_enum());
    }

    // optional .protobuf_unittest_import.ImportEnumLite default_import_enum = 83 [default = IMPORT_LITE_BAR];
    if (has_default_import_enum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->default_import_enum());
    }

    // optional string default_string_piece = 84 [default = "abc", ctype = STRING_PIECE];
    if (has_default_string_piece()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->default_string_piece());
    }

    // optional string default_cord = 85 [default = "123", ctype = CORD];
    if (has_default_cord()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->default_cord());
    }

  }
  // repeated int32 repeated_int32 = 31;
  {
    int data_size = 0;
    for (int i = 0; i < this->repeated_int32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->repeated_int32(i));
    }
    total_size += 2 * this->repeated_int32_size() + data_size;
  }

  // repeated int64 repeated_int64 = 32;
  {
    int data_size = 0;
    for (int i = 0; i < this->repeated_int64_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->repeated_int64(i));
    }
    total_size += 2 * this->repeated_int64_size() + data_size;
  }

  // repeated uint32 repeated_uint32 = 33;
  {
    int data_size = 0;
    for (int i = 0; i < this->repeated_uint32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->repeated_uint32(i));
    }
    total_size += 2 * this->repeated_uint32_size() + data_size;
  }

  // repeated uint64 repeated_uint64 = 34;
  {
    int data_size = 0;
    for (int i = 0; i < this->repeated_uint64_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->repeated_uint64(i));
    }
    total_size += 2 * this->repeated_uint64_size() + data_size;
  }

  // repeated sint32 repeated_sint32 = 35;
  {
    int data_size = 0;
    for (int i = 0; i < this->repeated_sint32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->repeated_sint32(i));
    }
    total_size += 2 * this->repeated_sint32_size() + data_size;
  }

  // repeated sint64 repeated_sint64 = 36;
  {
    int data_size = 0;
    for (int i = 0; i < this->repeated_sint64_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->repeated_sint64(i));
    }
    total_size += 2 * this->repeated_sint64_size() + data_size;
  }

  // repeated fixed32 repeated_fixed32 = 37;
  {
    int data_size = 0;
    data_size = 4 * this->repeated_fixed32_size();
    total_size += 2 * this->repeated_fixed32_size() + data_size;
  }

  // repeated fixed64 repeated_fixed64 = 38;
  {
    int data_size = 0;
    data_size = 8 * this->repeated_fixed64_size();
    total_size += 2 * this->repeated_fixed64_size() + data_size;
  }

  // repeated sfixed32 repeated_sfixed32 = 39;
  {
    int data_size = 0;
    data_size = 4 * this->repeated_sfixed32_size();
    total_size += 2 * this->repeated_sfixed32_size() + data_size;
  }

  // repeated sfixed64 repeated_sfixed64 = 40;
  {
    int data_size = 0;
    data_size = 8 * this->repeated_sfixed64_size();
    total_size += 2 * this->repeated_sfixed64_size() + data_size;
  }

  // repeated float repeated_float = 41;
  {
    int data_size = 0;
    data_size = 4 * this->repeated_float_size();
    total_size += 2 * this->repeated_float_size() + data_size;
  }

  // repeated double repeated_double = 42;
  {
    int data_size = 0;
    data_size = 8 * this->repeated_double_size();
    total_size += 2 * this->repeated_double_size() + data_size;
  }

  // repeated bool repeated_bool = 43;
  {
    int data_size = 0;
    data_size = 1 * this->repeated_bool_size();
    total_size += 2 * this->repeated_bool_size() + data_size;
  }

  // repeated string repeated_string = 44;
  total_size += 2 * this->repeated_string_size();
  for (int i = 0; i < this->repeated_string_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->repeated_string(i));
  }

  // repeated bytes repeated_bytes = 45;
  total_size += 2 * this->repeated_bytes_size();
  for (int i = 0; i < this->repeated_bytes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->repeated_bytes(i));
  }

  // repeated group RepeatedGroup = 46 {
  total_size += 4 * this->repeatedgroup_size();
  for (int i = 0; i < this->repeatedgroup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->repeatedgroup(i));
  }

  // repeated .protobuf_unittest.TestAllTypesLite.NestedMessage repeated_nested_message = 48;
  total_size += 2 * this->repeated_nested_message_size();
  for (int i = 0; i < this->repeated_nested_message_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->repeated_nested_message(i));
  }

  // repeated .protobuf_unittest.ForeignMessageLite repeated_foreign_message = 49;
  total_size += 2 * this->repeated_foreign_message_size();
  for (int i = 0; i < this->repeated_foreign_message_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->repeated_foreign_message(i));
  }

  // repeated .protobuf_unittest_import.ImportMessageLite repeated_import_message = 50;
  total_size += 2 * this->repeated_import_message_size();
  for (int i = 0; i < this->repeated_import_message_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->repeated_import_message(i));
  }

  // repeated .protobuf_unittest.TestAllTypesLite.NestedEnum repeated_nested_enum = 51;
  {
    int data_size = 0;
    for (int i = 0; i < this->repeated_nested_enum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->repeated_nested_enum(i));
    }
    total_size += 2 * this->repeated_nested_enum_size() + data_size;
  }

  // repeated .protobuf_unittest.ForeignEnumLite repeated_foreign_enum = 52;
  {
    int data_size = 0;
    for (int i = 0; i < this->repeated_foreign_enum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->repeated_foreign_enum(i));
    }
    total_size += 2 * this->repeated_foreign_enum_size() + data_size;
  }

  // repeated .protobuf_unittest_import.ImportEnumLite repeated_import_enum = 53;
  {
    int data_size = 0;
    for (int i = 0; i < this->repeated_import_enum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->repeated_import_enum(i));
    }
    total_size += 2 * this->repeated_import_enum_size() + data_size;
  }

  // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
  total_size += 2 * this->repeated_string_piece_size();
  for (int i = 0; i < this->repeated_string_piece_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->repeated_string_piece(i));
  }

  // repeated string repeated_cord = 55 [ctype = CORD];
  total_size += 2 * this->repeated_cord_size();
  for (int i = 0; i < this->repeated_cord_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->repeated_cord(i));
  }

  // repeated .protobuf_unittest.TestAllTypesLite.NestedMessage repeated_lazy_message = 57 [lazy = true];
  total_size += 2 * this->repeated_lazy_message_size();
  for (int i = 0; i < this->repeated_lazy_message_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->repeated_lazy_message(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestAllTypesLite::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestAllTypesLite*>(&from));
}

void TestAllTypesLite::MergeFrom(const TestAllTypesLite& from) {
  GOOGLE_CHECK_NE(&from, this);
  repeated_int32_.MergeFrom(from.repeated_int32_);
  repeated_int64_.MergeFrom(from.repeated_int64_);
  repeated_uint32_.MergeFrom(from.repeated_uint32_);
  repeated_uint64_.MergeFrom(from.repeated_uint64_);
  repeated_sint32_.MergeFrom(from.repeated_sint32_);
  repeated_sint64_.MergeFrom(from.repeated_sint64_);
  repeated_fixed32_.MergeFrom(from.repeated_fixed32_);
  repeated_fixed64_.MergeFrom(from.repeated_fixed64_);
  repeated_sfixed32_.MergeFrom(from.repeated_sfixed32_);
  repeated_sfixed64_.MergeFrom(from.repeated_sfixed64_);
  repeated_float_.MergeFrom(from.repeated_float_);
  repeated_double_.MergeFrom(from.repeated_double_);
  repeated_bool_.MergeFrom(from.repeated_bool_);
  repeated_string_.MergeFrom(from.repeated_string_);
  repeated_bytes_.MergeFrom(from.repeated_bytes_);
  repeatedgroup_.MergeFrom(from.repeatedgroup_);
  repeated_nested_message_.MergeFrom(from.repeated_nested_message_);
  repeated_foreign_message_.MergeFrom(from.repeated_foreign_message_);
  repeated_import_message_.MergeFrom(from.repeated_import_message_);
  repeated_nested_enum_.MergeFrom(from.repeated_nested_enum_);
  repeated_foreign_enum_.MergeFrom(from.repeated_foreign_enum_);
  repeated_import_enum_.MergeFrom(from.repeated_import_enum_);
  repeated_string_piece_.MergeFrom(from.repeated_string_piece_);
  repeated_cord_.MergeFrom(from.repeated_cord_);
  repeated_lazy_message_.MergeFrom(from.repeated_lazy_message_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_optional_int32()) {
      set_optional_int32(from.optional_int32());
    }
    if (from.has_optional_int64()) {
      set_optional_int64(from.optional_int64());
    }
    if (from.has_optional_uint32()) {
      set_optional_uint32(from.optional_uint32());
    }
    if (from.has_optional_uint64()) {
      set_optional_uint64(from.optional_uint64());
    }
    if (from.has_optional_sint32()) {
      set_optional_sint32(from.optional_sint32());
    }
    if (from.has_optional_sint64()) {
      set_optional_sint64(from.optional_sint64());
    }
    if (from.has_optional_fixed32()) {
      set_optional_fixed32(from.optional_fixed32());
    }
    if (from.has_optional_fixed64()) {
      set_optional_fixed64(from.optional_fixed64());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_optional_sfixed32()) {
      set_optional_sfixed32(from.optional_sfixed32());
    }
    if (from.has_optional_sfixed64()) {
      set_optional_sfixed64(from.optional_sfixed64());
    }
    if (from.has_optional_float()) {
      set_optional_float(from.optional_float());
    }
    if (from.has_optional_double()) {
      set_optional_double(from.optional_double());
    }
    if (from.has_optional_bool()) {
      set_optional_bool(from.optional_bool());
    }
    if (from.has_optional_string()) {
      set_optional_string(from.optional_string());
    }
    if (from.has_optional_bytes()) {
      set_optional_bytes(from.optional_bytes());
    }
    if (from.has_optionalgroup()) {
      mutable_optionalgroup()->::protobuf_unittest::TestAllTypesLite_OptionalGroup::MergeFrom(from.optionalgroup());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_optional_nested_message()) {
      mutable_optional_nested_message()->::protobuf_unittest::TestAllTypesLite_NestedMessage::MergeFrom(from.optional_nested_message());
    }
    if (from.has_optional_foreign_message()) {
      mutable_optional_foreign_message()->::protobuf_unittest::ForeignMessageLite::MergeFrom(from.optional_foreign_message());
    }
    if (from.has_optional_import_message()) {
      mutable_optional_import_message()->::protobuf_unittest_import::ImportMessageLite::MergeFrom(from.optional_import_message());
    }
    if (from.has_optional_nested_enum()) {
      set_optional_nested_enum(from.optional_nested_enum());
    }
    if (from.has_optional_foreign_enum()) {
      set_optional_foreign_enum(from.optional_foreign_enum());
    }
    if (from.has_optional_import_enum()) {
      set_optional_import_enum(from.optional_import_enum());
    }
    if (from.has_optional_string_piece()) {
      set_optional_string_piece(from.optional_string_piece());
    }
    if (from.has_optional_cord()) {
      set_optional_cord(from.optional_cord());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_optional_public_import_message()) {
      mutable_optional_public_import_message()->::protobuf_unittest_import::PublicImportMessageLite::MergeFrom(from.optional_public_import_message());
    }
    if (from.has_optional_lazy_message()) {
      mutable_optional_lazy_message()->::protobuf_unittest::TestAllTypesLite_NestedMessage::MergeFrom(from.optional_lazy_message());
    }
  }
  if (from._has_bits_[51 / 32] & (0xffu << (51 % 32))) {
    if (from.has_default_int32()) {
      set_default_int32(from.default_int32());
    }
    if (from.has_default_int64()) {
      set_default_int64(from.default_int64());
    }
    if (from.has_default_uint32()) {
      set_default_uint32(from.default_uint32());
    }
    if (from.has_default_uint64()) {
      set_default_uint64(from.default_uint64());
    }
    if (from.has_default_sint32()) {
      set_default_sint32(from.default_sint32());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_default_sint64()) {
      set_default_sint64(from.default_sint64());
    }
    if (from.has_default_fixed32()) {
      set_default_fixed32(from.default_fixed32());
    }
    if (from.has_default_fixed64()) {
      set_default_fixed64(from.default_fixed64());
    }
    if (from.has_default_sfixed32()) {
      set_default_sfixed32(from.default_sfixed32());
    }
    if (from.has_default_sfixed64()) {
      set_default_sfixed64(from.default_sfixed64());
    }
    if (from.has_default_float()) {
      set_default_float(from.default_float());
    }
    if (from.has_default_double()) {
      set_default_double(from.default_double());
    }
    if (from.has_default_bool()) {
      set_default_bool(from.default_bool());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_default_string()) {
      set_default_string(from.default_string());
    }
    if (from.has_default_bytes()) {
      set_default_bytes(from.default_bytes());
    }
    if (from.has_default_nested_enum()) {
      set_default_nested_enum(from.default_nested_enum());
    }
    if (from.has_default_foreign_enum()) {
      set_default_foreign_enum(from.default_foreign_enum());
    }
    if (from.has_default_import_enum()) {
      set_default_import_enum(from.default_import_enum());
    }
    if (from.has_default_string_piece()) {
      set_default_string_piece(from.default_string_piece());
    }
    if (from.has_default_cord()) {
      set_default_cord(from.default_cord());
    }
  }
}

void TestAllTypesLite::CopyFrom(const TestAllTypesLite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypesLite::IsInitialized() const {

  return true;
}

void TestAllTypesLite::Swap(TestAllTypesLite* other) {
  if (other != this) {
    std::swap(optional_int32_, other->optional_int32_);
    std::swap(optional_int64_, other->optional_int64_);
    std::swap(optional_uint32_, other->optional_uint32_);
    std::swap(optional_uint64_, other->optional_uint64_);
    std::swap(optional_sint32_, other->optional_sint32_);
    std::swap(optional_sint64_, other->optional_sint64_);
    std::swap(optional_fixed32_, other->optional_fixed32_);
    std::swap(optional_fixed64_, other->optional_fixed64_);
    std::swap(optional_sfixed32_, other->optional_sfixed32_);
    std::swap(optional_sfixed64_, other->optional_sfixed64_);
    std::swap(optional_float_, other->optional_float_);
    std::swap(optional_double_, other->optional_double_);
    std::swap(optional_bool_, other->optional_bool_);
    std::swap(optional_string_, other->optional_string_);
    std::swap(optional_bytes_, other->optional_bytes_);
    std::swap(optionalgroup_, other->optionalgroup_);
    std::swap(optional_nested_message_, other->optional_nested_message_);
    std::swap(optional_foreign_message_, other->optional_foreign_message_);
    std::swap(optional_import_message_, other->optional_import_message_);
    std::swap(optional_nested_enum_, other->optional_nested_enum_);
    std::swap(optional_foreign_enum_, other->optional_foreign_enum_);
    std::swap(optional_import_enum_, other->optional_import_enum_);
    std::swap(optional_string_piece_, other->optional_string_piece_);
    std::swap(optional_cord_, other->optional_cord_);
    std::swap(optional_public_import_message_, other->optional_public_import_message_);
    std::swap(optional_lazy_message_, other->optional_lazy_message_);
    repeated_int32_.Swap(&other->repeated_int32_);
    repeated_int64_.Swap(&other->repeated_int64_);
    repeated_uint32_.Swap(&other->repeated_uint32_);
    repeated_uint64_.Swap(&other->repeated_uint64_);
    repeated_sint32_.Swap(&other->repeated_sint32_);
    repeated_sint64_.Swap(&other->repeated_sint64_);
    repeated_fixed32_.Swap(&other->repeated_fixed32_);
    repeated_fixed64_.Swap(&other->repeated_fixed64_);
    repeated_sfixed32_.Swap(&other->repeated_sfixed32_);
    repeated_sfixed64_.Swap(&other->repeated_sfixed64_);
    repeated_float_.Swap(&other->repeated_float_);
    repeated_double_.Swap(&other->repeated_double_);
    repeated_bool_.Swap(&other->repeated_bool_);
    repeated_string_.Swap(&other->repeated_string_);
    repeated_bytes_.Swap(&other->repeated_bytes_);
    repeatedgroup_.Swap(&other->repeatedgroup_);
    repeated_nested_message_.Swap(&other->repeated_nested_message_);
    repeated_foreign_message_.Swap(&other->repeated_foreign_message_);
    repeated_import_message_.Swap(&other->repeated_import_message_);
    repeated_nested_enum_.Swap(&other->repeated_nested_enum_);
    repeated_foreign_enum_.Swap(&other->repeated_foreign_enum_);
    repeated_import_enum_.Swap(&other->repeated_import_enum_);
    repeated_string_piece_.Swap(&other->repeated_string_piece_);
    repeated_cord_.Swap(&other->repeated_cord_);
    repeated_lazy_message_.Swap(&other->repeated_lazy_message_);
    std::swap(default_int32_, other->default_int32_);
    std::swap(default_int64_, other->default_int64_);
    std::swap(default_uint32_, other->default_uint32_);
    std::swap(default_uint64_, other->default_uint64_);
    std::swap(default_sint32_, other->default_sint32_);
    std::swap(default_sint64_, other->default_sint64_);
    std::swap(default_fixed32_, other->default_fixed32_);
    std::swap(default_fixed64_, other->default_fixed64_);
    std::swap(default_sfixed32_, other->default_sfixed32_);
    std::swap(default_sfixed64_, other->default_sfixed64_);
    std::swap(default_float_, other->default_float_);
    std::swap(default_double_, other->default_double_);
    std::swap(default_bool_, other->default_bool_);
    std::swap(default_string_, other->default_string_);
    std::swap(default_bytes_, other->default_bytes_);
    std::swap(default_nested_enum_, other->default_nested_enum_);
    std::swap(default_foreign_enum_, other->default_foreign_enum_);
    std::swap(default_import_enum_, other->default_import_enum_);
    std::swap(default_string_piece_, other->default_string_piece_);
    std::swap(default_cord_, other->default_cord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TestAllTypesLite::GetTypeName() const {
  return "protobuf_unittest.TestAllTypesLite";
}


// ===================================================================

#ifndef _MSC_VER
const int ForeignMessageLite::kCFieldNumber;
#endif  // !_MSC_VER

ForeignMessageLite::ForeignMessageLite()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ForeignMessageLite::InitAsDefaultInstance() {
}

ForeignMessageLite::ForeignMessageLite(const ForeignMessageLite& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ForeignMessageLite::SharedCtor() {
  _cached_size_ = 0;
  c_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForeignMessageLite::~ForeignMessageLite() {
  SharedDtor();
}

void ForeignMessageLite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ForeignMessageLite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ForeignMessageLite& ForeignMessageLite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2funittest_5flite_2eproto();
  return *default_instance_;
}

ForeignMessageLite* ForeignMessageLite::default_instance_ = NULL;

ForeignMessageLite* ForeignMessageLite::New() const {
  return new ForeignMessageLite;
}

void ForeignMessageLite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    c_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ForeignMessageLite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 c = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &c_)));
          set_has_c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ForeignMessageLite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 c = 1;
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->c(), output);
  }

}

int ForeignMessageLite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 c = 1;
    if (has_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->c());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForeignMessageLite::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ForeignMessageLite*>(&from));
}

void ForeignMessageLite::MergeFrom(const ForeignMessageLite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_c()) {
      set_c(from.c());
    }
  }
}

void ForeignMessageLite::CopyFrom(const ForeignMessageLite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForeignMessageLite::IsInitialized() const {

  return true;
}

void ForeignMessageLite::Swap(ForeignMessageLite* other) {
  if (other != this) {
    std::swap(c_, other->c_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ForeignMessageLite::GetTypeName() const {
  return "protobuf_unittest.ForeignMessageLite";
}


// ===================================================================

#ifndef _MSC_VER
const int TestPackedTypesLite::kPackedInt32FieldNumber;
const int TestPackedTypesLite::kPackedInt64FieldNumber;
const int TestPackedTypesLite::kPackedUint32FieldNumber;
const int TestPackedTypesLite::kPackedUint64FieldNumber;
const int TestPackedTypesLite::kPackedSint32FieldNumber;
const int TestPackedTypesLite::kPackedSint64FieldNumber;
const int TestPackedTypesLite::kPackedFixed32FieldNumber;
const int TestPackedTypesLite::kPackedFixed64FieldNumber;
const int TestPackedTypesLite::kPackedSfixed32FieldNumber;
const int TestPackedTypesLite::kPackedSfixed64FieldNumber;
const int TestPackedTypesLite::kPackedFloatFieldNumber;
const int TestPackedTypesLite::kPackedDoubleFieldNumber;
const int TestPackedTypesLite::kPackedBoolFieldNumber;
const int TestPackedTypesLite::kPackedEnumFieldNumber;
#endif  // !_MSC_VER

TestPackedTypesLite::TestPackedTypesLite()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TestPackedTypesLite::InitAsDefaultInstance() {
}

TestPackedTypesLite::TestPackedTypesLite(const TestPackedTypesLite& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TestPackedTypesLite::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestPackedTypesLite::~TestPackedTypesLite() {
  SharedDtor();
}

void TestPackedTypesLite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestPackedTypesLite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestPackedTypesLite& TestPackedTypesLite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2funittest_5flite_2eproto();
  return *default_instance_;
}

TestPackedTypesLite* TestPackedTypesLite::default_instance_ = NULL;

TestPackedTypesLite* TestPackedTypesLite::New() const {
  return new TestPackedTypesLite;
}

void TestPackedTypesLite::Clear() {
  packed_int32_.Clear();
  packed_int64_.Clear();
  packed_uint32_.Clear();
  packed_uint64_.Clear();
  packed_sint32_.Clear();
  packed_sint64_.Clear();
  packed_fixed32_.Clear();
  packed_fixed64_.Clear();
  packed_sfixed32_.Clear();
  packed_sfixed64_.Clear();
  packed_float_.Clear();
  packed_double_.Clear();
  packed_bool_.Clear();
  packed_enum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TestPackedTypesLite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 packed_int32 = 90 [packed = true];
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_packed_int32())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 722, input, this->mutable_packed_int32())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(730)) goto parse_packed_int64;
        break;
      }

      // repeated int64 packed_int64 = 91 [packed = true];
      case 91: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packed_int64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_packed_int64())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 730, input, this->mutable_packed_int64())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(738)) goto parse_packed_uint32;
        break;
      }

      // repeated uint32 packed_uint32 = 92 [packed = true];
      case 92: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packed_uint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_packed_uint32())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 738, input, this->mutable_packed_uint32())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(746)) goto parse_packed_uint64;
        break;
      }

      // repeated uint64 packed_uint64 = 93 [packed = true];
      case 93: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packed_uint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_packed_uint64())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 746, input, this->mutable_packed_uint64())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(754)) goto parse_packed_sint32;
        break;
      }

      // repeated sint32 packed_sint32 = 94 [packed = true];
      case 94: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packed_sint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_packed_sint32())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 2, 754, input, this->mutable_packed_sint32())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(762)) goto parse_packed_sint64;
        break;
      }

      // repeated sint64 packed_sint64 = 95 [packed = true];
      case 95: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packed_sint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_packed_sint64())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 2, 762, input, this->mutable_packed_sint64())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(770)) goto parse_packed_fixed32;
        break;
      }

      // repeated fixed32 packed_fixed32 = 96 [packed = true];
      case 96: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packed_fixed32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_packed_fixed32())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 2, 770, input, this->mutable_packed_fixed32())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(778)) goto parse_packed_fixed64;
        break;
      }

      // repeated fixed64 packed_fixed64 = 97 [packed = true];
      case 97: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packed_fixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_packed_fixed64())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 2, 778, input, this->mutable_packed_fixed64())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(786)) goto parse_packed_sfixed32;
        break;
      }

      // repeated sfixed32 packed_sfixed32 = 98 [packed = true];
      case 98: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packed_sfixed32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, this->mutable_packed_sfixed32())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 2, 786, input, this->mutable_packed_sfixed32())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(794)) goto parse_packed_sfixed64;
        break;
      }

      // repeated sfixed64 packed_sfixed64 = 99 [packed = true];
      case 99: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packed_sfixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, this->mutable_packed_sfixed64())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 2, 794, input, this->mutable_packed_sfixed64())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_packed_float;
        break;
      }

      // repeated float packed_float = 100 [packed = true];
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packed_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_packed_float())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 802, input, this->mutable_packed_float())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_packed_double;
        break;
      }

      // repeated double packed_double = 101 [packed = true];
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packed_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_packed_double())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 810, input, this->mutable_packed_double())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_packed_bool;
        break;
      }

      // repeated bool packed_bool = 102 [packed = true];
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packed_bool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_packed_bool())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 818, input, this->mutable_packed_bool())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_packed_enum;
        break;
      }

      // repeated .protobuf_unittest.ForeignEnumLite packed_enum = 103 [packed = true];
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packed_enum:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::protobuf_unittest::ForeignEnumLite_IsValid(value)) {
              add_packed_enum(static_cast< ::protobuf_unittest::ForeignEnumLite >(value));
            }
          }
          input->PopLimit(limit);
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf_unittest::ForeignEnumLite_IsValid(value)) {
            add_packed_enum(static_cast< ::protobuf_unittest::ForeignEnumLite >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestPackedTypesLite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 packed_int32 = 90 [packed = true];
  if (this->packed_int32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(90, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_packed_int32_cached_byte_size_);
  }
  for (int i = 0; i < this->packed_int32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->packed_int32(i), output);
  }

  // repeated int64 packed_int64 = 91 [packed = true];
  if (this->packed_int64_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(91, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_packed_int64_cached_byte_size_);
  }
  for (int i = 0; i < this->packed_int64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->packed_int64(i), output);
  }

  // repeated uint32 packed_uint32 = 92 [packed = true];
  if (this->packed_uint32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(92, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_packed_uint32_cached_byte_size_);
  }
  for (int i = 0; i < this->packed_uint32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->packed_uint32(i), output);
  }

  // repeated uint64 packed_uint64 = 93 [packed = true];
  if (this->packed_uint64_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(93, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_packed_uint64_cached_byte_size_);
  }
  for (int i = 0; i < this->packed_uint64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->packed_uint64(i), output);
  }

  // repeated sint32 packed_sint32 = 94 [packed = true];
  if (this->packed_sint32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(94, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_packed_sint32_cached_byte_size_);
  }
  for (int i = 0; i < this->packed_sint32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32NoTag(
      this->packed_sint32(i), output);
  }

  // repeated sint64 packed_sint64 = 95 [packed = true];
  if (this->packed_sint64_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(95, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_packed_sint64_cached_byte_size_);
  }
  for (int i = 0; i < this->packed_sint64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->packed_sint64(i), output);
  }

  // repeated fixed32 packed_fixed32 = 96 [packed = true];
  if (this->packed_fixed32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(96, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_packed_fixed32_cached_byte_size_);
  }
  for (int i = 0; i < this->packed_fixed32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32NoTag(
      this->packed_fixed32(i), output);
  }

  // repeated fixed64 packed_fixed64 = 97 [packed = true];
  if (this->packed_fixed64_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(97, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_packed_fixed64_cached_byte_size_);
  }
  for (int i = 0; i < this->packed_fixed64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64NoTag(
      this->packed_fixed64(i), output);
  }

  // repeated sfixed32 packed_sfixed32 = 98 [packed = true];
  if (this->packed_sfixed32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(98, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_packed_sfixed32_cached_byte_size_);
  }
  for (int i = 0; i < this->packed_sfixed32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32NoTag(
      this->packed_sfixed32(i), output);
  }

  // repeated sfixed64 packed_sfixed64 = 99 [packed = true];
  if (this->packed_sfixed64_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(99, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_packed_sfixed64_cached_byte_size_);
  }
  for (int i = 0; i < this->packed_sfixed64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64NoTag(
      this->packed_sfixed64(i), output);
  }

  // repeated float packed_float = 100 [packed = true];
  if (this->packed_float_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(100, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_packed_float_cached_byte_size_);
  }
  for (int i = 0; i < this->packed_float_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->packed_float(i), output);
  }

  // repeated double packed_double = 101 [packed = true];
  if (this->packed_double_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(101, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_packed_double_cached_byte_size_);
  }
  for (int i = 0; i < this->packed_double_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->packed_double(i), output);
  }

  // repeated bool packed_bool = 102 [packed = true];
  if (this->packed_bool_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(102, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_packed_bool_cached_byte_size_);
  }
  for (int i = 0; i < this->packed_bool_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBoolNoTag(
      this->packed_bool(i), output);
  }

  // repeated .protobuf_unittest.ForeignEnumLite packed_enum = 103 [packed = true];
  if (this->packed_enum_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      103,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_packed_enum_cached_byte_size_);
  }
  for (int i = 0; i < this->packed_enum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->packed_enum(i), output);
  }

}

int TestPackedTypesLite::ByteSize() const {
  int total_size = 0;

  // repeated int32 packed_int32 = 90 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->packed_int32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->packed_int32(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _packed_int32_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 packed_int64 = 91 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->packed_int64_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->packed_int64(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _packed_int64_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 packed_uint32 = 92 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->packed_uint32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->packed_uint32(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _packed_uint32_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint64 packed_uint64 = 93 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->packed_uint64_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->packed_uint64(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _packed_uint64_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint32 packed_sint32 = 94 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->packed_sint32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->packed_sint32(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _packed_sint32_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint64 packed_sint64 = 95 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->packed_sint64_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->packed_sint64(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _packed_sint64_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated fixed32 packed_fixed32 = 96 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->packed_fixed32_size();
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _packed_fixed32_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated fixed64 packed_fixed64 = 97 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->packed_fixed64_size();
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _packed_fixed64_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sfixed32 packed_sfixed32 = 98 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->packed_sfixed32_size();
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _packed_sfixed32_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sfixed64 packed_sfixed64 = 99 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->packed_sfixed64_size();
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _packed_sfixed64_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float packed_float = 100 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->packed_float_size();
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _packed_float_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double packed_double = 101 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->packed_double_size();
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _packed_double_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool packed_bool = 102 [packed = true];
  {
    int data_size = 0;
    data_size = 1 * this->packed_bool_size();
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _packed_bool_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .protobuf_unittest.ForeignEnumLite packed_enum = 103 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->packed_enum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->packed_enum(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _packed_enum_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestPackedTypesLite::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestPackedTypesLite*>(&from));
}

void TestPackedTypesLite::MergeFrom(const TestPackedTypesLite& from) {
  GOOGLE_CHECK_NE(&from, this);
  packed_int32_.MergeFrom(from.packed_int32_);
  packed_int64_.MergeFrom(from.packed_int64_);
  packed_uint32_.MergeFrom(from.packed_uint32_);
  packed_uint64_.MergeFrom(from.packed_uint64_);
  packed_sint32_.MergeFrom(from.packed_sint32_);
  packed_sint64_.MergeFrom(from.packed_sint64_);
  packed_fixed32_.MergeFrom(from.packed_fixed32_);
  packed_fixed64_.MergeFrom(from.packed_fixed64_);
  packed_sfixed32_.MergeFrom(from.packed_sfixed32_);
  packed_sfixed64_.MergeFrom(from.packed_sfixed64_);
  packed_float_.MergeFrom(from.packed_float_);
  packed_double_.MergeFrom(from.packed_double_);
  packed_bool_.MergeFrom(from.packed_bool_);
  packed_enum_.MergeFrom(from.packed_enum_);
}

void TestPackedTypesLite::CopyFrom(const TestPackedTypesLite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestPackedTypesLite::IsInitialized() const {

  return true;
}

void TestPackedTypesLite::Swap(TestPackedTypesLite* other) {
  if (other != this) {
    packed_int32_.Swap(&other->packed_int32_);
    packed_int64_.Swap(&other->packed_int64_);
    packed_uint32_.Swap(&other->packed_uint32_);
    packed_uint64_.Swap(&other->packed_uint64_);
    packed_sint32_.Swap(&other->packed_sint32_);
    packed_sint64_.Swap(&other->packed_sint64_);
    packed_fixed32_.Swap(&other->packed_fixed32_);
    packed_fixed64_.Swap(&other->packed_fixed64_);
    packed_sfixed32_.Swap(&other->packed_sfixed32_);
    packed_sfixed64_.Swap(&other->packed_sfixed64_);
    packed_float_.Swap(&other->packed_float_);
    packed_double_.Swap(&other->packed_double_);
    packed_bool_.Swap(&other->packed_bool_);
    packed_enum_.Swap(&other->packed_enum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TestPackedTypesLite::GetTypeName() const {
  return "protobuf_unittest.TestPackedTypesLite";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TestAllExtensionsLite::TestAllExtensionsLite()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TestAllExtensionsLite::InitAsDefaultInstance() {
}

TestAllExtensionsLite::TestAllExtensionsLite(const TestAllExtensionsLite& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TestAllExtensionsLite::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestAllExtensionsLite::~TestAllExtensionsLite() {
  SharedDtor();
}

void TestAllExtensionsLite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestAllExtensionsLite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestAllExtensionsLite& TestAllExtensionsLite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2funittest_5flite_2eproto();
  return *default_instance_;
}

TestAllExtensionsLite* TestAllExtensionsLite::default_instance_ = NULL;

TestAllExtensionsLite* TestAllExtensionsLite::New() const {
  return new TestAllExtensionsLite;
}

void TestAllExtensionsLite::Clear() {
  _extensions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TestAllExtensionsLite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    if ((8u <= tag)) {
      DO_(_extensions_.ParseField(tag, input, default_instance_));
      continue;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void TestAllExtensionsLite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // Extension range [1, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1, 536870912, output);

}

int TestAllExtensionsLite::ByteSize() const {
  int total_size = 0;

  total_size += _extensions_.ByteSize();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestAllExtensionsLite::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestAllExtensionsLite*>(&from));
}

void TestAllExtensionsLite::MergeFrom(const TestAllExtensionsLite& from) {
  GOOGLE_CHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
}

void TestAllExtensionsLite::CopyFrom(const TestAllExtensionsLite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllExtensionsLite::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void TestAllExtensionsLite::Swap(TestAllExtensionsLite* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::std::string TestAllExtensionsLite::GetTypeName() const {
  return "protobuf_unittest.TestAllExtensionsLite";
}


// ===================================================================

#ifndef _MSC_VER
const int OptionalGroup_extension_lite::kAFieldNumber;
#endif  // !_MSC_VER

OptionalGroup_extension_lite::OptionalGroup_extension_lite()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void OptionalGroup_extension_lite::InitAsDefaultInstance() {
}

OptionalGroup_extension_lite::OptionalGroup_extension_lite(const OptionalGroup_extension_lite& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void OptionalGroup_extension_lite::SharedCtor() {
  _cached_size_ = 0;
  a_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OptionalGroup_extension_lite::~OptionalGroup_extension_lite() {
  SharedDtor();
}

void OptionalGroup_extension_lite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OptionalGroup_extension_lite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OptionalGroup_extension_lite& OptionalGroup_extension_lite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2funittest_5flite_2eproto();
  return *default_instance_;
}

OptionalGroup_extension_lite* OptionalGroup_extension_lite::default_instance_ = NULL;

OptionalGroup_extension_lite* OptionalGroup_extension_lite::New() const {
  return new OptionalGroup_extension_lite;
}

void OptionalGroup_extension_lite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    a_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool OptionalGroup_extension_lite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 a = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OptionalGroup_extension_lite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 a = 17;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->a(), output);
  }

}

int OptionalGroup_extension_lite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 a = 17;
    if (has_a()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptionalGroup_extension_lite::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OptionalGroup_extension_lite*>(&from));
}

void OptionalGroup_extension_lite::MergeFrom(const OptionalGroup_extension_lite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_a()) {
      set_a(from.a());
    }
  }
}

void OptionalGroup_extension_lite::CopyFrom(const OptionalGroup_extension_lite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionalGroup_extension_lite::IsInitialized() const {

  return true;
}

void OptionalGroup_extension_lite::Swap(OptionalGroup_extension_lite* other) {
  if (other != this) {
    std::swap(a_, other->a_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OptionalGroup_extension_lite::GetTypeName() const {
  return "protobuf_unittest.OptionalGroup_extension_lite";
}


// ===================================================================

#ifndef _MSC_VER
const int RepeatedGroup_extension_lite::kAFieldNumber;
#endif  // !_MSC_VER

RepeatedGroup_extension_lite::RepeatedGroup_extension_lite()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RepeatedGroup_extension_lite::InitAsDefaultInstance() {
}

RepeatedGroup_extension_lite::RepeatedGroup_extension_lite(const RepeatedGroup_extension_lite& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RepeatedGroup_extension_lite::SharedCtor() {
  _cached_size_ = 0;
  a_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RepeatedGroup_extension_lite::~RepeatedGroup_extension_lite() {
  SharedDtor();
}

void RepeatedGroup_extension_lite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RepeatedGroup_extension_lite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RepeatedGroup_extension_lite& RepeatedGroup_extension_lite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2funittest_5flite_2eproto();
  return *default_instance_;
}

RepeatedGroup_extension_lite* RepeatedGroup_extension_lite::default_instance_ = NULL;

RepeatedGroup_extension_lite* RepeatedGroup_extension_lite::New() const {
  return new RepeatedGroup_extension_lite;
}

void RepeatedGroup_extension_lite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    a_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RepeatedGroup_extension_lite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 a = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RepeatedGroup_extension_lite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 a = 47;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->a(), output);
  }

}

int RepeatedGroup_extension_lite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 a = 47;
    if (has_a()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RepeatedGroup_extension_lite::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RepeatedGroup_extension_lite*>(&from));
}

void RepeatedGroup_extension_lite::MergeFrom(const RepeatedGroup_extension_lite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_a()) {
      set_a(from.a());
    }
  }
}

void RepeatedGroup_extension_lite::CopyFrom(const RepeatedGroup_extension_lite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepeatedGroup_extension_lite::IsInitialized() const {

  return true;
}

void RepeatedGroup_extension_lite::Swap(RepeatedGroup_extension_lite* other) {
  if (other != this) {
    std::swap(a_, other->a_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RepeatedGroup_extension_lite::GetTypeName() const {
  return "protobuf_unittest.RepeatedGroup_extension_lite";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TestPackedExtensionsLite::TestPackedExtensionsLite()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TestPackedExtensionsLite::InitAsDefaultInstance() {
}

TestPackedExtensionsLite::TestPackedExtensionsLite(const TestPackedExtensionsLite& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TestPackedExtensionsLite::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestPackedExtensionsLite::~TestPackedExtensionsLite() {
  SharedDtor();
}

void TestPackedExtensionsLite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestPackedExtensionsLite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestPackedExtensionsLite& TestPackedExtensionsLite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2funittest_5flite_2eproto();
  return *default_instance_;
}

TestPackedExtensionsLite* TestPackedExtensionsLite::default_instance_ = NULL;

TestPackedExtensionsLite* TestPackedExtensionsLite::New() const {
  return new TestPackedExtensionsLite;
}

void TestPackedExtensionsLite::Clear() {
  _extensions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TestPackedExtensionsLite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    if ((8u <= tag)) {
      DO_(_extensions_.ParseField(tag, input, default_instance_));
      continue;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void TestPackedExtensionsLite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // Extension range [1, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1, 536870912, output);

}

int TestPackedExtensionsLite::ByteSize() const {
  int total_size = 0;

  total_size += _extensions_.ByteSize();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestPackedExtensionsLite::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestPackedExtensionsLite*>(&from));
}

void TestPackedExtensionsLite::MergeFrom(const TestPackedExtensionsLite& from) {
  GOOGLE_CHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
}

void TestPackedExtensionsLite::CopyFrom(const TestPackedExtensionsLite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestPackedExtensionsLite::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void TestPackedExtensionsLite::Swap(TestPackedExtensionsLite* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::std::string TestPackedExtensionsLite::GetTypeName() const {
  return "protobuf_unittest.TestPackedExtensionsLite";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int TestNestedExtensionLite::kNestedExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  TestNestedExtensionLite::nested_extension(kNestedExtensionFieldNumber, 0);
TestNestedExtensionLite::TestNestedExtensionLite()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TestNestedExtensionLite::InitAsDefaultInstance() {
}

TestNestedExtensionLite::TestNestedExtensionLite(const TestNestedExtensionLite& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TestNestedExtensionLite::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestNestedExtensionLite::~TestNestedExtensionLite() {
  SharedDtor();
}

void TestNestedExtensionLite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestNestedExtensionLite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestNestedExtensionLite& TestNestedExtensionLite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2funittest_5flite_2eproto();
  return *default_instance_;
}

TestNestedExtensionLite* TestNestedExtensionLite::default_instance_ = NULL;

TestNestedExtensionLite* TestNestedExtensionLite::New() const {
  return new TestNestedExtensionLite;
}

void TestNestedExtensionLite::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TestNestedExtensionLite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void TestNestedExtensionLite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int TestNestedExtensionLite::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestNestedExtensionLite::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestNestedExtensionLite*>(&from));
}

void TestNestedExtensionLite::MergeFrom(const TestNestedExtensionLite& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void TestNestedExtensionLite::CopyFrom(const TestNestedExtensionLite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestNestedExtensionLite::IsInitialized() const {

  return true;
}

void TestNestedExtensionLite::Swap(TestNestedExtensionLite* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TestNestedExtensionLite::GetTypeName() const {
  return "protobuf_unittest.TestNestedExtensionLite";
}


// ===================================================================

#ifndef _MSC_VER
const int TestDeprecatedLite::kDeprecatedFieldFieldNumber;
#endif  // !_MSC_VER

TestDeprecatedLite::TestDeprecatedLite()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TestDeprecatedLite::InitAsDefaultInstance() {
}

TestDeprecatedLite::TestDeprecatedLite(const TestDeprecatedLite& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TestDeprecatedLite::SharedCtor() {
  _cached_size_ = 0;
  deprecated_field_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestDeprecatedLite::~TestDeprecatedLite() {
  SharedDtor();
}

void TestDeprecatedLite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestDeprecatedLite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestDeprecatedLite& TestDeprecatedLite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2funittest_5flite_2eproto();
  return *default_instance_;
}

TestDeprecatedLite* TestDeprecatedLite::default_instance_ = NULL;

TestDeprecatedLite* TestDeprecatedLite::New() const {
  return new TestDeprecatedLite;
}

void TestDeprecatedLite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    deprecated_field_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TestDeprecatedLite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 deprecated_field = 1 [deprecated = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deprecated_field_)));
          set_has_deprecated_field();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestDeprecatedLite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 deprecated_field = 1 [deprecated = true];
  if (has_deprecated_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->deprecated_field(), output);
  }

}

int TestDeprecatedLite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 deprecated_field = 1 [deprecated = true];
    if (has_deprecated_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deprecated_field());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestDeprecatedLite::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestDeprecatedLite*>(&from));
}

void TestDeprecatedLite::MergeFrom(const TestDeprecatedLite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deprecated_field()) {
      set_deprecated_field(from.deprecated_field());
    }
  }
}

void TestDeprecatedLite::CopyFrom(const TestDeprecatedLite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestDeprecatedLite::IsInitialized() const {

  return true;
}

void TestDeprecatedLite::Swap(TestDeprecatedLite* other) {
  if (other != this) {
    std::swap(deprecated_field_, other->deprecated_field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TestDeprecatedLite::GetTypeName() const {
  return "protobuf_unittest.TestDeprecatedLite";
}


// ===================================================================

#ifndef _MSC_VER
const int TestParsingMergeLite_RepeatedFieldsGenerator_Group1::kField1FieldNumber;
#endif  // !_MSC_VER

TestParsingMergeLite_RepeatedFieldsGenerator_Group1::TestParsingMergeLite_RepeatedFieldsGenerator_Group1()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group1::InitAsDefaultInstance() {
  field1_ = const_cast< ::protobuf_unittest::TestAllTypesLite*>(&::protobuf_unittest::TestAllTypesLite::default_instance());
}

TestParsingMergeLite_RepeatedFieldsGenerator_Group1::TestParsingMergeLite_RepeatedFieldsGenerator_Group1(const TestParsingMergeLite_RepeatedFieldsGenerator_Group1& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group1::SharedCtor() {
  _cached_size_ = 0;
  field1_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestParsingMergeLite_RepeatedFieldsGenerator_Group1::~TestParsingMergeLite_RepeatedFieldsGenerator_Group1() {
  SharedDtor();
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group1::SharedDtor() {
  if (this != default_instance_) {
    delete field1_;
  }
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestParsingMergeLite_RepeatedFieldsGenerator_Group1& TestParsingMergeLite_RepeatedFieldsGenerator_Group1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2funittest_5flite_2eproto();
  return *default_instance_;
}

TestParsingMergeLite_RepeatedFieldsGenerator_Group1* TestParsingMergeLite_RepeatedFieldsGenerator_Group1::default_instance_ = NULL;

TestParsingMergeLite_RepeatedFieldsGenerator_Group1* TestParsingMergeLite_RepeatedFieldsGenerator_Group1::New() const {
  return new TestParsingMergeLite_RepeatedFieldsGenerator_Group1;
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_field1()) {
      if (field1_ != NULL) field1_->::protobuf_unittest::TestAllTypesLite::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TestParsingMergeLite_RepeatedFieldsGenerator_Group1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobuf_unittest.TestAllTypesLite field1 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protobuf_unittest.TestAllTypesLite field1 = 11;
  if (has_field1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->field1(), output);
  }

}

int TestParsingMergeLite_RepeatedFieldsGenerator_Group1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protobuf_unittest.TestAllTypesLite field1 = 11;
    if (has_field1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->field1());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group1::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestParsingMergeLite_RepeatedFieldsGenerator_Group1*>(&from));
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group1::MergeFrom(const TestParsingMergeLite_RepeatedFieldsGenerator_Group1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field1()) {
      mutable_field1()->::protobuf_unittest::TestAllTypesLite::MergeFrom(from.field1());
    }
  }
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group1::CopyFrom(const TestParsingMergeLite_RepeatedFieldsGenerator_Group1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestParsingMergeLite_RepeatedFieldsGenerator_Group1::IsInitialized() const {

  return true;
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group1::Swap(TestParsingMergeLite_RepeatedFieldsGenerator_Group1* other) {
  if (other != this) {
    std::swap(field1_, other->field1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TestParsingMergeLite_RepeatedFieldsGenerator_Group1::GetTypeName() const {
  return "protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group1";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TestParsingMergeLite_RepeatedFieldsGenerator_Group2::kField1FieldNumber;
#endif  // !_MSC_VER

TestParsingMergeLite_RepeatedFieldsGenerator_Group2::TestParsingMergeLite_RepeatedFieldsGenerator_Group2()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group2::InitAsDefaultInstance() {
  field1_ = const_cast< ::protobuf_unittest::TestAllTypesLite*>(&::protobuf_unittest::TestAllTypesLite::default_instance());
}

TestParsingMergeLite_RepeatedFieldsGenerator_Group2::TestParsingMergeLite_RepeatedFieldsGenerator_Group2(const TestParsingMergeLite_RepeatedFieldsGenerator_Group2& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group2::SharedCtor() {
  _cached_size_ = 0;
  field1_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestParsingMergeLite_RepeatedFieldsGenerator_Group2::~TestParsingMergeLite_RepeatedFieldsGenerator_Group2() {
  SharedDtor();
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group2::SharedDtor() {
  if (this != default_instance_) {
    delete field1_;
  }
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestParsingMergeLite_RepeatedFieldsGenerator_Group2& TestParsingMergeLite_RepeatedFieldsGenerator_Group2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2funittest_5flite_2eproto();
  return *default_instance_;
}

TestParsingMergeLite_RepeatedFieldsGenerator_Group2* TestParsingMergeLite_RepeatedFieldsGenerator_Group2::default_instance_ = NULL;

TestParsingMergeLite_RepeatedFieldsGenerator_Group2* TestParsingMergeLite_RepeatedFieldsGenerator_Group2::New() const {
  return new TestParsingMergeLite_RepeatedFieldsGenerator_Group2;
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_field1()) {
      if (field1_ != NULL) field1_->::protobuf_unittest::TestAllTypesLite::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TestParsingMergeLite_RepeatedFieldsGenerator_Group2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobuf_unittest.TestAllTypesLite field1 = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protobuf_unittest.TestAllTypesLite field1 = 21;
  if (has_field1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->field1(), output);
  }

}

int TestParsingMergeLite_RepeatedFieldsGenerator_Group2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protobuf_unittest.TestAllTypesLite field1 = 21;
    if (has_field1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->field1());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group2::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestParsingMergeLite_RepeatedFieldsGenerator_Group2*>(&from));
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group2::MergeFrom(const TestParsingMergeLite_RepeatedFieldsGenerator_Group2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field1()) {
      mutable_field1()->::protobuf_unittest::TestAllTypesLite::MergeFrom(from.field1());
    }
  }
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group2::CopyFrom(const TestParsingMergeLite_RepeatedFieldsGenerator_Group2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestParsingMergeLite_RepeatedFieldsGenerator_Group2::IsInitialized() const {

  return true;
}

void TestParsingMergeLite_RepeatedFieldsGenerator_Group2::Swap(TestParsingMergeLite_RepeatedFieldsGenerator_Group2* other) {
  if (other != this) {
    std::swap(field1_, other->field1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TestParsingMergeLite_RepeatedFieldsGenerator_Group2::GetTypeName() const {
  return "protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator.Group2";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TestParsingMergeLite_RepeatedFieldsGenerator::kField1FieldNumber;
const int TestParsingMergeLite_RepeatedFieldsGenerator::kField2FieldNumber;
const int TestParsingMergeLite_RepeatedFieldsGenerator::kField3FieldNumber;
const int TestParsingMergeLite_RepeatedFieldsGenerator::kGroup1FieldNumber;
const int TestParsingMergeLite_RepeatedFieldsGenerator::kGroup2FieldNumber;
const int TestParsingMergeLite_RepeatedFieldsGenerator::kExt1FieldNumber;
const int TestParsingMergeLite_RepeatedFieldsGenerator::kExt2FieldNumber;
#endif  // !_MSC_VER

TestParsingMergeLite_RepeatedFieldsGenerator::TestParsingMergeLite_RepeatedFieldsGenerator()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TestParsingMergeLite_RepeatedFieldsGenerator::InitAsDefaultInstance() {
}

TestParsingMergeLite_RepeatedFieldsGenerator::TestParsingMergeLite_RepeatedFieldsGenerator(const TestParsingMergeLite_RepeatedFieldsGenerator& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TestParsingMergeLite_RepeatedFieldsGenerator::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestParsingMergeLite_RepeatedFieldsGenerator::~TestParsingMergeLite_RepeatedFieldsGenerator() {
  SharedDtor();
}

void TestParsingMergeLite_RepeatedFieldsGenerator::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestParsingMergeLite_RepeatedFieldsGenerator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestParsingMergeLite_RepeatedFieldsGenerator& TestParsingMergeLite_RepeatedFieldsGenerator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2funittest_5flite_2eproto();
  return *default_instance_;
}

TestParsingMergeLite_RepeatedFieldsGenerator* TestParsingMergeLite_RepeatedFieldsGenerator::default_instance_ = NULL;

TestParsingMergeLite_RepeatedFieldsGenerator* TestParsingMergeLite_RepeatedFieldsGenerator::New() const {
  return new TestParsingMergeLite_RepeatedFieldsGenerator;
}

void TestParsingMergeLite_RepeatedFieldsGenerator::Clear() {
  field1_.Clear();
  field2_.Clear();
  field3_.Clear();
  group1_.Clear();
  group2_.Clear();
  ext1_.Clear();
  ext2_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TestParsingMergeLite_RepeatedFieldsGenerator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf_unittest.TestAllTypesLite field1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_field1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_field1;
        if (input->ExpectTag(18)) goto parse_field2;
        break;
      }

      // repeated .protobuf_unittest.TestAllTypesLite field2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_field2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_field2;
        if (input->ExpectTag(26)) goto parse_field3;
        break;
      }

      // repeated .protobuf_unittest.TestAllTypesLite field3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_field3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_field3;
        if (input->ExpectTag(83)) goto parse_group1;
        break;
      }

      // repeated group Group1 = 10 {
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_group1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                10, input, add_group1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(83)) goto parse_group1;
        if (input->ExpectTag(163)) goto parse_group2;
        break;
      }

      // repeated group Group2 = 20 {
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_group2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                20, input, add_group2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(163)) goto parse_group2;
        if (input->ExpectTag(8002)) goto parse_ext1;
        break;
      }

      // repeated .protobuf_unittest.TestAllTypesLite ext1 = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ext1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ext1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_ext1;
        if (input->ExpectTag(8010)) goto parse_ext2;
        break;
      }

      // repeated .protobuf_unittest.TestAllTypesLite ext2 = 1001;
      case 1001: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ext2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ext2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8010)) goto parse_ext2;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestParsingMergeLite_RepeatedFieldsGenerator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf_unittest.TestAllTypesLite field1 = 1;
  for (int i = 0; i < this->field1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->field1(i), output);
  }

  // repeated .protobuf_unittest.TestAllTypesLite field2 = 2;
  for (int i = 0; i < this->field2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->field2(i), output);
  }

  // repeated .protobuf_unittest.TestAllTypesLite field3 = 3;
  for (int i = 0; i < this->field3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->field3(i), output);
  }

  // repeated group Group1 = 10 {
  for (int i = 0; i < this->group1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroup(
      10, this->group1(i), output);
  }

  // repeated group Group2 = 20 {
  for (int i = 0; i < this->group2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroup(
      20, this->group2(i), output);
  }

  // repeated .protobuf_unittest.TestAllTypesLite ext1 = 1000;
  for (int i = 0; i < this->ext1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1000, this->ext1(i), output);
  }

  // repeated .protobuf_unittest.TestAllTypesLite ext2 = 1001;
  for (int i = 0; i < this->ext2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1001, this->ext2(i), output);
  }

}

int TestParsingMergeLite_RepeatedFieldsGenerator::ByteSize() const {
  int total_size = 0;

  // repeated .protobuf_unittest.TestAllTypesLite field1 = 1;
  total_size += 1 * this->field1_size();
  for (int i = 0; i < this->field1_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->field1(i));
  }

  // repeated .protobuf_unittest.TestAllTypesLite field2 = 2;
  total_size += 1 * this->field2_size();
  for (int i = 0; i < this->field2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->field2(i));
  }

  // repeated .protobuf_unittest.TestAllTypesLite field3 = 3;
  total_size += 1 * this->field3_size();
  for (int i = 0; i < this->field3_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->field3(i));
  }

  // repeated group Group1 = 10 {
  total_size += 2 * this->group1_size();
  for (int i = 0; i < this->group1_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->group1(i));
  }

  // repeated group Group2 = 20 {
  total_size += 4 * this->group2_size();
  for (int i = 0; i < this->group2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->group2(i));
  }

  // repeated .protobuf_unittest.TestAllTypesLite ext1 = 1000;
  total_size += 2 * this->ext1_size();
  for (int i = 0; i < this->ext1_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ext1(i));
  }

  // repeated .protobuf_unittest.TestAllTypesLite ext2 = 1001;
  total_size += 2 * this->ext2_size();
  for (int i = 0; i < this->ext2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ext2(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestParsingMergeLite_RepeatedFieldsGenerator::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestParsingMergeLite_RepeatedFieldsGenerator*>(&from));
}

void TestParsingMergeLite_RepeatedFieldsGenerator::MergeFrom(const TestParsingMergeLite_RepeatedFieldsGenerator& from) {
  GOOGLE_CHECK_NE(&from, this);
  field1_.MergeFrom(from.field1_);
  field2_.MergeFrom(from.field2_);
  field3_.MergeFrom(from.field3_);
  group1_.MergeFrom(from.group1_);
  group2_.MergeFrom(from.group2_);
  ext1_.MergeFrom(from.ext1_);
  ext2_.MergeFrom(from.ext2_);
}

void TestParsingMergeLite_RepeatedFieldsGenerator::CopyFrom(const TestParsingMergeLite_RepeatedFieldsGenerator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestParsingMergeLite_RepeatedFieldsGenerator::IsInitialized() const {

  return true;
}

void TestParsingMergeLite_RepeatedFieldsGenerator::Swap(TestParsingMergeLite_RepeatedFieldsGenerator* other) {
  if (other != this) {
    field1_.Swap(&other->field1_);
    field2_.Swap(&other->field2_);
    field3_.Swap(&other->field3_);
    group1_.Swap(&other->group1_);
    group2_.Swap(&other->group2_);
    ext1_.Swap(&other->ext1_);
    ext2_.Swap(&other->ext2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TestParsingMergeLite_RepeatedFieldsGenerator::GetTypeName() const {
  return "protobuf_unittest.TestParsingMergeLite.RepeatedFieldsGenerator";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TestParsingMergeLite_OptionalGroup::kOptionalGroupAllTypesFieldNumber;
#endif  // !_MSC_VER

TestParsingMergeLite_OptionalGroup::TestParsingMergeLite_OptionalGroup()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TestParsingMergeLite_OptionalGroup::InitAsDefaultInstance() {
  optional_group_all_types_ = const_cast< ::protobuf_unittest::TestAllTypesLite*>(&::protobuf_unittest::TestAllTypesLite::default_instance());
}

TestParsingMergeLite_OptionalGroup::TestParsingMergeLite_OptionalGroup(const TestParsingMergeLite_OptionalGroup& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TestParsingMergeLite_OptionalGroup::SharedCtor() {
  _cached_size_ = 0;
  optional_group_all_types_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestParsingMergeLite_OptionalGroup::~TestParsingMergeLite_OptionalGroup() {
  SharedDtor();
}

void TestParsingMergeLite_OptionalGroup::SharedDtor() {
  if (this != default_instance_) {
    delete optional_group_all_types_;
  }
}

void TestParsingMergeLite_OptionalGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestParsingMergeLite_OptionalGroup& TestParsingMergeLite_OptionalGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2funittest_5flite_2eproto();
  return *default_instance_;
}

TestParsingMergeLite_OptionalGroup* TestParsingMergeLite_OptionalGroup::default_instance_ = NULL;

TestParsingMergeLite_OptionalGroup* TestParsingMergeLite_OptionalGroup::New() const {
  return new TestParsingMergeLite_OptionalGroup;
}

void TestParsingMergeLite_OptionalGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_optional_group_all_types()) {
      if (optional_group_all_types_ != NULL) optional_group_all_types_->::protobuf_unittest::TestAllTypesLite::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TestParsingMergeLite_OptionalGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobuf_unittest.TestAllTypesLite optional_group_all_types = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optional_group_all_types()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestParsingMergeLite_OptionalGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protobuf_unittest.TestAllTypesLite optional_group_all_types = 11;
  if (has_optional_group_all_types()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->optional_group_all_types(), output);
  }

}

int TestParsingMergeLite_OptionalGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protobuf_unittest.TestAllTypesLite optional_group_all_types = 11;
    if (has_optional_group_all_types()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->optional_group_all_types());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestParsingMergeLite_OptionalGroup::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestParsingMergeLite_OptionalGroup*>(&from));
}

void TestParsingMergeLite_OptionalGroup::MergeFrom(const TestParsingMergeLite_OptionalGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_optional_group_all_types()) {
      mutable_optional_group_all_types()->::protobuf_unittest::TestAllTypesLite::MergeFrom(from.optional_group_all_types());
    }
  }
}

void TestParsingMergeLite_OptionalGroup::CopyFrom(const TestParsingMergeLite_OptionalGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestParsingMergeLite_OptionalGroup::IsInitialized() const {

  return true;
}

void TestParsingMergeLite_OptionalGroup::Swap(TestParsingMergeLite_OptionalGroup* other) {
  if (other != this) {
    std::swap(optional_group_all_types_, other->optional_group_all_types_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TestParsingMergeLite_OptionalGroup::GetTypeName() const {
  return "protobuf_unittest.TestParsingMergeLite.OptionalGroup";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TestParsingMergeLite_RepeatedGroup::kRepeatedGroupAllTypesFieldNumber;
#endif  // !_MSC_VER

TestParsingMergeLite_RepeatedGroup::TestParsingMergeLite_RepeatedGroup()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TestParsingMergeLite_RepeatedGroup::InitAsDefaultInstance() {
  repeated_group_all_types_ = const_cast< ::protobuf_unittest::TestAllTypesLite*>(&::protobuf_unittest::TestAllTypesLite::default_instance());
}

TestParsingMergeLite_RepeatedGroup::TestParsingMergeLite_RepeatedGroup(const TestParsingMergeLite_RepeatedGroup& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TestParsingMergeLite_RepeatedGroup::SharedCtor() {
  _cached_size_ = 0;
  repeated_group_all_types_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestParsingMergeLite_RepeatedGroup::~TestParsingMergeLite_RepeatedGroup() {
  SharedDtor();
}

void TestParsingMergeLite_RepeatedGroup::SharedDtor() {
  if (this != default_instance_) {
    delete repeated_group_all_types_;
  }
}

void TestParsingMergeLite_RepeatedGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestParsingMergeLite_RepeatedGroup& TestParsingMergeLite_RepeatedGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2funittest_5flite_2eproto();
  return *default_instance_;
}

TestParsingMergeLite_RepeatedGroup* TestParsingMergeLite_RepeatedGroup::default_instance_ = NULL;

TestParsingMergeLite_RepeatedGroup* TestParsingMergeLite_RepeatedGroup::New() const {
  return new TestParsingMergeLite_RepeatedGroup;
}

void TestParsingMergeLite_RepeatedGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_repeated_group_all_types()) {
      if (repeated_group_all_types_ != NULL) repeated_group_all_types_->::protobuf_unittest::TestAllTypesLite::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TestParsingMergeLite_RepeatedGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobuf_unittest.TestAllTypesLite repeated_group_all_types = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_repeated_group_all_types()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestParsingMergeLite_RepeatedGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protobuf_unittest.TestAllTypesLite repeated_group_all_types = 21;
  if (has_repeated_group_all_types()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->repeated_group_all_types(), output);
  }

}

int TestParsingMergeLite_RepeatedGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protobuf_unittest.TestAllTypesLite repeated_group_all_types = 21;
    if (has_repeated_group_all_types()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->repeated_group_all_types());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestParsingMergeLite_RepeatedGroup::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestParsingMergeLite_RepeatedGroup*>(&from));
}

void TestParsingMergeLite_RepeatedGroup::MergeFrom(const TestParsingMergeLite_RepeatedGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_repeated_group_all_types()) {
      mutable_repeated_group_all_types()->::protobuf_unittest::TestAllTypesLite::MergeFrom(from.repeated_group_all_types());
    }
  }
}

void TestParsingMergeLite_RepeatedGroup::CopyFrom(const TestParsingMergeLite_RepeatedGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestParsingMergeLite_RepeatedGroup::IsInitialized() const {

  return true;
}

void TestParsingMergeLite_RepeatedGroup::Swap(TestParsingMergeLite_RepeatedGroup* other) {
  if (other != this) {
    std::swap(repeated_group_all_types_, other->repeated_group_all_types_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TestParsingMergeLite_RepeatedGroup::GetTypeName() const {
  return "protobuf_unittest.TestParsingMergeLite.RepeatedGroup";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TestParsingMergeLite::kRequiredAllTypesFieldNumber;
const int TestParsingMergeLite::kOptionalAllTypesFieldNumber;
const int TestParsingMergeLite::kRepeatedAllTypesFieldNumber;
const int TestParsingMergeLite::kOptionalgroupFieldNumber;
const int TestParsingMergeLite::kRepeatedgroupFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int TestParsingMergeLite::kOptionalExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestParsingMergeLite,
    ::google::protobuf::internal::MessageTypeTraits< ::protobuf_unittest::TestAllTypesLite >, 11, false >
  TestParsingMergeLite::optional_ext(kOptionalExtFieldNumber, ::protobuf_unittest::TestAllTypesLite::default_instance());
#ifndef _MSC_VER
const int TestParsingMergeLite::kRepeatedExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestParsingMergeLite,
    ::google::protobuf::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::TestAllTypesLite >, 11, false >
  TestParsingMergeLite::repeated_ext(kRepeatedExtFieldNumber, ::protobuf_unittest::TestAllTypesLite::default_instance());
TestParsingMergeLite::TestParsingMergeLite()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TestParsingMergeLite::InitAsDefaultInstance() {
  required_all_types_ = const_cast< ::protobuf_unittest::TestAllTypesLite*>(&::protobuf_unittest::TestAllTypesLite::default_instance());
  optional_all_types_ = const_cast< ::protobuf_unittest::TestAllTypesLite*>(&::protobuf_unittest::TestAllTypesLite::default_instance());
  optionalgroup_ = const_cast< ::protobuf_unittest::TestParsingMergeLite_OptionalGroup*>(&::protobuf_unittest::TestParsingMergeLite_OptionalGroup::default_instance());
}

TestParsingMergeLite::TestParsingMergeLite(const TestParsingMergeLite& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TestParsingMergeLite::SharedCtor() {
  _cached_size_ = 0;
  required_all_types_ = NULL;
  optional_all_types_ = NULL;
  optionalgroup_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestParsingMergeLite::~TestParsingMergeLite() {
  SharedDtor();
}

void TestParsingMergeLite::SharedDtor() {
  if (this != default_instance_) {
    delete required_all_types_;
    delete optional_all_types_;
    delete optionalgroup_;
  }
}

void TestParsingMergeLite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TestParsingMergeLite& TestParsingMergeLite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2funittest_5flite_2eproto();
  return *default_instance_;
}

TestParsingMergeLite* TestParsingMergeLite::default_instance_ = NULL;

TestParsingMergeLite* TestParsingMergeLite::New() const {
  return new TestParsingMergeLite;
}

void TestParsingMergeLite::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_required_all_types()) {
      if (required_all_types_ != NULL) required_all_types_->::protobuf_unittest::TestAllTypesLite::Clear();
    }
    if (has_optional_all_types()) {
      if (optional_all_types_ != NULL) optional_all_types_->::protobuf_unittest::TestAllTypesLite::Clear();
    }
    if (has_optionalgroup()) {
      if (optionalgroup_ != NULL) optionalgroup_->::protobuf_unittest::TestParsingMergeLite_OptionalGroup::Clear();
    }
  }
  repeated_all_types_.Clear();
  repeatedgroup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TestParsingMergeLite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobuf_unittest.TestAllTypesLite required_all_types = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_required_all_types()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_optional_all_types;
        break;
      }

      // optional .protobuf_unittest.TestAllTypesLite optional_all_types = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_optional_all_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optional_all_types()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_repeated_all_types;
        break;
      }

      // repeated .protobuf_unittest.TestAllTypesLite repeated_all_types = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_repeated_all_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_repeated_all_types()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_repeated_all_types;
        if (input->ExpectTag(83)) goto parse_optionalgroup;
        break;
      }

      // optional group OptionalGroup = 10 {
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_optionalgroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                10, input, mutable_optionalgroup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(163)) goto parse_repeatedgroup;
        break;
      }

      // repeated group RepeatedGroup = 20 {
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_repeatedgroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                20, input, add_repeatedgroup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(163)) goto parse_repeatedgroup;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestParsingMergeLite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobuf_unittest.TestAllTypesLite required_all_types = 1;
  if (has_required_all_types()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->required_all_types(), output);
  }

  // optional .protobuf_unittest.TestAllTypesLite optional_all_types = 2;
  if (has_optional_all_types()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->optional_all_types(), output);
  }

  // repeated .protobuf_unittest.TestAllTypesLite repeated_all_types = 3;
  for (int i = 0; i < this->repeated_all_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->repeated_all_types(i), output);
  }

  // optional group OptionalGroup = 10 {
  if (has_optionalgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteGroup(
      10, this->optionalgroup(), output);
  }

  // repeated group RepeatedGroup = 20 {
  for (int i = 0; i < this->repeatedgroup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroup(
      20, this->repeatedgroup(i), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

}

int TestParsingMergeLite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobuf_unittest.TestAllTypesLite required_all_types = 1;
    if (has_required_all_types()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->required_all_types());
    }

    // optional .protobuf_unittest.TestAllTypesLite optional_all_types = 2;
    if (has_optional_all_types()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->optional_all_types());
    }

    // optional group OptionalGroup = 10 {
    if (has_optionalgroup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
          this->optionalgroup());
    }

  }
  // repeated .protobuf_unittest.TestAllTypesLite repeated_all_types = 3;
  total_size += 1 * this->repeated_all_types_size();
  for (int i = 0; i < this->repeated_all_types_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->repeated_all_types(i));
  }

  // repeated group RepeatedGroup = 20 {
  total_size += 4 * this->repeatedgroup_size();
  for (int i = 0; i < this->repeatedgroup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->repeatedgroup(i));
  }

  total_size += _extensions_.ByteSize();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestParsingMergeLite::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TestParsingMergeLite*>(&from));
}

void TestParsingMergeLite::MergeFrom(const TestParsingMergeLite& from) {
  GOOGLE_CHECK_NE(&from, this);
  repeated_all_types_.MergeFrom(from.repeated_all_types_);
  repeatedgroup_.MergeFrom(from.repeatedgroup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_required_all_types()) {
      mutable_required_all_types()->::protobuf_unittest::TestAllTypesLite::MergeFrom(from.required_all_types());
    }
    if (from.has_optional_all_types()) {
      mutable_optional_all_types()->::protobuf_unittest::TestAllTypesLite::MergeFrom(from.optional_all_types());
    }
    if (from.has_optionalgroup()) {
      mutable_optionalgroup()->::protobuf_unittest::TestParsingMergeLite_OptionalGroup::MergeFrom(from.optionalgroup());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
}

void TestParsingMergeLite::CopyFrom(const TestParsingMergeLite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestParsingMergeLite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void TestParsingMergeLite::Swap(TestParsingMergeLite* other) {
  if (other != this) {
    std::swap(required_all_types_, other->required_all_types_);
    std::swap(optional_all_types_, other->optional_all_types_);
    repeated_all_types_.Swap(&other->repeated_all_types_);
    std::swap(optionalgroup_, other->optionalgroup_);
    repeatedgroup_.Swap(&other->repeatedgroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::std::string TestParsingMergeLite::GetTypeName() const {
  return "protobuf_unittest.TestParsingMergeLite";
}

::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  optional_int32_extension_lite(kOptionalInt32ExtensionLiteFieldNumber, 0);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int64 >, 3, false >
  optional_int64_extension_lite(kOptionalInt64ExtensionLiteFieldNumber, GOOGLE_LONGLONG(0));
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::uint32 >, 13, false >
  optional_uint32_extension_lite(kOptionalUint32ExtensionLiteFieldNumber, 0u);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::uint64 >, 4, false >
  optional_uint64_extension_lite(kOptionalUint64ExtensionLiteFieldNumber, GOOGLE_ULONGLONG(0));
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 17, false >
  optional_sint32_extension_lite(kOptionalSint32ExtensionLiteFieldNumber, 0);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int64 >, 18, false >
  optional_sint64_extension_lite(kOptionalSint64ExtensionLiteFieldNumber, GOOGLE_LONGLONG(0));
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::uint32 >, 7, false >
  optional_fixed32_extension_lite(kOptionalFixed32ExtensionLiteFieldNumber, 0u);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::uint64 >, 6, false >
  optional_fixed64_extension_lite(kOptionalFixed64ExtensionLiteFieldNumber, GOOGLE_ULONGLONG(0));
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 15, false >
  optional_sfixed32_extension_lite(kOptionalSfixed32ExtensionLiteFieldNumber, 0);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int64 >, 16, false >
  optional_sfixed64_extension_lite(kOptionalSfixed64ExtensionLiteFieldNumber, GOOGLE_LONGLONG(0));
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::PrimitiveTypeTraits< float >, 2, false >
  optional_float_extension_lite(kOptionalFloatExtensionLiteFieldNumber, 0);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::PrimitiveTypeTraits< double >, 1, false >
  optional_double_extension_lite(kOptionalDoubleExtensionLiteFieldNumber, 0);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  optional_bool_extension_lite(kOptionalBoolExtensionLiteFieldNumber, false);
const ::std::string optional_string_extension_lite_default("");
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  optional_string_extension_lite(kOptionalStringExtensionLiteFieldNumber, optional_string_extension_lite_default);
const ::std::string optional_bytes_extension_lite_default("");
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::StringTypeTraits, 12, false >
  optional_bytes_extension_lite(kOptionalBytesExtensionLiteFieldNumber, optional_bytes_extension_lite_default);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::MessageTypeTraits< ::protobuf_unittest::OptionalGroup_extension_lite >, 10, false >
  optionalgroup_extension_lite(kOptionalgroupExtensionLiteFieldNumber, ::protobuf_unittest::OptionalGroup_extension_lite::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::MessageTypeTraits< ::protobuf_unittest::TestAllTypesLite_NestedMessage >, 11, false >
  optional_nested_message_extension_lite(kOptionalNestedMessageExtensionLiteFieldNumber, ::protobuf_unittest::TestAllTypesLite_NestedMessage::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::MessageTypeTraits< ::protobuf_unittest::ForeignMessageLite >, 11, false >
  optional_foreign_message_extension_lite(kOptionalForeignMessageExtensionLiteFieldNumber, ::protobuf_unittest::ForeignMessageLite::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::MessageTypeTraits< ::protobuf_unittest_import::ImportMessageLite >, 11, false >
  optional_import_message_extension_lite(kOptionalImportMessageExtensionLiteFieldNumber, ::protobuf_unittest_import::ImportMessageLite::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::EnumTypeTraits< ::protobuf_unittest::TestAllTypesLite_NestedEnum, ::protobuf_unittest::TestAllTypesLite_NestedEnum_IsValid>, 14, false >
  optional_nested_enum_extension_lite(kOptionalNestedEnumExtensionLiteFieldNumber, static_cast< ::protobuf_unittest::TestAllTypesLite_NestedEnum >(1));
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::EnumTypeTraits< ::protobuf_unittest::ForeignEnumLite, ::protobuf_unittest::ForeignEnumLite_IsValid>, 14, false >
  optional_foreign_enum_extension_lite(kOptionalForeignEnumExtensionLiteFieldNumber, static_cast< ::protobuf_unittest::ForeignEnumLite >(4));
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::EnumTypeTraits< ::protobuf_unittest_import::ImportEnumLite, ::protobuf_unittest_import::ImportEnumLite_IsValid>, 14, false >
  optional_import_enum_extension_lite(kOptionalImportEnumExtensionLiteFieldNumber, static_cast< ::protobuf_unittest_import::ImportEnumLite >(7));
const ::std::string optional_string_piece_extension_lite_default("");
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  optional_string_piece_extension_lite(kOptionalStringPieceExtensionLiteFieldNumber, optional_string_piece_extension_lite_default);
const ::std::string optional_cord_extension_lite_default("");
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  optional_cord_extension_lite(kOptionalCordExtensionLiteFieldNumber, optional_cord_extension_lite_default);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::MessageTypeTraits< ::protobuf_unittest_import::PublicImportMessageLite >, 11, false >
  optional_public_import_message_extension_lite(kOptionalPublicImportMessageExtensionLiteFieldNumber, ::protobuf_unittest_import::PublicImportMessageLite::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::MessageTypeTraits< ::protobuf_unittest::TestAllTypesLite_NestedMessage >, 11, false >
  optional_lazy_message_extension_lite(kOptionalLazyMessageExtensionLiteFieldNumber, ::protobuf_unittest::TestAllTypesLite_NestedMessage::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  repeated_int32_extension_lite(kRepeatedInt32ExtensionLiteFieldNumber, 0);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< ::google::protobuf::int64 >, 3, false >
  repeated_int64_extension_lite(kRepeatedInt64ExtensionLiteFieldNumber, GOOGLE_LONGLONG(0));
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< ::google::protobuf::uint32 >, 13, false >
  repeated_uint32_extension_lite(kRepeatedUint32ExtensionLiteFieldNumber, 0u);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< ::google::protobuf::uint64 >, 4, false >
  repeated_uint64_extension_lite(kRepeatedUint64ExtensionLiteFieldNumber, GOOGLE_ULONGLONG(0));
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< ::google::protobuf::int32 >, 17, false >
  repeated_sint32_extension_lite(kRepeatedSint32ExtensionLiteFieldNumber, 0);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< ::google::protobuf::int64 >, 18, false >
  repeated_sint64_extension_lite(kRepeatedSint64ExtensionLiteFieldNumber, GOOGLE_LONGLONG(0));
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< ::google::protobuf::uint32 >, 7, false >
  repeated_fixed32_extension_lite(kRepeatedFixed32ExtensionLiteFieldNumber, 0u);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< ::google::protobuf::uint64 >, 6, false >
  repeated_fixed64_extension_lite(kRepeatedFixed64ExtensionLiteFieldNumber, GOOGLE_ULONGLONG(0));
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< ::google::protobuf::int32 >, 15, false >
  repeated_sfixed32_extension_lite(kRepeatedSfixed32ExtensionLiteFieldNumber, 0);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< ::google::protobuf::int64 >, 16, false >
  repeated_sfixed64_extension_lite(kRepeatedSfixed64ExtensionLiteFieldNumber, GOOGLE_LONGLONG(0));
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< float >, 2, false >
  repeated_float_extension_lite(kRepeatedFloatExtensionLiteFieldNumber, 0);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< double >, 1, false >
  repeated_double_extension_lite(kRepeatedDoubleExtensionLiteFieldNumber, 0);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< bool >, 8, false >
  repeated_bool_extension_lite(kRepeatedBoolExtensionLiteFieldNumber, false);
const ::std::string repeated_string_extension_lite_default("");
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::RepeatedStringTypeTraits, 9, false >
  repeated_string_extension_lite(kRepeatedStringExtensionLiteFieldNumber, repeated_string_extension_lite_default);
const ::std::string repeated_bytes_extension_lite_default("");
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::RepeatedStringTypeTraits, 12, false >
  repeated_bytes_extension_lite(kRepeatedBytesExtensionLiteFieldNumber, repeated_bytes_extension_lite_default);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::RepeatedGroup_extension_lite >, 10, false >
  repeatedgroup_extension_lite(kRepeatedgroupExtensionLiteFieldNumber, ::protobuf_unittest::RepeatedGroup_extension_lite::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::TestAllTypesLite_NestedMessage >, 11, false >
  repeated_nested_message_extension_lite(kRepeatedNestedMessageExtensionLiteFieldNumber, ::protobuf_unittest::TestAllTypesLite_NestedMessage::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::ForeignMessageLite >, 11, false >
  repeated_foreign_message_extension_lite(kRepeatedForeignMessageExtensionLiteFieldNumber, ::protobuf_unittest::ForeignMessageLite::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::RepeatedMessageTypeTraits< ::protobuf_unittest_import::ImportMessageLite >, 11, false >
  repeated_import_message_extension_lite(kRepeatedImportMessageExtensionLiteFieldNumber, ::protobuf_unittest_import::ImportMessageLite::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::RepeatedEnumTypeTraits< ::protobuf_unittest::TestAllTypesLite_NestedEnum, ::protobuf_unittest::TestAllTypesLite_NestedEnum_IsValid>, 14, false >
  repeated_nested_enum_extension_lite(kRepeatedNestedEnumExtensionLiteFieldNumber, static_cast< ::protobuf_unittest::TestAllTypesLite_NestedEnum >(1));
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::RepeatedEnumTypeTraits< ::protobuf_unittest::ForeignEnumLite, ::protobuf_unittest::ForeignEnumLite_IsValid>, 14, false >
  repeated_foreign_enum_extension_lite(kRepeatedForeignEnumExtensionLiteFieldNumber, static_cast< ::protobuf_unittest::ForeignEnumLite >(4));
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::RepeatedEnumTypeTraits< ::protobuf_unittest_import::ImportEnumLite, ::protobuf_unittest_import::ImportEnumLite_IsValid>, 14, false >
  repeated_import_enum_extension_lite(kRepeatedImportEnumExtensionLiteFieldNumber, static_cast< ::protobuf_unittest_import::ImportEnumLite >(7));
const ::std::string repeated_string_piece_extension_lite_default("");
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::RepeatedStringTypeTraits, 9, false >
  repeated_string_piece_extension_lite(kRepeatedStringPieceExtensionLiteFieldNumber, repeated_string_piece_extension_lite_default);
const ::std::string repeated_cord_extension_lite_default("");
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::RepeatedStringTypeTraits, 9, false >
  repeated_cord_extension_lite(kRepeatedCordExtensionLiteFieldNumber, repeated_cord_extension_lite_default);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::TestAllTypesLite_NestedMessage >, 11, false >
  repeated_lazy_message_extension_lite(kRepeatedLazyMessageExtensionLiteFieldNumber, ::protobuf_unittest::TestAllTypesLite_NestedMessage::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  default_int32_extension_lite(kDefaultInt32ExtensionLiteFieldNumber, 41);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int64 >, 3, false >
  default_int64_extension_lite(kDefaultInt64ExtensionLiteFieldNumber, GOOGLE_LONGLONG(42));
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::uint32 >, 13, false >
  default_uint32_extension_lite(kDefaultUint32ExtensionLiteFieldNumber, 43u);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::uint64 >, 4, false >
  default_uint64_extension_lite(kDefaultUint64ExtensionLiteFieldNumber, GOOGLE_ULONGLONG(44));
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 17, false >
  default_sint32_extension_lite(kDefaultSint32ExtensionLiteFieldNumber, -45);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int64 >, 18, false >
  default_sint64_extension_lite(kDefaultSint64ExtensionLiteFieldNumber, GOOGLE_LONGLONG(46));
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::uint32 >, 7, false >
  default_fixed32_extension_lite(kDefaultFixed32ExtensionLiteFieldNumber, 47u);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::uint64 >, 6, false >
  default_fixed64_extension_lite(kDefaultFixed64ExtensionLiteFieldNumber, GOOGLE_ULONGLONG(48));
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 15, false >
  default_sfixed32_extension_lite(kDefaultSfixed32ExtensionLiteFieldNumber, 49);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int64 >, 16, false >
  default_sfixed64_extension_lite(kDefaultSfixed64ExtensionLiteFieldNumber, GOOGLE_LONGLONG(-50));
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::PrimitiveTypeTraits< float >, 2, false >
  default_float_extension_lite(kDefaultFloatExtensionLiteFieldNumber, 51.5f);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::PrimitiveTypeTraits< double >, 1, false >
  default_double_extension_lite(kDefaultDoubleExtensionLiteFieldNumber, 52000);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  default_bool_extension_lite(kDefaultBoolExtensionLiteFieldNumber, true);
const ::std::string default_string_extension_lite_default("hello");
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  default_string_extension_lite(kDefaultStringExtensionLiteFieldNumber, default_string_extension_lite_default);
const ::std::string default_bytes_extension_lite_default("world");
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::StringTypeTraits, 12, false >
  default_bytes_extension_lite(kDefaultBytesExtensionLiteFieldNumber, default_bytes_extension_lite_default);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::EnumTypeTraits< ::protobuf_unittest::TestAllTypesLite_NestedEnum, ::protobuf_unittest::TestAllTypesLite_NestedEnum_IsValid>, 14, false >
  default_nested_enum_extension_lite(kDefaultNestedEnumExtensionLiteFieldNumber, static_cast< ::protobuf_unittest::TestAllTypesLite_NestedEnum >(2));
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::EnumTypeTraits< ::protobuf_unittest::ForeignEnumLite, ::protobuf_unittest::ForeignEnumLite_IsValid>, 14, false >
  default_foreign_enum_extension_lite(kDefaultForeignEnumExtensionLiteFieldNumber, static_cast< ::protobuf_unittest::ForeignEnumLite >(5));
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::EnumTypeTraits< ::protobuf_unittest_import::ImportEnumLite, ::protobuf_unittest_import::ImportEnumLite_IsValid>, 14, false >
  default_import_enum_extension_lite(kDefaultImportEnumExtensionLiteFieldNumber, static_cast< ::protobuf_unittest_import::ImportEnumLite >(8));
const ::std::string default_string_piece_extension_lite_default("abc");
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  default_string_piece_extension_lite(kDefaultStringPieceExtensionLiteFieldNumber, default_string_piece_extension_lite_default);
const ::std::string default_cord_extension_lite_default("123");
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestAllExtensionsLite,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  default_cord_extension_lite(kDefaultCordExtensionLiteFieldNumber, default_cord_extension_lite_default);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< ::google::protobuf::int32 >, 5, true >
  packed_int32_extension_lite(kPackedInt32ExtensionLiteFieldNumber, 0);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< ::google::protobuf::int64 >, 3, true >
  packed_int64_extension_lite(kPackedInt64ExtensionLiteFieldNumber, GOOGLE_LONGLONG(0));
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< ::google::protobuf::uint32 >, 13, true >
  packed_uint32_extension_lite(kPackedUint32ExtensionLiteFieldNumber, 0u);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< ::google::protobuf::uint64 >, 4, true >
  packed_uint64_extension_lite(kPackedUint64ExtensionLiteFieldNumber, GOOGLE_ULONGLONG(0));
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< ::google::protobuf::int32 >, 17, true >
  packed_sint32_extension_lite(kPackedSint32ExtensionLiteFieldNumber, 0);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< ::google::protobuf::int64 >, 18, true >
  packed_sint64_extension_lite(kPackedSint64ExtensionLiteFieldNumber, GOOGLE_LONGLONG(0));
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< ::google::protobuf::uint32 >, 7, true >
  packed_fixed32_extension_lite(kPackedFixed32ExtensionLiteFieldNumber, 0u);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< ::google::protobuf::uint64 >, 6, true >
  packed_fixed64_extension_lite(kPackedFixed64ExtensionLiteFieldNumber, GOOGLE_ULONGLONG(0));
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< ::google::protobuf::int32 >, 15, true >
  packed_sfixed32_extension_lite(kPackedSfixed32ExtensionLiteFieldNumber, 0);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< ::google::protobuf::int64 >, 16, true >
  packed_sfixed64_extension_lite(kPackedSfixed64ExtensionLiteFieldNumber, GOOGLE_LONGLONG(0));
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< float >, 2, true >
  packed_float_extension_lite(kPackedFloatExtensionLiteFieldNumber, 0);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< double >, 1, true >
  packed_double_extension_lite(kPackedDoubleExtensionLiteFieldNumber, 0);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< bool >, 8, true >
  packed_bool_extension_lite(kPackedBoolExtensionLiteFieldNumber, false);
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestPackedExtensionsLite,
    ::google::protobuf::internal::RepeatedEnumTypeTraits< ::protobuf_unittest::ForeignEnumLite, ::protobuf_unittest::ForeignEnumLite_IsValid>, 14, true >
  packed_enum_extension_lite(kPackedEnumExtensionLiteFieldNumber, static_cast< ::protobuf_unittest::ForeignEnumLite >(4));

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf_unittest

// @@protoc_insertion_point(global_scope)
