// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/compiler/cpp/cpp_test_bad_identifiers.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/protobuf/compiler/cpp/cpp_test_bad_identifiers.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf_unittest {

namespace {

const ::google::protobuf::Descriptor* TestConflictingSymbolNames_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestConflictingSymbolNames_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestConflictingSymbolNames_BuildDescriptors_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestConflictingSymbolNames_BuildDescriptors_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestConflictingSymbolNames_TypeTraits_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestConflictingSymbolNames_TypeTraits_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestConflictingSymbolNames_Data1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestConflictingSymbolNames_Data1_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestConflictingSymbolNames_Data2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestConflictingSymbolNames_Data2_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestConflictingSymbolNames_Data3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestConflictingSymbolNames_Data3_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestConflictingSymbolNames_Data4_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestConflictingSymbolNames_Data4_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestConflictingSymbolNames_Data5_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestConflictingSymbolNames_Data5_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestConflictingSymbolNames_Data6_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestConflictingSymbolNames_Data6_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestConflictingSymbolNames_Cord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestConflictingSymbolNames_Cord_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestConflictingSymbolNames_StringPiece_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestConflictingSymbolNames_StringPiece_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestConflictingSymbolNames_DO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestConflictingSymbolNames_DO_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TestConflictingSymbolNames_TestEnum_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TestConflictingSymbolNamesExtension_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestConflictingSymbolNamesExtension_reflection_ = NULL;
const ::google::protobuf::Descriptor* DummyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DummyMessage_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* TestConflictingMethodNames_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto() {
  protobuf_AddDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "google/protobuf/compiler/cpp/cpp_test_bad_identifiers.proto");
  GOOGLE_CHECK(file != NULL);
  TestConflictingSymbolNames_descriptor_ = file->message_type(0);
  static const int TestConflictingSymbolNames_offsets_[34] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, new_element_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, total_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, handle_uninterpreted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, controller_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, already_here_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, uint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, uint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, memset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, int32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, int64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, cached_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, extensions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, bit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, offsets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, reflection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, some_cord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, some_string_piece_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, int__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, friend__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, do__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, field_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, is_packed_),
  };
  TestConflictingSymbolNames_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestConflictingSymbolNames_descriptor_,
      TestConflictingSymbolNames::default_instance_,
      TestConflictingSymbolNames_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestConflictingSymbolNames));
  TestConflictingSymbolNames_BuildDescriptors_descriptor_ = TestConflictingSymbolNames_descriptor_->nested_type(0);
  static const int TestConflictingSymbolNames_BuildDescriptors_offsets_[1] = {
  };
  TestConflictingSymbolNames_BuildDescriptors_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestConflictingSymbolNames_BuildDescriptors_descriptor_,
      TestConflictingSymbolNames_BuildDescriptors::default_instance_,
      TestConflictingSymbolNames_BuildDescriptors_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_BuildDescriptors, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_BuildDescriptors, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestConflictingSymbolNames_BuildDescriptors));
  TestConflictingSymbolNames_TypeTraits_descriptor_ = TestConflictingSymbolNames_descriptor_->nested_type(1);
  static const int TestConflictingSymbolNames_TypeTraits_offsets_[1] = {
  };
  TestConflictingSymbolNames_TypeTraits_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestConflictingSymbolNames_TypeTraits_descriptor_,
      TestConflictingSymbolNames_TypeTraits::default_instance_,
      TestConflictingSymbolNames_TypeTraits_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_TypeTraits, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_TypeTraits, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestConflictingSymbolNames_TypeTraits));
  TestConflictingSymbolNames_Data1_descriptor_ = TestConflictingSymbolNames_descriptor_->nested_type(2);
  static const int TestConflictingSymbolNames_Data1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_Data1, data_),
  };
  TestConflictingSymbolNames_Data1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestConflictingSymbolNames_Data1_descriptor_,
      TestConflictingSymbolNames_Data1::default_instance_,
      TestConflictingSymbolNames_Data1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_Data1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_Data1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestConflictingSymbolNames_Data1));
  TestConflictingSymbolNames_Data2_descriptor_ = TestConflictingSymbolNames_descriptor_->nested_type(3);
  static const int TestConflictingSymbolNames_Data2_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_Data2, data_),
  };
  TestConflictingSymbolNames_Data2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestConflictingSymbolNames_Data2_descriptor_,
      TestConflictingSymbolNames_Data2::default_instance_,
      TestConflictingSymbolNames_Data2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_Data2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_Data2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestConflictingSymbolNames_Data2));
  TestConflictingSymbolNames_Data3_descriptor_ = TestConflictingSymbolNames_descriptor_->nested_type(4);
  static const int TestConflictingSymbolNames_Data3_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_Data3, data_),
  };
  TestConflictingSymbolNames_Data3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestConflictingSymbolNames_Data3_descriptor_,
      TestConflictingSymbolNames_Data3::default_instance_,
      TestConflictingSymbolNames_Data3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_Data3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_Data3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestConflictingSymbolNames_Data3));
  TestConflictingSymbolNames_Data4_descriptor_ = TestConflictingSymbolNames_descriptor_->nested_type(5);
  static const int TestConflictingSymbolNames_Data4_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_Data4, data_),
  };
  TestConflictingSymbolNames_Data4_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestConflictingSymbolNames_Data4_descriptor_,
      TestConflictingSymbolNames_Data4::default_instance_,
      TestConflictingSymbolNames_Data4_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_Data4, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_Data4, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestConflictingSymbolNames_Data4));
  TestConflictingSymbolNames_Data5_descriptor_ = TestConflictingSymbolNames_descriptor_->nested_type(6);
  static const int TestConflictingSymbolNames_Data5_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_Data5, data_),
  };
  TestConflictingSymbolNames_Data5_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestConflictingSymbolNames_Data5_descriptor_,
      TestConflictingSymbolNames_Data5::default_instance_,
      TestConflictingSymbolNames_Data5_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_Data5, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_Data5, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestConflictingSymbolNames_Data5));
  TestConflictingSymbolNames_Data6_descriptor_ = TestConflictingSymbolNames_descriptor_->nested_type(7);
  static const int TestConflictingSymbolNames_Data6_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_Data6, data_),
  };
  TestConflictingSymbolNames_Data6_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestConflictingSymbolNames_Data6_descriptor_,
      TestConflictingSymbolNames_Data6::default_instance_,
      TestConflictingSymbolNames_Data6_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_Data6, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_Data6, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestConflictingSymbolNames_Data6));
  TestConflictingSymbolNames_Cord_descriptor_ = TestConflictingSymbolNames_descriptor_->nested_type(8);
  static const int TestConflictingSymbolNames_Cord_offsets_[1] = {
  };
  TestConflictingSymbolNames_Cord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestConflictingSymbolNames_Cord_descriptor_,
      TestConflictingSymbolNames_Cord::default_instance_,
      TestConflictingSymbolNames_Cord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_Cord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_Cord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestConflictingSymbolNames_Cord));
  TestConflictingSymbolNames_StringPiece_descriptor_ = TestConflictingSymbolNames_descriptor_->nested_type(9);
  static const int TestConflictingSymbolNames_StringPiece_offsets_[1] = {
  };
  TestConflictingSymbolNames_StringPiece_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestConflictingSymbolNames_StringPiece_descriptor_,
      TestConflictingSymbolNames_StringPiece::default_instance_,
      TestConflictingSymbolNames_StringPiece_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_StringPiece, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_StringPiece, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestConflictingSymbolNames_StringPiece));
  TestConflictingSymbolNames_DO_descriptor_ = TestConflictingSymbolNames_descriptor_->nested_type(10);
  static const int TestConflictingSymbolNames_DO_offsets_[1] = {
  };
  TestConflictingSymbolNames_DO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestConflictingSymbolNames_DO_descriptor_,
      TestConflictingSymbolNames_DO::default_instance_,
      TestConflictingSymbolNames_DO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_DO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNames_DO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestConflictingSymbolNames_DO));
  TestConflictingSymbolNames_TestEnum_descriptor_ = TestConflictingSymbolNames_descriptor_->enum_type(0);
  TestConflictingSymbolNamesExtension_descriptor_ = file->message_type(1);
  static const int TestConflictingSymbolNamesExtension_offsets_[1] = {
  };
  TestConflictingSymbolNamesExtension_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestConflictingSymbolNamesExtension_descriptor_,
      TestConflictingSymbolNamesExtension::default_instance_,
      TestConflictingSymbolNamesExtension_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNamesExtension, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestConflictingSymbolNamesExtension, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestConflictingSymbolNamesExtension));
  DummyMessage_descriptor_ = file->message_type(2);
  static const int DummyMessage_offsets_[1] = {
  };
  DummyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DummyMessage_descriptor_,
      DummyMessage::default_instance_,
      DummyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DummyMessage));
  TestConflictingMethodNames_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestConflictingSymbolNames_descriptor_, &TestConflictingSymbolNames::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestConflictingSymbolNames_BuildDescriptors_descriptor_, &TestConflictingSymbolNames_BuildDescriptors::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestConflictingSymbolNames_TypeTraits_descriptor_, &TestConflictingSymbolNames_TypeTraits::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestConflictingSymbolNames_Data1_descriptor_, &TestConflictingSymbolNames_Data1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestConflictingSymbolNames_Data2_descriptor_, &TestConflictingSymbolNames_Data2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestConflictingSymbolNames_Data3_descriptor_, &TestConflictingSymbolNames_Data3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestConflictingSymbolNames_Data4_descriptor_, &TestConflictingSymbolNames_Data4::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestConflictingSymbolNames_Data5_descriptor_, &TestConflictingSymbolNames_Data5::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestConflictingSymbolNames_Data6_descriptor_, &TestConflictingSymbolNames_Data6::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestConflictingSymbolNames_Cord_descriptor_, &TestConflictingSymbolNames_Cord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestConflictingSymbolNames_StringPiece_descriptor_, &TestConflictingSymbolNames_StringPiece::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestConflictingSymbolNames_DO_descriptor_, &TestConflictingSymbolNames_DO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestConflictingSymbolNamesExtension_descriptor_, &TestConflictingSymbolNamesExtension::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DummyMessage_descriptor_, &DummyMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto() {
  delete TestConflictingSymbolNames::default_instance_;
  delete TestConflictingSymbolNames_reflection_;
  delete TestConflictingSymbolNames_BuildDescriptors::default_instance_;
  delete TestConflictingSymbolNames_BuildDescriptors_reflection_;
  delete TestConflictingSymbolNames_TypeTraits::default_instance_;
  delete TestConflictingSymbolNames_TypeTraits_reflection_;
  delete TestConflictingSymbolNames_Data1::default_instance_;
  delete TestConflictingSymbolNames_Data1_reflection_;
  delete TestConflictingSymbolNames_Data2::default_instance_;
  delete TestConflictingSymbolNames_Data2_reflection_;
  delete TestConflictingSymbolNames_Data3::default_instance_;
  delete TestConflictingSymbolNames_Data3_reflection_;
  delete TestConflictingSymbolNames_Data4::default_instance_;
  delete TestConflictingSymbolNames_Data4_reflection_;
  delete TestConflictingSymbolNames_Data5::default_instance_;
  delete TestConflictingSymbolNames_Data5_reflection_;
  delete TestConflictingSymbolNames_Data6::default_instance_;
  delete TestConflictingSymbolNames_Data6_reflection_;
  delete TestConflictingSymbolNames_Cord::default_instance_;
  delete TestConflictingSymbolNames_Cord_reflection_;
  delete TestConflictingSymbolNames_StringPiece::default_instance_;
  delete TestConflictingSymbolNames_StringPiece_reflection_;
  delete TestConflictingSymbolNames_DO::default_instance_;
  delete TestConflictingSymbolNames_DO_reflection_;
  delete TestConflictingSymbolNamesExtension::default_instance_;
  delete TestConflictingSymbolNamesExtension_reflection_;
  delete DummyMessage::default_instance_;
  delete DummyMessage_reflection_;
}

void protobuf_AddDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n;google/protobuf/compiler/cpp/cpp_test_"
    "bad_identifiers.proto\022\021protobuf_unittest"
    "\"\377\007\n\032TestConflictingSymbolNames\022\r\n\005input"
    "\030\001 \001(\005\022\016\n\006output\030\002 \001(\005\022\016\n\006length\030\003 \001(\t\022\t"
    "\n\001i\030\004 \003(\005\022\027\n\013new_element\030\005 \003(\tB\002\010\002\022\022\n\nto"
    "tal_size\030\006 \001(\005\022\013\n\003tag\030\007 \001(\005\022\016\n\006source\030\010 "
    "\001(\005\022\r\n\005value\030\t \001(\005\022\014\n\004file\030\n \001(\005\022\014\n\004from"
    "\030\013 \001(\005\022\034\n\024handle_uninterpreted\030\014 \001(\005\022\r\n\005"
    "index\030\r \003(\005\022\022\n\ncontroller\030\016 \001(\005\022\024\n\014alrea"
    "dy_here\030\017 \001(\005\022\016\n\006uint32\030\020 \001(\r\022\016\n\006uint64\030"
    "\021 \001(\004\022\016\n\006string\030\022 \001(\t\022\016\n\006memset\030\023 \001(\005\022\r\n"
    "\005int32\030\024 \001(\005\022\r\n\005int64\030\025 \001(\003\022\023\n\013cached_si"
    "ze\030\026 \001(\r\022\022\n\nextensions\030\027 \001(\r\022\013\n\003bit\030\030 \001("
    "\r\022\014\n\004bits\030\031 \001(\r\022\017\n\007offsets\030\032 \001(\r\022\022\n\nrefl"
    "ection\030\033 \001(\r\022\025\n\tsome_cord\030\034 \001(\tB\002\010\001\022\035\n\021s"
    "ome_string_piece\030\035 \001(\tB\002\010\002\022\013\n\003int\030\036 \001(\r\022"
    "\016\n\006friend\030\037 \001(\r\022<\n\002do\030  \001(\01320.protobuf_u"
    "nittest.TestConflictingSymbolNames.DO\022\022\n"
    "\nfield_type\030! \001(\005\022\021\n\tis_packed\030\" \001(\010\032\022\n\020"
    "BuildDescriptors\032\014\n\nTypeTraits\032\025\n\005Data1\022"
    "\014\n\004data\030\001 \003(\005\032M\n\005Data2\022D\n\004data\030\001 \003(\01626.p"
    "rotobuf_unittest.TestConflictingSymbolNa"
    "mes.TestEnum\032\025\n\005Data3\022\014\n\004data\030\001 \003(\t\032J\n\005D"
    "ata4\022A\n\004data\030\001 \003(\01323.protobuf_unittest.T"
    "estConflictingSymbolNames.Data4\032\031\n\005Data5"
    "\022\020\n\004data\030\001 \003(\tB\002\010\002\032\031\n\005Data6\022\020\n\004data\030\001 \003("
    "\tB\002\010\001\032\006\n\004Cord\032\r\n\013StringPiece\032\004\n\002DO\"\023\n\010Te"
    "stEnum\022\007\n\003FOO\020\001*\t\010\350\007\020\200\200\200\200\002\"w\n#TestConfli"
    "ctingSymbolNamesExtension2P\n\022repeated_in"
    "t32_ext\022-.protobuf_unittest.TestConflict"
    "ingSymbolNames\030\326\307\336\t \003(\005B\002\020\001\"\016\n\014DummyMess"
    "age2i\n\032TestConflictingMethodNames\022K\n\007Clo"
    "sure\022\037.protobuf_unittest.DummyMessage\032\037."
    "protobuf_unittest.DummyMessageB\003\200\001\001", 1355);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/protobuf/compiler/cpp/cpp_test_bad_identifiers.proto", &protobuf_RegisterTypes);
  TestConflictingSymbolNames::default_instance_ = new TestConflictingSymbolNames();
  TestConflictingSymbolNames_BuildDescriptors::default_instance_ = new TestConflictingSymbolNames_BuildDescriptors();
  TestConflictingSymbolNames_TypeTraits::default_instance_ = new TestConflictingSymbolNames_TypeTraits();
  TestConflictingSymbolNames_Data1::default_instance_ = new TestConflictingSymbolNames_Data1();
  TestConflictingSymbolNames_Data2::default_instance_ = new TestConflictingSymbolNames_Data2();
  TestConflictingSymbolNames_Data3::default_instance_ = new TestConflictingSymbolNames_Data3();
  TestConflictingSymbolNames_Data4::default_instance_ = new TestConflictingSymbolNames_Data4();
  TestConflictingSymbolNames_Data5::default_instance_ = new TestConflictingSymbolNames_Data5();
  TestConflictingSymbolNames_Data6::default_instance_ = new TestConflictingSymbolNames_Data6();
  TestConflictingSymbolNames_Cord::default_instance_ = new TestConflictingSymbolNames_Cord();
  TestConflictingSymbolNames_StringPiece::default_instance_ = new TestConflictingSymbolNames_StringPiece();
  TestConflictingSymbolNames_DO::default_instance_ = new TestConflictingSymbolNames_DO();
  TestConflictingSymbolNamesExtension::default_instance_ = new TestConflictingSymbolNamesExtension();
  DummyMessage::default_instance_ = new DummyMessage();
  TestConflictingSymbolNames::default_instance_->InitAsDefaultInstance();
  TestConflictingSymbolNames_BuildDescriptors::default_instance_->InitAsDefaultInstance();
  TestConflictingSymbolNames_TypeTraits::default_instance_->InitAsDefaultInstance();
  TestConflictingSymbolNames_Data1::default_instance_->InitAsDefaultInstance();
  TestConflictingSymbolNames_Data2::default_instance_->InitAsDefaultInstance();
  TestConflictingSymbolNames_Data3::default_instance_->InitAsDefaultInstance();
  TestConflictingSymbolNames_Data4::default_instance_->InitAsDefaultInstance();
  TestConflictingSymbolNames_Data5::default_instance_->InitAsDefaultInstance();
  TestConflictingSymbolNames_Data6::default_instance_->InitAsDefaultInstance();
  TestConflictingSymbolNames_Cord::default_instance_->InitAsDefaultInstance();
  TestConflictingSymbolNames_StringPiece::default_instance_->InitAsDefaultInstance();
  TestConflictingSymbolNames_DO::default_instance_->InitAsDefaultInstance();
  TestConflictingSymbolNamesExtension::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protobuf_unittest::TestConflictingSymbolNames::default_instance(),
    20423638, 5, true, true);
  DummyMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto {
  StaticDescriptorInitializer_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto() {
    protobuf_AddDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  }
} static_descriptor_initializer_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* TestConflictingSymbolNames_TestEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestConflictingSymbolNames_TestEnum_descriptor_;
}
bool TestConflictingSymbolNames_TestEnum_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TestConflictingSymbolNames_TestEnum TestConflictingSymbolNames::FOO;
const TestConflictingSymbolNames_TestEnum TestConflictingSymbolNames::TestEnum_MIN;
const TestConflictingSymbolNames_TestEnum TestConflictingSymbolNames::TestEnum_MAX;
const int TestConflictingSymbolNames::TestEnum_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

TestConflictingSymbolNames_BuildDescriptors::TestConflictingSymbolNames_BuildDescriptors()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestConflictingSymbolNames_BuildDescriptors::InitAsDefaultInstance() {
}

TestConflictingSymbolNames_BuildDescriptors::TestConflictingSymbolNames_BuildDescriptors(const TestConflictingSymbolNames_BuildDescriptors& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestConflictingSymbolNames_BuildDescriptors::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestConflictingSymbolNames_BuildDescriptors::~TestConflictingSymbolNames_BuildDescriptors() {
  SharedDtor();
}

void TestConflictingSymbolNames_BuildDescriptors::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestConflictingSymbolNames_BuildDescriptors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestConflictingSymbolNames_BuildDescriptors::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestConflictingSymbolNames_BuildDescriptors_descriptor_;
}

const TestConflictingSymbolNames_BuildDescriptors& TestConflictingSymbolNames_BuildDescriptors::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return *default_instance_;
}

TestConflictingSymbolNames_BuildDescriptors* TestConflictingSymbolNames_BuildDescriptors::default_instance_ = NULL;

TestConflictingSymbolNames_BuildDescriptors* TestConflictingSymbolNames_BuildDescriptors::New() const {
  return new TestConflictingSymbolNames_BuildDescriptors;
}

void TestConflictingSymbolNames_BuildDescriptors::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestConflictingSymbolNames_BuildDescriptors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TestConflictingSymbolNames_BuildDescriptors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestConflictingSymbolNames_BuildDescriptors::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestConflictingSymbolNames_BuildDescriptors::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestConflictingSymbolNames_BuildDescriptors::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestConflictingSymbolNames_BuildDescriptors* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestConflictingSymbolNames_BuildDescriptors*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestConflictingSymbolNames_BuildDescriptors::MergeFrom(const TestConflictingSymbolNames_BuildDescriptors& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestConflictingSymbolNames_BuildDescriptors::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestConflictingSymbolNames_BuildDescriptors::CopyFrom(const TestConflictingSymbolNames_BuildDescriptors& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConflictingSymbolNames_BuildDescriptors::IsInitialized() const {

  return true;
}

void TestConflictingSymbolNames_BuildDescriptors::Swap(TestConflictingSymbolNames_BuildDescriptors* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestConflictingSymbolNames_BuildDescriptors::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestConflictingSymbolNames_BuildDescriptors_descriptor_;
  metadata.reflection = TestConflictingSymbolNames_BuildDescriptors_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

TestConflictingSymbolNames_TypeTraits::TestConflictingSymbolNames_TypeTraits()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestConflictingSymbolNames_TypeTraits::InitAsDefaultInstance() {
}

TestConflictingSymbolNames_TypeTraits::TestConflictingSymbolNames_TypeTraits(const TestConflictingSymbolNames_TypeTraits& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestConflictingSymbolNames_TypeTraits::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestConflictingSymbolNames_TypeTraits::~TestConflictingSymbolNames_TypeTraits() {
  SharedDtor();
}

void TestConflictingSymbolNames_TypeTraits::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestConflictingSymbolNames_TypeTraits::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestConflictingSymbolNames_TypeTraits::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestConflictingSymbolNames_TypeTraits_descriptor_;
}

const TestConflictingSymbolNames_TypeTraits& TestConflictingSymbolNames_TypeTraits::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return *default_instance_;
}

TestConflictingSymbolNames_TypeTraits* TestConflictingSymbolNames_TypeTraits::default_instance_ = NULL;

TestConflictingSymbolNames_TypeTraits* TestConflictingSymbolNames_TypeTraits::New() const {
  return new TestConflictingSymbolNames_TypeTraits;
}

void TestConflictingSymbolNames_TypeTraits::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestConflictingSymbolNames_TypeTraits::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TestConflictingSymbolNames_TypeTraits::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestConflictingSymbolNames_TypeTraits::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestConflictingSymbolNames_TypeTraits::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestConflictingSymbolNames_TypeTraits::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestConflictingSymbolNames_TypeTraits* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestConflictingSymbolNames_TypeTraits*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestConflictingSymbolNames_TypeTraits::MergeFrom(const TestConflictingSymbolNames_TypeTraits& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestConflictingSymbolNames_TypeTraits::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestConflictingSymbolNames_TypeTraits::CopyFrom(const TestConflictingSymbolNames_TypeTraits& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConflictingSymbolNames_TypeTraits::IsInitialized() const {

  return true;
}

void TestConflictingSymbolNames_TypeTraits::Swap(TestConflictingSymbolNames_TypeTraits* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestConflictingSymbolNames_TypeTraits::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestConflictingSymbolNames_TypeTraits_descriptor_;
  metadata.reflection = TestConflictingSymbolNames_TypeTraits_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TestConflictingSymbolNames_Data1::kDataFieldNumber;
#endif  // !_MSC_VER

TestConflictingSymbolNames_Data1::TestConflictingSymbolNames_Data1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestConflictingSymbolNames_Data1::InitAsDefaultInstance() {
}

TestConflictingSymbolNames_Data1::TestConflictingSymbolNames_Data1(const TestConflictingSymbolNames_Data1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestConflictingSymbolNames_Data1::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestConflictingSymbolNames_Data1::~TestConflictingSymbolNames_Data1() {
  SharedDtor();
}

void TestConflictingSymbolNames_Data1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestConflictingSymbolNames_Data1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestConflictingSymbolNames_Data1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestConflictingSymbolNames_Data1_descriptor_;
}

const TestConflictingSymbolNames_Data1& TestConflictingSymbolNames_Data1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return *default_instance_;
}

TestConflictingSymbolNames_Data1* TestConflictingSymbolNames_Data1::default_instance_ = NULL;

TestConflictingSymbolNames_Data1* TestConflictingSymbolNames_Data1::New() const {
  return new TestConflictingSymbolNames_Data1;
}

void TestConflictingSymbolNames_Data1::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestConflictingSymbolNames_Data1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestConflictingSymbolNames_Data1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestConflictingSymbolNames_Data1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestConflictingSymbolNames_Data1::ByteSize() const {
  int total_size = 0;

  // repeated int32 data = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->data(i));
    }
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestConflictingSymbolNames_Data1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestConflictingSymbolNames_Data1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestConflictingSymbolNames_Data1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestConflictingSymbolNames_Data1::MergeFrom(const TestConflictingSymbolNames_Data1& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestConflictingSymbolNames_Data1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestConflictingSymbolNames_Data1::CopyFrom(const TestConflictingSymbolNames_Data1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConflictingSymbolNames_Data1::IsInitialized() const {

  return true;
}

void TestConflictingSymbolNames_Data1::Swap(TestConflictingSymbolNames_Data1* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestConflictingSymbolNames_Data1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestConflictingSymbolNames_Data1_descriptor_;
  metadata.reflection = TestConflictingSymbolNames_Data1_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TestConflictingSymbolNames_Data2::kDataFieldNumber;
#endif  // !_MSC_VER

TestConflictingSymbolNames_Data2::TestConflictingSymbolNames_Data2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestConflictingSymbolNames_Data2::InitAsDefaultInstance() {
}

TestConflictingSymbolNames_Data2::TestConflictingSymbolNames_Data2(const TestConflictingSymbolNames_Data2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestConflictingSymbolNames_Data2::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestConflictingSymbolNames_Data2::~TestConflictingSymbolNames_Data2() {
  SharedDtor();
}

void TestConflictingSymbolNames_Data2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestConflictingSymbolNames_Data2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestConflictingSymbolNames_Data2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestConflictingSymbolNames_Data2_descriptor_;
}

const TestConflictingSymbolNames_Data2& TestConflictingSymbolNames_Data2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return *default_instance_;
}

TestConflictingSymbolNames_Data2* TestConflictingSymbolNames_Data2::default_instance_ = NULL;

TestConflictingSymbolNames_Data2* TestConflictingSymbolNames_Data2::New() const {
  return new TestConflictingSymbolNames_Data2;
}

void TestConflictingSymbolNames_Data2::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestConflictingSymbolNames_Data2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf_unittest.TestConflictingSymbolNames.TestEnum data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf_unittest::TestConflictingSymbolNames_TestEnum_IsValid(value)) {
            add_data(static_cast< ::protobuf_unittest::TestConflictingSymbolNames_TestEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::protobuf_unittest::TestConflictingSymbolNames_TestEnum_IsValid,
                 this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestConflictingSymbolNames_Data2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf_unittest.TestConflictingSymbolNames.TestEnum data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestConflictingSymbolNames_Data2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf_unittest.TestConflictingSymbolNames.TestEnum data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestConflictingSymbolNames_Data2::ByteSize() const {
  int total_size = 0;

  // repeated .protobuf_unittest.TestConflictingSymbolNames.TestEnum data = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->data(i));
    }
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestConflictingSymbolNames_Data2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestConflictingSymbolNames_Data2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestConflictingSymbolNames_Data2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestConflictingSymbolNames_Data2::MergeFrom(const TestConflictingSymbolNames_Data2& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestConflictingSymbolNames_Data2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestConflictingSymbolNames_Data2::CopyFrom(const TestConflictingSymbolNames_Data2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConflictingSymbolNames_Data2::IsInitialized() const {

  return true;
}

void TestConflictingSymbolNames_Data2::Swap(TestConflictingSymbolNames_Data2* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestConflictingSymbolNames_Data2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestConflictingSymbolNames_Data2_descriptor_;
  metadata.reflection = TestConflictingSymbolNames_Data2_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TestConflictingSymbolNames_Data3::kDataFieldNumber;
#endif  // !_MSC_VER

TestConflictingSymbolNames_Data3::TestConflictingSymbolNames_Data3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestConflictingSymbolNames_Data3::InitAsDefaultInstance() {
}

TestConflictingSymbolNames_Data3::TestConflictingSymbolNames_Data3(const TestConflictingSymbolNames_Data3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestConflictingSymbolNames_Data3::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestConflictingSymbolNames_Data3::~TestConflictingSymbolNames_Data3() {
  SharedDtor();
}

void TestConflictingSymbolNames_Data3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestConflictingSymbolNames_Data3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestConflictingSymbolNames_Data3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestConflictingSymbolNames_Data3_descriptor_;
}

const TestConflictingSymbolNames_Data3& TestConflictingSymbolNames_Data3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return *default_instance_;
}

TestConflictingSymbolNames_Data3* TestConflictingSymbolNames_Data3::default_instance_ = NULL;

TestConflictingSymbolNames_Data3* TestConflictingSymbolNames_Data3::New() const {
  return new TestConflictingSymbolNames_Data3;
}

void TestConflictingSymbolNames_Data3::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestConflictingSymbolNames_Data3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data(this->data_size() - 1).data(),
            this->data(this->data_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestConflictingSymbolNames_Data3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string data = 1;
  for (int i = 0; i < this->data_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->data(i).data(), this->data(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestConflictingSymbolNames_Data3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data(i).data(), this->data(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestConflictingSymbolNames_Data3::ByteSize() const {
  int total_size = 0;

  // repeated string data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestConflictingSymbolNames_Data3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestConflictingSymbolNames_Data3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestConflictingSymbolNames_Data3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestConflictingSymbolNames_Data3::MergeFrom(const TestConflictingSymbolNames_Data3& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestConflictingSymbolNames_Data3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestConflictingSymbolNames_Data3::CopyFrom(const TestConflictingSymbolNames_Data3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConflictingSymbolNames_Data3::IsInitialized() const {

  return true;
}

void TestConflictingSymbolNames_Data3::Swap(TestConflictingSymbolNames_Data3* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestConflictingSymbolNames_Data3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestConflictingSymbolNames_Data3_descriptor_;
  metadata.reflection = TestConflictingSymbolNames_Data3_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TestConflictingSymbolNames_Data4::kDataFieldNumber;
#endif  // !_MSC_VER

TestConflictingSymbolNames_Data4::TestConflictingSymbolNames_Data4()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestConflictingSymbolNames_Data4::InitAsDefaultInstance() {
}

TestConflictingSymbolNames_Data4::TestConflictingSymbolNames_Data4(const TestConflictingSymbolNames_Data4& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestConflictingSymbolNames_Data4::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestConflictingSymbolNames_Data4::~TestConflictingSymbolNames_Data4() {
  SharedDtor();
}

void TestConflictingSymbolNames_Data4::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestConflictingSymbolNames_Data4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestConflictingSymbolNames_Data4::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestConflictingSymbolNames_Data4_descriptor_;
}

const TestConflictingSymbolNames_Data4& TestConflictingSymbolNames_Data4::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return *default_instance_;
}

TestConflictingSymbolNames_Data4* TestConflictingSymbolNames_Data4::default_instance_ = NULL;

TestConflictingSymbolNames_Data4* TestConflictingSymbolNames_Data4::New() const {
  return new TestConflictingSymbolNames_Data4;
}

void TestConflictingSymbolNames_Data4::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestConflictingSymbolNames_Data4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf_unittest.TestConflictingSymbolNames.Data4 data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestConflictingSymbolNames_Data4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf_unittest.TestConflictingSymbolNames.Data4 data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestConflictingSymbolNames_Data4::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf_unittest.TestConflictingSymbolNames.Data4 data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestConflictingSymbolNames_Data4::ByteSize() const {
  int total_size = 0;

  // repeated .protobuf_unittest.TestConflictingSymbolNames.Data4 data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestConflictingSymbolNames_Data4::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestConflictingSymbolNames_Data4* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestConflictingSymbolNames_Data4*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestConflictingSymbolNames_Data4::MergeFrom(const TestConflictingSymbolNames_Data4& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestConflictingSymbolNames_Data4::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestConflictingSymbolNames_Data4::CopyFrom(const TestConflictingSymbolNames_Data4& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConflictingSymbolNames_Data4::IsInitialized() const {

  return true;
}

void TestConflictingSymbolNames_Data4::Swap(TestConflictingSymbolNames_Data4* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestConflictingSymbolNames_Data4::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestConflictingSymbolNames_Data4_descriptor_;
  metadata.reflection = TestConflictingSymbolNames_Data4_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TestConflictingSymbolNames_Data5::kDataFieldNumber;
#endif  // !_MSC_VER

TestConflictingSymbolNames_Data5::TestConflictingSymbolNames_Data5()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestConflictingSymbolNames_Data5::InitAsDefaultInstance() {
}

TestConflictingSymbolNames_Data5::TestConflictingSymbolNames_Data5(const TestConflictingSymbolNames_Data5& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestConflictingSymbolNames_Data5::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestConflictingSymbolNames_Data5::~TestConflictingSymbolNames_Data5() {
  SharedDtor();
}

void TestConflictingSymbolNames_Data5::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestConflictingSymbolNames_Data5::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestConflictingSymbolNames_Data5::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestConflictingSymbolNames_Data5_descriptor_;
}

const TestConflictingSymbolNames_Data5& TestConflictingSymbolNames_Data5::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return *default_instance_;
}

TestConflictingSymbolNames_Data5* TestConflictingSymbolNames_Data5::default_instance_ = NULL;

TestConflictingSymbolNames_Data5* TestConflictingSymbolNames_Data5::New() const {
  return new TestConflictingSymbolNames_Data5;
}

void TestConflictingSymbolNames_Data5::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestConflictingSymbolNames_Data5::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string data = 1 [ctype = STRING_PIECE];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data(this->data_size() - 1).data(),
            this->data(this->data_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestConflictingSymbolNames_Data5::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string data = 1 [ctype = STRING_PIECE];
  for (int i = 0; i < this->data_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->data(i).data(), this->data(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestConflictingSymbolNames_Data5::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string data = 1 [ctype = STRING_PIECE];
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data(i).data(), this->data(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestConflictingSymbolNames_Data5::ByteSize() const {
  int total_size = 0;

  // repeated string data = 1 [ctype = STRING_PIECE];
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestConflictingSymbolNames_Data5::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestConflictingSymbolNames_Data5* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestConflictingSymbolNames_Data5*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestConflictingSymbolNames_Data5::MergeFrom(const TestConflictingSymbolNames_Data5& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestConflictingSymbolNames_Data5::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestConflictingSymbolNames_Data5::CopyFrom(const TestConflictingSymbolNames_Data5& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConflictingSymbolNames_Data5::IsInitialized() const {

  return true;
}

void TestConflictingSymbolNames_Data5::Swap(TestConflictingSymbolNames_Data5* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestConflictingSymbolNames_Data5::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestConflictingSymbolNames_Data5_descriptor_;
  metadata.reflection = TestConflictingSymbolNames_Data5_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TestConflictingSymbolNames_Data6::kDataFieldNumber;
#endif  // !_MSC_VER

TestConflictingSymbolNames_Data6::TestConflictingSymbolNames_Data6()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestConflictingSymbolNames_Data6::InitAsDefaultInstance() {
}

TestConflictingSymbolNames_Data6::TestConflictingSymbolNames_Data6(const TestConflictingSymbolNames_Data6& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestConflictingSymbolNames_Data6::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestConflictingSymbolNames_Data6::~TestConflictingSymbolNames_Data6() {
  SharedDtor();
}

void TestConflictingSymbolNames_Data6::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestConflictingSymbolNames_Data6::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestConflictingSymbolNames_Data6::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestConflictingSymbolNames_Data6_descriptor_;
}

const TestConflictingSymbolNames_Data6& TestConflictingSymbolNames_Data6::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return *default_instance_;
}

TestConflictingSymbolNames_Data6* TestConflictingSymbolNames_Data6::default_instance_ = NULL;

TestConflictingSymbolNames_Data6* TestConflictingSymbolNames_Data6::New() const {
  return new TestConflictingSymbolNames_Data6;
}

void TestConflictingSymbolNames_Data6::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestConflictingSymbolNames_Data6::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string data = 1 [ctype = CORD];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data(this->data_size() - 1).data(),
            this->data(this->data_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestConflictingSymbolNames_Data6::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string data = 1 [ctype = CORD];
  for (int i = 0; i < this->data_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->data(i).data(), this->data(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestConflictingSymbolNames_Data6::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string data = 1 [ctype = CORD];
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data(i).data(), this->data(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestConflictingSymbolNames_Data6::ByteSize() const {
  int total_size = 0;

  // repeated string data = 1 [ctype = CORD];
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestConflictingSymbolNames_Data6::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestConflictingSymbolNames_Data6* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestConflictingSymbolNames_Data6*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestConflictingSymbolNames_Data6::MergeFrom(const TestConflictingSymbolNames_Data6& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestConflictingSymbolNames_Data6::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestConflictingSymbolNames_Data6::CopyFrom(const TestConflictingSymbolNames_Data6& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConflictingSymbolNames_Data6::IsInitialized() const {

  return true;
}

void TestConflictingSymbolNames_Data6::Swap(TestConflictingSymbolNames_Data6* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestConflictingSymbolNames_Data6::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestConflictingSymbolNames_Data6_descriptor_;
  metadata.reflection = TestConflictingSymbolNames_Data6_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

TestConflictingSymbolNames_Cord::TestConflictingSymbolNames_Cord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestConflictingSymbolNames_Cord::InitAsDefaultInstance() {
}

TestConflictingSymbolNames_Cord::TestConflictingSymbolNames_Cord(const TestConflictingSymbolNames_Cord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestConflictingSymbolNames_Cord::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestConflictingSymbolNames_Cord::~TestConflictingSymbolNames_Cord() {
  SharedDtor();
}

void TestConflictingSymbolNames_Cord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestConflictingSymbolNames_Cord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestConflictingSymbolNames_Cord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestConflictingSymbolNames_Cord_descriptor_;
}

const TestConflictingSymbolNames_Cord& TestConflictingSymbolNames_Cord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return *default_instance_;
}

TestConflictingSymbolNames_Cord* TestConflictingSymbolNames_Cord::default_instance_ = NULL;

TestConflictingSymbolNames_Cord* TestConflictingSymbolNames_Cord::New() const {
  return new TestConflictingSymbolNames_Cord;
}

void TestConflictingSymbolNames_Cord::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestConflictingSymbolNames_Cord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TestConflictingSymbolNames_Cord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestConflictingSymbolNames_Cord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestConflictingSymbolNames_Cord::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestConflictingSymbolNames_Cord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestConflictingSymbolNames_Cord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestConflictingSymbolNames_Cord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestConflictingSymbolNames_Cord::MergeFrom(const TestConflictingSymbolNames_Cord& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestConflictingSymbolNames_Cord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestConflictingSymbolNames_Cord::CopyFrom(const TestConflictingSymbolNames_Cord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConflictingSymbolNames_Cord::IsInitialized() const {

  return true;
}

void TestConflictingSymbolNames_Cord::Swap(TestConflictingSymbolNames_Cord* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestConflictingSymbolNames_Cord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestConflictingSymbolNames_Cord_descriptor_;
  metadata.reflection = TestConflictingSymbolNames_Cord_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

TestConflictingSymbolNames_StringPiece::TestConflictingSymbolNames_StringPiece()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestConflictingSymbolNames_StringPiece::InitAsDefaultInstance() {
}

TestConflictingSymbolNames_StringPiece::TestConflictingSymbolNames_StringPiece(const TestConflictingSymbolNames_StringPiece& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestConflictingSymbolNames_StringPiece::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestConflictingSymbolNames_StringPiece::~TestConflictingSymbolNames_StringPiece() {
  SharedDtor();
}

void TestConflictingSymbolNames_StringPiece::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestConflictingSymbolNames_StringPiece::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestConflictingSymbolNames_StringPiece::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestConflictingSymbolNames_StringPiece_descriptor_;
}

const TestConflictingSymbolNames_StringPiece& TestConflictingSymbolNames_StringPiece::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return *default_instance_;
}

TestConflictingSymbolNames_StringPiece* TestConflictingSymbolNames_StringPiece::default_instance_ = NULL;

TestConflictingSymbolNames_StringPiece* TestConflictingSymbolNames_StringPiece::New() const {
  return new TestConflictingSymbolNames_StringPiece;
}

void TestConflictingSymbolNames_StringPiece::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestConflictingSymbolNames_StringPiece::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TestConflictingSymbolNames_StringPiece::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestConflictingSymbolNames_StringPiece::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestConflictingSymbolNames_StringPiece::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestConflictingSymbolNames_StringPiece::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestConflictingSymbolNames_StringPiece* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestConflictingSymbolNames_StringPiece*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestConflictingSymbolNames_StringPiece::MergeFrom(const TestConflictingSymbolNames_StringPiece& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestConflictingSymbolNames_StringPiece::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestConflictingSymbolNames_StringPiece::CopyFrom(const TestConflictingSymbolNames_StringPiece& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConflictingSymbolNames_StringPiece::IsInitialized() const {

  return true;
}

void TestConflictingSymbolNames_StringPiece::Swap(TestConflictingSymbolNames_StringPiece* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestConflictingSymbolNames_StringPiece::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestConflictingSymbolNames_StringPiece_descriptor_;
  metadata.reflection = TestConflictingSymbolNames_StringPiece_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

TestConflictingSymbolNames_DO::TestConflictingSymbolNames_DO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestConflictingSymbolNames_DO::InitAsDefaultInstance() {
}

TestConflictingSymbolNames_DO::TestConflictingSymbolNames_DO(const TestConflictingSymbolNames_DO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestConflictingSymbolNames_DO::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestConflictingSymbolNames_DO::~TestConflictingSymbolNames_DO() {
  SharedDtor();
}

void TestConflictingSymbolNames_DO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestConflictingSymbolNames_DO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestConflictingSymbolNames_DO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestConflictingSymbolNames_DO_descriptor_;
}

const TestConflictingSymbolNames_DO& TestConflictingSymbolNames_DO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return *default_instance_;
}

TestConflictingSymbolNames_DO* TestConflictingSymbolNames_DO::default_instance_ = NULL;

TestConflictingSymbolNames_DO* TestConflictingSymbolNames_DO::New() const {
  return new TestConflictingSymbolNames_DO;
}

void TestConflictingSymbolNames_DO::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestConflictingSymbolNames_DO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TestConflictingSymbolNames_DO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestConflictingSymbolNames_DO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestConflictingSymbolNames_DO::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestConflictingSymbolNames_DO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestConflictingSymbolNames_DO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestConflictingSymbolNames_DO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestConflictingSymbolNames_DO::MergeFrom(const TestConflictingSymbolNames_DO& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestConflictingSymbolNames_DO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestConflictingSymbolNames_DO::CopyFrom(const TestConflictingSymbolNames_DO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConflictingSymbolNames_DO::IsInitialized() const {

  return true;
}

void TestConflictingSymbolNames_DO::Swap(TestConflictingSymbolNames_DO* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestConflictingSymbolNames_DO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestConflictingSymbolNames_DO_descriptor_;
  metadata.reflection = TestConflictingSymbolNames_DO_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TestConflictingSymbolNames::kInputFieldNumber;
const int TestConflictingSymbolNames::kOutputFieldNumber;
const int TestConflictingSymbolNames::kLengthFieldNumber;
const int TestConflictingSymbolNames::kIFieldNumber;
const int TestConflictingSymbolNames::kNewElementFieldNumber;
const int TestConflictingSymbolNames::kTotalSizeFieldNumber;
const int TestConflictingSymbolNames::kTagFieldNumber;
const int TestConflictingSymbolNames::kSourceFieldNumber;
const int TestConflictingSymbolNames::kValueFieldNumber;
const int TestConflictingSymbolNames::kFileFieldNumber;
const int TestConflictingSymbolNames::kFromFieldNumber;
const int TestConflictingSymbolNames::kHandleUninterpretedFieldNumber;
const int TestConflictingSymbolNames::kIndexFieldNumber;
const int TestConflictingSymbolNames::kControllerFieldNumber;
const int TestConflictingSymbolNames::kAlreadyHereFieldNumber;
const int TestConflictingSymbolNames::kUint32FieldNumber;
const int TestConflictingSymbolNames::kUint64FieldNumber;
const int TestConflictingSymbolNames::kStringFieldNumber;
const int TestConflictingSymbolNames::kMemsetFieldNumber;
const int TestConflictingSymbolNames::kInt32FieldNumber;
const int TestConflictingSymbolNames::kInt64FieldNumber;
const int TestConflictingSymbolNames::kCachedSizeFieldNumber;
const int TestConflictingSymbolNames::kExtensionsFieldNumber;
const int TestConflictingSymbolNames::kBitFieldNumber;
const int TestConflictingSymbolNames::kBitsFieldNumber;
const int TestConflictingSymbolNames::kOffsetsFieldNumber;
const int TestConflictingSymbolNames::kReflectionFieldNumber;
const int TestConflictingSymbolNames::kSomeCordFieldNumber;
const int TestConflictingSymbolNames::kSomeStringPieceFieldNumber;
const int TestConflictingSymbolNames::kIntFieldNumber;
const int TestConflictingSymbolNames::kFriendFieldNumber;
const int TestConflictingSymbolNames::kDoFieldNumber;
const int TestConflictingSymbolNames::kFieldTypeFieldNumber;
const int TestConflictingSymbolNames::kIsPackedFieldNumber;
#endif  // !_MSC_VER

TestConflictingSymbolNames::TestConflictingSymbolNames()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestConflictingSymbolNames::InitAsDefaultInstance() {
  do__ = const_cast< ::protobuf_unittest::TestConflictingSymbolNames_DO*>(&::protobuf_unittest::TestConflictingSymbolNames_DO::default_instance());
}

TestConflictingSymbolNames::TestConflictingSymbolNames(const TestConflictingSymbolNames& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestConflictingSymbolNames::SharedCtor() {
  _cached_size_ = 0;
  input_ = 0;
  output_ = 0;
  length_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_size_ = 0;
  tag_ = 0;
  source_ = 0;
  value_ = 0;
  file_ = 0;
  from_ = 0;
  handle_uninterpreted_ = 0;
  controller_ = 0;
  already_here_ = 0;
  uint32_ = 0u;
  uint64_ = GOOGLE_ULONGLONG(0);
  string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  memset_ = 0;
  int32_ = 0;
  int64_ = GOOGLE_LONGLONG(0);
  cached_size_ = 0u;
  extensions_ = 0u;
  bit_ = 0u;
  bits_ = 0u;
  offsets_ = 0u;
  reflection_ = 0u;
  some_cord_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  some_string_piece_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  int__ = 0u;
  friend__ = 0u;
  do__ = NULL;
  field_type_ = 0;
  is_packed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestConflictingSymbolNames::~TestConflictingSymbolNames() {
  SharedDtor();
}

void TestConflictingSymbolNames::SharedDtor() {
  if (length_ != &::google::protobuf::internal::kEmptyString) {
    delete length_;
  }
  if (string_ != &::google::protobuf::internal::kEmptyString) {
    delete string_;
  }
  if (some_cord_ != &::google::protobuf::internal::kEmptyString) {
    delete some_cord_;
  }
  if (some_string_piece_ != &::google::protobuf::internal::kEmptyString) {
    delete some_string_piece_;
  }
  if (this != default_instance_) {
    delete do__;
  }
}

void TestConflictingSymbolNames::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestConflictingSymbolNames::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestConflictingSymbolNames_descriptor_;
}

const TestConflictingSymbolNames& TestConflictingSymbolNames::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return *default_instance_;
}

TestConflictingSymbolNames* TestConflictingSymbolNames::default_instance_ = NULL;

TestConflictingSymbolNames* TestConflictingSymbolNames::New() const {
  return new TestConflictingSymbolNames;
}

void TestConflictingSymbolNames::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    input_ = 0;
    output_ = 0;
    if (has_length()) {
      if (length_ != &::google::protobuf::internal::kEmptyString) {
        length_->clear();
      }
    }
    total_size_ = 0;
    tag_ = 0;
    source_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    value_ = 0;
    file_ = 0;
    from_ = 0;
    handle_uninterpreted_ = 0;
    controller_ = 0;
    already_here_ = 0;
    uint32_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    uint64_ = GOOGLE_ULONGLONG(0);
    if (has_string()) {
      if (string_ != &::google::protobuf::internal::kEmptyString) {
        string_->clear();
      }
    }
    memset_ = 0;
    int32_ = 0;
    int64_ = GOOGLE_LONGLONG(0);
    cached_size_ = 0u;
    extensions_ = 0u;
    bit_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    bits_ = 0u;
    offsets_ = 0u;
    reflection_ = 0u;
    if (has_some_cord()) {
      if (some_cord_ != &::google::protobuf::internal::kEmptyString) {
        some_cord_->clear();
      }
    }
    if (has_some_string_piece()) {
      if (some_string_piece_ != &::google::protobuf::internal::kEmptyString) {
        some_string_piece_->clear();
      }
    }
    int__ = 0u;
    friend__ = 0u;
    if (has_do_()) {
      if (do__ != NULL) do__->::protobuf_unittest::TestConflictingSymbolNames_DO::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    field_type_ = 0;
    is_packed_ = false;
  }
  i_.Clear();
  new_element_.Clear();
  index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestConflictingSymbolNames::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 input = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &input_)));
          set_has_input();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_output;
        break;
      }

      // optional int32 output = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &output_)));
          set_has_output();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_length;
        break;
      }

      // optional string length = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_length:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_length()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->length().data(), this->length().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_i;
        break;
      }

      // repeated int32 i = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_i:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_i())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_i())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_i;
        if (input->ExpectTag(42)) goto parse_new_element;
        break;
      }

      // repeated string new_element = 5 [ctype = STRING_PIECE];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_new_element()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_element(this->new_element_size() - 1).data(),
            this->new_element(this->new_element_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_new_element;
        if (input->ExpectTag(48)) goto parse_total_size;
        break;
      }

      // optional int32 total_size = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_size_)));
          set_has_total_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_tag;
        break;
      }

      // optional int32 tag = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_source;
        break;
      }

      // optional int32 source = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_value;
        break;
      }

      // optional int32 value = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_file;
        break;
      }

      // optional int32 file = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_)));
          set_has_file();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_from;
        break;
      }

      // optional int32 from = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_)));
          set_has_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_handle_uninterpreted;
        break;
      }

      // optional int32 handle_uninterpreted = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handle_uninterpreted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handle_uninterpreted_)));
          set_has_handle_uninterpreted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_index;
        break;
      }

      // repeated int32 index = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_index;
        if (input->ExpectTag(112)) goto parse_controller;
        break;
      }

      // optional int32 controller = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_controller:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &controller_)));
          set_has_controller();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_already_here;
        break;
      }

      // optional int32 already_here = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_already_here:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &already_here_)));
          set_has_already_here();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_uint32;
        break;
      }

      // optional uint32 uint32 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_)));
          set_has_uint32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_uint64;
        break;
      }

      // optional uint64 uint64 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uint64_)));
          set_has_uint64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_string;
        break;
      }

      // optional string string = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string().data(), this->string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_memset;
        break;
      }

      // optional int32 memset = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memset_)));
          set_has_memset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_int32;
        break;
      }

      // optional int32 int32 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int32_)));
          set_has_int32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_int64;
        break;
      }

      // optional int64 int64 = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int64_)));
          set_has_int64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_cached_size;
        break;
      }

      // optional uint32 cached_size = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cached_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cached_size_)));
          set_has_cached_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_extensions;
        break;
      }

      // optional uint32 extensions = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extensions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extensions_)));
          set_has_extensions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_bit;
        break;
      }

      // optional uint32 bit = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bit_)));
          set_has_bit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_bits;
        break;
      }

      // optional uint32 bits = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bits_)));
          set_has_bits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_offsets;
        break;
      }

      // optional uint32 offsets = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offsets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offsets_)));
          set_has_offsets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_reflection;
        break;
      }

      // optional uint32 reflection = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reflection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reflection_)));
          set_has_reflection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_some_cord;
        break;
      }

      // optional string some_cord = 28 [ctype = CORD];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_some_cord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_some_cord()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->some_cord().data(), this->some_cord().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_some_string_piece;
        break;
      }

      // optional string some_string_piece = 29 [ctype = STRING_PIECE];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_some_string_piece:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_some_string_piece()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->some_string_piece().data(), this->some_string_piece().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_int;
        break;
      }

      // optional uint32 int = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &int__)));
          set_has_int_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_friend;
        break;
      }

      // optional uint32 friend = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend__)));
          set_has_friend_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_do;
        break;
      }

      // optional .protobuf_unittest.TestConflictingSymbolNames.DO do = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_do:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_do_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_field_type;
        break;
      }

      // optional int32 field_type = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_field_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_type_)));
          set_has_field_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_is_packed;
        break;
      }

      // optional bool is_packed = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_packed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_packed_)));
          set_has_is_packed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TestConflictingSymbolNames::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 input = 1;
  if (has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->input(), output);
  }

  // optional int32 output = 2;
  if (has_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->output(), output);
  }

  // optional string length = 3;
  if (has_length()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->length().data(), this->length().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->length(), output);
  }

  // repeated int32 i = 4;
  for (int i = 0; i < this->i_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->i(i), output);
  }

  // repeated string new_element = 5 [ctype = STRING_PIECE];
  for (int i = 0; i < this->new_element_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->new_element(i).data(), this->new_element(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->new_element(i), output);
  }

  // optional int32 total_size = 6;
  if (has_total_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->total_size(), output);
  }

  // optional int32 tag = 7;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->tag(), output);
  }

  // optional int32 source = 8;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->source(), output);
  }

  // optional int32 value = 9;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->value(), output);
  }

  // optional int32 file = 10;
  if (has_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->file(), output);
  }

  // optional int32 from = 11;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->from(), output);
  }

  // optional int32 handle_uninterpreted = 12;
  if (has_handle_uninterpreted()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->handle_uninterpreted(), output);
  }

  // repeated int32 index = 13;
  for (int i = 0; i < this->index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->index(i), output);
  }

  // optional int32 controller = 14;
  if (has_controller()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->controller(), output);
  }

  // optional int32 already_here = 15;
  if (has_already_here()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->already_here(), output);
  }

  // optional uint32 uint32 = 16;
  if (has_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->uint32(), output);
  }

  // optional uint64 uint64 = 17;
  if (has_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->uint64(), output);
  }

  // optional string string = 18;
  if (has_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string().data(), this->string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->string(), output);
  }

  // optional int32 memset = 19;
  if (has_memset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->memset(), output);
  }

  // optional int32 int32 = 20;
  if (has_int32()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->int32(), output);
  }

  // optional int64 int64 = 21;
  if (has_int64()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->int64(), output);
  }

  // optional uint32 cached_size = 22;
  if (has_cached_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->cached_size(), output);
  }

  // optional uint32 extensions = 23;
  if (has_extensions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->extensions(), output);
  }

  // optional uint32 bit = 24;
  if (has_bit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->bit(), output);
  }

  // optional uint32 bits = 25;
  if (has_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->bits(), output);
  }

  // optional uint32 offsets = 26;
  if (has_offsets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->offsets(), output);
  }

  // optional uint32 reflection = 27;
  if (has_reflection()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->reflection(), output);
  }

  // optional string some_cord = 28 [ctype = CORD];
  if (has_some_cord()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->some_cord().data(), this->some_cord().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->some_cord(), output);
  }

  // optional string some_string_piece = 29 [ctype = STRING_PIECE];
  if (has_some_string_piece()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->some_string_piece().data(), this->some_string_piece().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->some_string_piece(), output);
  }

  // optional uint32 int = 30;
  if (has_int_()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->int_(), output);
  }

  // optional uint32 friend = 31;
  if (has_friend_()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->friend_(), output);
  }

  // optional .protobuf_unittest.TestConflictingSymbolNames.DO do = 32;
  if (has_do_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->do_(), output);
  }

  // optional int32 field_type = 33;
  if (has_field_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->field_type(), output);
  }

  // optional bool is_packed = 34;
  if (has_is_packed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->is_packed(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestConflictingSymbolNames::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 input = 1;
  if (has_input()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->input(), target);
  }

  // optional int32 output = 2;
  if (has_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->output(), target);
  }

  // optional string length = 3;
  if (has_length()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->length().data(), this->length().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->length(), target);
  }

  // repeated int32 i = 4;
  for (int i = 0; i < this->i_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->i(i), target);
  }

  // repeated string new_element = 5 [ctype = STRING_PIECE];
  for (int i = 0; i < this->new_element_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_element(i).data(), this->new_element(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->new_element(i), target);
  }

  // optional int32 total_size = 6;
  if (has_total_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->total_size(), target);
  }

  // optional int32 tag = 7;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->tag(), target);
  }

  // optional int32 source = 8;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->source(), target);
  }

  // optional int32 value = 9;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->value(), target);
  }

  // optional int32 file = 10;
  if (has_file()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->file(), target);
  }

  // optional int32 from = 11;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->from(), target);
  }

  // optional int32 handle_uninterpreted = 12;
  if (has_handle_uninterpreted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->handle_uninterpreted(), target);
  }

  // repeated int32 index = 13;
  for (int i = 0; i < this->index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->index(i), target);
  }

  // optional int32 controller = 14;
  if (has_controller()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->controller(), target);
  }

  // optional int32 already_here = 15;
  if (has_already_here()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->already_here(), target);
  }

  // optional uint32 uint32 = 16;
  if (has_uint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->uint32(), target);
  }

  // optional uint64 uint64 = 17;
  if (has_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->uint64(), target);
  }

  // optional string string = 18;
  if (has_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string().data(), this->string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->string(), target);
  }

  // optional int32 memset = 19;
  if (has_memset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->memset(), target);
  }

  // optional int32 int32 = 20;
  if (has_int32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->int32(), target);
  }

  // optional int64 int64 = 21;
  if (has_int64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->int64(), target);
  }

  // optional uint32 cached_size = 22;
  if (has_cached_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->cached_size(), target);
  }

  // optional uint32 extensions = 23;
  if (has_extensions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->extensions(), target);
  }

  // optional uint32 bit = 24;
  if (has_bit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->bit(), target);
  }

  // optional uint32 bits = 25;
  if (has_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->bits(), target);
  }

  // optional uint32 offsets = 26;
  if (has_offsets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->offsets(), target);
  }

  // optional uint32 reflection = 27;
  if (has_reflection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->reflection(), target);
  }

  // optional string some_cord = 28 [ctype = CORD];
  if (has_some_cord()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->some_cord().data(), this->some_cord().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->some_cord(), target);
  }

  // optional string some_string_piece = 29 [ctype = STRING_PIECE];
  if (has_some_string_piece()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->some_string_piece().data(), this->some_string_piece().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->some_string_piece(), target);
  }

  // optional uint32 int = 30;
  if (has_int_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->int_(), target);
  }

  // optional uint32 friend = 31;
  if (has_friend_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->friend_(), target);
  }

  // optional .protobuf_unittest.TestConflictingSymbolNames.DO do = 32;
  if (has_do_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->do_(), target);
  }

  // optional int32 field_type = 33;
  if (has_field_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->field_type(), target);
  }

  // optional bool is_packed = 34;
  if (has_is_packed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->is_packed(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestConflictingSymbolNames::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 input = 1;
    if (has_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->input());
    }

    // optional int32 output = 2;
    if (has_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->output());
    }

    // optional string length = 3;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->length());
    }

    // optional int32 total_size = 6;
    if (has_total_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_size());
    }

    // optional int32 tag = 7;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

    // optional int32 source = 8;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 value = 9;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional int32 file = 10;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file());
    }

    // optional int32 from = 11;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from());
    }

    // optional int32 handle_uninterpreted = 12;
    if (has_handle_uninterpreted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handle_uninterpreted());
    }

    // optional int32 controller = 14;
    if (has_controller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->controller());
    }

    // optional int32 already_here = 15;
    if (has_already_here()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->already_here());
    }

    // optional uint32 uint32 = 16;
    if (has_uint32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 uint64 = 17;
    if (has_uint64()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uint64());
    }

    // optional string string = 18;
    if (has_string()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string());
    }

    // optional int32 memset = 19;
    if (has_memset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memset());
    }

    // optional int32 int32 = 20;
    if (has_int32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int32());
    }

    // optional int64 int64 = 21;
    if (has_int64()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int64());
    }

    // optional uint32 cached_size = 22;
    if (has_cached_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cached_size());
    }

    // optional uint32 extensions = 23;
    if (has_extensions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extensions());
    }

    // optional uint32 bit = 24;
    if (has_bit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bit());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 bits = 25;
    if (has_bits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bits());
    }

    // optional uint32 offsets = 26;
    if (has_offsets()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offsets());
    }

    // optional uint32 reflection = 27;
    if (has_reflection()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reflection());
    }

    // optional string some_cord = 28 [ctype = CORD];
    if (has_some_cord()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->some_cord());
    }

    // optional string some_string_piece = 29 [ctype = STRING_PIECE];
    if (has_some_string_piece()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->some_string_piece());
    }

    // optional uint32 int = 30;
    if (has_int_()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->int_());
    }

    // optional uint32 friend = 31;
    if (has_friend_()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_());
    }

    // optional .protobuf_unittest.TestConflictingSymbolNames.DO do = 32;
    if (has_do_()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->do_());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 field_type = 33;
    if (has_field_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->field_type());
    }

    // optional bool is_packed = 34;
    if (has_is_packed()) {
      total_size += 2 + 1;
    }

  }
  // repeated int32 i = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->i_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->i(i));
    }
    total_size += 1 * this->i_size() + data_size;
  }

  // repeated string new_element = 5 [ctype = STRING_PIECE];
  total_size += 1 * this->new_element_size();
  for (int i = 0; i < this->new_element_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->new_element(i));
  }

  // repeated int32 index = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->index(i));
    }
    total_size += 1 * this->index_size() + data_size;
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestConflictingSymbolNames::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestConflictingSymbolNames* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestConflictingSymbolNames*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestConflictingSymbolNames::MergeFrom(const TestConflictingSymbolNames& from) {
  GOOGLE_CHECK_NE(&from, this);
  i_.MergeFrom(from.i_);
  new_element_.MergeFrom(from.new_element_);
  index_.MergeFrom(from.index_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_input()) {
      set_input(from.input());
    }
    if (from.has_output()) {
      set_output(from.output());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_total_size()) {
      set_total_size(from.total_size());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_file()) {
      set_file(from.file());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_handle_uninterpreted()) {
      set_handle_uninterpreted(from.handle_uninterpreted());
    }
    if (from.has_controller()) {
      set_controller(from.controller());
    }
    if (from.has_already_here()) {
      set_already_here(from.already_here());
    }
    if (from.has_uint32()) {
      set_uint32(from.uint32());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_uint64()) {
      set_uint64(from.uint64());
    }
    if (from.has_string()) {
      set_string(from.string());
    }
    if (from.has_memset()) {
      set_memset(from.memset());
    }
    if (from.has_int32()) {
      set_int32(from.int32());
    }
    if (from.has_int64()) {
      set_int64(from.int64());
    }
    if (from.has_cached_size()) {
      set_cached_size(from.cached_size());
    }
    if (from.has_extensions()) {
      set_extensions(from.extensions());
    }
    if (from.has_bit()) {
      set_bit(from.bit());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_bits()) {
      set_bits(from.bits());
    }
    if (from.has_offsets()) {
      set_offsets(from.offsets());
    }
    if (from.has_reflection()) {
      set_reflection(from.reflection());
    }
    if (from.has_some_cord()) {
      set_some_cord(from.some_cord());
    }
    if (from.has_some_string_piece()) {
      set_some_string_piece(from.some_string_piece());
    }
    if (from.has_int_()) {
      set_int_(from.int_());
    }
    if (from.has_friend_()) {
      set_friend_(from.friend_());
    }
    if (from.has_do_()) {
      mutable_do_()->::protobuf_unittest::TestConflictingSymbolNames_DO::MergeFrom(from.do_());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_field_type()) {
      set_field_type(from.field_type());
    }
    if (from.has_is_packed()) {
      set_is_packed(from.is_packed());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestConflictingSymbolNames::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestConflictingSymbolNames::CopyFrom(const TestConflictingSymbolNames& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConflictingSymbolNames::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void TestConflictingSymbolNames::Swap(TestConflictingSymbolNames* other) {
  if (other != this) {
    std::swap(input_, other->input_);
    std::swap(output_, other->output_);
    std::swap(length_, other->length_);
    i_.Swap(&other->i_);
    new_element_.Swap(&other->new_element_);
    std::swap(total_size_, other->total_size_);
    std::swap(tag_, other->tag_);
    std::swap(source_, other->source_);
    std::swap(value_, other->value_);
    std::swap(file_, other->file_);
    std::swap(from_, other->from_);
    std::swap(handle_uninterpreted_, other->handle_uninterpreted_);
    index_.Swap(&other->index_);
    std::swap(controller_, other->controller_);
    std::swap(already_here_, other->already_here_);
    std::swap(uint32_, other->uint32_);
    std::swap(uint64_, other->uint64_);
    std::swap(string_, other->string_);
    std::swap(memset_, other->memset_);
    std::swap(int32_, other->int32_);
    std::swap(int64_, other->int64_);
    std::swap(cached_size_, other->cached_size_);
    std::swap(extensions_, other->extensions_);
    std::swap(bit_, other->bit_);
    std::swap(bits_, other->bits_);
    std::swap(offsets_, other->offsets_);
    std::swap(reflection_, other->reflection_);
    std::swap(some_cord_, other->some_cord_);
    std::swap(some_string_piece_, other->some_string_piece_);
    std::swap(int__, other->int__);
    std::swap(friend__, other->friend__);
    std::swap(do__, other->do__);
    std::swap(field_type_, other->field_type_);
    std::swap(is_packed_, other->is_packed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata TestConflictingSymbolNames::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestConflictingSymbolNames_descriptor_;
  metadata.reflection = TestConflictingSymbolNames_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int TestConflictingSymbolNamesExtension::kRepeatedInt32ExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::protobuf_unittest::TestConflictingSymbolNames,
    ::google::protobuf::internal::RepeatedPrimitiveTypeTraits< ::google::protobuf::int32 >, 5, true >
  TestConflictingSymbolNamesExtension::repeated_int32_ext(kRepeatedInt32ExtFieldNumber, 0);
TestConflictingSymbolNamesExtension::TestConflictingSymbolNamesExtension()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TestConflictingSymbolNamesExtension::InitAsDefaultInstance() {
}

TestConflictingSymbolNamesExtension::TestConflictingSymbolNamesExtension(const TestConflictingSymbolNamesExtension& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TestConflictingSymbolNamesExtension::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestConflictingSymbolNamesExtension::~TestConflictingSymbolNamesExtension() {
  SharedDtor();
}

void TestConflictingSymbolNamesExtension::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestConflictingSymbolNamesExtension::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestConflictingSymbolNamesExtension::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestConflictingSymbolNamesExtension_descriptor_;
}

const TestConflictingSymbolNamesExtension& TestConflictingSymbolNamesExtension::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return *default_instance_;
}

TestConflictingSymbolNamesExtension* TestConflictingSymbolNamesExtension::default_instance_ = NULL;

TestConflictingSymbolNamesExtension* TestConflictingSymbolNamesExtension::New() const {
  return new TestConflictingSymbolNamesExtension;
}

void TestConflictingSymbolNamesExtension::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestConflictingSymbolNamesExtension::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TestConflictingSymbolNamesExtension::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestConflictingSymbolNamesExtension::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestConflictingSymbolNamesExtension::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestConflictingSymbolNamesExtension::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestConflictingSymbolNamesExtension* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestConflictingSymbolNamesExtension*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestConflictingSymbolNamesExtension::MergeFrom(const TestConflictingSymbolNamesExtension& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestConflictingSymbolNamesExtension::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestConflictingSymbolNamesExtension::CopyFrom(const TestConflictingSymbolNamesExtension& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestConflictingSymbolNamesExtension::IsInitialized() const {

  return true;
}

void TestConflictingSymbolNamesExtension::Swap(TestConflictingSymbolNamesExtension* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestConflictingSymbolNamesExtension::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestConflictingSymbolNamesExtension_descriptor_;
  metadata.reflection = TestConflictingSymbolNamesExtension_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DummyMessage::DummyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DummyMessage::InitAsDefaultInstance() {
}

DummyMessage::DummyMessage(const DummyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DummyMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DummyMessage::~DummyMessage() {
  SharedDtor();
}

void DummyMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DummyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DummyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DummyMessage_descriptor_;
}

const DummyMessage& DummyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2fcompiler_2fcpp_2fcpp_5ftest_5fbad_5fidentifiers_2eproto();
  return *default_instance_;
}

DummyMessage* DummyMessage::default_instance_ = NULL;

DummyMessage* DummyMessage::New() const {
  return new DummyMessage;
}

void DummyMessage::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DummyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DummyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DummyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DummyMessage::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DummyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DummyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DummyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DummyMessage::MergeFrom(const DummyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DummyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DummyMessage::CopyFrom(const DummyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DummyMessage::IsInitialized() const {

  return true;
}

void DummyMessage::Swap(DummyMessage* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DummyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DummyMessage_descriptor_;
  metadata.reflection = DummyMessage_reflection_;
  return metadata;
}


// ===================================================================

TestConflictingMethodNames::~TestConflictingMethodNames() {}

const ::google::protobuf::ServiceDescriptor* TestConflictingMethodNames::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestConflictingMethodNames_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* TestConflictingMethodNames::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestConflictingMethodNames_descriptor_;
}

void TestConflictingMethodNames::Closure(::google::protobuf::RpcController* controller,
                         const ::protobuf_unittest::DummyMessage*,
                         ::protobuf_unittest::DummyMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Closure() not implemented.");
  done->Run();
}

void TestConflictingMethodNames::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), TestConflictingMethodNames_descriptor_);
  switch(method->index()) {
    case 0:
      Closure(controller,
             ::google::protobuf::down_cast<const ::protobuf_unittest::DummyMessage*>(request),
             ::google::protobuf::down_cast< ::protobuf_unittest::DummyMessage*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& TestConflictingMethodNames::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::protobuf_unittest::DummyMessage::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& TestConflictingMethodNames::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::protobuf_unittest::DummyMessage::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

TestConflictingMethodNames_Stub::TestConflictingMethodNames_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
TestConflictingMethodNames_Stub::TestConflictingMethodNames_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
TestConflictingMethodNames_Stub::~TestConflictingMethodNames_Stub() {
  if (owns_channel_) delete channel_;
}

void TestConflictingMethodNames_Stub::Closure(::google::protobuf::RpcController* controller,
                              const ::protobuf_unittest::DummyMessage* request,
                              ::protobuf_unittest::DummyMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf_unittest

// @@protoc_insertion_point(global_scope)
