<Overview>
  <Assemblies>
    <Assembly Name="Mono.Parallel" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 79 15 99 77 d2 d0 3a 8e 6b ea 7a 2e 74 e8 d1 af cc 93 e8 85 19 74 95 2b b4 80 a1 2c 91 34 47 4d 04 06 24 47 c3 7e 0e 68 c0 80 53 6f cf 3c 3f be 2f f9 c9 79 ce 99 84 75 e5 06 e8 ce 82 dd 5b 0f 35 0d c1 0e 93 bf 2e ee cf 87 4b 24 77 0c 50 81 db ea 74 47 fd da fa 27 7b 22 de 47 d6 ff ea 44 96 74 a4 f9 fc cf 84 d1 50 69 08 93 80 28 4d bd d3 5f 46 cd ff 12 a1 bd 78 e4 ef 00 65 d0 16 df ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
  </Assemblies>
  <Remarks>To be added.</Remarks>
  <Copyright>To be added.</Copyright>
  <Types>
    <Namespace Name="Mono.Collections.Concurrent">
      <Type Name="ConcurrentOrderedList`1" DisplayName="ConcurrentOrderedList&lt;T&gt;" Kind="Class" />
      <Type Name="ConcurrentSkipList`1" DisplayName="ConcurrentSkipList&lt;T&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="Mono.Threading">
      <Type Name="AtomicBoolean" Kind="Class" />
      <Type Name="AtomicBooleanValue" Kind="Structure" />
      <Type Name="CSnzi" Kind="Class" />
      <Type Name="CSnziNode" Kind="Class" />
      <Type Name="CSnziState" Kind="Enumeration" />
      <Type Name="ReaderWriterLockSlimmer" Kind="Structure" />
      <Type Name="Snzi" Kind="Class" />
      <Type Name="SpinLockWrapper" Kind="Class" />
    </Namespace>
    <Namespace Name="Mono.Threading.Tasks">
      <Type Name="CyclicDeque`1" DisplayName="CyclicDeque&lt;T&gt;" Kind="Class" />
      <Type Name="IConcurrentDeque`1" DisplayName="IConcurrentDeque&lt;T&gt;" Kind="Interface" />
      <Type Name="IMonoTaskScheduler" Kind="Interface" />
      <Type Name="MonoTaskExtensions" Kind="Class" />
      <Type Name="PopResult" Kind="Enumeration" />
      <Type Name="ThreadWorker" Kind="Class" />
    </Namespace>
  </Types>
  <Title>Mono.Parallel</Title>
  <ExtensionMethods>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Threading.Tasks.Task" />
      </Targets>
      <Member MemberName="Execute">
        <MemberSignature Language="C#" Value="public static void Execute (this System.Threading.Tasks.Task task, Action&lt;System.Threading.Tasks.Task&gt; childWorkAdder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Execute(class System.Threading.Tasks.Task task, class System.Action`1&lt;class System.Threading.Tasks.Task&gt; childWorkAdder) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="task" Type="System.Threading.Tasks.Task" RefType="this" />
          <Parameter Name="childWorkAdder" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        </Parameters>
        <Docs>
          <param name="task">Task to run.</param>
          <param name="childWorkAdder">Action that will be called with the Task that is being scheduled while above Task is executed as a parameter.</param>
          <summary>Execute a <see cref="T:System.Threading.Tasks.Task" /> body and track any other Task scheduling during it which is then passed to the supplied action for specific scheduling.</summary>
        </Docs>
        <Link Type="Mono.Threading.Tasks.MonoTaskExtensions" Member="M:Mono.Threading.Tasks.MonoTaskExtensions.Execute(System.Threading.Tasks.Task,System.Action{System.Threading.Tasks.Task})" />
      </Member>
    </ExtensionMethod>
  </ExtensionMethods>
</Overview>
