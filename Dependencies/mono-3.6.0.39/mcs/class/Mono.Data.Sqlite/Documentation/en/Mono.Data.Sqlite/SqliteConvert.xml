<Type Name="SqliteConvert" FullName="Mono.Data.Sqlite.SqliteConvert">
  <TypeSignature Language="C#" Value="public abstract class SqliteConvert" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SqliteConvert extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Data.Sqlite</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            This base class provides datatype conversion services for the SQLite provider.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string source, char separator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Split(string source, char separator) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="separator" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">Source string to split apart</param>
        <param name="separator">Separator character</param>
        <summary>
            Smart method of splitting a string.  Skips quoted elements, removes the quotes.
            </summary>
        <returns>A string array of the split up elements</returns>
        <remarks>
            This split function works somewhat like the String.Split() function in that it breaks apart a string into
            pieces and returns the pieces as an array.  The primary differences are:
            <list type="bullet"><item><description>Only one character can be provided as a separator character</description></item><item><description>Quoted text inside the string is skipped over when searching for the separator, and the quotes are removed.</description></item></list>
            Thus, if splitting the following string looking for a comma:<br />
            One,Two, "Three, Four", Five<br /><br />
            The resulting array would contain<br />
            [0] One<br />
            [1] Two<br />
            [2] Three, Four<br />
            [3] Five<br /><br />
            Note that the leading and trailing spaces were removed from each item during the split.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (object source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(object source) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">A string or number representing true or false</param>
        <summary>
            Convert a value to true or false.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(string source) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">A string representing true or false</param>
        <summary>
            Convert a string to true or false.
            </summary>
        <returns />
        <remarks>
            "yes", "no", "y", "n", "0", "1", "on", "off" as well as Boolean.FalseString and Boolean.TrueString will all be
            converted to a proper boolean value.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public DateTime ToDateTime (double julianDay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToDateTime(float64 julianDay) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="julianDay" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="julianDay">The value to convert</param>
        <summary>
            Converts a julianday value into a DateTime
            </summary>
        <returns>A .NET DateTime</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public DateTime ToDateTime (string dateText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToDateTime(string dateText) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateText">The string containing either a Tick value, a JulianDay double, or an ISO8601-format string</param>
        <summary>
            Converts a string into a DateTime, using the current DateTimeFormat specified for the connection when it was opened.
            </summary>
        <returns>A DateTime value</returns>
        <remarks>
            Acceptable ISO8601 DateTime formats are:
            yyyy-MM-dd HH:mm:ss
            yyyyMMddHHmmss
            yyyyMMddTHHmmssfffffff
            yyyy-MM-dd
            yy-MM-dd
            yyyyMMdd
            HH:mm:ss
            THHmmss
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToJulianDay">
      <MemberSignature Language="C#" Value="public double ToJulianDay (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 ToJulianDay(valuetype System.DateTime value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">The DateTime to convert</param>
        <summary>
            Converts a DateTime struct to a JulianDay double
            </summary>
        <returns>The JulianDay value the Datetime represents</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (DateTime dateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(valuetype System.DateTime dateValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateValue">The DateTime value to convert</param>
        <summary>
            Converts a DateTime to a string value, using the current DateTimeFormat specified for the connection when it was opened.
            </summary>
        <returns>Either a string consisting of the tick count for DateTimeFormat.Ticks, a JulianDay double, or a date/time in ISO8601 format.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public virtual string ToString (IntPtr nativestring, int nativestringlen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(native int nativestring, int32 nativestringlen) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nativestring" Type="System.IntPtr" />
        <Parameter Name="nativestringlen" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="nativestring">The pointer to the memory where the UTF-8 string is encoded</param>
        <param name="nativestringlen">The number of bytes to decode</param>
        <summary>
            Converts a UTF-8 encoded IntPtr of the specified length into a .NET string
            </summary>
        <returns>A string containing the translated character(s)</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUTF8">
      <MemberSignature Language="C#" Value="public byte[] ToUTF8 (DateTime dateTimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ToUTF8(valuetype System.DateTime dateTimeValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTimeValue">The DateTime to convert.</param>
        <summary>
            Convert a DateTime to a UTF-8 encoded, zero-terminated byte array.
            </summary>
        <returns>The UTF-8 encoded string, including a 0 terminating byte at the end of the array.</returns>
        <remarks>
            This function is a convenience function, which first calls ToString() on the DateTime, and then calls ToUTF8() with the
            string result.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUTF8">
      <MemberSignature Language="C#" Value="public static byte[] ToUTF8 (string sourceText);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] ToUTF8(string sourceText) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceText">The string to convert to UTF-8</param>
        <summary>
            Converts a string to a UTF-8 encoded byte array sized to include a null-terminating character.
            </summary>
        <returns>A byte array containing the converted string plus an extra 0 terminating byte at the end of the array.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UTF8ToString">
      <MemberSignature Language="C#" Value="public static string UTF8ToString (IntPtr nativestring, int nativestringlen);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UTF8ToString(native int nativestring, int32 nativestringlen) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nativestring" Type="System.IntPtr" />
        <Parameter Name="nativestringlen" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="nativestring">The pointer to the memory where the UTF-8 string is encoded</param>
        <param name="nativestringlen">The number of bytes to decode</param>
        <summary>
            Converts a UTF-8 encoded IntPtr of the specified length into a .NET string
            </summary>
        <returns>A string containing the translated character(s)</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
