<Type Name="Operator" FullName="Cairo.Operator">
  <TypeSignature Language="C#" Value="public enum Operator" />
  <AssemblyInfo>
    <AssemblyName>Mono.Cairo</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Contains the Cairo Operators</summary>
    <remarks />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="Add" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>Cairo.Operator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Merges the overlapping colors to a new one</summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Atop">
      <MemberSignature Language="C#" Value="Atop" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>Cairo.Operator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This operator leaves the first object mostly intact, but mixes both objects in the overlapping area. The second object object is not drawn except there.</summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="Clear" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>Cairo.Operator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Where the second object is drawn, the first is completely removed. Anywhere else it is left intact. The second object itself is not drawn.</summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Dest">
      <MemberSignature Language="C#" Value="Dest" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>Cairo.Operator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Leaves the first object untouched, the second is discarded completely.</summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DestAtop">
      <MemberSignature Language="C#" Value="DestAtop" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>Cairo.Operator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Same as the ATOP operator, but as if the order of the drawing operations had been reversed.</summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DestIn">
      <MemberSignature Language="C#" Value="DestIn" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>Cairo.Operator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This works like the IN operator, but with the second object "below" the first.</summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DestOut">
      <MemberSignature Language="C#" Value="DestOut" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>Cairo.Operator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The second object is used to reduce the visibility of the first in the overlapping area. The second object is not drawn itself.</summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="DestOver">
      <MemberSignature Language="C#" Value="DestOver" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>Cairo.Operator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The result is similar to the OVER operator. Except that the "order" of the objects is reversed, so the second is drawn below the first.</summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="In">
      <MemberSignature Language="C#" Value="In" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>Cairo.Operator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The first object is removed completely, the second is only drawn where the first was.</summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Out">
      <MemberSignature Language="C#" Value="Out" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>Cairo.Operator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The first object is removed completely, the second is only drawn where the first not was.</summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Over">
      <MemberSignature Language="C#" Value="Over" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>Cairo.Operator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The result is the same as if you held two semi-transparent slides on top of each other.</summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Saturate">
      <MemberSignature Language="C#" Value="Saturate" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>Cairo.Operator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Merges the overlapping colors to a new one</summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="Source" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>Cairo.Operator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The second object is drawn as if nothing else were below. The first object is only left intact outside the second.</summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="Xor" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>Cairo.Operator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Merges the overlapping colors to a new one with XOR</summary>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
  </Members>
</Type>