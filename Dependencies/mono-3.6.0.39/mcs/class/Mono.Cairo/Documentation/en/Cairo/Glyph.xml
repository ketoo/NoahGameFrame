<Type Name="Glyph" FullName="Cairo.Glyph">
  <TypeSignature Language="C#" Value="public struct Glyph" />
  <AssemblyInfo>
    <AssemblyName>Mono.Cairo</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>This structure holds information about a single glyph when drawing or measuring text. 
</summary>
    <remarks>
      <para>A font is (in simple terms) a collection of shapes used to draw text. A glyph is one of these shapes. There can be multiple glyphs for a single character (alternates to be used in different contexts, for example), or a glyph can be a ligature of multiple characters. Cairo doesn't expose any way of converting input text into glyphs, so in order to use the Cairo interfaces that take arrays of glyphs, you must directly access the appropriate underlying font system.</para>
      <para>    Note that the offsets given by @x and @y are not cumulative. When drawing or measuring text, each glyph is individually positioned with respect to the overall origin.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Glyph (long index, double x, double y);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="index" Type="System.Int64" />
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="index">A <see cref="t:System.Int64" /> value as index. </param>
        <param name="x">A <see cref="t:System.Double" /> value as x</param>
        <param name="y">A <see cref="t:System.Int64" /> value as y</param>
        <summary>Sets the index, x and y values</summary>
        <remarks>The x value represents the offset in the X direction between the origin used for drawing or measuring the string and the origin of this glyph.
The y value represents the offset in the Y direction between the origin used for drawing or measuring the string and the origin of this glyph.</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">the other object</param>
        <summary>Compares this Glyph object with another one for equality.</summary>
        <returns>True if this Glyph is equal to the other, in all other cases false.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Compute a hash for the Glyph</summary>
        <returns>The hash value for the Glyph</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public long Index { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Glyph index in the font. The exact interpretation of the glyph index depends on the font technology being used.</summary>
        <value>A <see cref="t:System.Int64" /> representing the index</value>
        <remarks>
        </remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (Cairo.Glyph glyph, Cairo.Glyph other);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyph" Type="Cairo.Glyph" />
        <Parameter Name="other" Type="Cairo.Glyph" />
      </Parameters>
      <Docs>
        <param name="glyph">The first Glyph</param>
        <param name="other">The other Glyph</param>
        <summary>Checks the equality of two Glyphs</summary>
        <returns>A <see cref="t:System.Boolean" /> representing the result</returns>
        <remarks />
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (Cairo.Glyph glyph, Cairo.Glyph other);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyph" Type="Cairo.Glyph" />
        <Parameter Name="other" Type="Cairo.Glyph" />
      </Parameters>
      <Docs>
        <param name="glyph">The first Glyph</param>
        <param name="other">The other Glyph</param>
        <summary>Checks the inequality of two Glyphs</summary>
        <returns>A <see cref="t:System.Boolean" /> representing the result</returns>
        <remarks />
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public double X { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The offset in the X direction between the origin used for drawing or measuring the string and the origin of this glyph.</summary>
        <value>A <see cref="t:System.Double" /> representing X</value>
        <remarks>
        </remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public double Y { set; get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The offset in the Y direction between the origin used for drawing or measuring the string and the origin of this glyph.</summary>
        <value>A <see cref="t:System.Double" /> representing Y</value>
        <remarks>
        </remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
  </Members>
</Type>