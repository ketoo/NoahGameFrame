2010-07-21  Sebastien Pouliot  <sebastien@ximian.com>

	* ServicePointManager.cs: Add special validation for Moonlight
	* WebConnection.cs: Change a define to NET_2_1

2010-07-16 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebClient.cs: ignore values set in CachePolicy and
	UseDefaultCredentials instead of throwing NIEX.

2010-07-14 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* IPAddress.cs: allow values out of range as MS does.

2010-07-08 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebClient.cs: handle compressed streams when automatic decompression
	is turned on by a class derived from WebClient.

2010-07-01  Marek Habersack  <mhabersack@novell.com>

	* WebRequest.cs: DefaultCachePolicy and CachePolicy return a
	NoCacheNoStore policy in all cases now. Workaround for bug #583934

2010-06-29  Sebastien Pouliot  <sebastien@ximian.com>

	* ServicePointManager.cs: Remove NET_2_0 defines around 
	RemoteCertificateValidationCallback

2010-06-28 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* IPAddress.cs: verify the last IPv4 digit too.
	Fixes bug #612135.

2010-06-16 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpWebRequest.cs: DELETE allows an entity body.
	Fixes bug #614483.

2010-06-15 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpWebRequest.cs: 307 does not change request method.

2010-06-11 Jonathan Chambers  <joncham@gmail.com>

	* HttpListenerRequest.cs: Assign default value to variable before using.

2010-05-18 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* FtpDataStream.cs:
	* FtpWebRequest.cs: properly close the data connection even when
	nothing is read from it. Refixes bug #598908.

2010-04-23 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* FtpDataStream.cs:
	* FtpWebRequest.cs: use streams instead of sockets as soon as
	possible. Correctly initialize the control connection when SSL
	is used and protect the data connection by default.
	Fixes bug #598908.

2010-04-20 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* ChunkStream.cs: ignore chunk extensions when reading the chunk
	size. Fixes bug #597556.

2010-04-15 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpWebRequest.cs: set content length to -1 on redirect. Reset
	'FinishedReading' on redirects. Fixes bug #593596.

2010-04-08 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* ServicePointManager.cs: obtain the SubjectAltName extension the
	right way. Fixes bug #594110.

2010-03-27 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpWebRequest.cs: when PreAuthenticate is true, don't remove the
	existing authorization related headers until we know we have a
	replacement. Fixes bug #591633.

2010-03-26 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* ServicePointManager.cs: errors parsing the certificate don't prevent
	calling the callback now. Exceptions thrown parsing the certificate
	are printed to stderr in case they are library errors.

2010-03-21 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebClient.cs: fix handling of query string, whether it comes from
	the address used or is part of the QueryString.

2010-03-20  Miguel de Icaza  <miguel@novell.com>

	* WebConnection.cs: Drop pre-2.0 and pre-1.1 support, and remove
	warnings. 

	* WebClient.cs: Drop the pre-2.0 support

2010-03-19  Sebastien Pouliot  <sebastien@ximian.com>

	* AuthenticationManager.cs: Internal type for Moonlight.
	Add BasicClient, DigestClient, NtlmClient for NET_2_1 since
	this applies to both monotouch and moonlight (client stack).
	Removed unneeded NET_2_0 defines
	* CookieContainer.cs: For Moonlight it needs to be internal in 
	System.dll and public in System.Net.dll. Removed unneeded NET_2_0
	defines
	* HttpContinueDelegate.cs: Internal type for Moonlight.
	* HttpRequestCreator.cs: Remove a MOONLIGHT define
	* HttpStatusCode.cs: For Moonlight it needs to be internal in 
	System.dll and public in System.Net.dll
	* HttpWebRequest.cs: Internal type for Moonlight. Change S.Config
	to NET_2_1 defines (applies to both monotouch and moonlight).
	Removed unneeded NET_2_0 and NET_1_1 defines
	* HttpWebResponse.cs: Internal type for Moonlight. Removed 
	unneeded NET_2_0 defines
	* IAuthenticationModule.cs: Internal type for Moonlight.
	* ICertificatePolicy.cs: Internal type for Moonlight.
	* ICredentialPolicy.cs: Internal type for Moonlight. Removed 
	unneeded NET_2_0 defines
	* IWebRequestCreate.cs: For Moonlight it needs to be internal in 
	System.dll and public in System.Net.dll
	* ServicePoint.cs: Internal type for Moonlight. Change S.Config
	to NET_2_1 defines (applies to both monotouch and moonlight)
	* ServicePointManager.cs: Remove a MOONLIGHT define
	* WebException.cs: For Moonlight it needs to be internal in 
	System.dll and public in System.Net.dll. Removed unneeded NET_2_0
	defines
	* WebHeaderCollection.cs: Internal type for Moonlight. Removed 
	unneeded NET_2_0 defines
	* WebRequest.cs: Internal type for Moonlight. Change S.Config
	to NET_2_1 defines (applies to both monotouch and moonlight)
	* WebResponse.cs: Internal type for Moonlight. Removed unneeded
	NET_2_0 defines

2010-03-18 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* FtpWebResponse.cs:
	* FtpWebRequest.cs: for non-data operations, make sure we send the
	QUIT command upon completion when KeepAlive is false.
	Fixes bug #589305.

2010-03-16  Jb Evain  <jbevain@novell.com>

	* Dns.cs, HttpRequestCreator.cs, ServicePoint.cs: use MOONLIGHT
	symbol to disambiguate MonoTouch and Moonlight code.

2010-03-11 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* ServicePointManager.cs: perform the entire chain validation here.

2010-03-09 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpConnection.cs: set the right position when a CR is found.
	Fixes bug #577891.

2010-03-09 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpListener.cs:
	* HttpListenerRequest.cs:
	* ListenerAsyncResult.cs:
	* HttpConnection.cs: make sure there is no pending input when reusing
	the connection.

2010-03-08 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpListenerContext.cs: split the auth header in 2 parts.
	* HttpListener.cs: backported SelectAuthenticationScheme and
	added new InternalEndGetContext used for connections that require
	authentication.
	* ListenerAsyncResult.cs: allow this object to be just a forwarder
	when nesting connections for authentication purposes.
	Fixes bug #585455.

2010-03-06 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebClient.cs: fix for UploadStringAsync(). Closes bug #577818.
	Patch by Atsushi.

2010-03-04  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpListenerContext.cs : WWW-Authenticate header should not be
	  limited to Basic.

2010-03-04  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpListenerContext.cs : The header line here is already trimmed
	  "Authorization:" , so do not try to remove it.

2010-03-04  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpListener.cs, ListenerAsyncResult.cs : fix authentication
	  scheme selection mismatch.

2010-03-03  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpListenerContext.cs, HttpListener.cs :
	  support AuthenticationSchemeSelectorDelegate.

2010-03-01  Miguel de Icaza  <miguel@novell.com>

	* WebHeaderCollection.cs: Apply 2 year old patch from Yves Bastide
	that fixes the keys casing in the collection; Fixes 325491

2010-03-01 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebConnection.cs: attach a validation callback to the new
	event in Mono.Security.
	* ServicePointManager.cs: added a new ValidationHelper
	class that takes care of building the certificate chain and perform
	all the check that were done in Mono.Security before. This way the 2.0
	server certificate validation callback can get all the data it needs.

	Fixes bug #584050.

2010-01-29  Mike Kestner <mkestner@novell.com>

	* HttpUtility.cs: port more of the methods from System.Web file.
	* WebUtility.cs: new 4.0 class.

2010-01-21  Carlos Alberto Cortez <calberto.cortez@gmail.com>

	* IPEndPoint.cs: When throwing an ArgumentException in Create()
	because of a mismatch in the address family, use a more informative
	message. Patch by Juho Vaha-Herttu<juhovh@iki.fi>.
	Fixes #505105.

2010-01-21  Sebastien Pouliot  <sebastien@ximian.com>

	* CookieContainer.cs: Fix to cloning and expiration. Patch
	by Tom Philpot <tom.philpot@logos.com>

2010-01-13 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpWebRequest.cs: when the server returns several different
	authentication methods, pick the one that works.
	Fixes bug #562043.

2010-01-12  Sebastien Pouliot  <sebastien@ximian.com>

	* NetworkCredential.cs: Fix properties to never return null.

2009-12-24  Sebastien Pouliot  <sebastien@ximian.com>

	* Cookie.cs: Re-work ToString to be useable in more cases. Fix
	some issues found by Gendarme.
	* CookieContainer.cs: Fix all NonWorking (and new) unit tests.
	Implement removing oldest cookies when limits are reached.
	* CookieCollection.cs: Move to generics internally. Fix sort to 
	be closer to MS implementation (but still not 100% identical).
	Fix some issues found by Gendarme.

2009-12-21 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebConnectionGroup.cs:
	* ServicePoint.cs: implemented CloseConnectionGroup().

2009-12-04  Sebastien Pouliot  <sebastien@ximian.com>

	* System.Net/DnsEndPoint.cs: Moved from System.Net (where the
	type resides in Moonlight) so it's available for 4.0

2009-11-30  Sebastien Pouliot  <sebastien@ximian.com>

	* CookieCollection.cs: Seal inner CookieCollectionPathComparer
	* IPAddress.cs: Avoid multiple casts in Equals
	* SocketAddress.cs: Avoid multiple casts in Equals
	[Found using Gendarme]

2009-10-23  Alexandre Gomes  <alexmipego@gmail.com>

	* WebClient.cs: Fixed GetWebRequest overriding problems, bug: 
	  https://bugzilla.novell.com/show_bug.cgi?id=549580
	  
2009-10-17 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebConnectionStream.cs: add 3 missing DoCallback() calls in
	EndRead/EndWrite.

2009-09-29 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* EndPointListener.cs: fix matching a listener in presence of a query
	string or anchor.

2009-09-15 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpListenerRequest.cs: add the right status code.
	* HttpConnection.cs: exception might come from more places when
	reading the input. Catch all of them.

2009-09-15 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebRequest.cs: handle upper and lowercase HTTP_PROXY and the Any
	address. Fixes bug #537283.

2009-09-04 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebConnection.cs: if the request has already finished reading, don't
	throw ObjectDisposedException here, just return as if nothing
	happened. Fixes bug #312968.

2009-08-29 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebConnection.cs: HEAD response does not have a body even if the
	response is an error. Fixes buf #535102.

2009-08-17  Geoff Norton  <gnorton@novell.com>

	* NtlmClient.cs: Mono.Http does not exist on monotouch

2009-08-17  Sebastien Pouliot  <sebastien@ximian.com>

	* CookieCollection.cs: Seal class for NET_2_1 (SL3)
	* CookieContainer.cs: Seal class for NET_2_1 (SL3)
	* NetworkCredential.cs: Use in NET_2_1 (SL3) but without implementing
	ICredentialsByHost

2009-08-13 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpWebRequest.cs:
	* WebConnectionStream.cs: if there's an error writing the headers from
	a buffered request, propagate the error instead of hiding it and
	causing a different one later (ie, ObjectDisposedException instead of
	the original WebException). This happened when posting without
	Content-Length set to an HTTPS url without validating the server
	certificate.

2009-07-28 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebClient.cs: rethrow WebExceptions instead of creating a new one
	with less information on the actual error.
	Fixes bug #526069.

2009-07-22 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebHeaderCollection.cs: check the validity of the characters in the
	header names.

2009-07-22 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebHeaderCollection.cs: implemente the 2.0 IsRestricted().

2009-07-22 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebConnectionStream.cs: when sending a 0-length POST, ignore further
	writes instead of throwing.
	Fixes bug #524049.

2009-07-10 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebClient.cs: implement GetWebRequest and GetWebResponse. Use them
	instead of SetupRequest and ProcessResponse.

2009-07-07 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebClient.cs: set the content length when uploading values. This
	allows reusing the connection.
	* WebConnectionStream.cs: SetHeaders() takes ownership of the buffer
	and does not need to copy it any more. WriteRequest() wasn't always
	setting 'requestWritten' to true.
	* HttpWebRequest.cs: change in SetHeaders call.

2009-07-06  Gert Driesen  <drieseng@users.sourceforge.net>

	* WebConnectionStream.cs: Move and improve argument checks to match MS.
	Modified CanRead and CanWrite to return false when instance is disposed.

2009-07-02 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebConnection.cs: provide better error message when there's an error
	writing.
	* WebConnectionStream.cs: don't nullify the buffer until
	CheckFinalStatus() decides that there are no more authentication
	retries or redirects.

2009-07-02 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* ServicePointManager.cs: implement ServerCertificateValidationCallback.
	* DefaultCertificatePolicy.cs: if there's a SCVC registered, don't do
	normal error checking.a

2009-07-02 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpWebRequest.cs: avoid duplicating Accept-Encoding if GetHeaders()
	is called twice.
	* WebConnectionStream.cs: don't send a 0 content length for non-write
	requests.

2009-07-02 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebConnection.cs: must use the 'int' version in 1.1.

2009-07-01 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebConnection.cs:
	* ServicePoint.cs: UseNagleAlgorithm determines NoDelay value.

2009-06-28 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpWebRequest.cs: fix 1.1 only test.

2009-06-28 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebConnectionStream.cs: when buffering the response, we have to set
	the internal length and regenerate the headers.

2009-06-26 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpWebRequest.cs: don't send Content-Length header when SendChunked
	is enabled.
	* WebConnectionStream.cs: send the headers immediately when possible.
	When writing the request before a Close(), if there was an exception
	it was lost.

2009-06-26 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpConnection.cs:
	* HttpListenerResponse.cs: force closing the socket when the response
	is aborted.

2009-06-25 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebAsyncResult.cs: new field that tells us if the request is being
	written automatically because we reached the content length.
	* WebConnection.cs:
	* WebConnectionStream.cs: make sure we only access the NetworkStream
	while we own it. Automatically write the request when we reach
	ContentLength number of bytes. Kill the write buffer as soon as
	possible. Don't use the buffer at all when chunked encoding is
	enabled.

	Fixes bugs #515931 and #510642.

2009-06-24 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebConnection.cs: 'socket' and 'Data' where being changed by 2
	threads at the same time when there were queued requests and the
	current one was aborted in Connect().
	* HttpWebRequest.cs: 'aborted' is now an int and we use Interlocked to
	access it. Added WebConnection field used when aborting the request.

	Fixes bug #514591 for good.

2009-06-21 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpWebRequest.cs: check for an aborted request in Begin* before
	proceeding. Fixes bug #511851.

2009-06-21 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebConnectionStream.cs: close the underlying socket if there's an
	exception when closing the stream. Fixes bug #514996.

2009-06-20  Gert Driesen  <drieseng@users.sourceforge.net>

	* WebConnectionStream.cs: Keep count of all bytes written, and perform
	write overflow check in both buffered and non-buffered writing (if
	not using chunked transfer encoding). Fixes bug #510642.

2009-06-20  Gert Driesen  <drieseng@users.sourceforge.net>

	* WebClient.cs: Use lowercase hex bytes to match MS. Avoid using
	zero-length string literal. Fixed exception argument name to match
	MS. 
	* WebConnectionStream.cs: Throw a WebException that wraps an
	IOException when closing the stream before all bytes are written.

2009-06-19 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebConnection.cs: make sure we don't open a new socket if the
	request is aborted before we establish the connection. Fixes bug
	#514591.

	* HttpWebRequest.cs: new property to return abort status. Invoke the
	abort handler before doing anything else when Abort() is called for
	the first time.

2009-06-17 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* EndPointListener.cs: call CheckIfRemove() after removing a regular
	prefix. Fixes bug #513849.
	* EndPointManager.cs: make sure we use the right lock when one prefix
	of a collection fails to be added and we need to remove all of the
	prefixes.
	Clear the ip_to_endpoints hashtable if there are no more prefixes
	listening on that address.

2009-06-16 Andres G. Aragoneses <aaragoneses@novell.com>

	* WebConnection.cs: propagate the exception to the request.
	* WebException.cs: new internal ctor.
	* HttpWebRequest.cs: use new ctor to encapsulate the innerException.
	Fixes #323452.

2009-06-15 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpWebRequest.cs: for unknown methods, always send the request once
	we are connected even if there's no writeStream. Fixes bug #513087.

2009-06-09 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpWebRequest.cs: ProtocolViolationException is not thrown in
	certain cases since 2.0. Fixes bug #508027.

2009-06-09 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpWebRequest.cs: follow MS docs when throwing
	ProtocolViolationException at the beginning of an asynchronous
	operation. Fixes bug #465613.

2009-06-08 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebConnectionStream.cs: throw a WebException instead of an IOException.

2009-06-08 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* FtpWebRequest.cs: avoid exception when the reply from the server
	contains just response code. Fixes bug #510852.

2009-06-05  Sebastien Pouliot  <sebastien@ximian.com> 

	* DownloadStringCompletedEventArgs.cs: Call RaiseExceptionIfNecessary
	* OpenReadCompletedEventArgs.cs: Remove Address property since it's 
	not part of SL2. Call RaiseExceptionIfNecessary
	* OpenWriteCompletedEventArgs.cs: Call RaiseExceptionIfNecessary
	* UploadStringCompletedEventArgs.cs: Call RaiseExceptionIfNecessary

2009-06-05  Robert Jordan  <robertj@gmx.net>

	* WebClient.cs (UploadValuesCore): Encode POST arguments with UTF-8.
	Fixes bug #484795.

2009-06-02 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpWebRequest.cs: KeepAlive check not needed.
	Fixes bug #465613.

2009-06-02 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpConnection.cs: unbind the context after every read for keep-alive
	connections.
	Bug #502274 fixed.

2009-05-17  Gert Driesen  <drieseng@users.sourceforge.net>

	* CookieContainer.cs: Provide meaningful information in exception
	messages, and improve compatibility with MS. Modified set_Capacity to
	no longer change MaxCookieSize when new value is less than
	MaxCookieSize.

2009-05-16 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpWebResponse.cs:
	* HttpWebRequest.cs: support automatic decompression of the response.
	Fixes bug #504391.


2009-05-11 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* Dns.cs: made GetHostAddresses and friends internal for 1.x
	* EndpointPermission.cs: use GetHostAddresses.

2009-05-10 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* CookieContainer.cs: matching hosts to domain names like MS does.
	Bug #421827 fixed.

2009-05-02  Atsushi Enomoto  <atsushi@ximian.com>

	* CredentialCache.cs : implement all not-implemented methods.
	  Patch by Mineda Nozomi. Close bug #499556.

2009-04-21  Sebastien Pouliot  <sebastien@ximian.com>

	* EndPoint.cs: Throw NotImplementedException instead of 
	NotSupportedException
	* IPEndPoint.cs: Fix some validations.

2009-04-21 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebConnection.cs:
	* HttpWebRequest.cs: provide more information on why the connection
	could not be established.

2009-04-06 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* FtpWebRequest.cs: send REST after PASV to avoid some servers
	forgetting aboout it.
	Bug #491590 fixed.

2009-03-24 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* FtpWebRequest.cs: we were sending CWD instead of PWD.
	Bug #486703 fixed.

2009-03-03 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* IPAddress.cs: don't allocate the IPv6 array for IPv4 addresses.

2009-02-23 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebClient.cs: append the QueryString in DownloadData.
	Fixes bug #323788.

2009-02-21 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* FtpWebResponse.cs: return a Null stream when there's no response to
	be read.
	* FtpWebRequest.cs: provide the error returned by the server in the
	exception.
	* WebClient.cs: set the correct method when doing a FTP upload.
	Fixes bug #478451.

2009-02-19 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* FtpWebRequest.cs: avoid errors when creating a temporary Uri to get
	the local path.
	* WebClient.cs: when setting up the request for downloading, use the
	default method. Fixes bug #477611.

2009-02-16  Atsushi Enomoto  <atsushi@ximian.com>

	* WebConnectionStream.cs : use request only after it is set.

2009-02-13 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebConnectionStream.cs: implemente (Read|Write)Timeout.
	Fixes bug #348159.

2009-02-10 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* CookieContainer.cs: separate cookies with "; " instead of just ';'.
	Fixes bug #386727.

2009-02-08 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpWebRequest.cs: lock SetResponseError.

2009-02-08  Gert Driesen  <drieseng@users.sourceforge.net>

	* Dns.cs: BeginGetHostAddresses - renamed argument to match MS,
	reject "any" IP addresses. BeginGetHostEntry - renamed argument
	to match MS, reject "any" IP addresses. GetHostEntry - reject
	"any" IP addresses. GetHostAddresses - reject "any" IP addresses.
	GetHostByName - use "hostName" as paramname in ANE.

2009-02-07 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* Dns.cs: empty string for host (also 0.0.0.0) is just passed to the
	runtime, which will then retrieve the local IP addresses. Fixes bug
	#386637 part 2/2.

2009-02-06 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* FtpWebRequest.cs: some servers have a comment after the directory
	name. Fixes bugs #471149 and #471216.

2009-02-06 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebConnectionStream.cs: set the content length to 0 when the
	response is not supposed to have any content.

2009-02-05  Miguel de Icaza  <miguel@novell.com>

	* WebConnectionStream.cs: Prevent a nullref here.   This might
	have to be backported to 2.2 and 2.4

2009-02-03 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebConnection.cs:
	* HttpWebRequest.cs: calling Abort is safe now if the request has been
	read entirely.

2009-02-03 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebProxy.cs: use TryParse when checking for a localhost IP.

2009-01-26 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpWebResponse.cs: avoid throwing an exception when
	Content-Length is not present.

2009-01-26 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpWebRequest.cs: added locking in SetResponseData for the case
	when we get an error response before BeginGetResponse has been
	called.

2009-01-20 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* IPAddress.cs: handle sign extension for the high byte when using the
	byte[] ctor for an IPv4 address.
	Fixes bug #467472.

2009-01-19  Marek Habersack  <mhabersack@novell.com>

	* HttpWebRequest.cs: implemented the UseDefaultCredentials
	property, patch from Florian Maetschke <f.maetschke@tu-bs.de>,
	thanks!

2009-01-16 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* FtpWebRequest.cs: adjust to the correct directory when listing too.
	Fixes bug #466530.

2009-01-15 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpListenerRequest.cs: always initialize 'version'.
	* HttpConnection.cs: the socket might already be disconnected when
	shutting down.

2009-01-14 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebConnectionStream.cs: if the buffer has been killed, return -1 for
	its length. Fixes regression in System.Runtime.Remoting.

2009-01-14 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpWebRequest.cs: create a result from the response when
	*GetResponse() has not been called yet and we have already received
	all the data.
	Fixes bug #464013.

2009-01-13 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpWebRequest.cs: keepAlive is of no use here.
	Fixes bug #465613.

2009-01-13 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpConnection.cs: we were not writing the headers for 0-length
	responses.
	* WebConnectionStream.cs: for 204/304 responses with an explicit
	content-length of 0, release the socket only once.
	Fixes bug #465638.

2009-01-12 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* FtpWebRequest.cs: now deleting a file works when we're not in the
	root directory.

2008-12-20 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* IPAddress.cs: avoid throwing when parsing a subnet.

2008-11-18 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpConnection.cs: remove CWL. When reusing, BeginReadRequest might
	throw if the client closes.
	* HttpListenerResponse.cs: close the connection for 1.0 clients.

2008-11-13 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* FtpDataStream.cs: use the socket for reading until the end of a
	stream that wasn't read entirely. Remove unused ManualResetEvent.
	* FtpWebRequest.cs: set the file_name when downloading. Update the
	response status after every SendCommand. Send a "OPTS utf8 on" as MS
	does (the control cnc reader should do something with UTF8)

2008-11-04 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebRequest.cs: if the cache level is NoCacheNoStore, don't throw
	when setting the CachePolicy.

2008-11-03 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* FtpWebRequest.cs: take the server current directory into account
	when uploading files. Set the data connection type before every
	transmission.
	Bug 333985 fixed.

2008-10-31 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* FtpWebRequest.cs: disable keep-alive connections as the current code 
	does not deal with keep-alive connections.
	Workaround for bug #380262.

2008-10-30 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebConnectionStream.cs: when there's a NTLM authentication in
	progress, don't let the connection be used by the next request if we
	have the entire response in the input buffer.

2008-10-30 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpListenerResponse.cs: removed obsolete comment.
	* ResponseStream.cs: don't read response.SendChunked until after
	getting the response headers.

2008-10-27 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* ServicePointManager.cs: set the default limit of connections from
	the configuration file(s) on startup.
	Bug #339422 fixed.

2008-10-23 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpWebRequest.cs: don't call ProxyRequest twice.
	* WebConnectionData.cs: remove unused fields.

	* WebConnection.cs:
	* WebConnectionStream.cs: when setting the input buffer, check to see
	if the entire response is already there and free up the request slot.
	Fixes bug #423156.

	* ResponseStream.cs:
	* HttpListenerResponse.cs: buffer the headers so that they are sent
	together with the data on the first Write (if any). The fix above
	didn't work with our HttpListener without this.

2008-10-08 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WebConnection.cs:
	* ServicePoint.cs:
	* WebConnectionGroup.cs:
	* HttpWebRequest.cs:
	* WebConnectionStream.cs: reuse the same connection when doing NTLM
	authentication. Fixes bug #323375.
	Implemented support for UnsafeAuthenticatedConnectionSharing.

2008-10-08 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpConnection.cs:
	* HttpListenerResponse.cs: fix typo that caused the "connection close"
	header to be sent. Do not close the socket when the encoding is not
	chunked and reuse is possible.
	Fixes bug #433371.

2008-10-08 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpWebRequest.cs: if GetRequestStream has already been called,
	return the same stream that we returned in the first call.
	Fixes bug #429200.

2008-10-07 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* ServicePointManager.cs: better handling of possible collisions of the
	hash for schema/host/port. Fixes bug #417891.

2008-10-06 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* ChunkStream.cs: (ReadTrailer) make sure the array access is not out
	of bounds. Fixes bug #322715.

2008-09-19 Gonzalo Paniagua Javier <gonzalo.mono@gmail.com>

	* WebConnectionStream.cs: when receiving a 0 content-length, free up
	the slot for the next request immediately.
	Fixes bug #427974.

2008-09-16  Miguel de Icaza  <miguel@novell.com>

	* IPv6Address.cs: On the 2.0 profile, avoid throwing/catching
	exceptions inside TryParse.

2008-09-12  Miguel de Icaza  <miguel@novell.com>

	* HttpListenerPrefixCollection.cs, EndPointListener.cs,
	HttpListener.cs, EndPointManager.cs, HttpConnection.cs: Remove
	generics support where necessary to allow this code to be reused
	in the 1.0 profile.

2008-09-08  Miguel de Icaza  <miguel@novell.com>

	* EndPointListener.cs (SearchListener): Cope with the raw_url not
	being merely a path, but potentially a full URI (see the proxy
	case). 

	* HttpListenerRequest.cs: Cope with raw_url not being merely a
	path, but potentially a full Uri.   Also uses TryCreate, hoping
	that one day it will be faster.

2008-08-23  Zoltan Varga  <vargaz@gmail.com>

	* WebConnectionStream.cs (WriteRequest): Fix the copying in the
	previous patch, when bytes.Length != length.

2008-08-22  Zoltan Varga  <vargaz@gmail.com>

	* WebConnectionStream.cs (WriteRequest): For small requests,
	cluster together the header + body in a single write call, avoids
	the latency problems observed in an TLS application that makes
	many web service calls. 

2008-08-22  Geoff Norton  <gnorton@novell.com>

	* WebConnection.cs: Set NoDelay

2008-08-21  Stephane Delcroix  <sdelcroix@novell.com>

	* OpenReadCompletedEventArgs.cs: new Address property for 2.1

2008-08-06  Miguel de Icaza  <miguel@novell.com>

	* IPAddress.cs (ParseIPV6): Use an exception-less parser for ipv6
	addresses.

	* IPv6Address.cs: Rewrite most of the parsing code to not use that
	incredibly fragile, hacky and hacky implementation.

	(TryParse): Provide a exception-less parsing path.

2008-07-25  Gert Driesen  <drieseng@users.sourceforge.net>μ

2008-08-06  Atsushi Enomoto  <atsushi@ximian.com>

	* IPAddress.cs : several IPv4 parsing fix exposed by bug #411920.

2008-08-05  Atsushi Enomoto  <atsushi@ximian.com>

	* WebClient.cs : it should not invoke delegate directly, but should
	  call overridable OnDownloadProgressChanged.

2008-07-25  Gert Driesen  <drieseng@users.sourceforge.net>μ

	* HttpWebResponse.cs: Initialize contentLength in ctor, as it must
	remain accessible after the response is disposed (and the headers are
	no longer available). Adding missing disposed checks in properties
	(except for StatusCode) and GetResponseHeader. On the 2.0 profile,
	headers must remain accessible after the HttpWebResponse is disposed.

2008-06-10  Stephane Delcroix  <sdelcroix@novell.com>

	* IPAddress.cs: allow usage on 2.1 as smcs knows nothing about
	string.GetEnumerator : IEnumerable<char>

2008-06-08  Miguel de Icaza  <miguel@novell.com>

	* ResponseStream.cs: Do not Close the HttpResponse object here as
	it is possible to issue multiple OutputStream.Close calls (they
	actually happen implicitly through things like StreamWriter.Close,
	and they are in various MSDN samples).

2008-05-28 Gonzalo Paniagua Javier <gonzalo.mono@gmail.com>

	* CookieContainer.cs: apply slightly modified patch from rulatir@wp.pl
	that fixes bug #356537.

2008-04-30  Miguel de Icaza  <miguel@novell.com>

	* WebPermission.cs (ToXml): To allow code that uses WebPermission
	to be built. 

2008-04-21 Gonzalo Paniagua Javier <gonzalo.mono@gmail.com>

	* HttpWebResponse.cs: do not check the disposed status for properties
	and methods that return response data other than the stream itself.
	Fixes bug #381223.

2008-04-16  Marek Habersack  <mhabersack@novell.com>

	* HttpWebRequest.cs: fix an off-by-one bug - the number of
	redirects must not exceed the value of
	MaximumAutomaticRedirections. Fixes bug #380131

2008-04-13  Jb Evain  <jbevain@novell.com>

	* *_2_1.cs: move the specific 2.1 System.Net code to the
	assembly System.Net.

2008-04-13  Jb Evain  <jbevain@novell.com>

	* WebRequest_2_1.cs, WebResponse_2_1.cs: new files
	* HttpWebRequest_2_1.cs, HttpWebResponse_2_1, WebHeaderCollection_2_1:
	update to Silverlight 2.0b1 API.
	Merged from the Moonlight 2 branch.

2008-04-06  <gnorton@novell.com>

	* ListenerAsyncContext.cs: Fix Basic authentication support.  Patch from 
	Maciej Paszta <paszczi@go2.pl>

2008-02-21  Zoltan Varga  <vargaz@gmail.com>

	* HttpConnection.cs (Close): Close the socket even if Shutdown throws an exception.

2008-02-17  Daniel Nauck  <dna@mono-project.de>

	* HttpWebResponse.cs: refactored cookie expires parsing to
	allow all common expires datetime formats.

2008-02-09  Daniel Nauck  <dna@mono-project.de>

	* HttpWebResponse.cs: convert UTC/GMT Expires DateTime from a cookie
	into local time, also set the HttpOnly property if available.

2008-02-09  Daniel Nauck  <dna@mono-project.de>

	* Cookie.cs: implemented HttpOnly

2008-01-27  Gert Driesen  <drieseng@users.sourceforge.net>

	* IPAddress.cs (Parse): Changed argument name to match MS.
	(TryParse): Changed argument name to match MS.
	(ParseIPV4): Only treat zero-length or " " address as empty on 1.0
	profile. On 2.0 profile, only ignore characters after blank if last
	part is valid hex string.
	* IPv6Address.cs: Removed extra spaces and tabs.

2008-01-26  Daniel Nauck  <dna@mono-project.de>

	* HttpWebRequest.cs: fixed typo. Use the actual uri for correct
	cookie header informations and not the originally one.

2008-01-26  Daniel Nauck  <dna@mono-project.de>

	* Cookie.cs: set Version to '1' if Port is set,
	don't include path and domain informations when version is 0,
	match ToString () output with .NET 2.0,
	fixes bug #316017

2008-01-15  Atsushi Enomoto  <atsushi@ximian.com>

	* MonoHttpDate.cs : Parse() should return Local time. Fixed bug
	  #353495.

2008-01-12  Gert Driesen  <drieseng@users.sourceforge.net>

	* WebClient.cs: Do not add trailing CRLF in UploadValuesCore. Fixes
	standalone test for bug #351049.

2008-01-07  Sebastien Pouliot  <sebastien@ximian.com>

	* CredentialCache.cs: Gendarme's AvoidToStringOnStringsRule in
	CredentialCacheKey constructor. UseStringEmptyRule on CredentialCache
	static ctor (3 times).

2007-12-27  Miguel de Icaza  <miguel@novell.com>

	* WebClient.cs: We catch exceptions that happen on the helper
	async threads toa void terminating the application on errors, and
	also raise a variant of the OnXXXXCompleted methods that take an
	Exception argument.

	Note that this differs from the .NET implementation in that
	we actually raise a signal on error, and set the exception, and in
	their case no error is ever raised.

	We now call CompleteAsync in the OnXXXCompleted handlers to ensure
	that the WebClient can be reused immediately by the callback.

	This fixes #350621.

	This also should fix the bug report on IRC where someone
	complained that they could not "chain" invocations to XXXAsync
	methods from the OnXXXXCompleted handlers due to the WebClient
	refusing to work if there was an ongoing operation

2007-12-24  Miguel de Icaza  <miguel@novell.com>

	* WebClient.cs: Do not validate method to be null, we do not do
	that in OpenWrite, the detection is done later on.  

	Fixes #350622

2007-12-16  Miguel de Icaza  <miguel@novell.com>

	* WebClient.cs: Got the arguments in the wrong order, fix

2007-12-12  Marek Habersack  <mhabersack@novell.com>

	* WebClient.cs: DownloadProgressChanged is available only in the
	2.0+ profiles.

2007-12-12  Miguel de Icaza  <miguel@novell.com>

	* WebClient.cs (DownloadFileCore): use longs for the
	ContentLength, although the other code (loading into a byte array,
	or a string) still uses ints, the DownloadFileCore should not.

2007-12-11  Miguel de Icaza  <miguel@novell.com>

	* WebClient.cs: 

	Lots of fixes to get the *Async methods to work.
	
	* WebClient.cs: async, new boolean flag, used to track whether we
	are an async invocation, and if so, we need to invoke some
	methods. 

	Switch to using System.Threading.Thread instead of the ThreadPool
	as there is no way with the ThreadPool to abort threads (to
	implemente CancelAsync). 

	(CompleteAsync): Helper method used to clear the state after an
	async operation completes, otherwise the WebClient can only be
	used once. 

	(CancelAsync): Use Thread.Interrupt to signal the thread that we
	are aborting it (it is a lot milder than Thread.Abort, and we are
	in no rush to cancel this anyways); Also the documentation states
	that we need to call the WebRequest.Abort method, so we do that in
	every Download instance.

	(DownloadDataAsync, DownloadFileAsync, DownloadStringAsync,
	OpenReadAsync, OpenWriteAsync, UplaodDataAsync, UploadFileAsync,
	UploadStringAsync): Make signature parameters match MS; use
	threads instead of threadpool (so we can implement CancelAsync),
	catch ThreadAbortException here so we can also raise the proper
	DownloadDataCompleteEventArgs.

	These routines will also call the WebRequest.Abort when
	appropriate when ThreadInterrupted is used.
	
	(ReadAll): Raise DownloadProgressChanged events.
	
2007-12-03  Gert Driesen  <drieseng@users.sourceforge.net>

	* WebClient.cs: Modified argument checks to match MS, and wrap
	exceptions in a WebException. Fixes bug #343064.

2007-12-03  Miguel de Icaza  <miguel@novell.com>

	* FtpWebRequest.cs: Applied patch from Jerome Haltom that fixes
	multi-line responses (after my fix).

	Closes #333978

2007-11-16  Marek Habersack  <mhabersack@novell.com>

	* HttpWebRequest.cs: when folding a request into a GET one, set
	content length to 0 and kill the buffers. Fixes bug #327314. Patch
	from Geoff Norton <gnorton@novell.com>, thanks!

2007-11-13  Atsushi Enomoto  <atsushi@ximian.com>

	* WebRequest.cs : added missing ImpersonationLevel (NIE).
	* SecurityProtocolType.cs : not [Serializable] in 2.0.
	* ServicePoint.cs : no GetHashCode() in 2.0.
	* WebRequestMethods.cs : fixed wrong STOU.
	* FileWebResponse.cs : no Dispose(true) in 2.0 API.

2007-11-08  Jb Evain  <jbevain@novell.com>

	* WebHeaderCollection_2_1.cs: add a custom WebHeaderCollection
	for the 2.1 profile.

2007-11-07  Geoff Norton  <gnorton@novell.com>

	* ListenerAsyncResult.cs: Only send the 401 header if our authentication
	type is Basic or Negotiate (which we default to basic) because that is
	all we support.  Set the WWW-Authenticate header when we return a 401 
	result.  Send the correct state object in the async result.

2007-11-06  Geoff Norton  <gnorton@novell.com>

	* ListenerAsyncResult.cs: If the HttpListener has an authentication
	scheme, the user should be presented with a 401 without calling the 
	callback.

2007-11-04  Miguel de Icaza  <miguel@novell.com>

	* FtpWebRequest.cs (GetResponseStatus): Fix this routine
	propertly, refactor, and make it follow Mono coding conventions.

2007-10-30  Jerome Haltom  (wasabi@larvalstage.net)

	* FtpWebRequest.cs: adds support for ftp multiline results, fixes
	#333978

2007-10-27  Miguel de Icaza  <miguel@novell.com>

	* HttpListener.cs: Remove more trigger-happy disposed=true from
	the code;   We should only dispose when the Dispose method is
	actually called.   Not before.  

	Fixes #337371

	*  HttpListener.cs (Close): Closing does not mean dispose the
	object.   This allows Start/Stop/Start to be called as many times
	as desired.

	Fixes #337368

2007-10-15  Gert Driesen  <drieseng@users.sourceforge.net>

	* FtpWebRequest.cs: Added support for DELETE.

2007-10-15  Gert Driesen  <drieseng@users.sourceforge.net>

	* WebRequest.cs: Changed serialization ctor to throw NIE on 1.0
	profile. Cache default proxy, but still allow it to be explicitly set
	to null. Removed commented code.

2007-10-14 Gonzalo Paniagua Javier <gonzalo.mono@gmail.com>

	* WebRequest.cs: DefaultWebProxy allows a null value. Fixes bug #323668.

2007-09-30  Gert Driesen  <drieseng@users.sourceforge.net>

	* HttpListenerRequest.cs: Do not store 'method' in upper case, but
	instead use case-insensitive comparison.

2007-09-30  Gert Driesen  <drieseng@users.sourceforge.net>

	* HttpListenerRequest.cs: Removed dead code. USe String.Length to
	check for zero-length string. Use instance field for is_chunked, and
	also set it for GET/HEAD/DELETE. Fixed HasEntityBody to return true
	when Content-Length > 0, or Transfer-Encoding is chunked.

2007-09-28  Marek Habersack  <mhabersack@novell.com>

	* HttpListenerRequest.cs: make sure 'method' is always stored in
	upper case.
	The DELETE method must not error out on missing Content-Length
	header (this is the behavior of the MS.NET version of the
	class). Fixes bug #323215.
	HasEntityBody should return false when method is GET/HEAD,
	content_length is less than or equal to zero or the request is
	chunked. Fixes bug #325296

2007-08-29  Atsushi Enomoto  <atsushi@ximian.com>

	* IPAddress.cs, IPv6Address.cs : (ToString) output ScopeId.

2007-08-09  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpWebRequest_2_1.cs, HttpWebResponse_2_1.cs :
	  added new sources for those classes for 2.1 (in 2.1 they are
	  almost abstract, while in 2.0 they are concrete).
	* HttpRequestCreator.cs, ServicePoint.cs :
	  #ifdef 2.0 dependencies out.

2007-06-28  Chris Howie  <cdhowie@nerdshack.com>

	* ServicePoint.cs: Implemented BindIPEndPointDelegate.
	* FtpWebRequest.cs: Respect ServicePoint.BindIPEndPointDelegate.
	* WebConnection.cs: Respect ServicePoint.BindIPEndPointDelegate.

2007-08-08  Jb Evain  <jbevain@novell.com>

	* HttpWebRequest.cs: .ctor(Uri) is public in 2.1.

2007-08-03  Jb Evain  <jbevain@novell.com>

	* Dns.cs: remove async methods for the 2.1 profile.

2007-07-17  Rodrigo Kumpera  <rkumpera@novell.com>

	* HttpListenerRequest.cs: Support for Cookie decoding.
	* HttpListenerResponse.cs: Support for encoding cookies on the response sent to the client
	* Cookie.cs: new internal method to encode the Cookie in a proper form to sent to clients

2007-07-14 Gonzalo Paniagua Javier <gonzalo.mono@gmail.com>

	* WebConnectionStream.cs: implement the CanTimeout for 2.0. Fixes
	bug #81504.

2007-07-12  Geoff Norton  <gnorton@customerdna.com>

	* HttpListenerContext.cs: 
	* HttpListener.cs: Handle HttpListener AuthenticationSchemes
	Only Basic authentication is included for now.

2007-06-30  Gert Driesen  <drieseng@users.sourceforge.net>

	* NetworkAccess.cs: Only mark as flags enum on 2.0.

2007-06-21  Dick Porter  <dick@ximian.com>

	* AuthenticationManager.cs: 
	* FtpWebRequest.cs: 
	* Cookie.cs: 
	* ServicePoint.cs: 
	* WebClient.cs: 
	* Authorization.cs: 
	* FileWebRequest.cs: 
	* HttpWebRequest.cs: 
	* WebResponse.cs: 
	* ServicePointManager.cs: 
	* HttpWebResponse.cs: Throw NotImplementedException indirectly, to
	reduce noise in Moma reports.

2007-06-20  Atsushi Enomoto  <atsushi@ximian.com>

	* ServicePointManager.cs : (bootstrap) build fix.

2007-06-19  Dick Porter  <dick@ximian.com>

	* AuthenticationManager.cs: 
	* IWebProxyScript.cs: 
	* Authorization.cs: 
	* Cookie.cs: 
	* CookieException.cs: 
	* CredentialCache.cs: 
	* FileWebRequest.cs: 
	* WebRequest.cs: 
	* FileWebResponse.cs: 
	* WebResponse.cs: 
	* FtpWebRequest.cs: 
	* HttpWebRequest.cs: 
	* DecompressionMethods.cs: 
	* HttpWebResponse.cs: 
	* ProtocolViolationException.cs: 
	* ServicePoint.cs: 
	* ServicePointManager.cs: 
	* WebClient.cs: 
	* WebException.cs: 
	* WebHeaderCollection.cs: 
	* WebProxy.cs: 
	* WebExceptionStatus.cs: 2.0 profile updates

2007-05-18  Gert Driesen  <drieseng@users.sourceforge.net>

	* WebConnectionStream.cs: On read timeout, throw WebException with
	status Timeout instead of IOException.

2007-05-16  Adar Wesley <adarw@mainsoft.com>

	* CookieCollection.cs: added missing method strongly typed CopyTo.

	* CredentialCache.cs: added missing methods Add, Remove, GetCredential

	* HttpWebRequest.jvm.cs: added missing ClientCertificates getter.

	* ServicePoint.cs: added missing method CloseConnectionGroup.

	* WebClient.cs: added missing methods OnDownloadProgressChanged,
	OnUploadProgressChanged, GetWebRequest, GetWebResponse

	* WebHeaderCollection.cs: added missing methods IsRestricted, Add,
	Remove, Set.

	* WebProxy.cs: added missing method GetObjectData.

2007-05-15  Marek Habersack  <mhabersack@novell.com>

	* HttpWebRequest.cs: fold all methods into GET for
	redirect/moves. Fixes bug #81624

2007-05-07  Miguel de Icaza  <miguel@novell.com>

	Missing second part of the patch.
	
	* WebHeaderCollection.cs: To be compatible with older versions of
	Mono that might have serialized this in a different format, catch
	the potential exception, and try the old name.

	This should become a practice whenever we fix serialization in the
	future. 

	This is for #81467

2007-04-23  Marek Habersack  <mhabersack@novell.com>

	* EndPointListener.cs: relax prefix matching to succeed in cases
	when the prefix ends with / and the request path does not. Fixes
	bug #80091.

	* CookieCollection.cs: added a SortByPath method to sort the
	collection on demand.

	* Cookie.cs: do not return "/" for Path if it wasn't set
	explicitly.

	* CookieContainer.cs: set cookie path only if its version is
	"Netscape" and is null or empty. Fixes #81420.
	Sort the collection by the path relevance before returning from
	the GetCookies method. Fixes bug #81421.

2007-04-17  Joel Reed  <joelwreed@gmail.com>

	* WebHeaderCollection.cs: www-authenticate should be multivalue.
	This fixes a bug related to RFC 2608 which says in section
	"15.2 Offering a Choice of Authentication Schemes"

	An HTTP/1.1 server may return multiple challenges with a 401
 (Authenticate) response, and each challenge may use a different
	scheme.  The order of the challenges returned to the user agent is in
	the order that the server would prefer they be chosen. The server
	should order its challenges with the "most secure" authentication
	scheme first. A user agent should choose as the challenge to be made
	to the user the first one that the user agent understands.

	Before this change, mono was choosing whatever was sent last,
	which was the most insecure authentication option.
	
2007-04-10  Marek Habersack  <mhabersack@novell.com>

	* HttpListenerRequest.cs: do not include the query start marker
	('?') in the first variable name stored in the QueryString
	collection. There is no HTTP header 'Accept-Types' in the
	standard, there's only the 'Accept' header that specifies the
	accepted MIME types. Fixes bug #81317

2007-03-25 Alan McGovern <alan.mcgovern@gmail.com>

	* IPAddress.cs : Further optimisation for the Swap*** methods.

2007-03-24 Alan McGovern <alan.mcgovern@gmail.com>

	* IPAddress.cs : Optimised the SwapInt and SwapLong methods.

2007-03-09  Miguel de Icaza  <miguel@novell.com>

	* FtpDataStream.cs: Close must be called on the stream before we
	attempt to read a status code from the remote server.

	Fixes FTP transfers to complete. 

2007-03-05 Gonzalo Paniagua Javier <gonzalo.mono@gmail.com>

	* HttpWebRequest.cs: properly handle OPTIONS, which may or may not
	have a request body. Fixes bug #80686.

2007-03-02  Marek Habersack  <mhabersack@novell.com>

	* WebClient.cs: Overwrite existing files on download, as
	documented and as tested on MS.NET. Fixes Bug#81005

2007-02-24  Gert Driesen  <drieseng@users.sourceforge.net>

	* HttpWebRequest.cs: Allow Proxy to be set to null on 2.0 profile.

2007-02-18  Geoff Norton  <gnorton@customerdna.com>

	* AuthenticationManager.cs: Register the modules in the 2.0 profile
	when we create the ArrayList.

2007-02-01  Gert Driesen  <drieseng@users.sourceforge.net>

	* WebProxy.cs: In IsBypassed, move address check back to satify unit
	tests.

2007-01-30  Ilya Kharmatsky <ilyak -at- mainsoft.com>

	* Dns.cs : implemented proper exception handling under TARGET_JVM
	when trying to resolve not existing host.

2007-01-28  Gert Driesen  <drieseng@users.sourceforge.net>

	* IPAddress.cs: Provide more meaningful exception message on 2.0
	profile.

2007-01-28  Gert Driesen  <drieseng@users.sourceforge.net>

	* FileWebRequest.cs: Fixed PreAuthenticate and Proxy properties to
	no longer throw NotSupportedException. No longer store ContentLength
	in headers. Do not allow null or zero-length method. Allow timeout
	to be set to -1 (infine). Only disallow GET, HEAD and CONNECT requests.
	Removed workarounds for bug #24943. In (Begin)GetRequest overwrite
	file if it already exists. Binary serialization compatibility fixes.
	* FileWebResponse.cs: Return application/octet-stream as ContentType.

2007-01-28  Gert Driesen  <drieseng@users.sourceforge.net>

	* WebHeaderCollection.cs: Fixed binary serialization compatibility 
	with MS.

2007-01-28  Gert Driesen  <drieseng@users.sourceforge.net>

	* WebProxy.cs: Lazy init bypassList. Fixes for binary serialization
	compatibility. Added stub for UseDefaultCredentials (2.0). On 2.0
	profile, throw ArgumentNullException in IsBypassed if host is null.

2007-01-22  Miguel de Icaza  <miguel@novell.com>

	* HttpWebRequest.cs: Remove unused variable.

	* FtpWebRequest.cs: Remove unused variable.

	* WebHeaderCollection.cs: Remove a handful of NotImplementedException's

2007-01-11  Miguel de Icaza  <miguel@novell.com>

	* HttpListenerRequest.cs (SetRequestLine): Add validation for the
	verbs. 

	Allow any verbs to go through, not only
	the white list of verbs.

	Fixes: 80504

2007-01-04 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* RequestStream.cs: initialize the stream in both ctors. Fixes a couple
	of unit tests.

2006-12-29  Gert Driesen  <drieseng@users.sourceforge.net>

	* HttpWebRequest.jvm.cs: Fixed line endings.
	* HttpWebResponse.jvm.cs: Same.
	* WebException.cs: Same.
	* FtpWebRequest.cs: Same.
	* VMWHttpProvider.jvm.cs: Same.

2006-12-29  Gert Driesen  <drieseng@users.sourceforge.net>

        * DnsPermissionAttribute.cs: Fixed line endings.
        * HttpVersion.cs: Same.
        * FtpWebResponse.cs: Same.
        * HttpContinueDelegate.cs: Same.
        * FtpAsyncResult.cs: Same.
        * EndpointPermission.cs: Same.
        * IPv6Address.cs: Same.
        * FtpDataStream.cs: Same.
        * SocketPermission.cs: Same.
        * FileWebRequest.cs: Same.
	* FileWebResponse.cs: Same.
        * DnsPermission.cs: Same.
        * ProtocolViolationException.cs: Same.
        * MonoHttpDate.cs: Same.
        * SocketPermissionAttribute.cs: Same.
        * CookieException.cs: Same.
	* WebResponse.cs: Same.
	* DefaultCertificatePolicy.cs: Same.

2006-12-28  Gert Driesen  <drieseng@users.sourceforge.net>

	* IPAddress.cs: On 1.1, 4-byte addresses are not supported in the 
	ctor. Added null checks for the address passed in the ctors.

2006-12-28  Miguel de Icaza  <miguel@novell.com>

	* IPAddress.cs: The condition in 1.1 was broken, it only allowed
	16-byte addresses, and never 4-byte addresses (only 2.0 had
	them).  

	Keep a single code path.

	Also, remove all the NET_1_1 defines, we realistically only
	distinguish between 1.1 and 2.0, we wont likely support 1.0, 1.1
	and 2.0, so remove the 1.0 vs 1.1 conditionals.

	Fixes 76792
	
〓2006-12-24 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnectionStream.cs: fix error in my last patch. Thanks to Felipe
	Almeida.

2006-12-23 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs:
	* HttpWebRequest.cs:
	* WebConnectionStream.cs: detect errors writing headers earlier and
	avoid race that showed up with SSL. Fixes bug #80234.

2006-12-22 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* EndPointListener.cs:
	* ListenerPrefix.cs:
	* ResponseStream.cs:
	* ChunkedInputStream.cs:
	* HttpConnection.cs:
	* RequestStream.cs: add initial support for HTTPS.

2006-12-18  Atsushi Enomoto  <atsushi@ximian.com>

	* FtpStatus.cs : The build gets broken when only-2.0 classes/members
	  are not excluded in 1.x build.

2006-12-18  David Elkind  <davide@mainsoft.com>

	* FtpAsyncResult.cs : FTP request is now working and covers about 100% of .NET API
	* FtpDataStream.cs: FTP request is now working and covers about 100% of .NET API
	* FtpWebRequest.cs: FTP request is now working and covers about 100% of .NET API
	* FtpWebResponse.cs: FTP request is now working and covers about 100% of .NET API
	* FtpStatus.cs: added composite status (includes status code and status description)

2006-12-04  Konstantin Triger  <kostat@mainsoft.com>

	* WebRequest.cs, WebResponse.cs: TARGET_JVM limitation workaround.

2006-12-04  Konstantin Triger  <kostat@mainsoft.com>

	* ServicePointManager.cs: correct assignment typo.
	* ServicePoint.cs: Remove unneeded locks for getters, add internal setter.

2006-11-27  Miguel de Icaza  <miguel@novell.com>

	* WebRequest.cs: Instead of throwing NotImplemented exceptions,
	call GetMustImplement, that way we do not need the whitelist, and
	we save a handful of opcodes.

2006-11-21 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: add 2 more methods that are not supposed to have
	a body. Fixes bug #80001.

2006-11-15  Andrew Skiba  <andrews@mainsoft.com>

	* WebHeaderCollection.cs: add stubs for new 2.0 properties.

2006-11-13 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebResponse.cs: cookies are actually added to the request
	container if any. Fixes bug #79821.

2006-11-02  Michael Hutchinson  <m.j.hutchinson@gmail.com>

	* WebRequest.cs: more closely follow MS behaviour: use system settings 
	  unless told otherwise, and respect app.config.

2006-11-01  Michael Hutchinson  <m.j.hutchinson@gmail.com>

	* GlobalProxySelection.cs: Obsolete GlobalProxySelection under 2.0 
	  profile, and move code to new property WebRequest.DefaultWebProxy.
	* WebRequest.cs: Implement new 2.0 property DefaultWebProxy.
	  Add support for config option UseSystemDefault using simplistic
	  implementation of new 2.0 method GetSystemWebProxy ().

2006-10-30  Atsushi Enomoto  <atsushi@ximian.com>

	* FtpWebRequest.cs : more build fixes.

2006-10-30 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* EndPointListener.cs: update comment and avoid exception when the
	program is exiting.

2006-10-30  Miguel de Icaza  <miguel@novell.com>

	* WebRequestMethods.cs: Another typo fix.

	* ServicePointManager.cs: Set the default properly.

	* SecurityProtocolType.cs: Remove non-existant defines. 

2006-10-04 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: internally allow buffer if it's not a known
	GET-only method instead of enabling that only for POST/PUT. Fixes bug
	#79595.

2006-09-28 Andrew Skiba <andrews@mainsoft.com>

	* WebConnection.cs: TARGET_JVM

2006-09-28 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebException.cs: patch by Andrew Skiba that fixes serialization
	compatibility with .NET and the default value for status.

2006-09-28  Andrew Skiba <andrews@mainsoft.com>

	* Dns.cs: TARGET_JVM

2006-09-15 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* CookieContainer.cs: send the cookies from the collection we got for
	the given URI, not the whole collection.
	* HttpWebResponse.cs: only add the cookies to this instance, not to the
	cookie container set in the request.

2006-09-11  Sebastien Pouliot  <sebastien@ximian.com>

	* WebConnection.cs: Patch to remove the hack that was required for 
	using the older versions of the SSL/TLS classes. This hack is no more
	required :-). Patch by Gonzalo Paniagua Javier.

2006-08-30 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpConnection.cs: when the content length is available, keep it
	updated after synchronous read. Renamed 'available' to 'remaining_body'.
	* RequestStream.cs: when creating the stream, pass the remaining length
	starting from the offset in the buffer.

2006-08-30 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* RequestStream.cs: make sure we return 0 when no more bytes left.
	Paticularly, when we have a content length and the whole response is
	buffered.

2006-08-20  Miguel de Icaza  <miguel@novell.com>

	* RequestStream.cs (Read): A bug fix for #79112 and what I
	consider to be an important change.

	The bug fix is that we update the "available" variable as soon as
	we consume data from Read, this means that a second call into Read
	wont block.   Available was only being updated on a secondary code
	path, now we alwaysupdate it after using FillFromBuffer.

	The second component is what I believe the right behavior should
	be.  There was a check for "if count > available" that set count
	to available in that case.   The idea was to limit the data read
	from the buffer that belonged to this particular request, to allow
	pipelining. 

	But this test was done after FillFromBuffer, which assumed that
	all the data held in the buffer (the one used by FillFromBuffer)
	must belong to the this request, and only future data did not.

	I think my change is correct, but it assumes that the initialized
	RequestStream will be used for other pipelined HTTP requests,
	which is not something am 100% sure of, so Gonzalo needs to check
	this. 

2006-08-03 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Cookie.cs: avoid nullref in GetHashCode and Equals.

2006-08-03 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* CookieCollection.cs:
	* CookieContainer.cs: remove expired cookies.

2006-07-07  Atsushi Enomoto  <atsushi@ximian.com>

	* Dns.cs : (GetHostEntry) when passed IP addresses, it does not issue
	  query to DNS. Patch by Petri Latvala.

2006-07-03 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* CookieContainer.cs: don't send a secure cookie over an insecure
	channel.

2006-06-02 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebProxy.cs: (IsBypassed) 'loopback', 'localhost' and any address
	that starts with 127 are special.

2006-05-24 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpListener.cs: Fixes race condition in BeginGetContext. Patch by
	Pawel Sakowski that fixes bug #78365.

2006-05-09  Atsushi Enomoto  <atsushi@ximian.com>

	* ServicePointManager.cs : oops, CONFIGURATION_DEP.

2006-05-09  Atsushi Enomoto  <atsushi@ximian.com>

	* GlobalProxySelection.cs : if corresponding config section is
	  DefaultProxySection then use it.

2006-05-09  Atsushi Enomoto  <atsushi@ximian.com>

	* WebRequest.cs : if corresponding config section is
	  WebRequestModulesSection then use it.

2006-05-09  Atsushi Enomoto  <atsushi@ximian.com>

	* ServicePointManager.cs : if corresponding config section is
	  ConnectionManagementSection then use it.

2006-05-06 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ResponseStream.cs:
	* HttpListenerResponse.cs: allow 0 length POST. Patch by Horst Reiterer.
	Closes bug #78316.

2006-05-05 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* CredentialCache.cs: added DefaultNetworkCredentials.

2006-05-05 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* NetworkCredential.cs: implement ICredentialsByHost interface.

2006-04-27 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs: reset the challenge and the status code when
	creating the tunnel and sending the proxy auth. headers. Improve error
	message when there's an error creating the tunnel.
	* HttpWebRequest.cs: don't trigger an early throw for a POST that gets
	a 401 or 407 response.

2006-04-26 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnectionData.cs:
	* WebConnection.cs:
	* HttpWebRequest.cs: when tunneling an ssl conneciton through a proxy,
	we were not handling a proxy authentication request. Fixes bug #78150
	take 2.

2006-04-20 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebProxy.cs: a .ctor was not forwarding the 'credentials' argument.
	This fixes bug #78150. Also fix the bypass check for local requests.

2006-04-20 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebProxy.cs: removed bogus ^M.

2006-04-06 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebResponse.cs: don't remove the Set-Cookie headers. Fixes bug
	#78028.

2006-04-04  Atsushi Enomoto  <atsushi@ximian.com>

	* WebClient.cs : added a bunch of async method support.

2006-04-03  Chris Toshok  <toshok@ximian.com>

	* HttpWebResponse.cs (ContentEncoding): return "" if the header
	isn't present.

2006-03-30  Atsushi Enomoto  <atsushi@ximian.com>

	* DownloadStringCompletedEventHandler.cs : missing delegate.

2006-03-30  Atsushi Enomoto  <atsushi@ximian.com>

	* Dns.cs : minor argument renaming.

2006-03-28  Atsushi Enomoto  <atsushi@ximian.com>

	* DownloadDataCompletedEventArgs.cs
	  DownloadDataCompletedEventHandler.cs
	  DownloadProgressChangedEventArgs.cs
	  DownloadProgressChangedEventHandler.cs
	  DownloadStringCompletedEventArgs.cs
	  OpenReadCompletedEventArgs.cs
	  OpenReadCompletedEventHandler.cs
	  OpenWriteCompletedEventArgs.cs
	  OpenWriteCompletedEventHandler.cs
	  UploadDataCompletedEventArgs.cs
	  UploadDataCompletedEventHandler.cs
	  UploadFileCompletedEventArgs.cs
	  UploadFileCompletedEventHandler.cs
	  UploadProgressChangedEventArgs.cs
	  UploadProgressChangedEventHandler.cs
	  UploadStringCompletedEventArgs.cs
	  UploadStringCompletedEventHandler.cs
	  UploadValuesCompletedEventArgs.cs
	  UploadValuesCompletedEventHandler.cs : added 2.0 types.

2006-03-28  Atsushi Enomoto  <atsushi@ximian.com>

	* Dns.cs : filled missing NET_2_0 members.

2006-03-28  Atsushi Enomoto  <atsushi@ximian.com>

	* IPAddress.cs : ugh, I was testing with run-test-ondotnet, not
	  run-test. Those IPv6 properties needed to be reimplemented.

2006-03-27  Atsushi Enomoto  <atsushi@ximian.com>

	* IPAddress.cs : added NET_2_0 TryParse() and IPv6 related properties.

2006-03-16 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnectionStream.cs: avoid Begin/EndWrite when the body length is
	zero.

2006-03-13 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: send the request if ContentLength is set for
	POST/PUT, the request stream has that exact amount of bytes in it and
	we're trying to get the response stream.

	This way, closing the request stream is not needed in order to actually
	send the request. Fixes bug #77753.

	* WebConnectionStream.cs: throw if the number of bytes written is
	greater than the specified request content length.

2006-03-11  Miguel de Icaza  <miguel@novell.com>

	* WebClient.cs: Only expose the right methods to avoid warnings. 

	* FtpDataStream.cs (Dispose): Fix signature.

	* FtpWebResponse.cs: Comment out keepAlive field (unused, sounds
	like we are missing features here).

	* IPAddress.cs: Move m_HashCode property to the end, and set
	pragmas to disable warnings.

2006-02-16  Dick Porter  <dick@ximian.com>

	* IPEndPoint.cs: The SocketAddress AddressFamily takes up the
	first two bytes, not just one.  Check the size of the
	SocketAddress buffer for IPv6 as well.

	* Dns.cs: Cope when GetHostByName_internal or
	GetHostByAddr_internal returns fewer items in the array than it
	intended to (maybe due to conversion errors.)

2006-02-09  Carlos Alberto Cortez <calberto.cortez@gmail.com>

	* FtpWebResponse.cs: Add UpdateStatus method, to update both
	statusCode and statusDescription at the same time. 

2006-02-08  Carlos Alberto Cortez <calberto.cortez@gmail.com>

	* FtpWebRequest.cs: Remove WebExceptionStatus argument
	from CreateExceptionFromResponse, since exceptions gotten
	from server response always have a WebExceptionStatus.ProtocolError
	value.
	
2006-02-08  Carlos Alberto Cortez <calberto.cortez@gmail.com>

	* FtpWebRequest.cs: Add renaming support when using 
	WebRequestMethods.Ftp.Rename method.
	
2006-02-07 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ChunkedInputStream.cs:
	* ChunkStream.cs: handle partial trailers and zero reads. Patch by Pawel
	Sakowski.

2006-02-07 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: don't send the expect-100 if if there's no content.

	* HttpListenerRequest.cs:
	* HttpConnection.cs:
	* RequestStream.cs: use the content length header to avoid reading past
	the end of the stream.

	Patch by Horst Reiterer.

2006-02-01  Carlos Alberto Cortez <calberto.cortez@gmail.com>

	* FtpWebRequest.cs: Add supportedCommands array with the sorted
	methods, to search using Array.BinarySearch. Remove CheckMethod.

2006-02-01  Carlos Alberto Cortez <calberto.cortez@gmail.com>

	* FtpWebRequest.cs: Fixed some typos and small issues.
	
2006-02-02 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: dummy implementation of UnsafeAuthenticationBlah
	property.

2006-02-01  Carlos Alberto Cortez <calberto.cortez@gmail.com>

	* FtpRequestCreator.cs: 
	* FtpAsyncResult.cs:
	* FtpDataStream.cs:
	* FtpWebRequest.cs:
	* FtpWebResponse.cs: Initial implementation of FtpWebRequest (2.0)
	
2006-02-01  Carlos Alberto Cortez <calberto.cortez@gmail.com>

	* FtpStatusCode.cs: Fix a typo.
	
2006-01-26 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebClient.cs: (2.0) UploadString() returns string, not void.

2006-01-10 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebResponse.cs: ignore non-integer values for max-age and version.
	Fixes bug #77199. Thanks to Cyrille Colin.

2006-01-10 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebResponse.cs: cope with malformed cookies with '=' as value.
	Patch by Cyrille Colin. Fixes bug #77179.

2005-12-25  Carlos Alberto Cortez <calberto.cortez@gmail.com>

	* FtpStatusCode.cs: New 2.0 enum.

2005-12-09 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* CookieContainer.cs: fix matching of subdomains. Patch by Cyrille
	Colin.

2005-12-08 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebResponse.cs: don't loop forever when no name or value between
	semicolons. Fixes bug #76943.

2005-12-06 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebResponse.cs: don't fail if the cookie ends with a 'name'
	without a value. Fixes bug #76922.

2005-11-28 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* EndPointListener.cs:
	* HttpListenerRequest.cs: don't require the Host header for 1.0. Just
	map that to the '*' or '+' host.

2005-11-22 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* IPAddress.cs: the byte[] ctor supports length 4 in .NET 2.0.
	Fixes bug #76792.

2005-11-21 Senganal T   <tsenganal@novell.com>

	* Dns.cs : corrected a mistake in GetHostEntry ()

2005-11-21 Senganal T   <tsenganal@novell.com>

	* Dns.cs : added GetHostEntry() method for 2.0 api conformance

2005-11-18 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequestHeader.cs: add missing values.

2005-11-17 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpListenerPrefixCollection.cs:
	* HttpWebResponse.cs:
	* Dns.cs:
	* HttpListenerRequest.cs:
	* HttpWebRequest.cs:
	* HttpListenerResponse.cs: a few signature fixes for 2.0.

2005-11-17 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpListenerPrefixCollection.cs:
	* EndPointListener.cs:
	* HttpStreamAsyncResult.cs:
	* HttpListenerContext.cs:
	* HttpListenerBasicIdentity.cs:
	* AuthenticationSchemeSelector.cs:
	* HttpListener.cs:
	* WebHeaderCollection.cs:
	* ListenerPrefix.cs:
	* HttpListenerException.cs:
	* HttpResponseHeader.cs:
	* EndPointManager.cs:
	* HttpListenerRequest.cs:
	* HttpRequestHeader.cs:
	* BindIPEndPoint.cs:
	* ResponseStream.cs:
	* ChunkedInputStream.cs:
	* HttpStatusCode.cs:
	* ListenerAsyncResult.cs:
	* ChunkStream.cs:
	* HttpConnection.cs:
	* HttpUtility.cs:
	* HttpListenerResponse.cs:
	* RequestStream.cs: initial implementation of HttpListener. There are
	a few TODOs left (cookies, HTTPS) but almost everything else is in.

2005-11-15  Sebastien Pouliot  <sebastien@ximian.com>

	* IPv6Address.cs: Added on overload to ToString to get a the full 
	length address returned (as required by System.Uri).

2005-11-15  Carlos Alberto Cortez <calberto.cortez@gmail.com>

	* WebRequestMethods.cs: New 2.0 class.
	
2005-11-05  Atsushi Enomoto  <atsushi@ximian.com>

	* WebClient: use POST for DownloadData(). Fixed bug #76631.

2005-10-26  Atsushi Enomoto  <atsushi@ximian.com>

	* AuthenticationSchemes.cs : Fixed enum values and added [Flags].

2005-10-19  Atsushi Enomoto  <atsushi@ximian.com>

	* WebClient.cs : added net_2_0 DownloadString() and DownloadData()
	  with HTTP method as well.

2005-10-19  Atsushi Enomoto  <atsushi@ximian.com>

	* WebClient.cs : added UploadString() and Encoding (net_2_0). Added
	  some new overloaded stuff that takes Uri instead of string address.

2005-10-17  Sebastien Pouliot  <sebastien@ximian.com> 

	* ICredentialPolicy.cs: New. Interface for 2.0.

2005-10-05  Atsushi Enomoto  <atsushi@ximian.com>

	* AuthenticationSchemes.cs : new 2.0 enum.

2005-08-27 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* GlobalProxySelection.cs: remove double lock.
	* HttpWebRequest.cs: remove double lock in GetServicePoint() and use
	a private object when locking.

2005-07-15  Miguel de Icaza  <miguel@novell.com>

	* DigestClient.cs: Fix bug #75556, the qop argument must be
	quoted, per http://www.faqs.org/rfcs/rfc2617.html section
	`quo-options'.

2005-07-03 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnectionStream.cs: initiate writing the body before trying to
	read. This fixes the performance problems observed in web services.
	Closes bug #75455.

2005-06-27  Lluis Sanchez Gual <lluis@novell.com>

	* IPAddress.cs: Changed field names for the sake of serialization
	interoperability with MS.NET.
	
2005-06-26 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs: if cnc.EndRead throws, mark the asyncresult as done.
	* WebConnectionStream.cs: if we're done with the body of a chunk, don't
	require the next chunk header to be there, as some servers might close
	the connection (while also sending 'Connection: close').

2005-06-22 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: MS implementation follows redirects for POST. Seems
	to me that this is against 10.3.3 in RFC 2616, but may be the user
	'authorization' to do this is implicit in AllowAutoRedirect...

2005-06-21 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs: SslClientStream.BeginRead might not be asynchronous
	if there's no record available to read. This is a workaround that makes
	the call to BeginRead itself asynchronous. Fixes bug #75342.

2005-06-10 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs:
	* HttpWebRequest.cs:
	* WebConnectionStream.cs: initiate the polling for input data after
	sending the header so that we detect any response that the server sends
	back even if we're still trying to write the request for a POST/PUT.
	If we get the response (or an error) before any one calls GetResponse(),
	keep it around instead of ignoring it.

2005-06-03 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: send the right header/user/password in
	PreAuthenticate in presence of a proxy.

2005-06-03 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* IPv6Address.cs: fix IsLoopback. Closes bug #75128.

2005-06-03 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* IPv6Address.cs: don't do extra check on ipv4 if this is a ipv6
	address. Fixes bug #75125.

2005-06-03 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ServicePointManager.cs: when going through a proxy, use 2 different
	service points depending on the scheme. Fixes bug #75135.

2005-05-30 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Dns.cs: don't parse the address when it comes from an IPAddress.

2005-05-23 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs: prevent 2 nullrefs when the aborting during
	Connect() and reset the status to Success before starting a new
	request.

2005-05-19  Sebastien Pouliot  <sebastien@ximian.com>

	* WebRequest.cs: Throw NotImplementedException (not NotSupported
	Exception) for stuff that should have been abstract. No exception
	is thrown by the serialization constructor.

2005-05-04 James Willcox  <james@ximian.com>

	* DigestClient.cs: convert to a hex string with "X8" consistently
	for nc-value

2005-05-04 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs: don't rethrow errors in Write, as the error will be
	received by GetResponse*. The result is that the threadpool thread doing
	this will not end up printing the exception. Fixes bug #74817.

2005-05-03 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ServicePoint.cs: HostEntry needs to be thread safe.

2005-05-03 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs: removed a 'slightly' important line by mistake.
	* WebConnectionStream.cs: if the transfer encoding is chunked, ignore
	content-length header if present.

2005-05-03 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs: no need to use an AutoResetEvent.
	* WebConnectionStream.cs: don't start any more reads on the socket
	after getting a 0 signalling the end. This fixes Ben's infamous foo.cs
	test.

2005-04-29 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* BasicClient.cs: firefox/IE just send latin1, stripping the high byte
	from unicode >= 256 characters.

2005-04-29 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* BasicClient.cs: use latin1 when encoding the username/domain/password.
	Fixes bug #74745.

2005-04-17 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnectionStream.cs: if the BeginRead/BeginWrite is completed
	synchronously, no need to create the ManualResetEvent to wait on.

2005-04-16 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnectionStream.cs: call SetComplete in EndWrite when we're not
	buffering the request body. Fixes bug #74637.

	* WebAsyncResult.cs: renamed field.

2005-04-14 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnectionStream.cs:
	* WebAsyncResult.cs: ensure we only call EndRead once per async. result.
	Update total before invoking the callback when present.

2005-04-11 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs:
	* WebConnectionStream.cs: don't start reading until we've sent at least
	the headers. This way we ensure that a Write happens before any Read,
	which is needed by the SSL code.

2005-04-11 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: ensure we read everything before redirecting.

2005-04-11 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnectionStream.cs: provide a default callback when doing async.
	read/write and waiting for a timeout so that the callback sets the
	event and we don't block forever. Fixes bug #74539 take 3.

2005-04-10 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs:
	* HttpWebRequest.cs: now Abort() works properly. Fixes bug #74177.

2005-04-10 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs: fix some breakage from my last patch.
	* WebConnectionStream.cs: invoke the callback when done even in EndRead.

2005-04-10  Sebastien Pouliot  <sebastien@ximian.com>

	* WebConnection.cs: Added support for TrustFailure when throwing a
	WebException. Fix bug #74286.

2005-04-10 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: 
	* WebConnectionStream.cs: implemented support for ReadWriteTimeout.

2005-04-10 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs: if we're reading chunked data and didn't use the
	stream to read, we gotta set the async. result as complete and invoke
	the callback. Don't call nstream.EndRead with the wrong IAsyncResult.

	* WebConnectionStream.cs: in EndRead, pass the correct IAsyncResult to
	cnc.EndRead. Lock on a field instead of 'this'.

2005-04-09 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: throw the exception if we got an error, as now
	it's catched in the redirection handling code.

2005-04-08 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: moved redirection handling to a proper place.

2005-04-07 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebHeaderCollection.cs: added if-modified-since to the list of
	restricted headers.

	* ServicePoint.cs: use a field object when locking.

2005-04-07 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnectionStream.cs: ForceCompletion actually calls NextRead. No
	need to wait for a Close/ReadAll when we have no content.

2005-04-04 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* NtlmClient.cs: fix typo in assembly name.

2005-03-30 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* CookieContainer.cs: adding to a CookieCollection might not increment
	the number of items if the cookie is replaced. Now Count works properly.
	Fixed an array index exception (typo).

	* CookieCollection.cs: also compare the version.

	* HttpWebResponse.cs: when we have cookies, add them to the request
	container.

	* HttpWebRequest.cs: changed last parameter of HttpWebResponse ctor.

2005-03-30  Miguel de Icaza  <miguel@novell.com>

	* Cookie.cs: Compare using the InvariantCulture, to match the
	behavior of CookieContainer that already did this.

2005-03-30 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs: we don't need to trigger the next queued request
	until the response is closed.

2005-03-29  Miguel de Icaza  <miguel@novell.com>

	* HttpWebResponse.cs: Handle quotations in the cookies values, per
	the spec http://www.faqs.org/rfcs/rfc2109.html, it is allowed to
	have quotations.

2005-03-18 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* BasicClient.cs:
	* DigestClient.cs: check that GetCredential() does not return null.

2005-03-16 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* BasicClient.cs: ensure credentials are not null.

2005-03-10 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebResponse.cs: moved cookie parsing into its own class.
	* WebHeaderCollection.cs: remove (probably bogus) GetMultipleValues
	call.
	* HttpWebRequest.cs: don't let exception raised in the ctor of
	HttpWebResponse vanish.

	Fixes bug #73275.

2005-03-01 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebHeaderCollection.cs: handle commas inside quotes when splitting
	a multi-value header. Fixes bug #73151.

2005-02-13 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* DigestClient.cs: fix for digest auth. and URIs containing query. Patch
	by James Wilcox. Fixes bug #72571.

2005-02-12 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebResponse.cs:
	* WebConnection.cs:
	* HttpWebRequest.cs:
	* WebConnectionStream.cs: don't read the entire response unless the
	user requests it. Fixes bug #72443.

2005-02-08  Zoltan Varga  <vargaz@freemail.hu>

	* IPv6Address.cs: Fix endianess problems.

	* IPAddress.cs: Fix misleading comments.

2005-02-04 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: send the headers when we're supposed to write
	a POST/PUT but call GetResponse before GetRequestStream.

	* WebConnectionStream.cs: new RequestWritten property.

2005-01-20  Jonathan Pryor  <jonpryor@vt.edu>

	* EndpointPermission.cs: Fix IsSubsetof(hostname) so that the regression 
	  tests work.  In particular, IsSubsetOf ("12.13.*.*", "12.13.14.*") failed
	  because 14 wasn't a subset of * (which it is).  Fix: if part1 is we 
	  continue to the next portion.

2005-01-20  Jonathan Pryor  <jonpryor@vt.edu>

	* IPAddress.cs (ParseIPV4): Fix so that the regression tests work.  In
	  particular, " foo" and ".1.1.6" weren't being caught (" foo" because it
	  started with a space, and ".1.1.6" because the split string accepted a
	  0-length portion, which would make 1...6 valid, but isn't valid based on
	  similar test cases).

2005-01-20  Jonathan Pryor  <jonpryor@vt.edu>

	* WebHeaderCollection.cs: Fix GetValues(string) to split the values on
	  commas if the header is a Multi-Value header.  This matches
	  MonoTests.System.Net.WebHeaderCollectionTest.

2005-01-19  Sebastien Pouliot  <sebastien@ximian.com>

	* WebPermissionAttribute.cs: Fixed NET_1_1 behaviour.

2004-12-14 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnectionStream.cs: remove unneeded check. Write detects and
	triggers the exception now.

2004-12-14 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* AuthenticationManager.cs: don't lock on a public Type.
	* HttpWebRequest.cs: read the error response for auth. errors.

2004-12-12 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: set webResponse back to null when redirecting.
	Fix the previous patch so that it reads the whole response even if
	auto-redirect is not enabled. Closes bug #70484.

2004-12-12 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebResponse.cs: added ReadAll method.

	* WebConnection.cs: in HandleError, set the response error after
	closing the socket. Use an async. delegate to finish reading any prior
	WebConnectionStream.

	* HttpWebRequest.cs: for error responses that allow content, read the
	stream immediately. Fixes bug #70483.

2004-12-11 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* CookieContainer.cs: quote the port number.

2004-12-10 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs:
	* WebConnectionStream.cs: removed TryReconnect. It's no longer needed.

2004-12-05 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs: set the event in Close so that if the queue is
	empty, we won't block forever on next request. The finalizer was
	removed because we're not implementing IDisposable pattern here.

2004-12-04 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs: handle errors on chunked streams. Fixes bug #66858.
	* ChunkStream.cs: added error checking all over.

	* HttpWebRequest.cs: throw the exception received in SetResponseError
	if we already have a response.
	(SetRequestData): Don't nest the exception if it's a WebException.

2004-12-03 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs: remove prevStream and don't set busy to false in
	HandleError. prevStream is not needed any more and setting 'busy' so
	early might let a request skip the queue.
	
	* WebConnectionGroup.cs: decrement the indexer when removing a dead
	reference from the arraylist.

	* WebConnectionStream.cs:
	(ReadAll): call NextRead if it has not been called before even when
	we have completed the request. Reuse the read buffer when reading a
	response of unknown size. Increase the buffer to 8kB.
	(BeginRead): increase pendingReads earlier and even when reading from
	the internal buffer.
	(EndRead): decrease pendingReads later and always.

2004-12-01 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* CookieContainer.cs: style, fixed checks for properties, implemented
	the MonoTODOs for the method that take an Uri. GetCookies and
	GetCookieHeaders now really return only the cookies that are requested
	filtering by the Uri parameter.

	* Cookie.cs: style, added default values for Comment, Domain and Port.

2004-12-01 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* CookieCollection.cs: reformatted, fixed Add by adding a new method to
	search across the arraylist, as list.IndexOf is not what we want.

2004-11-19 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs: check for FIN or RST on the socket before reusing.
	Fixes bug #69388.

2004-11-09 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ChunkStream.cs: simplified condition for WantMore property.

	* WebConnection.cs: in Connect(), finish any pending reads we might
	have for chunked data. Ignore possible blank lines at the very
	beginning of the server response. Honor user set KeepAlive in
	HttpWebRequest for HTTP/1.1 connections. Thanks to Eyal Alayuf for
	his suggestions and code.

2004-11-01 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebResponse.cs: don't lock up when the cookie received ends with
	a semicolon. Patch by Darryl VanDorp. Fixes bug #68956.

2004-10-27 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: don't fail if the request has already been sent
	when accessing ContentType setter. Fixes bug #68848.

2004-10-25 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ChunkStream.cs:
	(WantMore): we're not done until we get a 0 chunk size and the trailer.
	The 0 can be expressed as more than one character too (ie, 000000).

	* HttpWebRequest.cs: new argument in SetResponseError.
	* WebConnection.cs: added argument to HandleError as a hint for
	debugging.
	(Connect): make the chunked stream be in the expected state when
	reusing.

	* WebConnectionStream.cs: removed unused method (ResetWriteBuffer).

2004-10-10 David Sheldon <dave-mono@earth.li>

	* HttpWebRequest.cs: Use RemoveAndAdd for AddRange. Fixes unittest.

2004-10-05 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: use RemoveAndAdd for headers multivalue headers.
	* WebHeaderCollection.cs: added RemoveAndAdd that behaves like the old
	SetInternal.

2004-10-04 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: ProxyQuery returns true when we use a proxy without
	tunneling a secure connection.

	* ServicePoint.cs: added UseConnect property.

	* ServicePointManager.cs: set the UseConnect property when we use a http
	proxy for a https connection.

	* WebConnection.cs: setup the tunnled connection when using a proxy and
	https.

2004-09-13 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebResponse.cs: remove unused SplitValue method.

2004-09-10  Sebastien Pouliot  <sebastien@ximian.com>

	* DnsPermission.cs: Updated to pass new unit tests.
	* DnsPermissionAttribute.cs: Cleanup.
	* SocketPermission.cs: Updated to pass new unit tests.
	* SocketPermissionAttribute.cs: Updated to pass new unit tests.
	* WebPermission.cs: Implemented some TODO - not complete yet.
	* WebPermissionAttribute.cs: Updated to pass new unit tests.

2004-08-11 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Cookie.cs: don't fail when using default constructor. Fixes bug
	#62890.

2004-08-11 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebResponse.cs: set-cookie and set-cookie2 can be present more
	than once and have multiple values. Don't rely on string.split when
	parsing cookie values.

	* WebHeaderCollection.cs: same thing for set-cookie and set-cookie2.
	Fixed GetValues (it was splitting values that contained a comma) and
	changed SetInternal to handle multi-value headers.

	Fixes bug #62744.

2004-07-26 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebProxy.cs: fix scheme detection. Patch by Konstantin Triger
	(kostat@mainsoft.com).

2004-07-16 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: detect changes in scheme or port when redirecting.
	Fixes las take on bug 61218.

2004-07-14 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs: moved loading of the ssl stream Type to its own
	method. Don't create a new ssl stream if we're reusing the connection.

	* WebConnectionStream.cs: ensure the number of bytes copied in ReadAll
	is the expected even if the dta from the server has extra bytes.

2004-07-12 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs:
	* WebConnectionStream.cs: when the status code is 1xx, 204 or 304,
	"responses MUST NOT include a message-body". We tried to read the
	stream even when getting those codes and considered the 0 length
	read as a failure.

2004-07-09 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: removed bogus Monitor.Exit.
	* WebConnection.cs: use Address instead of RequestUri when checking for
	the scheme in order to select the stream type. Fixes bug #61218.

2004-06-06  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ChunkStream.cs: added ChunkLeft property.
	* WebConnection.cs:
	(EndRead): when using small byte arrays to read from a chunked stream,
	ensure we've read the chunk size and try to fulfill the request
	completely. fixes bug 59653.

2004-05-29  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnectionStream.cs: fixed CanRead property. Closes bug #59273.

2004-05-28  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* DigestClient.cs: cache the sessions based on address and
	credentials, not only address. Added poor men's expiration to
	the session cache. Fixes bug #59202.

2004-05-26  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* IPAddress.cs:
	* IPEndPoint.cs:
	* IPv6Address.cs: no more warnings about IPAddress.Address.

2004-05-18  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebException.cs: implemented serialization .ctor and
	GetObjectData().

2004-05-13  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebAsyncResult.cs: don't create the WaitHandle if not needed.

2004-05-13  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: added 3 missing properties for 1.1. They are not
	used yet.

	* NetConfig.cs: added MaxResponseHeadersLength field.

	* ServicePoint.cs:
	* ServicePointManager.cs: added missing properties for 1.1. 

2004-05-03  Sebastien Pouliot  <sebastien@ximian.com>

	* WebConnection.cs: Use assembly name const to load Mono.Security.

2004-05-03  Lluis Sanchez Gual <lluis@ximian.com>

	* NtlmClient.cs: Use assembly name const to load Mono.Security.

2004-04-24  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnectionStream.cs: avoid the exception when getting the content
	length if possible.

2004-03-29  Lluis Sanchez Gual <lluis@ximian.com>

	* HttpWebRequest.cs: Use a lock block instead of Monitor.Enter/Exit, so
	the lock is released in case of exception (for example, a 
	ThreadAbortException). This also "fixes" bug #52417.
	Beware, this requires a runtime update (due to a bug in Monitor.Exit).
	* ServicePoint.cs: Changed method from internal to private, since it
	is not called from outside the class.

2004-03-24  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: added the exception status to the error message.
	* WebConnection.cs: add headers using SetInternal instead of Add to
	bypass header name validation. Fixes bug #55994.
	* WebHeaderCollection.cs: added SetInternal (string header).

2004-03-04  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs:
	* WebConnectionGroup.cs: the requests queue is now shared for all the
	connections belonging to the same connection group.

2004-02-26  Sebastien Pouliot  <sebastien@ximian.com>

	* DefaultCertificatePolicy.cs: New. Certificate validation
	policy compatible with the documented one present in Fx. It
	allows valid certificates and expired certificates to be used
	for SSL connections.
	* ServicePointManager.cs: Removed the DummyPolicy. Now creates
	a DefaultCertificatePolicy to validate certificates. 

2004-02-26  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ServicePoint.cs: SendContinue is always false for HTTP/1.0

	* WebConnection.cs: get rid of WaitForContinue() (yes!) and prevent
	calling more the ContinueDelegate more than once when we get the
	headers in several packets.

	* WebConnectionStream.cs: removed call to WaitForContinue.

2004-02-25  Sebastien Pouliot  <sebastien@ximian.com>

	* WebConnection.cs: Update previous patch to use HttpsClientStream
	(internal in Mono.Security assembly) in place of SslClientStream.
	This will reduce reflection and allow to use ICertificatePolicy.

2004-02-25  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* DigestClient.cs: fix quote handling. Reordered attributes in response.
	Fixed typo (QOP->CNonce). Now Digest works with apache2.

2004-02-25  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* DigestClient.cs: removed Console.
	* HttpWebRequest.cs: 401/407 were hanging for GET. Fixed.

2004-02-24  Sebastien Pouliot  <sebastien@ximian.com>

	* DigestClient.cs: Fixed issue with Apache server which do not use "
	for specifying the digest algorithm (.e.g. algorithm=MD5 not ="MD5").

2004-02-20  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: arghhh. I used the server response headers instead
	of what the client is supposed to send. Thanks to Helge Hess.

2004-02-19  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* AuthenticationManager.cs: implemented PreAuthenticate().

	* HttpWebRequest.cs: once we know the version of the server, use it if
	below the requested one. Remove 'Expect', 'Content-Length' and /or 
	'Transfer-Encoding' if appropiate due to changes in version. Fixed 
	'Host' header for non-standard ports. Support preauthentication. Closes
	bug #50530.

2004-02-19  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: check for missing or wrong URI in Location header
	when redirecting.

	* WebConnection.cs: if the data read does not contain all the headers,
	keep it around and read the rest until we get to the response body.
	Allow response code with no description. Fixed bug #54543.

2004-02-18  Sebastien Pouliot  <sebastien@ximian.com>

	* SecurityProtocolType.cs: Added missing [Serializable] to enum. Added 
	Default and Ssl2 to NET_2_0 profile. Enum is now internal for NET_1_0
	profile (as we need it for SslClientStream).
	* ServicePoint.cs: Added internal SetCertificates(client,server).
	* ServicePointManager.cs: Added CheckCertificateRevocationList and
	CheckCertificateRevocationList static properties (public in 1.1, 
	internal for 1.0).
	* WebConnection.cs: Dynamically creates a SslClientStream (from 
	Mono.Security assembly) in case of https. Changed NetworkStream to 
	Stream everywhere.

2004-02-18  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: send the 'Connection: keep-alive' header when we
	don't know the server version or it's 1.0.

	* ServicePoint.cs: added SetVersion.

	* WebAsyncResult.cs: remove ChunkAsyncResult.

	* WebConnection.cs: set the ServicePoint version when getting a response
	from the server.

	* WebConnectionStream.cs: when posting chunked content, send the head,
	body and trailer of the chunk at once instead of doing 3 separate
	writes, which may cause troubles.

2004-02-18  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs: if we get a 100 when we're not waiting for it, set
	that information in the ServicePoint.

	* WebConnectionStream.cs: send headers in the right order for
	non-chunked POST.

2004-02-17  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnectionStream.cs: fixed nullrefs in BeginWrite/EndWrite.

2004-02-17  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: on second and sucesive tries when authenticating,
	don't use chunked encoding for POST, as we know the content length and
	have the body. Nullify bodyBuffer always in CheckFinalStatus.

	* WebAsyncResult.cs: added ChunkAsyncResult property. It holds the
	IAsyncResult when writing CRLF at the end of a chunk.

	* WebConnectionStream.cs: support sending chunked data.

2004-01-24  Lluis Sanchez Gual <lluis@ximian.com>

	* HttpWebRequest.cs: When retrying a POST request after an
	authentication failure, resend the body. This fixes bug #51841.
	* WebConnectionStream.cs: Added properties for getting what's been
	written.

2004-02-12  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: don't send 'Expect: 100-continue' for 1.0 version.

2004-02-12  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: support proxy authentication.

2004-02-12  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* BasicClient.cs:
	* DigestClient.cs: use IndexOf instead of StartsWith to deal with
	servers that provide several authentication schemas.

2004-02-12  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ChunkStream.cs: use an array of buffers instead of a MemoryStream for
	storing the chunks. This way, we won't miss traling data from the
	previous chunk when a new one is received before the other is fully
	read.

2004-01-27  Nick Drochak <ndrochak@ieee.org>

	* DigestClient.cs:
	* HttpWebRequest.cs:
	* IPv6Address.cs:
	* WebClient.cs:
	* WebConnection.cs:
	* WebConnectionStream.cs: Remove unused variables thus eliminating some
	build warnings.

2004-01-26  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs: patch by Yaacov Akiba Slama that fixes 100-continue
	handling for the case when the same packet also contains the actual
	[2-5]xx response.

2004-01-24  Lluis Sanchez Gual <lluis@ximian.com>

	* HttpWebRequest.cs: Added missing property.

2004-01-23  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Dns.cs: don't block forever in EndResolve and EndGetHostByName. Fixes
	bug #53222.

2004-01-16  Lluis Sanchez Gual <lluis@ximian.com>

	* ChunkStream.cs: The "size" parameter of Write is not the number of
	bytes to write, but the last offset to be written. Thus, in WriteAndRead
	Back, since "read" is not an offset but the number of bytes, it must be 
	added to the offset. Maybe it would be a good idea to change the name of
	the parameter, since it is confusing. This should fix bug #52591.

2004-01-12  Lluis Sanchez Gual <lluis@ximian.com>

	* WebConnection.cs: Yet another fix for WebConnection. This fixes 
	bug #52169.

2004-01-09  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs: Data.Init is a bad boy. Lluis realized. He also
	tidied up the end of ReadDone. Disabled relaunching the request if 2
	InitRead are called, since now we don't throw everything into
	RegisterWaitForSingleObject but one request at a time.

	* WebConnectionGroup.cs: when checking available connections, allow them
	not to be Connected but allocated to honor the connection limit.
	
	* WebConnectionStream.cs: CheckComplete() now checks for nextReadCalled
	too. ReadAll don't mess contentLength if it's provided in the headers.

	BIG thanks to Lluis. Turns out that we were debugging the same stuff and
	his Data.Init discovery was THE thing I was missing.

	Fixes bug #51277.

2004-01-09  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ServicePointManager.cs: use GetMaxConnections to get the appropiate
	number of connections limit.

2004-01-09  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* MonoHttpDate.cs: use the invariant culture, not en-US. Suspected
	guilty for bug 52629.

2003-12-16  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* CredentialCache.cs: return null instead of throwing NotImplemented.

2003-12-12  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: fixed checking if method allows a body. Patch by
	Benjamin Jemlich (pcgod@gmx.net).

2003-12-12  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: deal with authentication schemes that have more
	than 1 round trip (Ntlm).

2003-12-11  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* NtlmClient.cs: new class that actually uses one from Mono.Http to do
	the authentication.

2003-12-02  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: when building the redirect URI, use the previous
	one as the base URI, which makes relative URIs work.

2003-12-02  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* DigestClient.cs: merged in code from Sebastien Pouliot and Greg
	Reinacker that Supports cnonce and preauthentication.

2003-12-02  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* DigestClient.cs: initial Digest authentication. Works with apache
	mod_digest.

2003-11-27  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: removed unneeded StringBuilder.
	* WebConnection.cs: default to keep the connection open for HTTP/1.1
	only or HTTP/1.0 + (Proxy-)Connection header. Fixes bug #51208.

2003-11-17  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs: turns out that socket.Connected is not useful until
	we actually try to send/receive data, even if the other end has already
	closed the socket. Added TryReconnect() and Connected.

	* WebConnectionData.cs: default value for StatusCode is 0 now.

	* WebConnectionGroup.cs: reuse the connection since the beginning,
	instead of opening up to ConnectionLimit and then reusing.

	* WebConnectionStream.cs: reopen the socket if we're trying to reuse
	one which fails on first write.

2003-11-14  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnectionStream.cs: when a callback is passed to BeginRead/Write,
	wrap it and do our job before calling it. Fixes bug #48497.

2003-11-12  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* WebExceptionStatus.cs: Restyled, Added .Net 1.1 members
	* SecurityProtocolType.cs: Added and implemented

2003-11-12  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: fixed redirects when they target another host.

2003-11-06  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* IPAddress.cs: prevent exceptions when trying to parse the static IPv6
	addresses.

2003-10-17  Pedro Martinez Julia  <yoros@wanadoo.es>

	* WebClient.cs: use Path.DirectorySeparator instead of "/" for
	windows compatibility. Add some checks for file paths like
	"C:/xxx/yyy/..." and like "/home/xxx/...".

2003-10-16  Pedro Martinez Julia  <yoros@wanadoo.es>

	* WebClient.cs: added a slash between directory and file names.

2003-10-13  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs:
	* HttpWebResponse.cs: better abort handling and leave the stream in a
	stable status on abort.

2003-10-12  Pedro Martinez Julia  <yoros@wanadoo.es>

	* WebClient.cs: refine reading of local files (like MS.NET).

2003-10-10  Pedro Martinez Julia  <yoros@wanadoo.es>

	* WebClient.cs: MS.NET works right when we try OpenRead("file.txt")
	but we didn't. Now, when Uri fails with an exception, it adds
	"file://" before the URI and tries again.

2003-10-09  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ServicePoint.cs: preparing for recycling. Not yet finished.
	* ServicePointManager.cs: this is the one that reads config.
	* WebConnectionGroup.cs: don't read config here.
	* WebConnection.cs: added the queue again. Launch queued requests on
	error.

2003-10-08  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs: the queue is now handled by the threadpool.
	Initialize the connection data in a place where it does not depend on
	the execution order of the requests in threadpool. More error handling.

	* WebConnectionGroup.cs: use the limits in the config file and reuse
	connections when the limit is reached.

2003-10-02  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: handle 304 a la MS.
	* WebConnection.cs: set the response data when reading 0 bytes.

2003-09-16  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnectionStream.cs: fix by Lluis to avoid the stream being in an
	invalid state.

2003-08-14  Nick Drochak <ndrochak@gol.com>

	* WebRequest.cs: Check lower case string since that is what we will add.

2003-08-04  Jerome Laban <jlaban@wanadoo.fr>

	* IPHostEntry.cs: Default contructor must not initialize members.
	(Fixes bug #45575).

2003-07-27  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* CredentialCache.cs: Removed undefined serializable attribute

2003-07-20  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ChunkStream.cs:
	(WantMore): true if we've not received the last chunk yet. Fixes
	bug #45463. Thanks to Miguel for tracking this down and providing a
	test case.
	
	* WebConnection.cs: removed bogus ^M's.
	
	* WebHeaderCollection.cs: provide more info when the header or value is
	wrong.

2003-07-15  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* ChunkStream.cs: Removed unused members
	* IPAddress.cs: Removed unused exception variable, fixes compiler
	warning.
	* WebConnection.cs: Removed unused exception variables, fixes compiler
	warnings.

2003-07-14  Lluis Sanchez Gual <lluis@ximian.com>

	* NetConfig.cs: If Clone method is not public, then it must use
	  explicit interface method implementation syntax.

2003-07-14  Jerome Laban <jlaban@wanadoo.fr>

	* Dns.cs: Reworked indentation.
	Added IPv6 support.
	Added literal address checking in GetHostByAddress.
	Changed Dns.Resolve behavior.
	* IPAddress.cs:
	* IPEndPoint.cs: Added IPv6 support.
	* IPv6Address.cs: Added address compression.
	* NetConfig.cs: Added configuration section. 	

2003-07-14  Jerome Laban <jlaban@wanadoo.fr>

	* ServicePoint.cs: Removed Connect and GetEndPoint methods.
	Removed reverse resolution when uri is literal IP address. 
	* WebConnection.cs: IPv6 compatibility update: Try to connect
	to all addresses returned by IPHostEntry.
	* WebConnectionGroup.cs: Removed unused parameter. 

2003-07-13  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* WebProxy.cs: Add serialization/ deserialization support

2003-07-10  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* ProxyUseType.cs:
	* WebStatus.cs: Deleted (do not exist in this assembly)
	* IPv6Address.cs: Made internal

2003-07-08  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs:
	* ServicePointManager.cs:
	* WebConnection.cs: added support for proxies.

2003-07-05  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* DnsPermissionAttribute.cs:
	* SocketPermissionAttribute.cs: Fixed wrong AttributeUsageAttribute

2003-07-05  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* WebPermission.cs: Added and partially implemented
	* WebPermissionAttribute.cs: Added and implemented

2003-07-01  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebClient.cs: fixed bug #45651.

2003-06-29  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebClient.cs: Small fix by Sebastian <scut@nb.in-berlin.de>.

2003-06-29  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs: fixed header writing the reusing a connection and
	the server does not send 100-continue response.

2003-06-26  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnection.cs: close the socket and connection when disposing.
	* WebRequest.cs: removed setter for RequestUri. Allow non-public ctors
	when creating instances.

	* HttpWebRequest.cs:
	* HttpWebResponse.cs:
	* FileWebRequest.cs: support serialization.

	* FileWebResponse.cs: support serialization and fixed dispose checks.

	* FileWebRequestCreator.cs:
	* HttpRequestCreator.cs: added internal .ctor.

2003-06-24  Lluis Sanchez Gual <lluis@ximian.com>

	* HttpWebRequest.cs: SetWriteStream(): SendRequestHeaders should be
	called before asyncWrite.SetCompleted, to make sure that the waiting
	thread does not start to send more information before
	SendRequestHeaders has finished.

2003-06-22  Lluis Sanchez Gual <lluis@ximian.com>

	* WebConnectionStream.cs: Only increment pendingReads if an asynchronous
	read is really needed.

2003-06-20  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebHeaderCollection.cs: prevent duplication headers used niternally.

2003-06-14  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: if CookieContainer has not been set, make
	HttpWebResponse ignore Set-Cookie* headers.

	* HttpWebResponse.cs: Set-Cookie and Set-Cookie headers removed if
	CookieContainer have been provided to the request.

2003-06-13  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* AuthenticationManager.cs: get the list of authentication modules from
	the configuration files. Added Clear and fixed Unregister.

	* BasicClient.cs: fully implemented.

	* HttpWebRequest.cs: added support for Basic authentication when
	credentials are set.

	* NetworkCredential.cs: fixed GetCredential.

2003-06-13  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: *really* take care of requestSent to prevent
	sending the same request twice.
	* WebAsyncResult.cs: don't close the handle. Just Reset.
	* WebConnectionStream.cs: removed unneeded line.

2003-06-12  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: use InternalClose when we are not going to send the
	rest of the request stream because of an error after sending the
	headers.

	* WebConnection.cs: check for completion after setting the response.
	Enable reading in NextRead.

	* WebConnectionStream.cs: re-fixed the count for partially buffered
	reads. If the network stream returns 0 bytes, we're done.

2003-06-11  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebClient.cs: implemented UploadFile. Fixed SetupRequest to set the
	special headers *after* the others.

2003-06-10  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebConnectionStream.cs: when the read is partially filled from the
	initial buffer, add those bytes too. Thanks to Lluis for debugging this.

2003-06-09  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: added ExpectContinue property.
	* WebConnection.cs: allow 100 Continue to be delayed after waiting for
	it.

2003-06-08  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: don't send "Expect: 100-continue" is the server
	is known not to respond to that.

	* ServicePoint.cs: added SendContinue property.

	* WebConnection.cs: only wait 2 seconds for a continue reply. If it
	timeouts, set SendContinue to false and proceeed sending data.

	* WebConnectionStream.cs: if 100-continue is not received and instead we
	get a 417 or anything else, don't send the data.

	* WebClient.cs: implemented all missing properties and methods except
	UploadFile.

2003-06-06  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* FileWebRequestCreator.cs: splitted from WebRequest.
	* HttpRequestCreator.cs: splitted fromWebRequest.
	* WebRequest.cs: added methods that are used by the new configuration
	handler to set prefix/type name requests creators.

2003-06-06  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* AuthenticationManager.cs:
	* Authorization.cs:
	* BasicClient.cs: new file.
	* ChunkStream.cs: new file.
	* Cookie.cs:
	* CookieContainer.cs:
	* GlobalProxySelection.cs:
	* HttpWebRequest.cs:
	* HttpWebResponse.cs:
	* IAuthenticationModule.cs:
	* ServicePoint.cs:
	* ServicePointManager.cs:
	* WebAsyncResult.cs: new file.
	* WebConnection.cs: new file.
	* WebConnectionData.cs: new file.
	* WebConnectionGroup.cs: new file.
	* WebConnectionStream.cs: new file.
	* WebException.cs:
	* WebHeaderCollection.cs:
	* WebProxy.cs:
	* WebResponse.cs:

	Reworked HttpWebRequest and related classes.

2003-05-30  Miguel de Icaza  <miguel@ximian.com>

	* HttpWebRequest.cs (EndGetResponse): Do not throw exceptions on
	InternalServerError (500)

2003-05-29  Miguel de Icaza  <miguel@ximian.com>

	* HttpWebRequest.cs (Close): Move the code that accumulates the
	output to Close from Flush.  Flush could have been called in the
	middle of the processing, and would have generated invalid results
	(which it did).

2003-05-23  Zoltan Varga  <vargaz@freemail.hu>

	* Dns.cs (GetHostByAddress): Return the local host when called with
	IF_ANY.

2003-04-29  Miguel de Icaza  <miguel@ximian.com>

	* WebClient.cs (DownloadData): Close the underlyng stream.
	(DownloadFile): Use using, so the file gets closed.

2003-04-24  Miguel de Icaza  <miguel@ximian.com>

	* WebClient.cs (DownloadData): Instead of using a MemoryStream,
	keep track of all the small chunks in an ArrayList.  The
	MemoryStream had the property of reallocating itself, and the
	problem was that MemoryStream.GetBuffer would return the buffer
	(correctly), but not something of the right size.  So clients of
	DownloadData would get the extra unused bytes as part of the
	result.

	The solution would have been to make another copy at this point,
	instead, we only keep the small allocations around in the
	ArrayList, and we only do one large allocation at the end.

	* HttpWebResponse.cs: If there is a Content-Length header, pass
	this information to our HttpWebResponseStream, so it knows when to
	stop, instead of waiting for the stream to be shut down by the
	other end.

	* HttpWebRequest.cs: Only set the `delay-header-writing' mode on
	the underlying stream if the method will do a content transfer and
	no Content-Length was provided. If not (HEAD and GET or
	Content-Length provided), keep going.
	
2003-04-23  Miguel de Icaza  <miguel@ximian.com>

	* HttpWebRequest.cs: .NET Allows the HttpWebRequest to not have
	the ContentLength specified on the request.  If that happens, we
	have to accumulate all the data written, and once we accumulate
	the data, we send it off.  

	Notice that the documentation in .NET is actually incorrect, they
	state that setting ContentLength is mandatory.  It is not.

2003-04-12  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebResponse.cs: fixes bug #41180.

2003-03-25  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: throw an exception is the response code is >= 300.

2003-03-07  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: implemented IDisposable, make the request stream
	read only. Changed the way of disposing the socket.

	* HttpWebResponse.cs: wrapped the socket in a write-only NetworkStream,
	handle chunked transfer encoding (no more hangs), added serialization
	stuff, call CheckDisposed at the beginning of methods/properties (not
	in a finally clause).

2003-02-17  Nick Drochak <ndrochak@gol.com>

	* WebClient.cs : Implemented Credentials property.

2003-02-04  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* SocketAddress.cs: byte 1 of the data is the high byte of the family,
	not the size.

2003-01-29  Atsushi Enomoto <ginga@kit.hi-ho.ne.jp>

	* WebClient.cs : hacked OpenRead, DownloadData and DownloadFile.

2002-10-24  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs: applied patch from Tim Haynes
	(thaynes@openlinksw.com).

	Avoided double-sending of the request to the server when both
	GetRequestStream() and GetResponse() are called.
	System Header attributes survive the Headers attribute set.
	Added handling of Connection: KeepAlive/Close

2002-10-03  Dick Porter  <dick@ximian.com>

	* Dns.cs: Fixed GetHostName()

2002-09-09  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs:
	* HttpWebResponse.cs: applied another patch from Shahms E. King
	(shahms@shahms.com).

2002-09-03  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebRequest.cs:
	* HttpWebResponse.cs: applied patch from Shahms E. King
	(shahms@shahms.com).

2002-05-29  Lawrence Pit <loz@cable.a2000.nl>

	* MonoHttpDate.cs: added
	* HttpWebRequest.cs: using MonoHttpDate
	* HttpWebResponse.cs: using MonoHttpDate
	* DnsPermission.cs: correct XML output
	* SocketPermission.cs: correct XML output

2002-05-21  Lawrence Pit <loz@cable.a2000.nl>

	* WebClient.cs: stubbed
	* WebProxy.cs: fixed bug; had to change internal representation
	of bypasslist to ArrayList, different implementation of checking
	regex's.

2002-05-20  Lawrence Pit <loz@cable.a2000.nl>

	* WebProxy.cs: added, implemented
	* ServicePoint.cs: implemented most
	* ServicePointManager.cs: implemented
	* HttpWebRequest.cs: started implementation
	* HttpWebResponse.cs: improved disposable routines
	* FileWebRequest.cs: slight improvement of Close method
	
2002-05-19  Lawrence Pit <loz@cable.a2000.nl>

	* FileWebRequest.cs: finished implementation of async methods.
	* FileWebResponse.cs: improved disposable routines.
	* IPEndPoint.cs: fixed bug #24666 in Serialize and Create methods, 
	byte ordering of address was backwards.

2002-05-13  Lawrence Pit <loz@cable.a2000.nl>

	* Dns.cs: Reimplemented (simplified and fixed) asynchronous methods by
	relying on standard asynchronous delegate features. Added checks for
	null strings.
	* HttpWebResponse.cs: implemented properties
	* FileWebResponse.cs: improved the way resources are disposed.
	* FileWebRequest.cs: started implementation of asynchronous methods
	* ServicePointManager.cs: implemented properties

2002-05-12  Lawrence Pit <loz@cable.a2000.nl>

	* HttpWebRequest.cs: properties implemented
	* HttpWebResponse.cs: added
	* GlobalProxySelection.cs: implemented
	* FileWebResponse.cs: added
	* FileWebRequest.cs: some methods implemented

2002-05-11  Lawrence Pit <loz@cable.a2000.nl>

	* WebHeaderCollection.cs: implemented
	* WebRequest.cs: implemented
	* FileWebRequest.cs and HttpWebRequest.cs stubs added

2002-05-09  Lawrence Pit <loz@cable.a2000.nl>

	* Rewrote IPAddress.Parse method, passing all unit tests

2002-05-09  Lawrence Pit <loz@cable.a2000.nl>

	* fixed bug in IPEndPoint.Equals method
	* fixed bug in IPAddress.Parse method
	* fixed bug in IPAddress.SwapLong method
	* fixed several bugs in Cookie.cs

2002-05-06  Lawrence Pit <loz@cable.a2000.nl>

	* WebRequest.cs: added
	* WebResponse.cs: implemented
	* WebException.cs: implemented
	* WebHeaderCollection.cs: added
	* HttpVersion.cs: implemented
	* HttpContinueDelegate.cs: added
	* IWebProxy.cs: added
	* IWebRequestCreate.cs: added
	* ICertificatePolicy.cs: added
	* ServicePoint.cs: stubbed
	* ServicePointManager.cs: stubbed
	* CookieContainer.cs: added
	* Authorization.cs: implemented

2002-05-05  Lawrence Pit <loz@cable.a2000.nl>

	* CredentialCache.cs: implemented

2002-05-05  Lawrence Pit <loz@cable.a2000.nl>

	* IPAddress.cs: fixed IsLoopback, address was already in host order

2002-05-05  Lawrence Pit <loz@cable.a2000.nl>

	* IPv6Address.cs: added (note: not part of .net spec)

2002-05-01  Lawrence Pit <loz@cable.a2000.nl>

	* DnsPermission.cs: implemented
	* DnsPermissionAttribute.cs: implemented

2002-04-28  Lawrence Pit <loz@cable.a2000.nl>

	* EndpointPermission.cs: implemented
	* SocketPermission.cs: implemented
	* SocketPermissionAttribute.cs: implemented
	* ProtocolViolationException.cs: implemented
	* Dns.c: passing w32 error code when no host found

2002-04-27  Lawrence Pit <loz@cable.a2000.nl>

	* Cookie.cs: implemented
	* CookieCollection.cs: implemented
	* CookieException.cs: implemented

2002-04-24  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* IPAddress.cs: initialize the read only fields with Parse().

2002-04-18  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* IPAddress.cs: little changes to behave as MS.

2002-04-18  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Dns.cs (Resolve): behave as MS. Agreed with Mads.

2002-04-17  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* IPAddress.cs: the icalls for sockets are endianness-aware. So I
	changed a few things. Also included a workaround for bug #23547.

2002-04-15  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* IPAddress.cs: use System.BitConverter.IsLittleEndian (suggested
	by Paolo) instead of guessing the endianness.

	* SocketAddress.cs: implemented Equals() and GetHashcode().
	
2002-04-15  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* IPEndPoint.cs: modifications to constructors according to the
	specifications (suggested by Lawrence Pit).

2002-04-15  Patrik Torstensson <patrik.torstensson@labs2.com>

	* IPEndPoint.cs: Fixed build breaker.

2002-04-15  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* IPEndPoint.cs: implemented Equals() and GetHashCode(). Now 100%
	complete.

2002-04-15  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* IPAddress.cs: finished all MonoTODO's. Use network order to store 
	the address. Check for max and min values in Address:set. IsLoopback()
	returns now true for all 127.x.y.z. Some more checks in Parse ().
	Some changes to behave as MS does.

2002-02-24  Duncan Mak  <duncan@ximian.com>

	* ICredentialLookup.cs: Added the GetCredential method to the
	interface. The interface is named "ICredentials", should this file
	be renamed?	

	* NetworkCredential.cs: Added to CVS. Need to investigate on how
	GetCredential() works

2002-01-23  Dick Porter  <dick@ximian.com>

	* SocketAddress.cs: Implemented.

	* IPEndPoint.cs: Turned 'Address' field into a real property.
	Implemented Create() and Serialize() methods.

	* IPAddress.cs: Fixed class constructor, turned 'Address' field
	into a real property. Removed undocumented "public
	IPAddress(string)" constructor.

	* EndPoint.cs: Implemented.  All methods return
	NotSupportedException to enforce subclass overriding.

	* Dns.cs: Replaced fixed-layout Hostent struct and cygwin
	P/Invokes with portable internal calls.

2002-01-17  Miguel de Icaza  <miguel@ximian.com>

	* Dns.cs: Updated to API changes.

	* IPAddress.cs: Updated API.  Much left to implement.

	* Dns.cs: Remove IPToString method

2002-01-06  Ravi Pratap  <ravi@ximian.com>

	* Dns.cs, AuthenticationManager.cs, SocketAddress.cs : MonoTODO
	attribute insertion.

2001-11-22  Nick Drochak <ndrochak@gol.com>

	* IPAddress.cs: Fix constructor bug, properly name Address property,
	and use triple-slash for comments.

2001-11-20  Miguel de Icaza  <miguel@ximian.com>

	* IPAddress.cs: Updated to contain Any, Broadcast, Loopback and
	None as suggested by Phillip.

2001-09-26  Mads Pultz <mpultz@get2net.dk>
	* Dns.cs: Initial work on BeginGetHostByName and EndGetHostByName implemented.

2001-09-24  Mads Pultz <mpultz@get2net.dk>

	* Dns.cs: Minor changes (some print statements removed)

2001-09-23  Mads Pultz <mpultz@get2net.dk>

	* Dns.cs: Initial work submitted to repository.
	* IPHostEntry.cs: Initial work submitted to repository.

2001-07-12  Sean MacIsaac  <macisaac@ximian.com>

	* Authorization.cs: Fixed compiler error.

	* IAuthenticationModule.cs: Changes for Beta2.

	* IPAddress.cs: Internal storage changed to be uint not int.

	* IPEndPoint.cs: Fixed compiler error.

	* EndPoint.cs: Fixed compiler error.

	* AuthenticationManager.cs: Fixed typo.
