2010-07-06 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* Process.cs: allow the exit callback to be used more than once. Fixes
	bug #614909.

2010-07-04 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* Process.cs: ignore processes that finish while we are looking for
	processes by name. Fixes bug #596779.

2010-04-06  Jb Evain  <jbevain@novell.com>

	* Debug.cs: make class static.

2010-04-06  Jb Evain  <jbevain@novell.com>

	* Debug.cs (Assert, WriteLine): add net_4_0 overloads.

2010-03-11  Sebastien Pouliot  <sebastien@ximian.com>

	* Debug_2_1.cs: Change type to static to match SL4

2010-01-27 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* Stopwatch.cs: add new Restart().

2009-11-30  Sebastien Pouliot  <sebastien@ximian.com>

	* Debug_2_1.cs: Change type to sealed to match SL2/3

2009-10-12  Zoltan Varga  <vargaz@gmail.com>

	* Process.cs (Dispose): Close the async output/error readers. Fixes #545429.

2009-07-22  Jb Evain  <jbevain@novell.com>

	* ProcessStartInfo.cs: force no-verb on MONOTOUCH.

2009-07-10 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* ProcessStartInfo.cs: HaveEnvVars is enabled by just using the
	EnvironmentVariables property. Bug #520650 fixed.

2009-05-12  Jonathan Pryor  <jpryor@novell.com>

	* DiagnosticsConfigurationHandler.cs: Use the new
	  TraceSourceInfo(string, SourceLevels, TraceImplSettings) constructor.
	* TraceSourceInfo.cs: Add a new constructor, 
	  TraceSourceInfo(string, SourceLevels, TraceImplSettings), which adds
	  the DefaultTraceListener w/o depending upon (the possibly still
	  initializing) TraceImpl members.  Fixes #502944.

2009-05-01 Jonathan Pryor  <jpryor@novell.com>

	* DiagnosticsConfigurationHandler.cs: Don't refer to TraceImpl member
	  while reading the .config file, instead cache the values and refer
	  to the cached values during initialization.  This prevents recursive
	  initialization calls (Trace.OnInit() ... Trace.Listeners.Add() ...
	  Trace.OnInit() ...), and associated duplicate parsing of .config file
	  sections.  Fixes bnc#499442.
	* TraceImpl.cs: Cope with DiagnosticsConfigurationHandler changes.
	* TraceListenerCollection.cs: Add internal 
	  Add(TraceListener,TraceImplSettings) method for adding
	  TraceListeners during DiagnosticsConfigurationHandler initialization
	  (which can't access TraceImpl, as we may still be reading the
	  .config file to determine the TraceImpl values).

2009-04-28 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* ConsoleTraceListener.cs: add an internal constructor that takes a
	string argument. Used when 'initializeData' is set.
	* DiagnosticsConfigurationHandler.cs: try internal constructors when
	the assembly is System.
	Fixes bug #498853.

2009-04-19  Miguel de Icaza  <miguel@novell.com>

	* Process.cs: Do not crash if GetProcesses_internal returns null
	This happens on operating systems where we have not implemented
	EnumProcesses in the io-layer, see bug 496294.

2009-02-24  Andr√©s G. Aragoneses  <aaragoneses@novell.com>

	* Process.cs: Throw IOEs instead of normal exceptions.
	Fixes bug 477943.

2009-01-22  Zoltan Varga  <vargaz@gmail.com>

	* Stopwatch.cs: Reorder the calculations in Elapsed and ElapsedMilliseconds
	to avoid overflow. Fixes #468570. Patch by Yoni Shalom <silver83@gmail.com>.

2009-01-18  Zoltan Varga  <vargaz@gmail.com>

	* Process.cs: Avoid closing the duplicated process handle in
	ProcessWaitHandle, it is done automatically by the WaitHandle.Dispose ().
	Fixes #464628.

2008-12-09 Christian Hergert <christian.hergert@gmail.com>

	* CounterCreationData.cs: CounterHelp defaults to String.Empty.

2008-11-20 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* PerformanceCounter.cs: add 2 workarounds for known problems. I will
	add the corresponding test cases later.

2008-11-13  Bill Holmes  <billholmes54@gmail.com>

	* Process.cs : Adding an implementation for WaitForInputIdle
	  to call the an internal call.  The internal call is only 
	  implemented properly on Windows.
	  
	Code is contributed under MIT/X11 license.

2008-11-06  Jonathan Chambers  <joncham@gmail.com>

	* Process.cs : Use DuplicateHandle when redirecting
	StdInput and StdOutput. Fixes bug #436291.

Mon Oct 13 14:39:52 CEST 2008 Paolo Molaro <lupus@ximian.com>

	* Process.cs: added icall and implementation of many memory-related
	query methods (bug #434473).

2008-09-20  Gert Driesen  <drieseng@users.sourceforge.net>

	* PerformanceCounter.cs:
	* Stopwatch.cs:
	* TraceImpl.cs: Fixed line endings.

2008-09-20  Gert Driesen  <drieseng@users.sourceforge.net>

	* DiagnosticsConfigurationHandler.cs (AddTraceAttributes): Avoid
	wrapping configuration errors thrown during initialization of
	TraceImpl. Fixed line endings.

2008-09-18  Paolo Molaro <lupus@ximian.com>

	* CounterSampleCalculator.cs: added more calculated types.
	* PerformanceCounter.cs: NextValue() works as well as RawValue.

2008-09-10  Bill Holmes  <billholmes54@gmail.com>

	* Process.cs : Update the fields of ProcessAsyncReader to 
	  match MonoSocketAsyncResult metadata/socket-io.h

	Contributed under MIT/X11 license.

2008-09-09  Jonathan Pryor  <jpryor@novell.com>

	* TraceImpl.cs:
	  - Remove the "lock-free" code, which (come to think of it) would be 
	    faulty in a multithreaded environment anyway because the "other"
	    threads won't wait (block) until initialization is complete...
	  - Add InitOnce() calls to all public properties, so that
	    `Debug.AutoFlush=true' will cause InitOnce() to be loaded, lest
	    a `Debug.AutoFlush=true; Debug.Listeners.Add(...)` sequence cause
	    .AutoFlush=true to be ignored as the InitOnce implied by .Add() 
	    will "overwrite" the .AutoFlush.
	  - Split up TraceListenerCollection creation from DefaultTraceListener 
	    addition, as TraceListenerCollection.Add() calls back into 
	    TraceImpl, so if these aren't separate we get an infinite loop
	    and never actually initialize anything.
	  - Fixes #424370.
	* TraceListenerCollection.cs: Add a TraceListenerCollection(bool)
	  constructor, which provides a way to NOT add the
	  DefaultTraceListener (needed by TraceImpl; see above).

2008-08-06  Sebastien Pouliot  <sebastien@ximian.com>

	* Debug_2_1.cs: Add missing [Conditional] attributes.

2008-08-02  Gert Driesen  <drieseng@users.sourceforge.net>

	* DelimitedTraceListener.cs: Changed accessibility of
	GetSupportedAttributes to protected internal.
	* DiagnosticsConfigurationHandler.cs: Use GetSupportedAttributes to
	allow custom attributes on tracelisteners. Fixes bug #413203.
	* TraceListener.cs: Changed accessibility of GetSupportedAttributes
	to protected internal. Removed MonoTODO on GetSupportedAttributes and
	Attributes. Fixed line endings.

2008-08-01  Paolo Molaro <lupus@ximian.com>

	* CounterCreationData.cs, PerformanceCounterCategory.cs: more
	checks and default type fix.

2008-07-28  Dick Porter  <dick@ximian.com>

	* Process.cs: When passing handle references around, it needs to
	be duplicated and freed so the OS doesn't close it.  Makes the
	testcase in 410743 work again now the underlying bug has been
	fixed.

2008-07-27  Zoltan Varga  <vargaz@gmail.com>

	* Process.cs (SetExitCallbackIfNeeded): Avoid a race condition by not
	checking for HashExited.

2008-06-27  Atsushi Enomoto  <atsushi@ximian.com>

	* DiagnosticsConfigurationHandler.cs: quick build fix (hopefully).

2008-06-26  Gert Driesen  <drieseng@users.sourceforge.net>

	* DiagnosticsConfigurationHandler.cs: On 2.0 profile, throw
	ConfigurationErrorsException when any attribute other than 'Name'
	is found when referencing a shared listener. Fixes bug #404054.
	Added support for the traceOutputOptions attribute on 2.0 profile.
	Fixes bug #403583. 

2008-06-21  Robert Jordan  <robertj@gmx.net>

	* Process.cs (Start_common): UserName may be null or empty.
	Fixes bug  #350543.

2008-06-19  Dick Porter  <dick@ximian.com>

	* Process.cs: Match the buffer sizes of StreamReader and
	MonoSyncFileStream for redirected stdout and stderr.  Fixes bug
	401225.

2008-05-02  Zoltan Varga  <vargaz@gmail.com>

	* TraceImpl.cs: Update the IndentLevel property of this class when Indent ()
	or Unindent () are called. Fixes #385666.

2008-03-26  Dick Porter  <dick@ximian.com>

	* FileVersionInfo.cs: Patch from Gert Driesen
	(gert.driesen@pandora.be) for bug 355717.

2008-03-19  Zoltan Varga  <vargaz@gmail.com>

	* Stopwatch.cs: Fix visibility of GetTimestamp () method.

Thu Feb 28 19:52:30 CET 2008 Paolo Molaro <lupus@ximian.com>

	* CounterCreationData.cs, PerformanceCounterCategory.cs,
	PerformanceCounter.cs: bugfixes, icalls for categories,
	more methods implemented.

Wed Feb 27 20:00:04 CET 2008 Paolo Molaro <lupus@ximian.com>

	* CounterSample.cs, CounterSampleCalculator.cs, PerformanceCounter.cs,
	PerformanceCounterCategory.cs, PerformanceCounterCategoryType.cs:
	beginning of the performance counter implementation.

Tue Feb 26 18:37:13 CET 2008 Paolo Molaro <lupus@ximian.com>

	* Stopwatch.cs: use an hires monotonic clock.

2008-01-23  Gert Driesen  <drieseng@users.sourceforge.net>

	* FileVersionInfo.cs (GetVersionInfo): Resolve filename to absolute
	path, and throw FileNotFoundException if it does not exist.

2007-12-22  Gert Driesen  <drieseng@users.sourceforge.net>

	* Process.cs: In PriorityClass setter, first check whether value is
	valid and remove LAMESPEC since the documentation has been corrected
	for .NET 3.5. Code formatting.

2007-12-19  Dick Porter  <dick@ximian.com>

	* Process.cs: Check that the process has been started before
	getting or setting the priority class.  Fixes bug 348415.

2007-12-10  Miguel de Icaza  <miguel@novell.com>

	* DefaultTraceListener.cs: By default set the AssertUiEnabled to
	false, as this is what we had previously and some broken
	applications (Tomboy) are too trigger happy with Debug.Assert. 

	Also, we now load the Windows.Forms code on demand, instead of
	preloading it on the static ctor to reduce memory usage.

2007-12-08  Gert Driesen  <drieseng@users.sourceforge.net>

	* LocalFileEventLog.cs: To allow entry to be fully written before
	attempting to read it, added small sleep period in the Created event
	of the FSW.

2007-12-04  Gert Driesen  <drieseng@users.sourceforge.net>

	* Process.cs: Modified StartInfo to throw ArgumentNullException when
	value is set to null, instead of ArgumentException. Remove check if
	file name is rooted and exists when UseShellExecute is false, and let
	runtime handle this. Fixes bug #3455655. When a process cannot be
	started, do not access ProcessStartInfo.EnvironmentVariables since that
	would not allow us to re-use the instance when changing
	UseShellExecute. Added argument check in Start (ProcessStartInfo).
	Code formatting.

2007-11-16  Jb Evain  <jbevain@novell.com>

	* Debug_2_1.cs: simply write debug messages to the
	console.

2007-11-15  Dick Porter  <dick@ximian.com>

	* Process.cs: Pass the process handle to GetModules_internal();

2007-11-13  Atsushi Enomoto  <atsushi@ximian.com>

	* Process.cs : ... and it exposed some missing attributes.

2007-11-13  Atsushi Enomoto  <atsushi@ximian.com>

	* Process.cs : oops, SessionId was int.

2007-11-13  Atsushi Enomoto  <atsushi@ximian.com>

	* Process.cs : added missing SessionId (NIE).

2007-10-30  Robert Jordan  <robertj@gmx.net>

	* Process.cs: Wrap the redirected streams with a stream
	that provides real async Begin/Read|Write operations.
	Fixes bug #319829.

2007-09-25  Miguel de Icaza  <miguel@novell.com>

	* Process.cs: Return an empty collection to prevent crashes;
	Fixes #319946

Tue Sep 25 18:03:37 CEST 2007 Paolo Molaro <lupus@ximian.com>

	* Process.cs: eliminate the console encoding logic which was
	duplicated from System.Console and just use Console.Out.Encoding
	(bug #328162).

2007-09-21  Gert Driesen  <drieseng@users.sourceforge.net>

	* DiagnosticsConfigurationHandler.cs: Rename ValidateIntegralValue
	to GetSwitchValue. On 2.0 profile, leave the type conversion to
	Switch implementations. Minor corrections to exception messages to
	match MS.
	* Switch.cs: Avoid unnecessary inits. On 2.0 profile, catch and
	rethrow exceptions in setter for Value. Do not hide exceptions thrown
	in GetConfigFileSetting. Only set value from config file if switch is
	actually defined.
	* SourceSwitch.cs: Use SwitchSetting for getting/storing value instead
	of new field. In OnValueChanged, parse enum value.
	* TraceSwitch.cs: If SwitchSetting is changed to value > 4, then set
	it to Verbose. In OnValueChanged, parse value case-insensitively, and
	assign it to SwitchSetting (to allow other integral values).

2007-09-05  Atsushi Enomoto  <atsushi@ximian.com>

	* EventLog.cs : added cosmetic 2.0 attributes on newly added members.

2007-09-05  Atsushi Enomoto  <atsushi@ximian.com>

	* EventLog.cs, EventLogImpl.cs, LocalFileEventLog.cs, NullEventLog.cs,
	  Win32EventLog.cs : added missing members, will be left unsupported
	  in non-Win32 impl and left unimplemented in Win32.
	* CounterCreationDataCollection.cs : in 2.0 OnValidate() is overriden
	  instad of OnInsert().
	* Process.cs : removed StandardErrorEncoding and
	  StandardOutputEncoding. They do not exist anymore.

2007-09-03  Atsushi Enomoto  <atsushi@ximian.com>

	* ProcessStartInfo.cs : Implemented Verbs. It is done.

2007-09-03  Atsushi Enomoto  <atsushi@ximian.com>

	* Process.cs, ProcessStartInfo.cs : user info support (on windows).

2007-08-23  Robert Jordan  <robertj@gmx.net>

	* Process.cs: implement PriorityClass. Fixes #81756.

Mon Aug 20 12:41:09 CEST 2007 Paolo Molaro <lupus@ximian.com>

	* Process.cs: implemented icall for system/user times.

2007-08-14  Gert Driesen  <drieseng@users.sourceforge.net>

	* EventLog.cs: Do not allow all whitespace machine name. Do nothing
	when setting the same value for EnableRaisingEvents, and only modify
	value of field when enable/disable succeeded. Treats log name case
	insensitively on all platforms, and perform reset when the log name
	is changed. Validate new machine name in property, and treat it
	case-insensitively. Perform reset when source is modified, and log
	name was not explicitly set. When EventLog is closed, also disable
	event watcher.
	* LocalEventLog.cs: In Close, clean-up the FileSystemWatcher. Add
	locking to Created eventhandler to avoid duplicate notifications.
	* Win32EventLog.cs: Cache handle for reading from eventlog. In Close,
	close the read handle. Implement support for watching win32 eventlog.
	Fixes bug #82436.

2007-08-08  Gonzalo Paniagua Javier <gonzalo.mono@gmail.com>

	* Process.cs: added StandardOutputEncoding and StandardErrorEncoding
	properties. Bug #82262 fixed.

2007-08-06  Atsushi Enomoto  <atsushi@ximian.com>

	* Process.cs, ProcessStartInfo.cs : added StandardOutputEncoding
	  and StandardErrorEncoding.

2007-08-06  Atsushi Enomoto  <atsushi@ximian.com>

	* PerformanceCounterCategory.cs PerformanceCounter.cs :
	  added missing 2.0 stuff (unimplemented, where things are anyways
	  unimplemented in 1.x layer).

2007-08-06  Atsushi Enomoto  <atsushi@ximian.com>

	* PerformanceCounterInstanceLifetime.cs
	  PerformanceCounterCategoryType.cs : new.
	* ICollectData.cs ProcessStartInfo.cs
	  InstanceDataCollectionCollection.cs PerformanceCounter.cs
	  InstanceDataCollection.cs Process.cs :
	  cosmetic attributes cleanup.

2007-08-03  Jb Evain  <jbevain@novell.com>

	* FileVersionInfo.cs: force the use of the params
	AppendFormat method of StringBuilder as it is the only
	one accessible in 2.1 and in the previous versions.

2007-08-03  Jb Evain  <jbevain@novell.com>

	* FileVersionInfo.cs: remove CAS checks for 2.1.

2007-08-03  Jb Evain  <jbevain@novell.com>

	* Process.cs: disable StartExistCallbackIfNeeded in 2.1.

2007-08-03  Jb Evain  <jbevain@novell.com>

	* ProcessThreadCollection.cs
	  ProcessModuleCollection.cs: use our own collection base
	  for the 2.1 profile, as ReadOnlyCollectionBase does not exist
	  in 2.1, and they are internalized by the linker.

2007-08-02  Atsushi Enomoto  <atsushi@ximian.com>

	* EventLogTraceListener.cs : fixed wrong 2.0 dependency in 1.x.

2007-08-02  Atsushi Enomoto  <atsushi@ximian.com>

	* EventLogTraceListener.cs : implemented.

2007-08-02  Atsushi Enomoto  <atsushi@ximian.com>

	* EventLogImpl.cs
	  EventLog.cs
	  LocalFileEventLog.cs : Implemented EntryWritten event support.
	* Win32EventLog.cs, NullEventLog.cs : they need stub overrides.
	* EventLogEntry.cs : [MonitoringDescription].
	* DiagnosticsConfigurationHandler.cs : [Obsolete]

2007-08-01  Atsushi Enomoto  <atsushi@ximian.com>

	* DefaultTraceListener.cs : implemented AssertUiEnabled using MWF.

2007-08-01  Atsushi Enomoto  <atsushi@ximian.com>

	* CounterSample.cs : implemented missing 2.0 equality stuff.
	* CounterSampleCalculator.cs : static in 2.0.

2007-07-24 Gonzalo Paniagua Javier <gonzalo.mono@gmail.com>

	* Process.cs: use the default encoding or the windows input/output
	encodings for the process input/output/error streams. Bug #80838 fixed.

2007-07-14 Gonzalo Paniagua Javier <gonzalo.mono@gmail.com>

	* Process.cs: don't send empty lines that are not in the input. Fixes
	bug #79529.

2007-07-11  Ankit Jain  <jankit@novell.com>

	* ProcessStartInfo.cs (WorkingDirectory.set): Don't set
	working_directory to null.

2007-05-18  Atsushi Enomoto  <atsushi@ximian.com>

	* TraceSourceInfo.cs : new class for storing configuration data.
	* TraceSource.cs : TraceEventCache arguments should be null (they are
	  nullable). Use TraceSourceInfo above.
	* DiagnosticsConfigurationHandler.cs : removed hack to store listeners
	  in named sources, not traceimpl. Create TraceSource objects from
	  configuration data.

2007-05-18  Marek Safar  <marek.safar@gmail.com>

	* DiagnosticsConfigurationHandler.cs: Fixed 1.1 build.

2007-05-18  Atsushi Enomoto  <atsushi@ximian.com>

	* XmlWriterTraceListener.cs : open file in shared r/w mode.
	* DiagnosticsConfigurationHandler.cs : process <sharedListeners>
	  elements first, so that named listeners work fine.
	* EventLogTraceListener.cs : added 2.0 stubs.
	* CorrelationManager.cs : removed todo.

2007-05-18  Atsushi Enomoto  <atsushi@ximian.com>

	* TraceListener.cs : in TraceTransfer(), use TraceEvent() (some
	  derived classes depend on this change).
	* DelimitedListTraceListener.cs : implemented.

2007-05-18  Atsushi Enomoto  <atsushi@ximian.com>

	* EventLogPermissionAccess.cs ProcessPriorityClass.cs
	  ProcessWindowStyle.cs ThreadWaitReason.cs TraceImpl.cs
	  Trace.cs ThreadPriorityLevel.cs EventLogEntryType.cs
	  PerformanceCounterPermissionAccess.cs PerformanceCounterType.cs
	  TraceListener.cs ThreadState.cs : cosmetic API fixes.
	* SwitchAttribute.cs : implemented GetAll().

2007-05-17  Atsushi Enomoto  <atsushi@ximian.com>

	* TraceOptions.cs : new enum.
	* TraceListener.cs : support TraceOutputOptions. Fixed missing
	  NET_2_0 condition in TARGET_JVM section.
	* TraceSwitch.cs, BooleanSwitch.cs :
	  Added missing constructors and OnValueChanged().
	* Trace.cs, TraceImpl.cs :
	  Added CorrelationManager and UseGlobalLock.
	* TraceEventCache.cs : initialize property values at construction.
	* Switch.cs : added XmlIgnore on Attributes.

2007-05-15 Adar Wesley <adarw@mainsoft.com>

	* Trace.cs: added missing method Refresh.

2007-05-14  Atsushi Enomoto  <atsushi@ximian.com>

	* EventTypeFilter.cs
	  TraceFilter.cs
	  SourceFilter.cs
	  SwitchLevelAttribute.cs
	  DelimitedListTraceListener.cs
	  SwitchAttribute.cs : new files in 2.0.
	* DiagnosticsConfigurationHandler.cs : partial support for named
	  shared listeners.
	* XmlWriterTraceListener.cs : cosmetic corcompare fixes. Added
	  missing todos.
	* TraceListener.cs : added missing 2.0 stuff. Implemented Filter.
	* DefaultTraceListener.cs : trivial ComVisible fix.

2007-05-10  Atsushi Enomoto  <atsushi@ximian.com>

	* TextWriterTraceListener.cs : open log file in readwrite share mode.
	  This fixes bug #81296.

2007-05-08 Igor Zelmanovich <igorz@mainsoft.com>

	* TraceImpl.cs:
	* TraceListener.cs:
	for TARGET_JVM used Thread Local Storage istead 
	Thread-Relative Static Fields 

2007-05-02  Jonathan Chambers  <joncham@gmail.com>

	* Stopwatch.cs : Implement high performance stopwatch on windows.

2007-04-19  Atsushi Enomoto  <atsushi@ximian.com>

	* XmlWriterTraceListener.cs : new file, implementated.
	* TraceListener.cs : implemented 2.0 members.

2007-03-04  Vladimir Krasnov  <vlaimdirk@mainsoft.com>

	* DiagnosticsConfigurationHandler.cs: removed configuration init in
	TARGET_JVM since not supported

2007-02-02  Gert Driesen  <drieseng@users.sourceforge.net>

	* EventLogImpl.cs: When no log name is specified, return zero-length
	string for LogDisplayName.

2007-01-28 Ilya Kharmatsky <ilyak -at- mainsoft.com>

	* TraceEventCache.jvm.cs: added as a stub class.

Tue Jan 23 17:19:13 CET 2007 Paolo Molaro <lupus@ximian.com>

	* ProcessStartInfo.cs: put the fields in the order expected
	by the runtime code.

2007-01-18  Atsushi Enomoto  <atsushi@ximian.com>

	* Switch.cs : added missing .ctor(), Attributes, Value, 
	  GetSupportedAttributes() and OnValueChanged().
	* DiagnosticsConfigurationHandler.cs : added some hacky handler for
	  new "sources" element. Don't wrap another ConfigurationException.
	* TraceListener.cs : added missing trace methods.
	* TraceSource.cs, SourceLevels.cs, CorrelationManager.cs,
	  TraceEventCache.cs, TraceEventType.cs, SourceSwitch.cs:
	  added missing 2.0 stuff, mostly just stubs.

2007-01-12  Miguel de Icaza  <miguel@novell.com>

	* Trace.cs: Add a number of 2.0 overloads.

2007-01-02  Gert Driesen  <drieseng@users.sourceforge.net>

	* Process.cs: Allow GetProcesses and GetProcessById overloads with 
	machine name to work for local machine.

2006-12-29  Robert Jordan  <robertj@gmx.net>

	* TraceImpl.cs (Assert): Include line numbers in the stack trace
	emitted by Assert (). Fixes bug #80400.

Thu Dec 14 20:24:09 CET 2006 Paolo Molaro <lupus@ximian.com>

	* Process.cs: if a process object is restarted, close the
	previous process handle (bug #80143).

2006-11-27 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Process.cs: the Process returned by the static Start method never had
	the right ProcessStartInfo. Fixes bug #80019.

2006-10-13  Atsushi Enomoto  <atsushi@ximian.com>

	* DiagnosticsConfigurationHandler.cs : be more skeptic on
	  broken configuration file.

2006-09-28 Andrew Skiba <andrews@mainsoft.com>

	* DefaultTraceListener.cs: TARGET_JVM

2006-09-11 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Process.cs: fix operation number to be 8. The other one was working
	because the default is to wait for input on the file descriptor.

2006-09-05  Gert Driesen  <drieseng@users.sourceforge.net>

	* Win32EventLog.cs: Removed workarounds for bug #79152 and bug #79117
	now that these have been fixed. Release unmanaged memory that was
	allocated for replacement strings.

2006-08-27  Gert Driesen  <drieseng@users.sourceforge.net>

	* NullEventLog.cs: Added dummy GetLogNames implementation.
	* EventLogImpl.cs: Moved GetEventLogs implementation to base class.
	Added abstract GetLogNames method. Added ValidateCustomerLogName
	method which should be called by eventlog providers when creating a
	new log to ensure the significant part of the log name is unique, does
	not match any of the special log names and does not match an exist event
	source.
	* Win32EventLog.cs: Validate customer log name when creating new log.
	Moved GetEventLogs implementation to base class. Added GetLogNames
	method.
	* LocalFileEventLog.cs: Merged CreateLogStore into CreateEventSource.
	Validate customer log name when creating new log. Moved GetEventLogs
	implementation to base class. Added GetLogNames method.

2006-08-26  Gert Driesen  <drieseng@users.sourceforge.net>

	* Win32EventLog.cs: Fixed error messages. Use RegisterEventSource
	pinvoke when opening eventlog for writing entries.

2006-08-26  Gert Driesen  <drieseng@users.sourceforge.net>

	* Win32EventLog.cs: Added and documented workarounds for bug #79117
	and bug #79152.

2006-08-25  Gert Driesen  <drieseng@users.sourceforge.net>

	* LocalFileEventLog.cs: When event log store does not exist, then we
	do not need to perform a case-insensitive lookup of the log name.

2006-08-20  Gert Driesen  <drieseng@users.sourceforge.net>

	* EventLog.cs: Removed namespace import.
	* EventInstance.cs: Added range checks and check whether specified
	entry type is defined.

2006-08-20  Gert Driesen  <drieseng@users.sourceforge.net>

	* EventLogEntry.cs: Added InstanceId property (2.0 only). Moved
	Obsolete attribute to correct property.
	* EventSourceCreationData.cs: Updated copyright. For internal ctor,
	set log name to "Application" if value is null or zero-length string.
	* EventLogImpl.cs: EventImpl now acts as base class for event log 
	implemenations.
	* NullEventLog.cs: Modified to implement new abstract methods of base
	class. Removed factory class.
	* EventLog.cs: EventLog implementation that delegates just about 
	everything to individual eventlog providers. To specify the event log
	implementation to use, the MONO_EVENTLOG_TYPE environment variable can
	be used. Possible values are:
	- win32	: read/write entries using the native win32 eventlog
	- local[:path] : read/write entries as files to a local directory
	- null : silently ignore all entries
	The default is "null" on unix (and versions of Windows before NT,
	meaning Windows 98, ...), and "win32" on Windows NT (and higher).
	When "the local" implementation is used, the directory in which to 
	store the event logs, event sources and entries can be specified as 
	part of MONO_EVENTLOG_TYPE environment variable using the syntax 
	"local:<path>" (eg. local:/home/myuser/mono/eventlog).
	* LocalFileEventLog.cs: Event log implementation which uses a local
	file store. The directory to use for persistence can be specified
	as part of the MONO_EVENTLOG_TYPE environment variable (see above).
	If that directory is not explicitly set, then the following directory
	will be used for storing eventlog entries:
	- windows	: %APPDATA%\mono\eventlog
	- unix		: /var/lib/mono/eventlog
	On unix, the directory permission for individual eventlog log 
	directories will be set to 777 (with +t bit) allowing everyone to
	read and write eventlog entries while only allowing entries to be
	deleted by the user(s) that created them.
	Format of log files was modified to allow it contain all necessary
	information for an event log entry.
	* Win32EventLog.cs: Event log implementation for Windows NT and 
	higher which uses the Win32 native event log for reading/writing
	eventlog entries, and which uses the registry to store event log and
	event source registration information.
	* EventLogEntryCollection.cs: Delegate implementation to event log
	implementation. Use lazy init for enumerating entries. Cache current
	item in 2.0 profile.

2006-08-14  Atsushi Enomoto  <atsushi@ximian.com>

	* LocalFileEventLog.cs : change lengthy environment variable name.
	  MONO_LOCAL_EVENTLOG_PATH -> MONO_EVENTLOG_PATH.

2006-08-14  Atsushi Enomoto  <atsushi@ximian.com>

	* EventLogImpl.cs, EventLogEntryCollection.cs, EventLog.cs :
	  some rework to support actual event log implementations.
	* NullEventLog.cs, LocalFileEventLog.cs :
	  new files. The former (default) implementation does nothing for
	  any event log features. The latter implements local file based
	  event logs.

2006-08-14  Atsushi Enomoto  <atsushi@ximian.com>

	* UnixEventLog.cs, EventLogEntry.cs, EventSourceCreationData.cs,
	  EventLogImpl.cs, Win32EventLog.cs, EventLogEntryCollection.cs,
	  EventLog.cs:
	  Reverted previous two changes that does not work at all.

2006-08-11  Gert Driesen  <drieseng@users.sourceforge.net>

	* EventLog.cs: For now, Use null implementation.

2006-08-11  Gert Driesen  <drieseng@users.sourceforge.net>

	* EventLogEntry.cs: Added InstanceId property (2.0 only). Moved
	Obsolete attribute to correct property.
	* EventSourceCreationData.cs: Updated copyright. For internal ctor,
	set log name to "Application" if value is null or zero-length string.
	* EventLogImpl.cs: EventImpl now acts as base class for event log 
	implemenations. Added NullEventLog implementation, which is not used
	at the moment.
	* EventLog.cs: EventLog implementation that uses registry for
	keeping track of logs and sources to match .NET (and Windows). When
	running on Windows NT (and higher), event entries are written to
	the native win32 event log.  Reading event entries is not yet working
	for Windows. On linux, we use a local file store (based on patch by 
	Atsushi).
	* UnixEventLog.cs: Event log implementation for linux which uses a
	local file store.
	* Win32EventLog.cs: Event log implementation for Windows NT and 
	higher which uses the Win32 native event log.
	* EventLogEntryCollection.cs: Delegate implementation to event log
	implemenation. Use lazy init for enumerating entries.

2006-08-09 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Process.cs: reset the 'start' time if we wait for stdout reading to
	be completed.

2006-08-09 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Process.cs: add support for 2.0 asynchronous reads on stdout and
	stderr.

2006-08-09  Gert Driesen  <drieseng@users.sourceforge.net>

	* EventSourceCreationData.cs: Marked ctor internal, and removed ctor.
	Throw ArgumentOutOfRangeException if negative value for CategoryCount
	is set.

2006-08-09  Gert Driesen  <drieseng@users.sourceforge.net>

	* EventInstance.cs: Added 2.0 class.
	* EventSourceCreationData.cs: Added 2.0 class.
	* OverflowAction.cs: Added 2.0 enum.

2006-07-31  Sebastien Pouliot  <sebastien@ximian.com>

	* EventLogEntry.cs: Add a linkdemand for unrestricted on class.
	* EventLogTraceListener.cs: Add a linkdemand for unrestricted on class
	* FileVersionInfo.cs: Add a linkdemand for unrestricted on class. Add
	an imperative demand for FileIOPermission.Read on GetVersionInfo 
	method. Change ToString method to use a StringBuilder.
	* PerformanceCounterCategory.cs: Add a linkdemand for unrestricted on
	class.
	* PerformanceCounterManager.cs: Add a linkdemand for unrestricted on 
	class. Add [Obsolete] for NET_2_0 profile.
	* Process.cs: Add a linkdemand and an inheritancedemand for 
	unrestricted on class.
	* ProcessStartInfo.cs: Add a linkdemand for unrestricted on class.

2006-07-16  Andrew Skiba <andrews@mainsoft.com>

	* Process.cs: throw FileNotFoundException earlier; give more
	diagnostics.

2006-05-16  Dick Porter  <dick@ximian.com>

	* Process.cs: Dispose the handle from a destructor too

2006-04-04  Atsushi Enomoto  <atsushi@ximian.com>

	* Stopwatch.cs:
	  Zoltan was quicker to add it, here I put my implementation ;-)
	* Process.cs :
	  Added some missing long members (not implemented anyways).
	* DataReceivedEventHandler.cs DataReceivedEventArgs.cs :
	  added new 2.0 types.

2006-04-01  Zoltan Varga  <vargaz@gmail.com>

	* Stopwatch.cs: New file.

2006-03-31  Zoltan Varga  <vargaz@gmail.com>

	* Debug.cs: Add net 2.0 Print methods.

2006-03-03  Dick Porter  <dick@ximian.com>

	* Process.cs: Close redirected pipes on errors.  Fixes bug 77514.

2006-01-12  Ben Maurer  <bmaurer@andrew.cmu.edu>

	* ConsoleTraceListener.cs: New 2.0 class

2005-11-17  Dick Porter  <dick@ximian.com>

	* Process.cs: Split Start_common into Start_shell and
	Start_noshell, which call ShellExecuteEx and CreateProcess
	respectively.  Fixes bug 76670.

2005-09-21 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Process.cs: deal with the fact that someone can enable raising events
	and/or registed a Exited delegate before and *after* Start is called for
	the process. Only queue the exit callback in the threadpool when it's
	possible and requested. Fixes bug #76129.

2005-08-09  Gert Driesen <drieseng@users.sourceforge.net>

	* EventLog.cs: Fixed Designer attribute to match MS.NET.
	* ICollectData.cs: Added marshalling attribute to match MS.NET.
	* PerformanceCounter.cs: Fixed Designer attribute to match MS.NET.
	* Process.cs: Fixed Designer attribute to match MS.NET, modified
	* ProcessModule.cs: Fixed Designer attribute to match MS.NET.
	* ProcessThread.cs: Fixed Designer attribute to match MS.NET.
	DesignerSerializationVisibility on StartInfo to match MS.NET, changed
	Category attribute on Exited event to match MS.NET.

2005-06-09  Gert Driesen <drieseng@users.sourceforge.net>

	* TraceImpl.cs: Adjust internal indentlevel and indentsize before 
	passing on to listeners. Fixes some test failures.

2005-06-07 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* DefaultTraceListener.cs: s/MONO_TRACE/MONO_TRACE_LISTENER/. The
	runtime uses MONO_TRACE too...

2005-05-31  Sebastien Pouliot  <sebastien@ximian.com>

	* PerformanceCounterPermissionEntry.cs: Added more 2.0 validations for
	machine names and PerformanceCounterPermissionAccess.

2005-02-22 Jonathan Pryor  <jonpryor@vt.edu>

	* TraceImpl.cs: More Thread-safety fixes.  I have to lock on
	  Listeners.SyncRoot as we're traversing the collection and can't let the
	  collection change from underneath us while we're iterating over it
	  (alternately, we could clone the collection and iterate over the clone
	  without having locking issues -- assuming we had a lock-free clone -- 
	  but this would kill the GC).  Fixes 69964.  Only define lock_ if we're 
	  using the lock-free initialization routine; it's not used otherwise.

2005-01-18 Jonathan Pryor  <jonpryor@vt.edu>

	* DiagnosticsConfigurationHandler.cs (DiagnosticsConfiguration): 
	  Use a lock-free algorithm for creating the settings information.
	* TraceImpl.cs (InitOnce): Use a lock-free algorithm for creating the
	  listeners collection and initializing the world.

2005-01-18 Jonathan Pryor  <jonpryor@vt.edu>

	* DiagnosticsConfigurationHandler.cs (DiagnosticsConfiguration): Don't 
	  read the .config file from the static ctor (again), as if it fails we'll 
	  get a TypeLoadException -- bad!  Instead, lazy-read the .config file.
	* DiagnosticsConfigurationHandler.cs (DiagnosticsConfigurationHandler): 
	  Require that the /switch/add/@value attribute contains only numeric values.
	* TraceImpl.cs: Don't initialize everything in the static ctor, as if it
	  fails (due to an invalid .confg file) we get a TypeLoadException, while
	  .NET generates a ConfigurationException.  Instead, initialize everything
	  the first time the Listeners property is accessed, which allows the static
	  ctor to run without chance of failure, avoiding the TypeLoadException.
	* TraceListenerCollection.cs: This should be thread-safe, as it's accessible
	  from a static member of TraceImpl (available through the public Debug and 
	  Trace classes).
	* Switch.cs: Leave the original switch value alone.  If it isn't valid 
	  (i.e. numeric), the DiagnosticsConfigurationHandler will catch it.

2005-01-17 Jonathan Pryor  <jonpryor@vt.edu>

	* DiagnosticsConfigurationHandler.cs: The /switch/add/@value attribute 
	  isn't optional under .NET 1.1, so make sure it exists.

2005-01-13 Jonathan Pryor  <jonpryor@vt.edu>

	* DiagnosticsConfigurationHandler.cs: Make DiagnosticsConfiguration.Settings
	  thread-safe (double-checked locking isn't thread safe on .NET without
	  using a volatile variable, and setting the variable in the static
	  constructor is easier anyway).
	* Switch.cs (GetConfigFileSetting): If the setting is non-numeric, set the
	  attribute value to the string "0".  This is apparently what .NET 1.1 does,
	  and allows the SwitchTest NUnit test to work w/o failures.

2004-12-06 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Process.cs: always pass the same arguments to the runtime.

2004-09-11  Sebastien Pouliot  <sebastien@ximian.com>

	* EventLogPermission.cs: Completed implementation.
	* EventLogPermissionAccess.cs: Fixed enum values.
	* EventLogPermissionEntry.cs: Added validation for machine names.
	* EventLogPermissionEntryCollection.cs: Added synchronization
	of entries with the base permission class.
	* PerformanceCounterPermission.cs: Completed implementation.
	* PerformanceCounterPermissionAccess.cs: Fixed enum values.
	* PerformanceCounterPermissionEntry.cs: Added validations for machine
	and category names.
	* PerformanceCounterPermissionEntryCollection.cs: Added synchronization
	of entries with the base permission class.

2004-09-10  Sebastien Pouliot  <sebastien@ximian.com>

	* EventLogPermission.cs: Fixed initialization (TagNames and
	PermissionAccessType).
	* EventLogPermissionAccess.cs: Added new enums for NET_2_0 and added 
	[Obsolete] to some existing elements.
	* EventLogPermissionAttribute.cs: Added missing validation to property
	MachineName. Fixed changes for NET_2_0.
	* PerformanceCounterPermission.cs: Fixed initialization (TagNames and
	PermissionAccessType).
	* PerformanceCounterPermissionAccess.cs: Added new enums for NET_2_0
	and added [Obsolete] to some existing elements.
	* PerformanceCounterPermissionAttribute.cs: Added missing validations
	to properties (Path, MachineName). Fixed changes for NET_2_0.

2004-09-07  Dick Porter  <dick@ximian.com>

	* Process.cs: Throw documented exceptions when getting stdin,
	stdout or stderr and they haven't been redirected.  Check that
	CreatePipe didn't fail, throw exceptions if it did.  Close
	redirected streams when the process is disposed, rather than rely
	on the GC disposing them later.  Makes timeline much happier,
	because it could run out of file descriptors between GC
	collections.

2004-09-06  Dick Porter  <dick@ximian.com>

	* Process.cs: Make Dispose() actually dispose things.

2004-06-24  Atsushi Enomoto  <atsushi@ximian.com>

	* Process.cs : quick fix for UseShellExecute=false on windows. See
	  the code comment.

2004-06-17  Lluis Sanchez Gual  <lluis@ximian.com>

	* Process.cs: Added missing check in HasExited property.

2004-05-20  Gert Driesen (drieseng@users.sourceforge.net)

	* EventLogPermissionAttribute.cs:
	* PerformanceCounterPermissionAttribute.cs: adjust AllowMultiple
	and Inherited to match .NET

2004-05-19  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Process.cs: separate the command and the arguments when calling
	Start_internal.

2004-05-19  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Process.cs: redirecting I/O is not permitted if UseShellExecute is
	true. Also throw if FileName is null.

2004-04-06  Lluis Sanchez Gual  <lluis@ximian.com>

	* DiagnosticsConfigurationHandler.cs: If initializeData is provided,
	use the constructor that only takes one string as parameter to
	construct the listener. The name is set using the Name property, not the
	constructor.
	
	* TextWriterTraceListener.cs: In Write*, do nothing if no writer was 
	provided.

2004-03-25  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Process.cs: use the ISynchronizeInvoke object to invoke the event.
	Implemented Close, CloseMainWindow and Kill.

2004-03-23 Ben Maurer  <bmaurer@users.sourceforge.net>

	* Switch.cs: Don't throw when there is no switches section.

2004-03-22  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Process.cs: support EnableRaisingEvents + Exited event.

2004-03-15  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Process.cs: patch by Gert Driesen that fixes WaitForExit when the
	timeout is int.MaxValue.

2004-03-15  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Process.cs: added environment variables setting support and also
	send useShellExecute to the runtime.

	* ProcessStartInfo.cs: support EnvironmentVariables.  MS uses
	StringDictionary, which turns keys into lowercase. We don't do that.

2004-02-22  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Process.cs: ExitCode and ExitTime check that the process is finished.

2003-12-10  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Process.cs: if there's an error when starting the process, the 'pid'
	field contains the GetLastError code. Use that for the Win32Exception.

2003-12-06  Martin Baulig  <martin@ximian.com>

	* DefaultTraceListener: Don't use `where' in variable names.

2003-11-13  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* ICollectData.cs: Fixed signature

2003-11-12  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* ICollectData.cs: Added missing attribute

2003-07-27  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* SRDescriptionAttribute.cs: Moved to System directory

2003-07-21  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* EventLog.cs: Implementation handling
	* EventLogImpl.cs: Added, contains an platform independent empty implementation
	for EventLog

2003-07-18  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* AlphabeticalEnumConverter.cs: Added
	* EventLogEntry.cs: Implemented
	* EventLogPermissionEntryCollection.cs: Fixed signature and implementation of indexer
	* EventLogTraceListener.cs: Fixed signature
	* PerformanceCounter.cs: Added missing attribute
	* PerformanceCounterType.cs: Added missing attribute
	* SRDescriptionAttribute.cs: Added and implemented

2003-07-17  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* CounterCreationData.cs:
	* EventLog.cs:
	* EventLogEntry.cs:
	* PerformanceCounter.cs:
	* Process.cs:
	* ProcessModule.cs:
	* ProcessStartInfo.cs:
	* ProcessThread.cs: Reworked attributes based on the new Consts scheme

2003-07-14  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* PerformanceCounterCategory.cs: Fixed signatures

2003-07-13  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* PerformanceCounter.cs: Implemented or implementation added

2003-07-13  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* DiagnosticsConfigurationHandler.cs: Removed a never used variable
	* EventLog.cs: Small update to prevent a warning
	* EventLogPermission.cs: Implemented or implementation added
	* EventLogPermissionAttribute.cs: Implemented or implementation added
	* EventLogPermissionEntry.cs: Implemented or implementation added
	* EventLogPermissionEntryCollection.cs: Implemented or implementation added
	* EventLogTraceListener.cs: Implemented or implementation added
	* PerformanceCounterManager.cs: Implemented or implementation added
	* PerformanceCounterInstaller.cs: Made internal
	* PerformanceCounterCategory.cs: Implemented few members
	* PerformanceCounterPermission.cs: Implemented or implementation added
	* PerformanceCounterPermissionAttribute.cs: Implemented or implementation added
	* PerformanceCounterPermissionEntry.cs: Implemented or implementation added
	* PerformanceCounterPermissionEntryCollection.cs: Implemented or implementation added
	
2003-07-07  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* EventLog.cs: Removed unneccesary attribute according to corecompare
	* EventLogEntry.cs: Removed unneccesary attribute according to corecompare
	* Process.cs: Removed unneccesary attributes according to corecompare, added attribute
	* ProcessModule.cs: Removed unneccesary attribute according to corecompare
	* ProcessStartInfo.cs: Removed unneccesary attribute according to corecompare
	* ProcessThread.cs: Removed unneccesary attribute according to corecompare, fixed signature

2003-07-05  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* InstanceDataCollectionCollection.cs: Corrected wrong signature
	* EventLog.cs: Missing attributes added, redirected some class members
	* EventLogEntry.cs: Missing attributes added
	* EventLogInstaller.cs: Made internal
	
2003-07-02  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* CounterCreationData.cs: Added missing attributes
	* CounterSample.cs: Implemented missing rest, fixed signature
	* CounterSampleCalculator.cs: Added private constructor, redirected function
	* Process.cs: Added attributes, added event mechanism
	* ProcessModule.cs: Added missing attributes
	* ProcessModuleCollection.cs: Redone using the already inherited-from ArrayList. Simplifies this a LOT
	* ProcessStartInfo.cs: Added missing attributes, moved internal fields to the begining of the file, restyling
	* ProcessThread.cs: Added missing attributes, added pseudo constructor
	* ProcessThreadCollection.cs: Implemented
	* PerformanceCounterPermission.cs: Fixed typo in class name
	* PerformanceCounterPermissionAccess.cs: Added attributes, fixed wrong member
	
2003-03-19  Dick Porter  <dick@ximian.com>

	* Process.cs: Implement HasExited, fixes bug 39267

2003-03-13  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Process.cs: throw an exception when the executable cannot be found.

2002-12-20  Jonathan Pryor <jonpryor@vt.edu>
	* DiagnosticsConfigurationHandler.cs: 
	  - Don't assume that optional attributes are always present
	  - <assert/> can't have any child nodes
	  - Change in semantics: if the attribute isn't present,
	    GetAttribute() returns null, not "".  This allows us to
	    differentiate between an attribute not being present and an
	    attribute with an empty value.
	  - Translate exceptions if a TraceListener type is invalid

2002-12-19  Jonathan Pryor <jonpryor@vt.edu>
	* TraceListenerCollection.cs: IndentLevel and IndentSize shouldn't be 
	  hardcoded; they should be set to whatever TraceImpl is using (which
	  in turn may have been set by the .config file, so we should get the
	  user-specified values in added listeners).
	* TraceListener.cs: Make sure that indents are initially written.  This 
	  allows code that uses Trace.Indent() before a Trace.WriteLine() to be 
	  indented properly.
	* TraceImpl.cs: provide a static constructor to explicitly specify the
	  ordering of initialization, in particular the ordering of
	  TraceImpl.Listeners and the reading of the .config file (by
	  accessing DiagnosticsConfiguration.Settings).  This (hopefully)
	  ensures that the Listeners collection is initialized before the
	  .config file is read in, as the DiagnosticsConfigurationHandler will
	  directly modify the listeners collection.
	  The DiagnosticsConfigurationHandler assumes this so that it can
	  <add/> and <remove/> trace listeners and set the logfile for the
	  DefaultTraceListener.


2002-12-18  Jonathan Pryor <jonpryor@vt.edu>
	* BooleanSwitch.cs: Complete re-write.  It works now.
	* DefaultTraceListener.cs:
	  - Use `const' strings, so I don't worry about copy/paste errors
	  - Give `AssertUiEnabled' an actual backing member
	* DiagnosticsConfigurationHandler.cs: To avoid race conditions, let the
	  configuration handler set .config-specified properties on
	  DefaultTraceListener (AssertUiEnabled, LogFileName) and TraceImpl
	  (AutoFlush, IndentSize).
	* Switch.cs: Near complete re-write.  Actually works, and is (should be)
	  comformant with .NET behavior.  Changed member names because they
	  were confusing me.  (Yes, that doesn't say much about my memory.)
	* TextWriterTraceListener.cs: Append text to already existing files,
	  don't overwrite them.
	* TraceImpl.cs:
	  - Added private destructor, to ensure no instances are created.
	  - Move members declarations to be closer to each other.
	* TraceSwitch.cs: Complete re-write.  It works now.

2002-12-17  Jonathan Pryor <jonpryor@vt.edu>
	* DiagnosticsConfigurationHandler.cs: Implement so that .config files
	support <system.diagnostics> sections.

2002-12-15  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* DefaultTraceListener.cs: now OutputDebugStringW is called from an
	internal call (update your runtime!). No more warnings in linux.

2002-10-31  Dick Porter  <dick@ximian.com>

	* Process.cs: MonoIO methods now have an error parameter

2002-10-26  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* DefaultTraceListener.cs: changed OutputDebugString to
	OutputDebugStringW (no more warnings under windows). Also a few style
	fixes.

2002-10-23  Dick Porter  <dick@ximian.com>

	* Process.cs: Redirected standard input needs to have AutoFlush set

2002-09-27  Dick Porter  <dick@ximian.com>

	* Process.cs: Implemented {get_,set_}{Min,Max}WorkingSet,
	ProcessName, GetProcessById, GetProcesses, GetProcessesByName.
	Pass the working directory to Start.  Pass the program and args in
	one string to be used with the second arg of CreateProcess, so it
	will search the path.

2002-09-19  Nick Drochak <ndrochak@gol.com>

	* TraceImpl.cs: Remove debug prints

2002-09-19  Nick Drochak <ndrochak@gol.com>

	* TraceListenerCollection.cs: Set Indet level and size to default 
	values.  The values from TraceImpl might have been changed.

2002-08-28  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Process.cs:
	* TextWriterTraceListener.cs: IDisposable fixes.

2002-08-23  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Process.cs: class status based fixes.

2002-07-20  Dick Porter  <dick@ximian.com>

	* Process.cs: Implement file handle redirection

2002-07-13  Jonathan Pryor <jonpryor@vt.edu>
	* CounterCreationData.cs: Implemented
	* CounterCreationDataCollection.cs: Implemented
	* CounterSample.cs: Stubbed Out
	* CounterSampleCalculator.cs: Stubbed Out
	* InstanceData.cs: Implemented
	* InstanceDataCollection.cs: Implemented
	* InstanceDataCollectionCollection.cs: Implemented
	* MonitoringDescriptionAttribute.cs: Implemented
	* PerformanceCounter.cs: Stubbed Out
	* PerformanceCounterCategory.cs: Stubbed Out
	* PerformanceCounterInstaller.cs: Stubbed Out
	* PerformanceCounterManager.cs: Stubbed Out
	* PerformanceCounterPermission.cs: Stubbed Out
	* PerformanceCounterPermissionAccess.cs: Implemented
	* PerformanceCounterPermissionAttribute.cs: Stubbed Out
	* PerformanceCounterPermissionEntry.cs: Stubbed Out
	* PerformanceCounterPermissionEntryCollection.cs: Implemented
	* PerformanceCounterType.cs: Implemented


2002-06-25  Dick Porter  <dick@ximian.com>

	* Process.cs: Process forking and waiting, and some support functions

	* ProcessStartInfo.cs: Implemented the bits needed for basic
	Process forking

	* ProcessModule.cs: Implemented

	* ProcessModuleCollection.cs: Mostly implemented

	* FileVersionInfo.cs: Implemented

2002-06-16  Jonathan Pryor <jonpryor@vt.edu>
	* ICollectData.cs: Implemented
	* TraceImpl.cs: Setting IndentLevel, IndentSize should change the
		corresponding properties on all current TraceListeners.
		Also, to answer the FIXME message: Yes, the properties in TraceListener
		need to be [ThreadStatic] as well.
	* TraceListenerCollection.cs: When adding a TraceListener, the TraceListener
		should have its properties set to the current TraceImpl property values.
	* TraceListener.cs: Make indentSize, lndentLevel [ThreadStatic].

2002-06-09  Jonathan Pryor <jonpryor@vt.edu>
	* EntryWrittenEventArgs.cs: Implemented
	* EntryWrittenEventHandler.cs: Implemented
	* EventLog.cs: Stubbed out
	* EventLogEntry.cs: Stubbed out
	* EventLogEntryCOllection.cs: Implemented.
	* EventLogEntryType.cs: Implemented
	* EventLogInstaller.cs: Stubbed out
	* EventLogPermission.cs: Stubbed out
	* EventLogPermissionAccess.cs: Implemented
	* EventLogPermissionAttribute.cs: Stubbed out
	* EventLogPermissionEntry.cs: Stubbed out
	* EventLogPermissionEntryCollection.cs: Stubbed out
	* EventLogTraceListener.cs: Stubbed out

2002-05-29  Jonathan Pryor <jonpryor@vt.edu>
  * DefaultTraceListener.cs: Implemented MONO_TRACE support

2002-05-27  Jonathan Pryor <jonpryor@vt.edu>
  * Moved public API documentation for the following files to the
    /mcs/docs/apidocs/xml/en/System.Diagnostics directory:
    - Debug.cs
    - DefaultTraceListener.cs
    - DiagnosticsConfigurationHandler.cs
    - Switch.cs
    - TextWriterTraceListener.cs
    - Trace.cs
    - TraceLevel.cs
    - TraceListener.cs
    - TraceListenerCollection.cs
    - TraceSwitch.cs

2002-04-10  Jonathan Pryor <jonpryor@vt.edu>

	* TraceListenerCollection.cs: Corrected indexer property to provide the
		correct return value and implement the IList indexer property correctly.

2002-04-07  Jonathan Pryor <jonpryor@vt.edu>

	* TraceListener.cs: Fix stack overflow bug
	* DefaultTraceListener.cs: Implement log file support

2002-04-04  Dick Porter  <dick@ximian.com>

	* ThreadWaitReason.cs:
	* ThreadState.cs:
	* ThreadPriorityLevel.cs:
	* ProcessWindowStyle.cs:
	* ProcessThreadCollection.cs
	* ProcessThread.cs:
	* ProcessStartInfo.cs:
	* ProcessModuleCollection.cs: Stub out more classes needed for Process

2002-03-31  Dick Porter  <dick@ximian.com>

	* Process.cs: 
	* ProcessPriorityClass.cs: 
	* ProcessModule.cs: 
	* FileVersionInfo.cs: Stub out classes needed for Process

2002-03-08  Jonathan Pryor <jonpryor@vt.edu>

	* Debug.cs: Clean up (lots of code can be shared with Trace.cs, which 
		is why TraceImpl.cs is introduced), "DEBUG" conditional support
	* TraceListener.cs: Proper implementation of Dispose pattern;
		implementatino of non-abstract methods in terms of abstract methods
	* TraceListenerCollection.cs: check 'object' types before adding
	* TextWriterTraceListener.cs: properly implement Dispose pattern;
		handle NeedIndent and WriteIndent
	* Trace.cs: new file; provides Trace functionality, "TRACE" conditional
		support
	* DefaultTraceListener.cs: new file; the default trace listener

2002-01-17  Miguel de Icaza  <miguel@ximian.com>
	* TraceListenerCollection.cs: Remove Warnings.

2002-01-06  Ravi Pratap  <ravi@ximian.com>
	* Switch.cs, TraceListenerCollection.cs : Decorate incomplete bits
	with the MonoTODO attribute.

2002-01-04  John R. Hicks <angryjohn69@nc.rr.com>
	* Added Debug.cs to the build.

2002-01-04  John R. Hicks <angryjohn69@nc.rr.com>
	* Added preliminary TraceListenerCollection.cs to the build.

2002-01-04  John R. Hicks <angryjohn69@nc.rr.com>
	* Added TraceListener.cs, TextWriterTraceListener.cs, and
	DefaultTraceListener.cs to the build and moved them into the
	proper assembly.

2002-01-04  John R. Hicks <angryjohn69@nc.rr.com>
	* Added DiagnosticsConfigurationHandler.cs to the build.

2001-09-09  Nick Drochak <ndrochak@gol.com>
	* BooleanSwitch.cs: Make this class use it's parent class's features.  Namely, use SwitchSetting
	so that we can get OnSwitchSettingChanged() to fire for free.

2001-09-09  Nick Drochak <ndrochak@gol.com>
	* ChangeLog: added this file
	* Switch.cs: call OnSwitchSettingChanged() when the switch setting is, yes you gessed it, changed.	
