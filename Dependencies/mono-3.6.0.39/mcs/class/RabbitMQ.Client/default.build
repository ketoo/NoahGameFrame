<!-- NAnt build file. -*- nxml -*- -->
<project name="RabbitMQ C# Client" default="build" basedir=".">

  <property name="target.framework" value="mono-2.0" />
  <property name="debug" value="false"/>
  <property name="msbuild" value="msbuild"/>

  <property name="build.dir" value="build"/>
  <property name="bin.dir" value="${build.dir}/bin" />
  <property name="dist.dir" value="${build.dir}/dist" />
  <property name="wcf.dist.dir" value="${dist.dir}/wcf" />
  <property name="doc.dir" value="${build.dir}/doc" />
  <property name="gendoc.xml.dir" value="${doc.dir}/xml" />
  <property name="gendoc.html.dir" value="${doc.dir}/html" />
  <property name="gensrc.dir" value="${build.dir}/gensrc" />
  <property name="apigen.exename" value="${bin.dir}/rabbitmq-dotnet-apigen.exe" />
  <property name="target.dllname.base" value="RabbitMQ.Client" />
  <property name="target.dllname" value="${bin.dir}/${target.dllname.base}.dll" />
  <property name="bootstrap.dllname" value="${bin.dir}/apigen-bootstrap.dll" />
  <property name="existence.test.probe" value="${gensrc.dir}/autogenerated-api-0-9.cs"/>
  <property name="unit-tests.dllname" value="${bin.dir}/unit-tests.dll"/>
  <property name="nunit.dllname" value="src/unit/nunit/nunit.framework.dll"/>
  
  <property name="core.assemblyinfo.src" value="src/client/api/AssemblyInfo.cs.in"/>
  <property name="core.assemblyinfo.target" value="${gensrc.dir}/AssemblyInfo.cs"/>
  <property name="wcf.assemblyinfo.src" value="src/wcf/RabbitMQ.ServiceModel/AssemblyInfo.cs.in"/>
  <property name="wcf.assemblyinfo.target" value="src/wcf/RabbitMQ.ServiceModel/AssemblyInfo.cs"/>

  <property name="wcf.bin.dir" value="src/wcf/RabbitMQ.ServiceModel/bin"/>
  <property name="wcf.test.bin.dir" value="src/wcf/Test/bin"/>
  
  <property name="hg.exec" value="/usr/bin/hg" />

  <include buildfile="local.build" />
  <include buildfile="configs/${config.name}.build" />
  <property name="nant.settings.currentframework" value="${target.framework}" />

  <property name="fullversion" value="${version.major.minor.release}"/>
  <property name="version.assembly" value="${fullversion}.0" />

  <property name="nameversion" value="rabbitmq-dotnet-client-${fullversion}"/>
  <property name="release.dir" value="releases/rabbitmq-dotnet-client"/>
  <property name="release.version.dir" value="${release.dir}/v${fullversion}"/>
  <property name="release.src.zip" value="${nameversion}.zip" />

  <target name="clean" description="remove all generated files"
	      depends="clean-base,clean-wcf" />

  <target name="clean-base" description="remove all generated files in the core client">
    <delete dir="${build.dir}" failonerror="false" />
  </target>

  <target name="clean-wcf" description="remove all generated files in the WCF binding">
    <delete dir="${wcf.bin.dir}" failonerror="false" />
    <delete dir="${wcf.test.bin.dir}" failonerror="false" />
    <delete dir="src/wcf/RabbitMQ.ServiceModel/obj" failonerror="false" />
    <delete dir="src/wcf/Test/obj" failonerror="false" />
    <delete dir="src/wcf/ConfigDemo/Client/bin" failonerror="false"/>
    <delete dir="src/wcf/ConfigDemo/Client/obj" failonerror="false"/>
    <delete dir="src/wcf/ConfigDemo/Server/bin" failonerror="false"/>
    <delete dir="src/wcf/ConfigDemo/Server/obj" failonerror="false"/>
    <delete dir="src/wcf/ConfigDemo/WcfServiceLibrary1/bin" failonerror="false"/>
    <delete dir="src/wcf/ConfigDemo/WcfServiceLibrary1/obj" failonerror="false"/>
    <delete file="${wcf.assemblyinfo.target}" failonerror="false"/> <!-- it's autogenerated -->
  </target>

  <target name="generate-assemblyinfo">
    <if test="${(not file::up-to-date(gen.assemblyinfo.src, gen.assemblyinfo.target))}">
      <delete file="${gen.assemblyinfo.target}" failonerror="false" />
      <copy file="${gen.assemblyinfo.src}" tofile="${gen.assemblyinfo.target}">
	    <filterchain>
	      <replacetokens>
	        <token key="VERSION" value="${version.assembly}" />
	      </replacetokens>
	    </filterchain>
      </copy>
    </if>
  </target>

  <target name="build" description="compiles the source code"
	      depends="generate-api">
    <mkdir dir="${bin.dir}" />
    <mkdir dir="${doc.dir}" />
    <property name="gen.assemblyinfo.src" value="${core.assemblyinfo.src}"/>
    <property name="gen.assemblyinfo.target" value="${core.assemblyinfo.target}"/>
    <call target="generate-assemblyinfo"/>
    <csc target="library"
	     output="${target.dllname}"
	     doc="${bin.dir}/${target.dllname.base}.xml"
	     debug="${debug}">
      <sources>
	    <include name="src/client/**/*.cs" />
	    <include name="src/util/**/*.cs" />
	    <include name="${gensrc.dir}/**/*.cs" />
      </sources>
      <nowarn>
	    <warning number="1591"/>
      </nowarn>
    </csc>
  </target>

  <target name="build-wcf" description="Builds the WCF component. Requires .NET 3.0."
	      depends="build">
    <property name="gen.assemblyinfo.src" value="${wcf.assemblyinfo.src}"/>
    <property name="gen.assemblyinfo.target" value="${wcf.assemblyinfo.target}"/>
    <call target="generate-assemblyinfo"/>
    <exec program="${msbuild}" workingdir="src/wcf/RabbitMQ.ServiceModel">
      <arg value="RabbitMQ.ServiceModel.csproj"/>
    </exec>
  </target>

  <target name="wcf-examples" description="Builds the WCF examples. Requires .NET 3.0."
	      depends="build-wcf">
    <exec program="${msbuild}" workingdir="src/wcf/Test">
      <arg value="RabbitMQ.ServiceModel.Test.csproj"/>
    </exec>
    <exec program="${msbuild}" workingdir="src/wcf/ConfigDemo/WcfServiceLibrary1">
      <arg value="WcfServiceLibrary1.csproj"/>
    </exec>
    <exec program="${msbuild}" workingdir="src/wcf/ConfigDemo/Server">
      <arg value="Server.csproj"/>
    </exec>
    <exec program="${msbuild}" workingdir="src/wcf/ConfigDemo/Client">
      <arg value="Client.csproj"/>
    </exec>
  </target>

  <target name="wcf-doc" description="produces HTML documentation from the code"
	      depends="build-wcf">
    <property name="wcf.xml.dir" value="${wcf.bin.dir}/Debug/doc/xml"/>
    <property name="wcf.html.dir" value="${wcf.bin.dir}/Debug/doc/html"/>
    <delete dir="${wcf.xml.dir}" failonerror="false" />
    <delete dir="${wcf.html.dir}" failonerror="false" />
    <mkdir dir="${wcf.xml.dir}" />
    <mkdir dir="${wcf.html.dir}" />
    <exec program="tools/ndocproc-bin/bin/ndocproc.exe" useruntimeengine="true">
      <arg value="/nosubtypes"/>
      <arg value="${wcf.xml.dir}"/>
      <arg value="${wcf.bin.dir}/Debug/RabbitMQ.ServiceModel.xml"/>
      <arg value="docs/namespaces.xml"/>
    </exec>
    <nant buildfile="tools/ndocproc-bin/xsl/transform-xml.build">
      <properties>
	    <property name="xml.dir" value="${project::get-base-directory()}/${wcf.xml.dir}"/>
	    <property name="html.dir" value="${project::get-base-directory()}/${wcf.html.dir}"/>
      </properties>
    </nant>
    <copy file="tools/ndocproc-bin/xsl/style.css" todir="${wcf.html.dir}"/>
  </target>

  <target name="stamp" description="removes the version identifier, so that the next build generates a fresh one">
    <delete file="${assemblyinfo.target}" failonerror="false" />
  </target>

  <target name="doc" description="produces HTML documentation from the code"
	      depends="build,generate-docs,copy-stylesheet" />

  <target name="generate-docs">
    <delete dir="${gendoc.xml.dir}" failonerror="false" />
    <delete dir="${gendoc.html.dir}" failonerror="false" />
    <mkdir dir="${gendoc.xml.dir}" />
    <mkdir dir="${gendoc.html.dir}" />
    <exec program="tools/ndocproc-bin/bin/ndocproc.exe" useruntimeengine="true">
      <arg value="/nosubtypes"/>
      <arg value="/suppress:RabbitMQ.Client.Framing.v0_8"/>
      <arg value="/suppress:RabbitMQ.Client.Framing.v0_8qpid"/>
      <arg value="/suppress:RabbitMQ.Client.Framing.v0_9"/>
      <arg value="/suppress:RabbitMQ.Client.Framing.Impl.v0_8"/>
      <arg value="/suppress:RabbitMQ.Client.Framing.Impl.v0_8qpid"/>
      <arg value="/suppress:RabbitMQ.Client.Framing.Impl.v0_9"/>
      <arg value="/suppress:RabbitMQ.Client.Impl"/>
      <arg value="/suppress:RabbitMQ.Client.Apigen.Attributes"/>
      <arg value="${gendoc.xml.dir}"/>
      <arg value="${bin.dir}/${target.dllname.base}.xml"/>
      <arg value="docs/namespaces.xml"/>
    </exec>
    <nant buildfile="tools/ndocproc-bin/xsl/transform-xml.build">
      <properties>
	    <property name="xml.dir" value="${project::get-base-directory()}/${gendoc.xml.dir}"/>
	    <property name="html.dir" value="${project::get-base-directory()}/${gendoc.html.dir}"/>
      </properties>
    </nant>
  </target>

  <target name="copy-stylesheet">
    <copy file="tools/ndocproc-bin/xsl/style.css" todir="${gendoc.html.dir}"/>
  </target>

  <target name="generate-api" description="runs apigen to build the autogen part of the client"
	      depends="apigen">
    <if test="${(not file::up-to-date(bootstrap.dllname,existence.test.probe)) or
	          (not file::up-to-date(apigen.exename,existence.test.probe))}">
      <delete file="${existence.test.probe}" failonerror="false"/>
    </if>
    <if test="${not file::exists(existence.test.probe)}">
      <mkdir dir="${gensrc.dir}" />
      <exec program="${apigen.exename}" useruntimeengine="true">
	    <arg value="/apiName:AMQP_0_9"/>
	    <arg value="docs/specs/amqp0-9.xml"/>
	    <arg value="${gensrc.dir}/autogenerated-api-0-9.cs" />
      </exec>
      <exec program="${apigen.exename}" useruntimeengine="true">
	    <arg value="/apiName:AMQP_0_8_QPID"/>
	    <arg value="/n:v0_8qpid"/>
	    <arg value="docs/specs/qpid-amqp.0-8.xml"/>
	    <arg value="${gensrc.dir}/autogenerated-api-qpid-0-8.cs" />
      </exec>
      <exec program="${apigen.exename}" useruntimeengine="true">
	    <arg value="/apiName:AMQP_0_8"/>
	    <arg value="/n:v0_8"/>
	    <arg value="docs/specs/amqp0-8.xml"/>
	    <arg value="${gensrc.dir}/autogenerated-api-0-8.cs" />
      </exec>
    </if>
  </target>

  <target name="apigen" description="compile the API autogeneration tool"
	      depends="bootstrap-model">
    <mkdir dir="${bin.dir}" />
    <csc target="exe" output="${apigen.exename}" debug="true">
      <sources>
	    <include name="src/apigen/**/*.cs" />
      </sources>
      <references>
	    <include name="${bootstrap.dllname}"/>
      </references>
    </csc>
  </target>

  <target name="bootstrap-model" description="compile the apigen bootstrap DLL">
    <mkdir dir="${bin.dir}" />
    <csc target="library"
	     output="${bootstrap.dllname}"
	     debug="${debug}">
      <sources>
	    <include name="src/client/api/IModel.cs" />
	    <include name="src/client/api/IContentHeader.cs" />
	    <include name="src/client/api/IBasicProperties.cs" />
	    <include name="src/client/api/IFileProperties.cs" />
	    <include name="src/client/api/IStreamProperties.cs" />
	    <include name="src/client/api/AmqpTimestamp.cs" />
	    <include name="src/client/api/IBasicConsumer.cs" />
	    <include name="src/client/api/ShutdownEventArgs.cs" />
	    <include name="src/client/api/ShutdownInitiator.cs" />
	    <include name="src/client/api/PublicationAddress.cs" />
	    <include name="src/client/events/BasicReturnEventArgs.cs" />
	    <include name="src/client/events/BasicReturnEventHandler.cs" />
	    <include name="src/client/events/CallbackExceptionEventArgs.cs" />
	    <include name="src/client/events/CallbackExceptionEventHandler.cs" />
	    <include name="src/client/events/ModelShutdownEventHandler.cs"/>
      </sources>
    </csc>
  </target>

  <target name="one-example">
    <csc target="exe" output="${bin.dir}/${example.program}.exe" debug="true">
      <sources>
	    <include name="src/examples/${example.program}.cs" />
      </sources>
      <references>
	    <include name="${target.dllname}"/>
      </references>
    </csc>
  </target>

  <target name="examples" description="compile C# client sample code"
	      depends="build">
    <mkdir dir="${bin.dir}" />
    <property name="example.program" value="SendString"/><call target="one-example"/>
    <property name="example.program" value="SendMap"/><call target="one-example"/>
    <property name="example.program" value="LogTail"/><call target="one-example"/>
    <property name="example.program" value="SingleGet"/><call target="one-example"/>
    <property name="example.program" value="ExceptionTest"/><call target="one-example"/>
    <property name="example.program" value="DeclareQueue"/><call target="one-example"/>
    <property name="example.program" value="AddServer"/><call target="one-example"/>
    <property name="example.program" value="AddClient"/><call target="one-example"/>
  </target>

  <target name="build-unit" description="compile unit tests"
	      depends="build">
    <mkdir dir="${bin.dir}" />
    <csc target="library" output="${unit-tests.dllname}" debug="true">
      <sources>
	    <include name="src/unit/*.cs" />
      </sources>
      <references>
	    <include name="${target.dllname}"/>
	    <include name="${nunit.dllname}"/>
      </references>
    </csc>
    <copy file="${nunit.dllname}" todir="${bin.dir}"/>
  </target>

  <target name="unit" description="run unit tests"
	      depends="build-unit">
    <exec program="src/unit/nunit/nunit-console.exe" useruntimeengine="true">
      <arg value="${unit-tests.dllname}"/>
    </exec>
  </target>

  <target name="dist" description="build a binary distribution zip"
	      depends="clean,doc,build-doc-zip,dist-dir,build-dist-zip"/>

  <target name="wcf-dist" description="build a binary distribution zip"
	      depends="clean,doc,build-doc-zip,wcf-doc,build-wcf-doc-zip,wcf-dist-dir,build-wcf-dist-zip"/>

  <target name="build-doc-zip" description="(internal) zips up a HTML doc distribution">
    <property name="fq.dist"
	          value="${nameversion}-${target.framework}-htmldoc"/>
    <property name="doc.zip.source.dir" value="${gendoc.html.dir}"/>
    <call target="generic-build-doc-zip"/>
  </target>

  <target name="build-wcf-doc-zip" description="(internal) zips up a WCF HTML doc distribution">
    <property name="fq.dist"
	          value="${nameversion}-net-3.0-wcf-htmldoc"/>
    <property name="doc.zip.source.dir" value="${wcf.bin.dir}/Debug/doc/html"/>
    <call target="generic-build-doc-zip"/>
  </target>

  <target name="generic-build-doc-zip">
    <property name="fq.dist.dir" value="${build.dir}/${fq.dist}"/>
    <property name="fq.dist.zipname" value="${fq.dist.dir}.zip"/>
    <mkdir dir="${fq.dist.dir}"/>
    <copy todir="${fq.dist.dir}">
      <fileset basedir="${doc.zip.source.dir}">
	    <include name="**/*"/>
      </fileset>
    </copy>
    <copy todir="${fq.dist.dir}">
      <fileset>
	    <include name="LICENSE"/>
	    <include name="LICENSE-APACHE2"/>
	    <include name="LICENSE-MPL-RabbitMQ"/>
      </fileset>
    </copy>
    <zip zipfile="${fq.dist.zipname}" encoding="ASCII">
      <fileset basedir="${fq.dist.dir}" prefix="${fq.dist}">
	    <include name="**/*"/>
      </fileset>
    </zip>
    <delete dir="${fq.dist.dir}"/>
  </target>

  <target name="build-dist-zip" description="(internal) zips up a binary distribution">
    <property name="basename.suffix" value=""/>
    <call target="generic-build-dist-zip"/>
  </target>

  <target name="build-wcf-dist-zip" description="(internal) zips up a binary distribution">
    <property name="target.framework" value="net-3.0"/>
    <property name="basename.suffix" value="-wcf"/>
    <call target="generic-build-dist-zip"/>
  </target>

  <target name="generic-build-dist-zip" description="(internal) zips up a binary distribution">
    <property name="fq.dist" value="${nameversion}-${target.framework}${basename.suffix}"/>
    <property name="fq.dist.dir" value="${build.dir}/${fq.dist}"/>
    <property name="fq.dist.zipname" value="${fq.dist.dir}.zip"/>
    <move todir="${fq.dist.dir}">
      <fileset basedir="${dist.dir}">
	    <include name="**/*"/>
      </fileset>
    </move>
    <delete dir="${dist.dir}"/>
    <zip zipfile="${fq.dist.zipname}" encoding="ASCII">
      <fileset basedir="${fq.dist.dir}" prefix="${fq.dist}">
	    <include name="**/*"/>
      </fileset>
    </zip>
    <delete dir="${fq.dist.dir}"/>
  </target>
  
  <target name="dist-dir" description="clean and build a binary distribution (not packed into a zip)"
	      depends="clean,examples,build-dist-dir"/>

  <target name="wcf-dist-dir" description="clean and build a WCF binary distribution (not packed into a zip)"
	      depends="dist-dir,wcf-examples,build-wcf-dist-dir"/>

  <target name="build-dist-dir" description="(internal) just copy files into a dist dir, without cleaning or stamping">
    <delete dir="${dist.dir}" failonerror="false"/>
    <mkdir dir="${dist.dir}"/>
    <copy todir="${dist.dir}">
      <fileset>
	    <include name="README.txt"/>
	    <include name="LICENSE"/>
	    <include name="LICENSE-APACHE2"/>
	    <include name="LICENSE-MPL-RabbitMQ"/>
      </fileset>
      <filterchain>
	    <replacetokens>
	      <token key="FULLVERSION" value="${fullversion}" />
	    </replacetokens>
      </filterchain>
    </copy>
    <mkdir dir="${dist.dir}/bin"/>
    <copy todir="${dist.dir}/bin" flatten="true">
      <fileset>
	    <include name="${target.dllname}"/>
	    <include name="${bin.dir}/SendString.exe"/>
	    <include name="${bin.dir}/SendMap.exe"/>
	    <include name="${bin.dir}/LogTail.exe"/>
	    <include name="${bin.dir}/SingleGet.exe"/>
	    <include name="${bin.dir}/ExceptionTest.exe"/>
	    <include name="${bin.dir}/DeclareQueue.exe"/>
      </fileset>
    </copy>
    <mkdir dir="${dist.dir}/examples"/>
    <copy todir="${dist.dir}/examples">
      <fileset basedir="src/examples">
	    <include name="**/*.cs"/>
      </fileset>
    </copy>
  </target>

  <target name="build-wcf-dist-dir" description="(internal) just copy WCF files into a dist dir, without cleaning or stamping">
    <delete dir="${wcf.dist.dir}" failonerror="false"/>
    <mkdir dir="${wcf.dist.dir}"/>

    <mkdir dir="${wcf.dist.dir}/bin"/>
    <copy todir="${wcf.dist.dir}/bin">
      <fileset basedir="${wcf.bin.dir}">
	    <include name="Debug/*"/>
	    <exclude name="Debug/doc"/>
	    <include name="Release/*"/>
	    <exclude name="Release/doc"/>
      </fileset>
    </copy>

    <mkdir dir="${wcf.dist.dir}/doc"/>
    <copy todir="${wcf.dist.dir}/doc">
      <fileset basedir="docs">
	    <include name="RabbitMQ Service Model.*"/>
      </fileset>
    </copy>

    <mkdir dir="${wcf.dist.dir}/examples/basic/bin"/>
    <copy todir="${wcf.dist.dir}/examples/basic/bin">
      <fileset basedir="${wcf.test.bin.dir}">
	    <include name="Debug/**/*"/>
	    <include name="Release/**/*"/>
      </fileset>
    </copy>

    <mkdir dir="${wcf.dist.dir}/examples/basic/source"/>
    <copy todir="${wcf.dist.dir}/examples/basic/source">
      <fileset basedir="src/wcf/Test">
	    <include name="**/*.cs"/>
	    <include name="**/*.csproj"/>
	    <include name="**/*.config"/>
	    <exclude name="bin/**/*"/>
      </fileset>
    </copy>

    <mkdir dir="${wcf.dist.dir}/examples/config-demo/bin"/>
    <copy todir="${wcf.dist.dir}/examples/config-demo/bin">
      <fileset basedir="src/wcf/ConfigDemo/Server/bin">
	    <include name="Debug/**/*"/>
	    <include name="Release/**/*"/>
      </fileset>
    </copy>
    <copy todir="${wcf.dist.dir}/examples/config-demo/bin">
      <fileset basedir="src/wcf/ConfigDemo/Client/bin">
	    <include name="Debug/**/*"/>
	    <include name="Release/**/*"/>
      </fileset>
    </copy>

    <mkdir dir="${wcf.dist.dir}/examples/config-demo/source"/>
    <copy todir="${wcf.dist.dir}/examples/config-demo/source">
      <fileset basedir="src/wcf/ConfigDemo">
	    <include name="**/*.cs"/>
	    <include name="**/*.csproj"/>
	    <include name="**/*.sln"/>
	    <include name="**/*.config"/>
	    <exclude name="**/bin/**/*"/>
      </fileset>
    </copy>
  </target>

  <target name="release-dir">
    <delete dir="${release.dir}" failonerror="false"/>
    <mkdir dir="${release.version.dir}"/>
  </target>

  <target name="copy-deliverables">
    <copy todir="${release.version.dir}">
      <fileset basedir="${build.dir}">
	    <include name="*.zip"/>
      </fileset>
    </copy>
  </target>
  
  <target name="src-dist" description="create zip from current state of the repository">
      <mkdir dir="${build.dir}"/>
      <exec program="${python.exec}">
        <arg value="${hg.exec}"/>
        <arg value="archive"/>
        <arg value="-t"/>
        <arg value="zip"/>
        <arg value="-r"/>
        <arg value="${fullversion}"/>
        <arg value="${build.dir}/${release.src.zip}" />
      </exec>
  </target>

  <target name="windows-deliverables"
          depends="release-dir">
    <call target="dist"/>
    <zip zipfile="${build.dir}/${nameversion}-tmp-xmldoc.zip" encoding="ASCII">
      <fileset basedir="${gendoc.xml.dir}">
	    <include name="**/*"/>
      </fileset>
    </zip>
    <call target="copy-deliverables"/>
    <call target="clean"/>
    <call target="wcf-dist"/>
    <call target="copy-deliverables"/>
    <call target="clean"/>
    <call target="src-dist"/>
    <call target="copy-deliverables"/>
  </target>
</project>
