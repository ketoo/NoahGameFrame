//
// System.Web.UI.WebControls.AutoGeneratedFieldProperties.cs
//
// Authors:
//	Lluis Sanchez Gual (lluis@novell.com)
//
// (C) 2005-2010 Novell, Inc (http://www.novell.com)
//

//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

using System.Web.UI;
using System.Security.Permissions;

namespace System.Web.UI.WebControls
{
	[AspNetHostingPermissionAttribute (SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)]
	[AspNetHostingPermissionAttribute (SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)]
	public sealed class AutoGeneratedFieldProperties: IStateManager
	{
		StateBag ViewState = new StateBag ();

		public string DataField {
			get { return ViewState.GetString ("DataField", String.Empty); }
			set { ViewState ["DataField"] = value; }
		}
		
		public bool IsReadOnly {
			get { return ViewState.GetBool ("IsReadOnly", false); }
			set { ViewState ["IsReadOnly"] = value; }
		}
		
		public string Name {
			get { return ViewState.GetString ("Name", String.Empty); }
			set { ViewState ["Name"] = value; }
		}
		
		public Type Type {
			get {
				object ob = ViewState ["Type"];
				if (ob != null) return (Type) ob;
				return null;
			}
			set {
				ViewState ["Type"] = value;
			}
		}
		
		void IStateManager.LoadViewState (object state)
		{
			ViewState.LoadViewState (state);
		}

		object IStateManager.SaveViewState ()
		{
			return ViewState.SaveViewState ();
		}

		void IStateManager.TrackViewState ()
		{
			ViewState.TrackViewState ();
		}

		bool IStateManager.IsTrackingViewState {
			get { return ViewState.IsTrackingViewState; }
		}
	}
}

