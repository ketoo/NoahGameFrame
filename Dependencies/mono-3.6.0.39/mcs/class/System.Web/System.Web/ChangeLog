2010-07-21  Miguel de Icaza  <miguel@novell.com>

	* HttpApplication.cs, HttpRuntime.cs, HttpApplicationFactory.cs:
	Prepare for the runtime change that will terminate threadpool
	threads when exception are not caught.

2010-06-27  Marek Habersack  <mhabersack@novell.com>

	* HttpUtility.cs: if IHtmlString instance is passed to HtmlEncode
	(object), use IHtmlString.ToHtmlString () to return the value
	without encoding it.

2010-06-02  Marek Habersack  <mhabersack@novell.com>

	* DefaultHttpHandler.cs: implemented, so that static file requests
	work again in 4.0

2010-06-01  Marek Habersack  <mhabersack@novell.com>

	* HttpUtility.cs: moved chunks of code to the new
	System.Web.Util.HttpEncoder class.

	* HttpResponseHeader.cs: encode header names and values using
	HttpEncoder.

	* HttpRequest.cs: added internal method Validate, to validate the
	request in 4.0 profile.

	* HttpHeaderCollection.cs: added. A helper class to encode header
	names/values on add.

	* HttpApplication.cs: Pipeline () validates request by calling
	HttpRequest.Validate in the 4.0 profile.

2010-05-17  Marek Habersack  <mhabersack@novell.com>

	* HttpApplicationFactory.cs: pre-application start methods must be
	called even before App_Code is compiled.

2010-05-16  Marek Habersack  <mhabersack@novell.com>

	* HttpApplicationFactory.cs: let BuildManager know when it's safe
	to cache referenced assemblies.

2010-05-15  Marek Habersack  <mhabersack@novell.com>

	* HttpResponse.cs: added internal Context property

	* HttpRequest.cs: added a setter to the internal Context property

	* HttpContext.cs: set request and response Context properties to
	'this' in the constructor.

2010-05-12  Marek Habersack  <mhabersack@novell.com>

	* HttpApplicationFactory.cs: when initializing new application
	type, make sure to call pre-application start methods.

	* HttpServerUtility.cs: Execute checks whether
	IAsyncResult.AsyncWaitHandle is not null before attempting to use
	it. Fixes bug #604502

2010-05-06  Marek Habersack  <mhabersack@novell.com>

	* PreApplicationStartMethodAttribute.cs: added. New 4.0 type.

	* HttpUtility.cs: HtmlEncode, UrlEncode changes for 4.0
	Implemented JavaScriptStringEncode for 4.0

	* HttpServerUtility.cs: added TransferRequest methods.

	* HttpRuntime.cs: added AspClientScriptPhysicalPath,
	AspClientScriptVirtualPath, UsingIntegratedPipeline properties and
	the GetNamedPermissionSet method.

	* HttpResponse.cs: implemented the following 4.0 methods:
	RedirectPermanent, RedirectToRoute, RedirectToRoutePermanent and
	RemoveOutputCacheItem.
	Output property no longer lazily creates a writer object - it's
	created in the internal constructors. If a user sets it to null,
	it remains null for good or bad.
	Added Output setter for 4.0+

2010-05-05  Marek Habersack  <mhabersack@novell.com>

	* HttpRequest.cs: implemented new 4.0 property - RequestContext

2010-04-29  Marek Habersack  <mhabersack@novell.com>

	* HttpRequest.cs: added 4.0 InsertEntityBody overloads (not
	supported when running under Mono)
	Added the HttpChannelBinding 4.0 property.
	Added the CurrentExecutionFilePathExtension 4.0 property.

2010-04-27  Marek Habersack  <mhabersack@novell.com>

	* HttpException.cs: implemented 4.0 property WebEventCode, also
	made it available in the 2.0 profile as internal.
	Added a method with several overloads, NewWithCode, which creates
	an instance of HttpException and sets the web error code.

	* HttpApplication.cs, HttpRequest.cs, HttpRuntime.cs: use HttpException.NewWithCode for some
	exceptions.

2010-04-21  Marek Habersack  <mhabersack@novell.com>

	* HttpApplication.cs: update to fix for bug #572469 - ProcessError
	clears the error after handler return only if stop_processing is
	true. Also, stop_processing is never set before calling ProcessError

2010-04-02  Marek Habersack  <mhabersack@novell.com>

	* HttpException.cs: handle situations when current exception is an
	instance of a class derived from HttpException and there's no
	InnerException.

	* HttpApplication.cs: ProcessError must call ClearError on the
	current context after the handler returns without error. Fixes bug
	#572469

2010-03-30 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpResponseStream.cs: speed up short writes.

2010-03-20  Marek Habersack  <mhabersack@novell.com>

	* SiteMapNode.cs: avoid calling ChildNodes twice in HasChildNodes.
	Cache child nodes in the ChildNodes property.

2010-03-06  Marek Habersack  <mhabersack@novell.com>

	* HttpRequest.cs: cache RawUrl value.
	Added new internal property, PathNoValidation, which returns
	request path without validating it.
	Implemented 4.0 extensible validation.

	* HttpApplication.cs: Pipeline () validates the request path, if
	new validation mode is enabled, before doing anything else.
	Added a generic LoadType overload which checks whether the loaded
	type, if any, derives from the type specified in the method's
	specialization.

	* HttpUtility.cs: decode entities which use hexadecimal
	encoding. Fixes bug #585992. Patch from Sebastien Morin
	<smsisko@gmail.com>, thanks!

2010-03-04  Marek Habersack  <mhabersack@novell.com>

	* HttpRuntime.cs: do less work in the static constructor. Most of
	the code was moved to System.Web.Util.RuntimeHelpers. Properties
	which have been moved: MonoVersion, RunningOnWindows,
	CaseInsensitive, IsDebuggingEnabled

2010-02-27  Marek Habersack  <mhabersack@novell.com>

	* HttpRuntime.cs: added internal property DomainUnloading.

	* HttpApplication.cs: when app domain is unloading, catch
	ThreadAbortExceptions and reset the abort.

2010-02-03  Marek Habersack  <mhabersack@novell.com>

	* HttpApplication.cs: GetOutputCacheProviderName returns the value
	of OutputCache.DefaultProviderName

	* HttpRuntime.cs: internal cache is used to hold the dependencies
	now.

2010-01-20  Marek Habersack  <mhabersack@novell.com>

	* HttpContext.cs: implemented the 4.0 SetSessionStateBehavior
	method

	* HttpCacheVaryByContentEncodings.cs, HttpCacheVaryByHeaders.cs,
	HttpCacheVaryByParams.cs : parameterless constructors are public
	in 4.0

	* HttpApplication.cs: implemented the 4.0
	GetOutputCacheProviderName method

2010-01-19  Marek Habersack  <mhabersack@novell.com>

	* StaticSiteMapProvider.cs: AddNode checks the url of node
	returned by FindSiteMapNode to see if it indeed was a
	duplicate. It is necessary if application derives from
	StaticSiteMapProvider and overrides FindSiteMapNode to return
	RootNode if rawUrl doesn't match any existing node. Fixes bug
	#570194

2010-01-09  Marek Habersack  <mhabersack@novell.com>

	* VirtualPathUtility.cs: small optimizations for GetDirectory

2009-11-23  Marek Habersack  <mhabersack@novell.com>

	* HttpRequest.cs: PathInfo returns an empty string when worker
	request is absent or its GetPathInfo method returns a null. Patch
	from Tiaan <tagdev@gmail.com>, thanks!

2009-11-19  Marek Habersack  <mhabersack@novell.com>

	* VirtualPathUtility.cs: made Normalize internal

2009-11-16  Marek Habersack  <mhabersack@novell.com>

	* HttpContext.cs: RewritePath now treats non-rooted and
	app-relative paths correctly - the former are formed by
	concatenating base virtual path with the passed file path and the
	latter by calling VirtualPathUtility.ToAbsolute. Rooted and
	absolute paths are left unmodified. Fixes bug #550103

2009-11-13  Marek Habersack  <mhabersack@novell.com>

	* HttpResponse.cs: added parameter checks to Redirect ().
	If the passed url starts with http:, https:, file: or ftp: then it
	is treated as a fully qualified one and no attempt to rewrite the
	url to the fully qualified form (if system.web/httpRuntime
	UseFullyQualifiedRedirectUrl is true) is made.

2009-11-09  Marek Habersack  <mhabersack@novell.com>

	* HttpCookie.cs: made HttpCookie.CookieNVC serializable. Patch
	from Sean Foy <sean.foy+novell@gmail.com>, thanks! Fixes bug
	#553063

	* HttpCookieCollection.cs: Add allows for duplicate cookie
	names. Fixes bug #553150

2009-10-30  Marek Habersack  <mhabersack@novell.com>

	* HttpRequest.cs: added internal property ClientFilePath, which
	may have a different value than FilePath when virtual path has
	been rewritten, but the caller specified that the client paths
	should still be constructed using the original url.

	* HttpContext.cs: RewritePath always sets Request.FilePath,
	Request.ClientFilePath is set only when setClientFilePath is
	true. This makes client urls work correctly when url rewriting is
	being used.

2009-10-20  Marek Habersack  <mhabersack@novell.com>

	* HttpResponse.cs: implemented the WriteSubstitution method,
	thus enabling post-cache substitution.

2009-10-12  Marek Habersack  <mhabersack@novell.com>

	* HttpResponse.cs: actually _use_ the url passed to Redirect when
	fully qualified redirect url is requested, doh. Fixes bug #542846

2009-10-07 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* StaticFileHandler.cs: it's the last flush even when a VPP is used.

2009-10-07  Marek Habersack  <mhabersack@novell.com>

	* TraceData.cs: make long execution times stand out.

2009-09-29  Miguel de Icaza  <miguel@novell.com>

	* HttpUtility.cs: Do not use CAS Attributes when using MonoTouch.

	Remove unnecesasry using clause.

2009-09-29  Marek Habersack  <mhabersack@novell.com>

	* HttpResponse.cs: use full url in redirect if
	UseFullyQualifiedRedirectUrl is set to true in httpRuntime
	configuration section. Patch from Brett Kiefer
	<brett@fogcreek.com>, thanks! Fixes bug #542846

2009-09-28  Marek Habersack  <mhabersack@novell.com>

	* HttpContext.cs: GetResourceProvider - renamed the 'key' argument
	to 'virtualPath' in order to reflects its purpose better. Local
	resource providers are created for the passed virtualPath and not
	for the current request's path. Fixes bug #542484

2009-09-25  Marek Habersack  <mhabersack@novell.com>

	* StaticSiteMapProvider.cs: MapUrl must normalize paths. Fixes bug
	#541969

	* XmlSiteMapProvider.cs: siteMapFile parameter must be mapped in
	Initialize. Fixes bug #541969

2009-09-24  Marek Habersack  <mhabersack@novell.com>

	* XmlSiteMapProvider.cs: added "securityTrimmingEnabled" to the
	list of supported attributes in Initialize. Fixes bug #541607

2009-09-07  Marek Habersack  <mhabersack@novell.com>

	* HttpContext.cs: when creating local resource provider, pass the
	current file's virtual path to CreateLocalResourceProvider. Fixes
	bug #536757

	* XmlSiteMapProvider.cs: do not allow the provider to be
	intialized more than once.
	Initialize throws if it finds unknown attributes in the
	'attributes' collection.
	AddNode checks its arguments and throws if they are null or aren't
	from the same provider.
	FindStartingNode throws exceptions in several erroneous situations
	now.
	Added private method GetConfigDocument which performs several
	checks on the source .sitemap file and throws exceptions if it
	finds any errors.
	BuildSiteMap clears provider state before building the map.
	BuildSiteMapRecursive correctly deals with custom providers. Fixes
	bug #465696
	FindSiteMapNode maps url before searching. Fixes bug #465696

	* VirtualPathUtility.cs: Combine a bit more efficient

	* StaticSiteMapProvider.cs: FindSiteMap node checks if rawUrl is
	relative to application root and if yes, makes it absolute.
	MapUrl converts both rooted and not rooted urls to absolute.

	* SiteMapProvider.cs: check if HttpContext.Request exists before
	using it in FindSiteMapnode

	* SiteMap.cs: Providers collection must be read-only.

2009-09-04  Marek Habersack  <mhabersack@novell.com>

	* HttpRuntime.cs: retrieve real Mono version from the runtime and
	store it in the MonoVersion internal static property.

	* HttpException.cs: report real Mono version when backtrace is
	displayed.

2009-08-24  Marek Habersack  <mhabersack@novell.com>

	* VirtualPath.cs: Added new constructor which takes virtual and
	physical paths as well as a boolean marking the instance as
	referring to a fake location. Part of fix for bug #463813

2009-07-28 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpApplicationFactory.cs: allow subclasses of EventHandler for
	event handlers in global.asax.
	Fixes bug #525743.

2009-07-23  Marek Habersack  <mhabersack@novell.com>

	* HttpException.cs: if an exception is processed which refers to
	internal "files", don't show the internal name.

2009-07-18  Marek Habersack  <mhabersack@novell.com>

	* HttpContext.cs: GetGlobalResourceObject must look for resources
	in the 'Resources' "namespace" - it was a regression from the
	previous change to that method.

2009-07-15  Marek Habersack  <mhabersack@novell.com>

	* HttpApplicationFactory.cs: added internal methods to
	enable/disable specific watchers. Part of fix for bug #522017

2009-07-14 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* ApplicationShutdownReason.cs: add new 3.5 value.
	* ParserErrorCollection.cs: add setter for ParserError.
	Patch from Daniel Gagne.

2009-07-14  Marek Habersack  <mhabersack@novell.com>

	* HttpApplicationFactory.cs: OnFileChanged doesn't reload
	application if reload suppression is active.

2009-07-13  Marek Habersack  <mhabersack@novell.com>

	* HttpApplication.cs: LoadType - wrap call to LoadTypeFromBin in
	try/catch so that we can decide whether or not to throw
	exceptions. LoadTypeFromBin - ignore the FileLoadException and
	BadImageException exceptions as they don't matter in this
	context.

2009-07-13  Gert Driesen  <drieseng@users.sourceforge.net>

	* HttpResponseStream.cs: Added argument checks to Write. Modified
	methods/properties that requires a readable stream to throw
	NotSupportedException instead of InvalidOperationException for
	compatibility with MS.

2009-07-09 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpApplication.cs: use GetSection instead of
	OpenWebConfiguration+GetSection.

2009-07-09  Marek Habersack  <mhabersack@novell.com>

	* HttpContext.cs: fall back to default resource provider factory
	if the factory provided by user doesn't have the required object
	in Get{Global,Local}ResourceObject. Fixes bug #520397
	Refactored the GetResourceObject method and the
	ResourceManagerCacheKey class to DefaultResourceProvider.

2009-07-07 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* ParserError.cs: add 3 missing setters. Patch from Daniel Gagne.

2009-06-15  Marek Habersack  <mhabersack@novell.com>

	* HttpCachePolicy.cs: SetHeaders adds max-age when MaxAge is set
	to TimeSpan.Zero by calling SetMaxAge. Fixes bug #513000

2009-06-05  Marek Habersack  <mhabersack@novell.com>

	* VirtualPathUtility.cs: IsValidVirtualPath no longer uses
	WebConfigurationManager.GetSection to retrieve the verification
	setting. Instead, the setting is retrieved in the static
	constructor.

	* HttpRequest.cs: ApplyUrlMapping must not use
	WebConfigurationManager.GetSection as it would cause a recursive
	call loop. Code to detect whether url mappings are in effect has
	been moved to a static constructor.

2009-06-04  Marek Habersack  <mhabersack@novell.com>

	* HttpResponse.cs: version header configuration is read lazily
	now.

	* HttpException.cs: do not show version info if custom errors are
	in effect. Fixes bug #509092
	Don't generate trace for 403. Fixes bug #509092

	* HttpApplicationFactory.cs: OnFileChanged ignores the directory
	part of the file triggering the event. Fixes bug #509998

2009-06-03  Marek Habersack  <mhabersack@novell.com>

	* VirtualPathUtility.cs: IsValidVirtualPath now checks the value
	of the
	HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\ASP.NET\VerificationCompatibility
	registry key when running on Windows and also consults the
	mono-specific system.web/monoSettings configuration section to see
	what is the verificationCompatibility property set to. If either
	of the two is set to 1, Mono will not verify the validity of
	the current request's path. Fixes bug #509163

	* HttpApplicationFactory.cs: OnFileChanged must check whether the
	modified location is a directory before it decides to ignore it
	when watcher's filter is "?eb.?config". Fixes bug #509450 (see
	also bug #495011)

	* HttpForbiddenHandler.cs: updated the error message to match
	.NET, added requested path and description. Fixes bug #509092

	* HttpException.cs: if trace is not requested, don't output <!--
	following the version information in WriteFileBottom. Fixes bug
	#509475
	GetDefaultErrorMessage appends trace only if showTrace is
	true. Fixes bug #509092

2009-06-02  Marek Habersack  <mhabersack@novell.com>

	* HttpApplication.cs: LocateHandler needs to pass current request
	path and filepath to WebConfigurationManager when retrieving
	system.web/httpHandlers section as only this will guarantee that
	any <location> elements relating to the current request's which
	contain system.web/httpHandlers section will be correctly read and
	used. Also fixes reading httpHandlers section if it's found in
	web.config located in a subdirectory. Fixes bug #509069

	* HttpException.cs: 403 errors get same treatment as 404
	below. Fixes bug #509092

2009-06-01  Marek Habersack  <mhabersack@novell.com>

	* HttpException.cs: if custom errors are enabled and the error
	code is 404 show the "standard" 404 error message instead of the
	default custom error mode one. Fixes bug #508649

2009-05-28  Marek Habersack  <mhabersack@novell.com>

	* HttpUtility.cs: fixed UrlDecode for encoded strings which
	should be converted to byte sequences longer than 2 bytes. Fixes
	bug #507666

2009-05-14  Marek Habersack  <mhabersack@novell.com>

	* HttpApplication.cs: LocateHandler won't cache if a default
	handler was returned.

2009-05-07 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* MimeTypes.cs: add silverlight related types.

2009-04-28 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpContext.cs:
	* HttpWorkerRequest.cs:
	* HttpRuntime.cs: if other parts of the system are using the
	threadpool and we queue requests, once the threadpool is free we
	might still not get back to use it to the maximum extent possible.
	Adding a few more calls to QueuePendingRequest ensures that does not
	happen.

2009-04-24  Marek Habersack  <mhabersack@novell.com>

	* HtmlizedException.cs: make HtmlException derive from
	HttpException. System.Web.Mvc relies upon compile and parse
	exception being descendants of HttpException or otherwise it will
	catch and ignore compilation/parsing errors.

2009-04-16  Marek Habersack  <mhabersack@novell.com>

	* HttpContext.cs: local resources code now uses the custom
	resource provider factory, just like the global resources
	code. Fixes bug #493263

2009-04-15  Marek Habersack  <mhabersack@novell.com>

	* HttpApplicationFactory.cs: if a notification is received from a
	FileSystemWatcher which was configured to watch for
	subdirectories, uses a filter (currently we have just one such
	watcher - waiting for changes to '?eb.?onfig') and the event
	doesn't match the filter, ignore the event. Fixes bug #495011

2009-04-13 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpUtility.cs: the collection returned from ParseQueryString knows
	how to convert the key/value pairs to a string.

2009-04-10 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpResponseStream.cs: use the unsafe version when copying buffers.

2009-04-06  Marek Habersack  <mhabersack@novell.com>

	* HttpRuntime.cs: added a new internal static property
	IsDebuggingEnabled

	* HttpContext.cs: IsDebuggingEnabled now calls
	HttpRuntime.IsDebuggingEnabled

2009-04-03  Gert Driesen  <drieseng@users.sourceforge.net>

	* HttpRuntime.cs: Avoid ANE on Windows when HttpRuntime is used
	outside of ASP.NET. Fixed compiler warning by setting
	assemblyMappingEnabled.

2009-04-02  Marek Habersack  <mhabersack@novell.com>

	* HttpException.cs: if there are more lines with errors, display
	them all.

2009-03-31  Marek Habersack  <mhabersack@novell.com>

	* HttpApplicationFactory.cs: use glob patterns to watch for
	changes to global.asax and web.config files.
	Set up recursive watch on web.config in a separate thread, to
	minimize application startup delay. Fixes bug #490497

	* VirtualPath.cs: added code to detect whether the VirtualPath
	instance represents a fake virtual path (IsFake property).
	Added new property DirectoryNoNormalize which returns
	non-normalized directory for the VirtualPath instance.
	Made ToString () a bit more friendly and well-behaved.

2009-03-26  Marek Habersack  <mhabersack@novell.com>

	* HttpWorkerRequest.cs: use a generic dictionary to keep header
	names in 2.0+.
	GetKnown{Request,Response}HeaderIndex doesn't use the switch
	anymore.

	* HttpResponse.cs: WriteHeaders now checks whether a header to be
	sent is a known one or not and uses the appropriate method to send
	that header. Partial fix for bug #488702

2009-03-25 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpResponse.cs: ClearHeaders() also resets cacheability.
	Bug #485557 fixed.

2009-03-21  Marek Habersack  <mhabersack@novell.com>

	* HttpResponse.cs: added two missing 3.0+ properties -
	SubStatusCode and TrySkipIisCustomErrors.

2009-03-04  Marek Habersack  <mhabersack@novell.com>

	* HttpRuntime.cs: do not clean the dynamic base directory in
	DoUnload, it can cause race conditions.

2009-03-03  Marek Habersack  <mhabersack@novell.com>

	* HttpResponse.cs: fully implemented the Headers property.
	It is also used in the 1.1 profile, but is internal.

	* HttpCookie.cs: GetCookieHeader renamed to GetCookieHeaderValue -
	now returns a string with the header value.

	* HttpCacheVaryByParams.cs: GetResponseHeader renamed to
	GetResponseHeaderValue - now returns a string with the header
	value.

	* HttpCachePolicy.cs: SetHeaders now takes a NameValueCollection
	instead of an ArrayList

	* HttpRequest.cs: avoid calculating the same value twice in
	MakeInputStream

2009-03-02 Everaldo Canuto <ecanuto@novell.com>

	* HttpResponse.cs: Headers property implementation.
	
2009-02-28 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* Web/HttpResponseHeader.cs:
	* Web/HttpResponse.cs:
	* Web/QueueManager.cs:
	* Web/HttpRequest.cs:
	* Web/TraceManager.cs:
	* Web/HttpServerUtility.cs:
	* Web/HttpApplication.cs: use GetWebApplication
	instead of GetSection for application level configuration.

2009-02-26  Marek Habersack  <mhabersack@novell.com>

	* HttpResponse.cs: added DisableKernelCache and TransmitFile
	methods.

	* IisTraceListener.cs: added + implemented

2009-02-25  Marek Habersack  <mhabersack@novell.com>

	* HttpApplication.cs: let the current context known that
	MapRequestHandler is done.

	* HttpContext.cs: implemented RemapHandler

2009-02-24  Marek Habersack  <mhabersack@novell.com>

	* TempFileStream.cs: the class is internal

	* VirtualPathUtility.cs: ToAbsolute (string, string, bool) is
	internal

	* HttpException.cs: made the HttpException (int httpCode, string
	message, Exception innerException, string resourceName) internal.

2009-02-22 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpServerUtility.cs: allow Transfer to static files too.

2009-02-20 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpWriter.cs: new Response property and WriteUTF8Ptr
	method.
	* HttpResponseStream.cs: added support for writing from an
	IntPtr. copied the memcpy method from String.cs.

2009-02-18 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpApplicationFactory.cs: check of global.asax was precompiled.

2009-01-29 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpApplicationFactory.cs: fix check that avoids lock. Keep one
	HttpApplication instance ready to be returned in an instance variable
	to avoid a few locks.

2009-01-29  Marek Habersack  <mhabersack@novell.com>

	* HttpApplicationFactory.cs: optimize lock usage.

2009-01-23 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpResponse.cs: make sure config is not null here.
	* HttpApplication.cs: add a timer (-d:PIPELINE_TIMER) for the pipeline.
	Handle timeouts for OutputPage() too.

2009-01-23 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpApplicationFactory.cs: set/reset the context for the application
	when creating/disposing. Dispose() out of the lock.

2009-01-24  Marek Habersack  <mhabersack@novell.com>

	* XmlSiteMapProvider.cs: if a nested sitemap is used (via the
	siteMapFile node attribute) watch the named file for
	changes. Fixes bug #465693

2009-01-19  Christian Hergert  <christian.hergert@gmail.com>

	* QueueManager.cs: Implement requests queued performance counter.
	* HttpRuntime.cs: Implement requests total counter.
	* HttpApplication.cs: Implement requests total counter.

2009-01-13  Dean Brettle  <dean@brettle.com>

	* HttpApplicationFactory.cs: if there are any *.browser files in
	App_Data/Mono_Machine_Browsers/, use those instead of the default
	machine browser files.  This allows app developers to workaround
	limitations with Mono's default browser files without causing
	incompatibilities with MS's implementation.

2009-01-09  Marek Habersack  <mhabersack@novell.com>

	* HttpContext.cs: RewritePath now treats relative and absolute
	file paths with more care. If a path is of the ~/file.aspx form,
	then the ~/ part is removed and the rest is combined with the base
	virtual path. If the file path is of the ~ or /file.aspx forms,
	then it is combined verbatim with the base virtual path. Fixes bug
	#463964
	Make sure the path returned from HttpRequest.BaseVirtualPath
	contains the trailing slash before combining. Fixes bug #463964

2008-12-25 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* ServerVariablesCollection.cs: use IndexOf (char).

2008-12-24  Marek Habersack  <mhabersack@novell.com>

	* HttpApplicationFactory.cs: watch for changes to web.config also
	in the subdirectories.

2008-12-20  Marek Habersack  <mhabersack@novell.com>

	* HttpResponse.cs: the code in TransmitFile (VirtualFile, bool)
	was an abomination - dear children, don't do this at home (never,
	ever, allocate a buffer to load entire file). I will wear a brown
	paper bag every 2nd Sunday in the next 6 months for writing the
	old version of this code.
	New code optimizes the write when DefaultVirtualFile is used (as
	it refers to a physical file on disk) and reads/writes other
	virtual files in chunks.

2008-12-16  Marek Habersack  <mhabersack@novell.com>

	* StaticFileHandler.cs: use HttpRuntime.RunningOnWindows instead
	of checking the platform directly.

2008-12-09  Marek Habersack  <mhabersack@novell.com>

	* HttpServerUtility.cs: when Execute finishes, clear
	Request.QueryStringRaw. Backport of r121010 by Vladimir Krasnov.

2008-12-03  Gert Driesen  <drieseng@users.sourceforge.net>

	* NoParamsInvoker.cs:
	* HttpApplicationFactory.cs: Fixed support for static eventhandlers.

2008-11-25 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpContext.cs: MS does not throw. They just return null.

2008-11-24  Marek Habersack  <mhabersack@novell.com>

	* HttpRuntime.cs: take PlatformID.MacOSX into account when
	determining whether we're running on Windows or not. Possible fix
	for #447874

2008-11-21  Marek Habersack  <mhabersack@novell.com>

	* HttpParseException.cs, HtmlizedException.cs: added
	deserialization constructor.

2008-10-31  Marek Habersack  <mhabersack@novell.com>

	* HttpContext.cs: RewritePath correctly rewrites paths for cases
	when application is running under a virtual directory different to
	'/'. Fixes bug #371581
	RewritePath checks the passed virtual path for validity.

	* HttpRequest.cs: MapPath now uses
	VirtualPathUtility.IsValidVirtualPath.

	* VirtualPathUtility.cs: made Canonize () internal.
	Added a new method - IsValidVirtualPath () which checks whether a
	passed path contains only characters allowed for virtual paths.

2008-10-22  Marek Habersack  <mhabersack@novell.com>

	* HttpApplicationFactory.cs: use only the first matching method in
	GetApplicationTypeEvents, since it will be the one coming from the
	topmost type. Partial fix for bug #437691

2008-10-21  Marek Habersack  <mhabersack@novell.com>

	* HttpApplication.cs: if context.Session is null in get_Session,
	throw an exception. Fixes bug #437289

	* CapabilitiesLoader.cs: seal BrowserData.
	Seal CapabilitiesLoader.
	Do not lock on typeof (CapabilitiesLoader) in GetCapabilities ().

2008-10-16  Marek Habersack  <mhabersack@novell.com>

	* HttpApplicationFactory.cs: when looking up application type
	event handlers (the Application_* methods), look deep in the
	parent chain - we must support private handler methods in base
	types as well.

2008-10-15  Marek Habersack  <mhabersack@novell.com>

	* HttpResponse.cs: CacheabilityUpdatedEvent is no longer
	used. cached_response is allocated only when the IsCached property
	is assigned the 'true' value. 

	* HttpCachePolicy.cs: CacheabilityUpdatedEvent is no longer used,
	removed all the traces of it. SetCacheability should not switch
	output caching on.

2008-10-12  Gert Driesen  <drieseng@users.sourceforge.net>

	* HttpResponse.cs: Simplify code for outputting ASP.NET version, as
	version header cannot be configured. MS corrected this documenation
	error in .NET 2.0 SDK.

2008-10-03 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpApplication.cs: make sure we release the resources used by the
	request and/or the response at the end of the request.
	Fixes bug #430040.

2008-10-01  Marek Habersack  <mhabersack@novell.com>

	* BrowserCapabilities.cs: IsBrowser needs to compare browser names
	case insensitively.

2008-09-29  Marek Habersack  <mhabersack@novell.com>

	* HttpApplication.cs: do not assume the passed IAsyncResult is a
	is a valid object in async_handler_complete_cb. Fixes bug #430488

2008-09-28  Sebastien Pouliot  <sebastien@ximian.com>

	* HttpRequest.cs: Make sure the result of the multiplications are
	longs (not integers casted into longs since they could overflow).
	[Found using Gendarme's ReviewCastOnIntegerMultiplicationRule]

2008-09-23  Marek Habersack  <mhabersack@novell.com>

	* HttpWorkerRequest.cs: implemented a SendCalculatedContentLength
	overload. This method apparently does nothing in MS.NET.

2008-09-16  Juraj Skripsky  <js@hotfeet.ch>

	* HttpServerUtility.cs (UrlDecode, UrlEncode): Respect request/response
	encoding. Fixes bug #426539.

2008-08-29  Marek Habersack  <mhabersack@novell.com>

	* HttpApplication.cs: do not cache handlers which aren't
	reusable.

2008-08-20  Marek Habersack  <mhabersack@novell.com>

	* HttpResponseHeader.cs: encode header values if
	httpRuntime.enableHeaderChecking is true (default). Fixes bug
	#418620

2008-08-13  Marek Habersack  <mhabersack@novell.com>

	* HttpException.cs: do not use StringBuilder.AppendFormat when
	there is no need.

2008-08-08  Marek Habersack  <mhabersack@novell.com>

	* XmlSiteMapProvider.cs: a better bugfix for bug #412495.
	Do not call RootNode within BuildSiteMap, as it induces
	recursion. Fixes bug #415685.

2008-07-29  Marek Habersack  <mhabersack@novell.com>

	* HttpRequest.cs: if the FilePath contains embedded cookie-less
	session identifier, remove it before computing the base virtual
	directory. Fixes bug #397418

2008-07-28  Marek Habersack  <mhabersack@novell.com>

	* XmlSiteMapProvider.cs: set the base ResourceKey to the name of
	our associated site map file, so that localization works
	correctly. Fixes bug #412493
	Do not add the root node retrieved from BuildSiteMapRecursive in
	BuildMap, if the node is already the current root node. Fixes bug
	#412495

2008-07-26  Gert Driesen  <drieseng@users.sourceforge.net>

	* HttpCachePolicy.cs: Only add Expires header if expire date is
	actually set. Removed extra tabs and regions. Code formatting.

2008-07-23  Marek Habersack  <mhabersack@novell.com>

	* HttpApplication.cs: do not register handlers for
	BeginRequest/EndRequest when called from within the
	Application_Start handler. Fixes bug #411213

	* HttpApplicationFactory.cs: let the application know we're
	running the Application_Start handler so that it can suppress
	registering some events from inside that handler (see bug
	#381971). Fixes bug #411213

2008-06-30  Marek Habersack  <mhabersack@novell.com>

	* HttpRuntime.cs, HttpApplication.cs: hush the warnings

	* HttpContext.cs: GetGlobalObjectFromFactory caches the
	ResourceManager objects now. Patch from Zoltan Varga
	<vargaz@gmail.com>, thanks!
	The GetGlobalObjectFromFactory caches are thread local to avoid
	locking.
	GetResourceObject ResourceManager cache is now a thread local
	Dictionary to avoid cloning.
	Hush the warnings.

2008-06-27  Robert Jordan  <robertj@gmx.net>

	* HttpCachePolicy.cs: map default HttpCacheability to
	"Cache-control: private" for MS.NET compatibility.
	Fixes bug #404083. Contributed by
	Hubert FONGARNAND <informatique.internet@fiducial.fr>.

2008-06-21  Robert Jordan  <robertj@gmx.net>

	* HttpRuntime.cs (.cctor): Workaround for bug #402263.

2008-06-19  Marek Habersack  <mhabersack@novell.com>

	* MimeTypes.cs: added a mime type entry for .xpi files.

2008-06-18  Juraj Skripsky  <js@hotfeet.ch>

	* HttpResponse.cs (AddHeadersNoCache): Add "X-AspNet-Version" header if
	enabled.

2008-06-16  Noam Lampert  <noaml@mainsoft.com>

	* HttpContext.cs: improve support for RewritePath

2008-06-10  Marek Habersack  <mhabersack@novell.com>

	* HttpRuntime.cs: do not create a new thread to run the
	application, reuse the thread from the hosting application (XSP's
	thread comes from threadpool).

2008-06-06  Marek Habersack  <mhabersack@novell.com>

	* SiteMap.cs: FindCurrentNode is no longer needed. CurrentNode
	uses Provider.CurrentNode to find the return value.
	AddNode doesn't throw a duplicate key exception for nodes not
	belonging to the current provider.
	Check whether keys exist before removing entries from the
	dictionaries.

	* XmlSiteMapProvider.cs: implemented support for child providers
	(the AddProvider method). FindSiteMapNode* methods look for the
	node also in the collection of child providers. Fixes bug #397040

2008-06-04  Marek Habersack  <mhabersack@novell.com>

	* HttpResponse.cs: correctly modify virtual path to include the
	session ID in cookieless session mode. Fixes bug #396628.

	* HttpServerUtility.cs: remove session hash from the URL if in the
	cookieless mode. Fixes bug #396628.

	* HttpRequest.cs: make sure that BaseVirtualDir always returns
	some value.

2008-06-02  Miguel de Icaza  <miguel@novell.com>
	
	* HttpRuntime.cs: Thanks to Christian Hergert for finding this
	one.  

	Do not throw NIEX on IsOnUNCShare, instead compute the value. 

2008-05-30  Marek Habersack  <mhabersack@novell.com>
	
	* HttpApplication.cs, HttpCachePolicy.cs, SiteMapProvider.cs,
	TraceContext.cs: do not use synthetized event accessors (to avoid
	locks).

2008-05-19 Noam Lampert <noaml@mainsoft.com>

        * HttpServerUtility.cs: Fix bug in UrlPathEncode when URL contains '?' 

2008-05-12 Noam Lampert <noaml@mainsoft.com>

        * HttpApplication.cs: Fix regressions introduced by latest commit

2008-05-07 Gonzalo Panigua Javier <gonzalo.mono@gmail.com>

	* HttpApplication.cs: create a fake context while loading the
	modules on the first request so that the modules don't mess up
	with the actual output of that request.

2008-05-07  Marek Habersack  <mhabersack@novell.com>

	* HttpRequest.cs: StripPath should handle UNC paths too. Fixes bug
	#385870. Patch from Ivan Hamilton <ivan@chimerical.com.au>,
	thanks!

2008-05-06  Marek Habersack  <mhabersack@novell.com>

	* MimeTypes.cs: mime type keys might not exist in the dictionary,
	in the 2.0 profile. Patch from Rolf Kvinge <rkvinge@novell.com>
	and Jean-Baptiste Evain <jbevain@novell.com>, thanks! Fixes bug
	#386008

2008-04-30  Marek Habersack  <mhabersack@novell.com>

	* HttpApplication.cs: when the Start method is called in a new
	thread, the thread's culture and ui culture are set to their
	defaults, thus ignoring whatever their values were in the parent
	thread. This is now fixed by passing an array containing the
	culture values to the Start method, so that the new thread can be
	properly initialized. Fixes bug #323566

	* SiteMapNode.cs: the implicitResourceKey parameter to one of the
	constructors sets the value of the ResourceKey property.
	GetImplicitResourceString uses the provider's ResourceKey as the
	global resource object key and the node's ResourceKey to construct
	the resource name. Fixes bug #323994
	ResourceKey setter throws an InvalidOperationException now, when
	the node is read-only.

2008-04-29  Marek Habersack  <mhabersack@novell.com>

	* HttpException.cs: safe guard against context being null in
	GetHtmlErrorMessage.

2008-04-26  Marek Habersack  <mhabersack@novell.com>

	* VirtualPath.cs: added a new property, PhysicalPath.

2008-04-25  Gert Driesen  <drieseng@users.sourceforge.net>

	* HttpResponse.cs: Use double quotes in link to match MS.

2008-04-25  Marek Habersack  <mhabersack@novell.com>

	* HttpApplication.cs: use Request.CurrentExecutionFilePath when
	querying for the handler. Makes requests work if request path was
	rewritten without modifying the FilePath. Fixes bug #383652

	* HttpContext.cs: set Request.FilePath in RewritePath only if
	setClientFilePath is true. Fixes bug #383652
	Revert the change in revision 100273 - the real bug was in a
	different overload of RewritePath, fixed with the commit for the
	above bug #383652

2008-04-24  Marek Habersack  <mhabersack@novell.com>

	* HttpApplication.cs: added a new overload of GetHandler which
	allows the caller to ignore the handler found in the context
	passed to the method.

	* HttpServerUtility.cs: have HttpApplication.GetHandler ignore the
	handler found in the current context when Execute'ing another
	page. Fixes bug #316166

2008-04-23  Marek Habersack  <mhabersack@novell.com>

	* VirtualPath.cs: introduced the CurrentRequestDirectory property,
	which returns the virtual directory for the current request. The
	information is taken from either current request's
	CurrentExecutionFilePath property (if not null) or from the path
	set externally (by setting the property or using the appropriate
	VirtualPath constructor). The new property is used to construct
	the correct absolute virtual path in the MakeRooted method. Fixes
	bug #381715.

	* HttpApplication.cs: events registered from Application_Start are
	silently ignored - any event registered after the one-time
	application initialization is completed, is ignored. Fixes bug
	#381971

	* HttpApplicationFactory.cs: call app.DisposeInternal instead of
	app.Dispose.

	* HttpContext.cs: Fix bug #371581 for 1.1 as well.

2008-04-19  Marek Habersack  <mhabersack@novell.com>

	* HttpException.cs: don't write the stack trace inside html
	comment if custom errors are enabled.

2008-04-15  Kornél Pál  <kornelpal@gmail.com>

	* HttpRuntime.cs: Don't add Date header for error pages either. Fixes bug
	#363404.

2008-04-15  Marek Habersack  <mhabersack@novell.com>

	* HttpRequest.cs: dispose of streams the way it should
	be done.

2008-04-14  Igor Zelmanovich <igorz@mainsoft.com>

	* HttpRuntime.cs: refactoring.

2008-04-14  Marek Habersack  <mhabersack@novell.com>

	* XmlSiteMapProvider.cs: FindStartingNode throws an exception when
	it is passed a file which ends in an extension other than
	.sitemap.
	Fixed a check for the siteMapFile attribute presence. Fixes bug
	#379566.

	* SiteMap.cs: FindCurrent node uses the default provider
	exclusively. Fixes bug #379566

2008-04-10  Marek Habersack  <mhabersack@novell.com>

	* HttpApplicationFactory.cs: compile web references before
	App_Code. Fixes bug #377934

	* MimeTypes.cs: added some missing MIME types. New entries
	contributed by Albert Ritmeester
	<aritmeester@vitalhealthsoftware.nl>, thanks! Fixes bug #372290

2008-04-09  Marek Habersack  <mhabersack@novell.com>

	* HttpContext.cs: make RewritePath work correctly in the 2.0
	profile, fixes bug #371581

	* HttpApplicationFactory.cs: compile web references. Fixes bug
	#377934

	* VirtualPath.cs: added a method to convert a physical path into a
	virtual one, if the physical path is under the application root.

2008-04-08  Dean Brettle <dean@brettle.com>

	* HttpApplicationFactory.cs (CapabilitiesProcessor): changed to
	use etc/mono/2.0/Browser/*.browser files in addition to 
	~/App_Browsers/*.browser files.

2008-04-07  Marek Habersack  <mhabersack@novell.com>

	* VirtualPath.cs: added

2008-04-02  Marek Habersack  <mhabersack@novell.com>

	* HttpRequest.cs: make sure QueryStringRaw is always returned with
	a leading '?' and that we return something meaningful even if the
	url components weren't collected before. Fixes bug #376352

2008-04-01  Marek Habersack  <mhabersack@novell.com>

	* HttpApplication.cs: set context.Handler to the detected handler
	object before firing application events. Fixes bug #372897

2008-03-31  Marek Habersack  <mhabersack@novell.com>

	* StaticFileHandler.cs: added code to use custom
	VirtualPathProvider, if present, to serve files from virtual
	storage.

	* HttpResponse.cs: added two internal TransmitFile overloads which
	take a VirtualFile as a parameter.

2008-03-27  Marek Habersack  <mhabersack@novell.com>

	* HttpRequest.cs: make UrlComponents internal.

	* HttpContext.cs: added support for resource provider factories.

2008-03-13  Marek Habersack  <mhabersack@novell.com>

	* HttpApplicationFactory.cs: use HttpApplication.BinDirs to
	create watchers for binary application directories.

	* HttpApplication.cs: use HttpRuntime.CaseInsensitive instead of
	own IsRunningOnWindows.
	Remove the BinDirectories enumerator property, replaced with a
	BinDirectory one returning a string with path to the binary
	directory.

	* HttpRuntime.cs: introduce two static properties -
	CaseInsensitive (set to true whenever the environment is
	case-insensitive - i.e. MONO_IOMAP="all" or MONO_IOMAP="case", or
	running on Windows) and RunningOnWindows.

2008-03-12  Marek Habersack  <mhabersack@novell.com>

	* HttpApplication.cs: HttpContext.Handler may be set by a module
	in any of the event handlers between acquiring the initial handler
	and processing the request. Honor the setting and use
	HttpContext.Handler instead of the matched one if set.

2008-03-10  Marek Habersack  <mhabersack@novell.com>

	* HttpApplication.cs: synchronize Modules and Dispose with
	InitOnce. Should prevent firing module events before the modules
	are fully initialized.

2008-03-09  Dean Brettle <dean@brettle.com> 

	* HttpApplicationFactory.cs: Added support for detecting 
	App_Browsers/*.browser files and using them to determine capabilities.
	Also restart the app if the App_Browsers, App_Code, or App_GlobalResources
	directories are created.

	* BrowserCapabilities.cs (TagWriter): get value via internal virtual
	GetTagWriter() method, which is overridden in nBrowser.Result.

	* HttpRequest.cs (BrowserMightHaveSpecialWriter, BrowserMightHaveAdapters):
	internal properties added to allow Page and Control methods to avoid
	accessing Request.Browser to get browser-specific HtmlTextWriters or 
	ControlAdapters.  Those things only exist when there are App_Browsers
	files.

2008-03-09  Marek Habersack  <mhabersack@novell.com>

	* HttpUtility.cs: HTML-decode the query string prior to parsing
	it.

2008-03-01  Marek Habersack  <mhabersack@novell.com>

	* HttpRuntime.cs: SettingsMappingManager has been moved to
	Mono.Web.

2008-02-28  Marek Habersack  <mhabersack@novell.com>

	* HttpParamsCollection.cs: restore the GetValues overrides only to
	make sure the collections are merged before invoking the base
	implementation. 
	Remove code that's no longer needed.

2008-02-27  Marek Habersack  <mhabersack@novell.com>

	* HttpException.cs: error message output format changes.

2008-02-26  Kornél Pál  <kornelpal@gmail.com>

	* HttpResponse.cs: Don't add Date header because servers usually add
	a Date header that would result in duplicate Date header sent to the
	client. Fixes bug #363404.

2008-02-25  Marek Habersack  <mhabersack@novell.com>

	* HttpException.cs: fix a buglet with unfoldable hidden divs which
	contain the full compiler output and the full source code.

	* HttpContext.cs: correctly set the timeout if the user has
	specified a timeout which, when converted to milliseconds yields a
	value larger than one allowed by Timer.Change. This can happen,
	for instance, when HttpServerUtility.ScriptTimeout is set to
	Int32.MaxValue. Previously, when something like that happened, the
	value was converted to 0ms, giving an instantenous timer
	expiration and, what follows, a request "timeout".

2008-02-19  Marek Habersack  <mhabersack@novell.com>

	* HttpParamsCollection.cs: do not override the NVC behavior for
	GetValues - values from different sources (Form, Query, Cookies,
	ServerVariables) must be kept separate for this purpose. This is
	also the behavior of MS.NET. Fixes bug #362189

2008-02-18  Marek Habersack  <mhabersack@novell.com>

	* HttpRuntime.cs: When app is offline, send status code 503
	instead of 200. Fixes bug #357565

2008-02-10  Gert Driesen  <drieseng@users.sourceforge.net>

	* HttpException.cs: Avoid IndexOutOfRangeException when there are no
	error lines.

2008-02-07  Gert Driesen  <drieseng@users.sourceforge.net>

	* HttpException.cs: Removed CWL.

2008-02-07  Marek Habersack  <mhabersack@novell.com>

	* HttpException.cs: more exception output compatibility changes to
	match MS.NET.

2008-02-07  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpContext.jvm.cs: added CurrentHandlerInternal property

2008-02-07  Marek Habersack  <mhabersack@novell.com>

	* HttpException.cs: moved several strings to constants, for easier
	maintenance. 
	Added 3 new constructors which let the caller to set the exception
	description.
	The Description property is now settable.
	The stack trace at the bottom of the file is written after the
	terminating </html>, inside a HTML comment. Format changed to
	match MS.NET.
	Error 404 is handled in a special way, to match the output with
	MS.NET.

	* HttpContext.cs, StaticFileHandler.cs, HttpApplication.cs: use
	the new HttpException constructor for 404.

2008-02-07  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpResponse.cs: fixed AddHeadersNoCache, removed date_header since
	java app server adds it, under TARGET_J2EE.

2008-02-06  Marek Habersack  <mhabersack@novell.com>

	* HttpApplicationFactory.cs: in FireOnAppEnd, set app_type to null
	after the event has been fired.

	* HttpRuntime.cs: when switching to offline mode fire the
	shutdown events. Fixes bug #357565.
	Watch for Created event in the FileSystemWatcher for the
	app_offline.htm files.

2008-01-29  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpRequest.cs: performance optimization of QueryStringRaw

2008-01-27  Igor Zelmanovich <igorz@mainsoft.com>

	* HttpResponse.cs: rise PreSendRequestHeaders befire headers_sent 
	initialization to allow set additional headers or status code at 
	PreSendRequestHeaders event handlers.

2008-01-24  Marek Habersack  <mhabersack@novell.com>

	* HttpApplicationFactory.cs: use BuildManager.GetCompiledType to
	build the application (global.asax) file.

2008-01-22  Konstantin Triger <kostat@mainsoft.com>

	* HttpResponse.cs: move headers_sent initialization up to prevent additional
		trial to send headers if an exception is thrown.

2008-01-21  Konstantin Triger <kostat@mainsoft.com>

	* HttpRequest.cs: Form validation: ensure the collection is accessible after
		validation failed.

2008-01-16  Juraj Skripsky  <js@hotfeet.ch>

	* HttpRequest.cs (get_UrlReferrer): Handle case when headers contain
	invalid Url for referer.

2008-01-16  Juraj Skripsky  <js@hotfeet.ch>

	* HttpCookieCollection.cs (AllKeys): Use Keys.CopyTo().

2008-01-14  Sebastien Pouliot  <sebastien@ximian.com>

	* HttpCookie.cs: Fix HttpOnly setter. Found using Gendarme.

2008-01-02  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpContext.cs: added resource manager caching in GetResourceObject
	* HttpContext.jvm.cs: added resourceManagerCache storing in appdomain

2007-12-31  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpContext.cs: added HasError method
	* HttpApplication.cs: refactored thread abort handling

2007-12-31  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpRuntime.cs: fixed HttpRuntime, added Cache.DependencyCache
	initialization

2007-12-26 Igor Zelmanovich <igorz@mainsoft.com>
	
	* TraceContext.cs:
	* TraceData.cs:
	make trace considers control state info. 		

2007-12-25 Igor Zelmanovich <igorz@mainsoft.com>
	
	* HttpApplication.cs: initialize culture each request.
	makes it consider culture settings from nested web.config 		

2007-12-19  Juraj Skripsky <js@hotfeet.ch>

	* HttpContext.cs, HttpApplication.cs: Move timeout tracking from
	TimeoutManager into HttpContext. Replace periodic timeout checks with
	separate per-context timeout timers.  
	* HttpRuntime.cs: remove TimeoutManager.

2007-12-18  Miguel de Icaza  <miguel@novell.com>

	* HttpCookieCollection.cs (Get): implement using the indexer to
	share some code.   Should fix #349564.

2007-12-16 Igor Zelmanovich <igorz@mainsoft.com>
	
	* HttpContext.cs: added IsProcessingInclude property.
	* HttpServerUtility.cs: set IsProcessingInclude value within Execute.

2007-12-13  Marek Habersack  <mhabersack@novell.com>

	* HttpRequest.cs, HttpResponse.cs, SiteMapNode.cs, HttpRuntime.cs,
	HttpResponseStream.cs, HttpApplication.cs, HttpCachePolicy.cs:
	speed optimization - use String.Concat instead of String.Format in
	some cases.

2007-12-13 Igor Zelmanovich <igorz@mainsoft.com>
	
	* HttpApplication.cs:
	* HttpContext.cs:
	* HttpRequest.cs:
	* HttpServerUtility.cs:
	- When Transfer/Execute is called with preserveForm=true, transferred 
	page is not processed as PostBack but form collection is preserved.
	- When Execute is called more than once, PreviousPage property is set 
	correct.

2007-12-09  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpApplication.cs: added TARGET_JVM to LoadType method

2007-12-08  Marek Habersack  <mhabersack@novell.com>

	* HttpRuntime.cs: initialize the Settings Mapping Manager once per
	application, just after initalizing the WebConfigurationManager.

2007-11-28  Marek Habersack  <mhabersack@novell.com>

	* HttpApplication.cs: peform the check of whether we're running on
	Windows from within a static constructor.

2007-11-23  Marek Habersack  <mhabersack@novell.com>

	* RequestNotificationStatus.cs: fix the order of enum members.

	* RequestNotification.cs: assign correct values to the enum
	members.

	* StaticSiteMapProvider.cs: change visibility of the constructor.

	* HttpRequest.cs: added missing property LogonUserIdentity.

	* HttpCacheVaryByContentEncodings.cs: this constructor should not
	be public.

2007-11-23  Daniel Nauck  <dna@mono-project.de>

        * TraceContextRecord.cs: implemented

2007-11-23  Marek Habersack  <mhabersack@novell.com>

	* BrowserCapabilities.cs: the JavaScript property is obsolete in
	2.0sp1.

2007-11-22  Daniel Nauck  <dna@mono-project.de>

        * IPartitionResolver.cs: implemented

2007-11-22  Daniel Nauck  <dna@mono-project.de>

        * WebPageTraceListener.cs: implemented

2007-11-22  Marek Habersack  <mhabersack@novell.com>

	* RequestNotificationStatus.cs: added

	* RequestNotification.cs: added

	* HttpCacheVaryByContentEncodings.cs: added

	* HttpCachePolicy.cs: added the HttpCacheVaryByContentEncodings
	property.

	* HttpApplication.cs: added 3 new events to the pipeline (for
	compatibility with the 2.0sp1/3.5 version of System.Web)

2007-11-22  Daniel Nauck  <dna@mono-project.de>

        * WebPageTraceListener.cs: initial checkin (stubs).

2007-11-17  Marek Habersack  <mhabersack@novell.com>

	* HttpResponse.cs: make sure fileDependencies is not null before
	attempting to use it. Fixes bug #342511.

2007-11-07 Igor Zelmanovich <igorz@mainsoft.com>

	* TraceContext.cs:
	* TraceData.cs: implemented TraceMode feature.	

2007-11-07 Igor Zelmanovich <igorz@mainsoft.com>

	* BaseParamsCollection.cs:
	ensure collection will not be changed during enumeration.

2007-11-06  Marek Habersack  <mhabersack@novell.com>

	* HttpResponse.cs: trigger the PreSendRequestHeaders event before
	setting the output headers. Fixes bugs #334521, #339538

	* TraceData.cs: do not use DataTable for trace data storage
	anymore. Instead, a set of classes is used to hold data and a
	Queue container (generic version in 2.0) is used to hold the data
	rows. Fixes bug #325267.

2007-11-05  Marek Habersack  <mhabersack@novell.com>

	* HttpRequest.cs: cope with UriBuilder.Query being null.

2007-11-03  Gert Driesen  <drieseng@users.sourceforge.net>

	* HttpRuntime.cs: Always return a path with trailing directory
	separator character. Spaces to tabs.

2007-11-03  Marek Habersack  <mhabersack@novell.com>

	* HttpApplication.cs: removed unused internal PrivateBinPath
	property.

	* HttpRuntime.cs: BinDirectory returns a path that ends with the
	directory separator character.

2007-11-02  Marek Habersack  <mhabersack@novell.com>

	* HttpServerUtility.cs: in 2.0, Transfer is allowed only from
	pages. Fixes bug #334931
	Also, according to MSDN docs, transfer in 2.0+ is possible only to
	other pages.

	* HttpRuntime.cs: BinDirectory returns a full path to the actual
	bin directory in the application root. If no bin directory is
	found, it defaults to returning <applicationPath>/bin. Fixes bug
	338116.

	* HttpApplication.cs: introduced HTTP handler cache to save time
	on repetitive handler collection traversals. On busy sites the
	traversal of the default 26 handlers may account for thousands of
	unnecessary calls to configsystem.LocateHandler method, which may
	also involve executing a regex. The cache is cleared whenever the
	HTTP handler collection is modified.

2007-10-30 Igor Zelmanovich <igorz@mainsoft.com>

	* HttpUtility.cs: fixed HtmlEncode for TARGET_JVM.

2007-10-30 Igor Zelmanovich <igorz@mainsoft.com>

	* HttpUtility.cs: fixed UrlPathEncode.

2007-10-24  Gert Driesen  <drieseng@users.sourceforge.net>

	* StaticFileHandler.cs: Modified 404 message to match MS.

2007-10-24  Marek Habersack  <mhabersack@novell.com>

	* HttpUtility.cs: MS.NET does not support the ';' query parameter
	separator. Fixes bug #335615

2007-10-18  Juraj Skripsky  <js@hotfeet.ch>

	* StaticSiteMapProvider.cs: Replace Hashtables by Dictionaries,
	don't allocate them on-demand, there will never be many
	Provider instances around.
	AddNode(): Check for duplicate keys before adding any item to
	hashtables.
	RemoveNode(): Use fact that Hashtable.Remove() never throws,
	remove item from keyToNode as well, make symmetric to AddNode().
	MapUrl(): Use VirtualPathUtility, allow for full urls
	(e.g. http://www.google.com).
	
2007-10-17  Marek Habersack  <mhabersack@novell.com>

	* StaticFileHandler.cs: fixed an bug with Mono running under
	Windows operating systems which caused XSP to return source of the
	requested page if the file name used in the request ended in any
	number of spaces or dots. The problem lies in the way the Win32
	subsystem treats such file names - it ignores the trailing
	characters and allows the calling application to open a file on
	disk even when its name does not contain the trailing characters
	used in the open request. Such file names may be supported by the
	underlying filesystem (e.g. NTFS) but they are not supported by
	the I/O Win32 subsystem. The security issue is reported in
	CVE security report CVE-2007-5473. Fixes bug #332401
	
2007-10-17  Igor Zelmanovich <igorz@mainsoft.com>

	* HttpResponse.cs:
	response status is sent after PreSendRequestHeaders invoked.
	Redirect method set RedirectLocation property
	fixes bug #334521
		
2007-10-15  Marek Habersack  <mhabersack@novell.com>

	* HttpApplication.cs: do not return a non-existing bin directory
	from BinDirectories. Patch from Atsushi Enomoto
	<atsushi@ximian.com>, thanks! Fixes bug #332434. 

2007-10-04  Marek Habersack  <mhabersack@novell.com>

	* HttpApplication.cs: call the Init method after loading the
	modules and hooking up application events. Fixes bug #330416.

2007-10-01  Marek Habersack  <mhabersack@novell.com>

	* HttpServerUtility.cs: set a flag when transferring control to
	another page.

	* HttpContext.cs: added an internal InTransit property to carry
	information that HttpServerUtility.Transfer has been used, over to
	the target page.

2007-09-12  Juraj Skripsky <js@hotfeet.ch>

	* StaticSiteMapProvider.cs (AddNode): Add message text to
	InvalidOperationException (duplicate url case).

2007-09-06  Marek Habersack  <mhabersack@novell.com>

	* HttpCachePolicy.cs: implemented setting the ETag and
	Last-Modified headers from file dependencies.

	* HttpResponse.cs: implemented file dependency methods.

2007-09-01  Marek Habersack  <mhabersack@novell.com>

	* HttpRuntime.cs: rewrote the app_offline.htm support. It now uses
	filesystem watchers instead of checking for existence of the
	file(s) at the beginning of every request. No performance penalty
	that way.

2007-08-31  Marek Habersack  <mhabersack@novell.com>

	* HttpApplicationFactory.cs: added methods to enable/disable
	watchers.

	* HttpRuntime.cs: implemented handling of app_offline.htm file in
	the application root directory. Fixes bug #81127.

	* HttpResponse.cs: make sure neither context or
	context.ApplicationInstance are null in End ().

2007-08-27  Marek Habersack  <mhabersack@novell.com>

	* HttpCookie.cs: make sure a key is output even if it has no
	values set. Fixes bug #81333.

2007-08-23  Marek Habersack  <mhabersack@novell.com>

	* HttpApplication.cs: added a static array BinDirs which contains
	the common bin directory names we can encounter.
	Added internal static property IsRunningOnWindows.
	Added internal enumerable property BinDirectories to iterate over
	the full paths of the available binary directories.
	Added internal enumerable property BinDirectoryAssemblies to
	iterate over .dll files in the bin directories.
	LoadTypeFromPrivateBin renamed to LoadTypeFromBin.
	LoadTypeFromBin uses BinDirectoryAssemblies.
	
	* HttpApplicationFactory.cs: use HttpApplication.BinDirectories to
	interate over the list of bin dirs.

2007-08-21  Marek Habersack  <mhabersack@novell.com>

	* HttpApplicationFactory.cs: watch for changes in all the
	private binary directories for the current application domain.

	* HttpApplication.cs: turn the PrivateBinPath property into an
	internal enumerable, so that code throughout the assembly can
	iterate over the list of private bin directories configured for
	the application domain.
	Added a new internal method LoadTypeFromPrivateBin, for sharing
	with other parts of the assembly.

2007-08-18  Juraj Skripsky <js@hotfeet.ch>

	* HttpRequest.cs (StripPath): Fix off-by-one error, make static.

2007-08-18  Marek Habersack  <mhabersack@novell.com>

	* HttpRequest.cs: IE sends the full input file path when uploading
	a file via the upload input control. Detect the situation and
	strip the leading path. Fixes bug #82059.

	* HttpServerUtility.cs: set the current context's path(s) to the
	Transfer/Execute target only to retrieve the new handler, and
	restore them immediately afterwards. It has a two-fold effect:
	first it avoids an extra round trip to the original page which
	called Transfer/Execute, second it makes FilePath etc. return
	information about the original page (that is the one which called
	Transfer/Execute). Fixes bug #82439.

2007-08-14  Marek Habersack  <mhabersack@novell.com>

	* XmlSiteMapProvider.cs: do not hide this_lock.

2007-08-09  Marek Habersack  <mhabersack@novell.com>

	* HttpApplicationFactory.cs: unconditionally watch for changes
	(including creation) to Global.asax, global.asax, Web.config,
	web.config and Web.Config. This makes the application restart once
	any of those is created. Patch from Juraj Skripsky
	<juraj@hotfeet.ch>, thanks! Fixes bug #82380.

2007-08-08  Marek Habersack  <mhabersack@novell.com>

	* StaticSiteMapProvider.cs, HttpApplicationFactory.cs,
	HttpStaticObjectsCollection.cs, SiteMapProvider.cs,
	XmlSiteMapProvider.cs, HttpApplication.cs, CapabilitiesLoader.cs,
	TimeoutManager.cs: do not use lock (this), replace it with lock
	(this_object), where this_object is an instance	variable. Prevents
	deadlocks in situation when external code locks on the class
	instance.

2007-08-05  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpUtility.cs: performance refactoring, optimized UrlEncode

2007-08-05 Igor Zelmanovich <igorz@mainsoft.com>

	* SiteMapNode.cs: refactoring + typo fix: 
	variable is declared in scope where is used.

2007-07-31  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* VirtualPathUtility.cs: refactored GetDirectory, ToAbsolute, added
	internal api to skip path normalizing

2007-07-30  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpResponseStream.jvm.cs: optimized CharBucket

2007-07-22  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpServerUtility.cs: fixed Execute, SetCurrentExePath should be 
	called after ApplicationInstance.GetHandler call in case of GetHandler
	fails for some reason

2007-07-21  Marek Habersack  <mhabersack@novell.com>

	* HttpRuntime.cs: clean up the dynamic base directory on domain
	shutdown.

2007-07-10  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpUtility.cs: optimized HtmlEncode and HtmlAttributeEncode methods

2007-07-05  Miguel de Icaza  <miguel@novell.com>

	* HttpApplication.cs (AsyncRequestState.Complete): Add the
	try/catch for the callback here to ensure that we only call
	complete_event.Set once. 

	(PipelineDone): This is where the core of the bug fix is: do not
	call Complete() or call done.Set() (depending on the invocation
	case) until we are actually done cleaning up the request.

	The problem was that we signaled that we were done, but we had not
	completed the shut down, so another thread could have been
	scheduled on the same HttpApplication and had its variables be
	modified as we completed the shutdown on the first thread. 

	This fixes #81400 which was a very long standing bug.  

	(Tick): Remove the pipeline check against null, this is not
	necessary and it will help us find problems like this one in the
	future.

	Reverts patch r66072 which was a described as:

		band-aid patch to help debugging hang running 2.0
		tests.

2007-07-02  Marek Habersack  <mhabersack@novell.com>

	* CapabilitiesLoader.cs: provide default capability values for all
	the 2.0+ capabilities which are not defined in our
	browscap.ini. The default values have been assigned as per
	MSDN. Fixes bug #81927

2007-06-28  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpResponse.cs: fixed AddHeadersNoCache, removed content-length
	header for TARGET_JVM
	* HttpWorkerRequest.cs: made this class partial, moved TARGET_JVM stuff
	to .jvm part
	* HttpWriter.cs: fixed write methods, output_stream can write char[]
	and string in TARGET_JVM
	added HttpWorkerRequest.jvm.cs, HttpResponseStream.jvm.cs

2007-06-25 Juraj Skripsky <js@hotfeet.ch>

	* HttpRuntime.cs (ShutdownAppDomain): Re-introduce call to
	"Cache.InvokePrivateCallbacks".

2007-06-24  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpUtility.cs: fixed HtmlAttributeEncode, performance improvement

2007-06-20  Marek Habersack  <mhabersack@novell.com>

	* HttpRuntime.cs: added new internal property, InternalCache, to
	keep all the internal cache entries instead of mixing them with
	the public cache ones.
	Do not invoke Cache.InvokePrivateCallbacks - this method no longer
	exists.

	* HttpResponse.cs: private entries are now kept in
	Context.InternalCache.

	* HttpContext.cs: added new internal property, InternalCache,
	which returns the HttpRuntime.InternalCache value.

	* HttpApplication.cs: check all the loaded assemblies for the type
	being looked up. Patch from Juraj Skripsky <juraj@hotfeet.ch>,
	thanks! Fixes bug #81697.

2007-06-18 Igor Zelmanovich <igorz@mainsoft.com>

	* HttpUtility.cs: refactoring:
	removed constants to another class.	

2007-06-18 Igor Zelmanovich <igorz@mainsoft.com>

	* AssemblyResourceLoader.cs: refactoring:
	make the code reusable in System.Web.Extenssions.	

2007-05-31  Marek Habersack  <mhabersack@novell.com>

	* SiteMapProvider.cs: implemented proper logic of authorizing
	user's access to a sitemap node, as per MSDN2 docs. Patch from
	Dumitru Ban <dban@dako.ro>, thanks!

2007-05-30  Marek Habersack  <mhabersack@novell.com>

	* TraceManager.cs: Catch all the possible exceptions in the
	constructor - the object MUST be created successfully (even if
	there are errors).

	* HttpRequest.cs: do not attempt to apply url mappings if the
	configuration manager has errors.

	* HttpRuntime.cs: handle static constructor exceptions later on,
	during the first call to ReallyProcessRequest.

	* QueueManager.cs: provide defaults for the parameters to be read
	from the config file(s).
	Catch all the possible exceptions in the constructor - the object
	MUST be created successfully (even if there are errors).

2007-05-29  Marek Habersack  <mhabersack@novell.com>

	* SiteMapProvider.cs: updated the node accessibility comments.
	If Roles not null and user is not in at least one of the
	specified roles, return false.
	If there Url is null or empty, return false.

2007-05-28  Marek Habersack  <mhabersack@novell.com>

	* HttpRequest.cs: since Path is used from within
	WebConfigurationManager, under some conditions it may lead to
	endless recursion if the UrlComponents is not instantiated when
	Path_get is called.

2007-05-21  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpContext.cs: added ProfileInitialized boolean property

2007-05-16  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* VirtualPathUtility.cs: Normalize method check more carefully if need
	to normalize, performance fix

2007-05-16  Konstantin Triger <kostat@mainsoft.com>

	* HttpContext.cs: correctly check for request locality.

2007-05-15  Marek Habersack  <mhabersack@novell.com>

	* HttpApplication.cs: refactoring - moved LoadType from
	WebConfigurationHost here and made it internal static, in order to
	make the code avaliable from all the places where extended type
	loading is required.

2007-05-14  Marek Habersack  <mhabersack@novell.com>
 
	* HttpUtility.cs: when parsing query strings, skip the leading ?
	for the first parameter name.

	* HttpRequest.cs: added support for mapping urls, as defined in
        the system.web/urlMappings section.

2007-05-14  Vladimir Krasnov  <vladimirk@mainsoft.com>
	
	* HttpWriter.cs: GetMaxByteCount was used in Write and WriteString
	methods to improve performance of HttpWriter

2007-05-14 Igor Zelmanovich <igorz@mainsoft.com>

	* HttpApplication.cs:
	prevent DOS attack: remove configuration from the cache in case 
	of invalid resource not exists	

2007-05-14  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* TraceContext.cs: refactoring, cached TraceManager

2007-05-03 Igor Zelmanovich <igorz@mainsoft.com>

	* HttpApplication.cs:
	* HttpContext.cs:
	handling exceptions occurred if  <system.web/customError> 
	section is not valid.	

2007-05-08  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* BaseParamsCollection.cs: fixed Get(string) property, fixed collection
	lazy initialization

2007-05-07  Marek Habersack  <mhabersack@novell.com>

	* HttpResponseStream.cs: use BufferOutput

	* HttpResponse.cs: support Buffer, but use BufferOutput

2007-05-03 Igor Zelmanovich <igorz@mainsoft.com>

	* BrowserCapabilities.cs:
	added missing API.	

2007-04-30 Igor Zelmanovich <igorz@mainsoft.com>

	* HttpApplication.cs: reverted r74717.

2007-04-29 Igor Zelmanovich <igorz@mainsoft.com>

	* HttpContext.jvm.cs: Response.End() must abort thread if not async.	

2007-04-29 Igor Zelmanovich <igorz@mainsoft.com>

	* HttpApplication.cs: doesn't cache httpHandlersSection in instance, 
	that allows to consider httpHandlers section in nested web.config.	

2007-04-27  Marek Habersack  <mhabersack@novell.com>

	* XmlSiteMapProvider.cs: add support for siteMapFile attribute.

2007-04-24  Marek Habersack  <mhabersack@novell.com>

	* CapabilitiesLoader.cs: Hashtables used as property containers
	should not be case-insensitive as we now preload the property
	hashes with default properties, to make the code work in case
	browscap.ini is broken or missing. Instead, the keys are
	lower-cased and trimmed before indexing the Hashtable.
	Added all the missing capabilities to the defaultCaps Hashtable.
	The returned Hashtable is not reversed in GetCapabilities anymore
	- it might make the code faster, but it also makes it mismatch
	browsers (e.g. Firefox 2.0 is mismatched for Mozilla 1.8).
	All of the above fixes bug #81437.

	* HttpRequest.cs: MS.NET throws HttpException for invalid paths,
	not ArgumentNullException.

	* HttpException.cs: wrap GetHtmlErrorMessage internals in
	try/catch to capture possible exceptions in HttpContext.

	* HttpContext.cs: IsCustomErrorEnabled is used from within
	HttpException, make sure it gets the section in a safe way and
	resorts to the default settings.
	
	* HttpResponse.cs: HeaderEncoding is used in the same context as
	above. Take the same precautions.
	
2007-04-22 Joshua Tauberer <jit@occams.info>
 
 	* HttpParamsCollection.cs: Fix IndexOutOfRangeException.

2007-04-19  Miguel de Icaza  <miguel@novell.com>

	* BaseParamsCollection.cs (Get (string)): Call LoadInfo here to
	fix #81385

2007-04-17 Igor Zelmanovich <igorz@mainsoft.com>

	* HttpException.cs: used GetBaseException() instead InnerException.

2007-04-17 Igor Zelmanovich <igorz@mainsoft.com>

	* HttpException.cs: shows message of InnerException in head of Page.

2007-04-17 Igor Zelmanovich <igorz@mainsoft.com>

	* HttpException.cs: fixed generated HTML formating.

2007-04-17 Igor Zelmanovich <igorz@mainsoft.com>

	* HttpContext.cs: GetGlobalResourceObject, GetLocalResourceObject
	use case-insensitive ResourceManager

2007-04-15  Marek Habersack  <mhabersack@novell.com>

	* VirtualPathUtility.cs: converted to LF line endings and set the
	svn:eol-style property to 'native'

2007-04-13  Marek Habersack  <mhabersack@novell.com>

	* SiteMap.cs: try to look up the current map node in providers
	other than the current one. Patch from Mike Morano
	<mmorano@mikeandwan.us>. Fixes bug #81366. 

2007-04-12  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpRequest.cs: fixed Params property to be lazy initialzation
	collection
	* added HttpParamsCollection.cs

2007-04-11  Konstantin Triger <kostat@mainsoft.com>

	* HttpRequest.cs: IsLocal should return true for loopback addresses.

2007-04-10  Marek Habersack  <mhabersack@novell.com>

	* HttpCookie.cs: format the output of HttpCookie.Values.ToString()
	in the same way MS.NET does. Fixes bug #81333. Patch from Mike
	Morano <mmorano@mikeandwan.us>.

	* XmlSiteMapProvider.cs: add the NotifyFilters.Size to the
	watcher flags, so that we watch for modifications to a file when
	using Linux inotify.

	* HttpApplicationFactory.cs: add the NotifyFilters.Size to the
	watcher flags, so that we watch for modifications to a file when
	using Linux inotify.
	App_Code, App_Browsers and App_GlobalResources watchers must watch
	for events with the '*' mask so that they can notice events
	related to subdirectory creation/deletion.
	Watch for subdirectory events with the App_Code watcher.

2007-04-07  Marek Habersack  <mhabersack@novell.com>

	* HttpException.cs: show a default custom error message if custom
	errors are enabled.
	Cleaned up the errors HTML, made it XHTML-compliant. Generated
	HTML now uses inline CSS styles.

2007-04-06  Marek Habersack  <mhabersack@novell.com>

	* HttpUtility.cs: added a constant that contains the default query
	parameter character.
	ParseQueryString supports queries with both '&' and ';' parameter
	separators.

2007-04-05  Marek Habersack  <mhabersack@novell.com>

	* CapabilitiesLoader.cs: Make sure that the capability names
	(keys) are stored in lowercase.

2007-04-05 Igor Zelmanovich <igorz@mainsoft.com>

	* XmlSiteMapProvider.cs: 
	custom attributes of siteMapNode are loaded properly.

2007-04-05  Marek Habersack  <mhabersack@novell.com>

	* CapabilitiesLoader.cs: add a full default set of capabilities
	for cases when browscap.ini is broken, missing or doesn't contain
	definition for the client's User-Agent. Makes it possible to surf
	asp.net sites from unsupported clients.

2007-04-04 Juraj Skripsky <js@hotfeet.ch>

	* HttpApplicationFactory.cs: Make sure an web application is
	shutdown only once (and Application_End in global.asax is called
	only once as well). This is necessary because FileSystemWatcher
	emits multiple events when e.g. global.asax is changed.

2007-04-01  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpRequest.cs: fixed Headers property to use optimized
	HeadersCollection
	* WebROCollection.cs: used StringComparer.OrdinalIgnoreCase for
	NET_2_0
	* ServerVariablesCollection.cs: used lazy collection fill optimization
	* added: HeadersCollection.cs, BaseParamsCollection.cs

2007-04-01  Konstantin Triger <kostat@mainsoft.com>

	* HttpContext.cs: 
		GetLocalResourceObject - should not prefix resources with 'Resources.'.

2007-04-01  Konstantin Triger <kostat@mainsoft.com>

	* BrowserCapabilities.cs: Default Browser (userAgent) property to 'Unknown'.

2007-03-29  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpContext.cs: timeout methods removed from TARGET_J2EE compilation
	* HttpContext.jvm.cs: added stubs for timeout methods

2007-03-28 Igor Zelmanovich <igorz@mainsoft.com>

	* StaticSiteMapProvider.cs:
	GetChildNodes does not return null but SiteMapNodeCollection.EmptyCollection.

2007-03-28  Konstantin Triger <kostat@mainsoft.com>

	* BrowserCapabilities.cs: 
		1. refactoring.
		2. Break recoursion in case 'browser' capability is not found.

2007-03-28 Igor Zelmanovich <igorz@mainsoft.com>

	* SiteMapNode.cs: fixed GetAllNodes method.

2007-03-27 Igor Zelmanovich <igorz@mainsoft.com>

	* XmlSiteMapProvider.cs: fixed:
	resolve app-relative path from config such siteMapFile="~/Web.sitemap".

2007-03-27 Igor Zelmanovich <igorz@mainsoft.com>

	* SiteMapNode.cs:
	* XmlSiteMapProvider.cs: fixed: Localize Site-Map Data.

2007-03-26  Konstantin Triger <kostat@mainsoft.com>

	* HttpRequest.cs: correctly handle null and empty virtual pathes in MapPath.

2007-03-25  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpContext.cs: AppGlobalResourcesAssembly static member stored in
	AppDomain for TARGET_JVM

2007-03-24  Marek Habersack  <mhabersack@novell.com>

	* HttpRuntime.cs: use ICalls.GetMachineConfigPath instead of
	opening the machine.config file and getting its path.

	* CapabilitiesLoader.cs: use HttpRuntime.MachineConfigurationDirectory 
	instead of opening the machine config file and getting its path.

2007-03-23  Konstantin Triger <kostat@mainsoft.com>

	* HttpApplication.cs: complete the pipeline in case of exception during
		InitOnce() to avoid a deadlock.

2007-03-22  Adar Wesley <adarw@mainsoft.com>

        * BrowserCapabilities.cs: Added implementation for all capabilities.
        changed implementation to throw when capability is not defined in browscaps.ini.

        * CapabilitiesLoader.cs: fixed parent resultion bug.  added internal support for
        browser and browsers capabilities.

2007-03-21  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpContext.jvm.cs, HttpRuntime.cs: cached instance of HttpRuntime
	in context in addition to AppDomain

2007-03-21  Vladimir Krasnov  <vladimirk@mainsoft.com>
	
	* HttpCookie.cs, HttpCookieCollection.cs: used OrdinalIgnoreCase
	StringComparer for cookies and values collections 

2007-03-21  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpApplication.cs: refactred handlers configuration section as
	member of class

2007-03-20  Marek Habersack  <mhabersack@novell.com>

	* HttpRequest.cs: implement AppRelativeCurrentExecutionFilePath.

2007-03-18 Igor Zelmanovich <igorz@mainsoft.com>

	* VirtualPathUtility.cs: fixed GetFileName(), GetExtension() methods.

2007-03-18 Igor Zelmanovich <igorz@mainsoft.com>

	* VirtualPathUtility.cs: fixed GetDirectory() method.

2007-03-15  Marek Habersack  <mhabersack@novell.com>

	* XmlSiteMapProvider.cs: handle cases with no default for the
	reskey properly.

2007-03-15 Igor Zelmanovich <igorz@mainsoft.com>

	* HttpRequest.cs: fixed MapPath () method.

2007-03-15 Igor Zelmanovich <igorz@mainsoft.com>

	* VirtualPathUtility.cs: fixed ToAbsolute() method.

2007-03-15 Igor Zelmanovich <igorz@mainsoft.com>

	* VirtualPathUtility.cs: refactoring: class is shared with 1.x.

2007-03-15  Marek Habersack  <mhabersack@novell.com>

	* XmlSiteMapProvider.cs: add support for the enableLocalization
	<siteMap> attribute and handle per-node localization resource
	strings for explicit localization as well as the resourceKey
	attribute to <siteMapNode> for implicit localization (closes bug
	#81103).

	* SiteMapNode.cs: add support for the resource keys and foreign
	attributes.
	Implement GetImplicitResourceString.
	Add support for translation of the Title and Description
	attributes (closes bug #81103) as well as foreign attributes.

2007-03-15 Igor Zelmanovich <igorz@mainsoft.com>

	* VirtualPathUtility.cs: fixed: works properly with appRelative path.

2007-03-13  Marek Habersack  <mhabersack@novell.com>

	* HttpApplicationFactory.cs: resources compiler no longer accepts
	a boolean parameter.

	* HttpRuntime.cs: Do not compile local resources here anymore.

	* HttpContext.cs: if App_LocalResources assembly corresponding to
	the virtual path is not found, compile it here.
	Look up resources in the "Resources." class path.

2007-03-13 Igor Zelmanovich <igorz@mainsoft.com>

	* HttpUtility.cs: fixed HttpUtillity.HtmlAttributeEncode
	 '<' char must be encoded.	

2007-03-12  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* CapabilitiesLoader.cs: added TARGET_JVM part of static members,
	added caching to GetCapabilities method for performance improvement

2007-03-12  Marek Habersack  <mhabersack@novell.com>

	* XmlSiteMapProvider.cs: support custom site map providers. Fixes
	bug #81115

2007-03-06  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* StaticFileHandler.cs: fixed ProcessRequest TARGET_JVM path,
	if_modified_since fixed in WAR mode

2007-02-25  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpRequest.jvm.cs: fixed LoadWwwForm, should distinguish between
	query string and form values

2007-02-21  Marek Habersack  <grendello@gmail.com>

	* HttpRuntime.cs: BinDirectory returns the bin directory
	determined by the application host on the application startup.

	* HttpApplicationFactory.cs: Watch the bin directory determined by
	the application host on the application startup.

2007-02-20  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpRequest.cs: fixed MapPath, removed TARGET_J2EE block that checks
	war root symbol

2007-02-19  Marek Habersack  <grendello@gmail.com>

	* HttpContext.cs: Make sure all the global resource objects are
	sought in the Resources. namespace.

2007-02-18  Eyal Alaluf  <eyala@mainsoft.com>

	* HttpContext.jvm.cs, HttpRequest.jvm.cs: Adapt for tunning under test
	  harness where we don't have a SevletRequest/Response.

2007-02-13  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpApplication.cs: fixed InitOnce, httpModules section is global and
	taken from the root web.config

2007-02-12  Robert Jordan  <robertj@gmx.net>

	* HttpResponseStream.cs (BlockManager.EnsureCapacity):
	don't call Marshal.ReAllocHGlobal on NULL because, unlike
	realloc(3) and g_realloc, it doesn't support this semantic.
	Fixes a part of bug #77075.

2007-02-12  Marek Habersack  <grendello@gmail.com>

	* HttpRuntime.cs: support for preservation (.compiled) assembly
	mapping files.

2007-02-11  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpApplication.cs: added exception pass through from processAction
	in j2ee portal

2007-02-02  Marek Habersack  <grendello@gmail.com>

	* HttpApplicationFactory.cs: make code a bit more compact.

2007-01-30  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpResponse.cs: fixed TARGET_J2EE part of Redirect for portlet

2007-01-30  Adar Wesley <adarw@mainsoft.com>

	* VirtualPathUtility.cs: fixed exceptions thrown from Combine
	so they are compatible with MS.

2007-01-25  Marek Habersack  <grendello@gmail.com>

	* HttpApplication.cs: Make sure that a specific culture is used
	when setting the current thread culture.

2007-01-21 Gonzalo Paniagua Javier <gonzalo.mono@gmail.com>

	* HttpServerUtility.cs: implement Execute/Transfer overloads that take
	an IHttpHandler. Still missing the documented check for page IsCallback.
	Also, on MS when i derive from Page for my IHttpHandler, it works fine,
	but if I just implement IHttpHandler, an exception is thrown. This needs
	to be researched but, by now, the IHttpHandler version works on mono
	and fails on MS.

2007-01-20  Miguel de Icaza  <miguel@novell.com>

	* SiteMapNode.cs (GetExplicitResourceString): implement.

	* HttpContext.cs (GetGlobalResourceObject): remove unused variable.

	* StaticFileHandler.cs (ProcessRequest): remove unused variable.

	* HttpApplication.cs (ProcessError): Remove unused variable. 

	* HttpServerUtility.cs (Execute): Add new overload and rename
	parameter to match MS (as they are normative).

2007-01-17  Marek Habersack  <grendello@gmail.com>

	* HttpApplicationFactory.cs: Implement code and framework to
	enable automatic application restarts on changes to folders/files
	in a generic way. Patch from Damien Churchill
	<damien.churchill@ukplc.net>, thanks!
	Make sure the top-level assemblies (App_Code, resources) are not
	referenced twice should a compilation error occur.

2007-01-16  Atsushi Enomoto  <atsushi@ximian.com>

	* TraceData.cs : page could be null. Fixed bug #80480.

2007-01-15  Ilya Kharmatsky   <ilya -at- decode-systems.com>

	* VirtualPathUtility.cs: fixed bugs in methods - GetDirectory and
	GetExtension, according to the VirtualPathUtilityTest

2007-01-15  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* SiteMapProvider.cs: fixed IsAccessibleToUser, true if
	SecurityTrimmingEnabled not enabled, true if Roles exists on node and
	rolename is '*'

2007-01-14  Eyal Alaluf  <eyala@mainsoft.com>

	* HttpRequest.jvm.cs, HttpContext.jvm.cs: Added TARGET_J2EE specific files.
	* HttpContext.cs, HttpResponse.cs, HttpRequest.cs, HttpCookie.cs:
	  Add J2EE Portal support for TARGET_J2EE.

2007-01-04  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpRequest.cs: fixed IsLocal, should check all ip addresses of host

2007-01-05  Marek Habersack  <grendello@gmail.com>

	* HttpApplicationFactory.cs: Use the new app resources compiler.

	* HttpRuntime.cs: Use the new app resources compiler.

	* HttpContext.cs: Reimplement the GetGlobalResourceObject
	methods, implement the GetLocalResourceObject methods.

	* HttpResponse.cs: Implement the HeaderEncoding property.

2007-01-04  Andreia Gaita  <avidigal@novell.com>

	* HttpRuntime.cs: Add check for NET_2_0 when initializing
	WebConfigurationManager, build failing on 1.1 profile
	
2007-01-04  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpApplicationFactory.cs, HttpRuntime.cs: WebConfigurationManager
	should be initializaed before any possible access to it

2007-01-04  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpRequest.cs: fixed Path property, add call of
	Uri.UnescapeDataString in net_2_0

2007-01-04  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpApplication.cs: fixed PreStart, should not set thread culture
	to invariant

2007-01-03  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpRequest.cs: fixed jvm version of MakeInputStream, should not
	throw exception on zero content length

2007-01-03  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* SiteMap.cs, SiteMapNodeCollection.cs: TARGET_JVM of static members

2006-12-20  Marek Habersack  <grendello@gmail.com>

	* HttpContext.cs: add internal setter for the Profile property.

	* HttpApplicationFactory.cs: Added a shortcut version of
	InvokeSessionEnd for use from the 2.0 SessionState code.

2006-12-18  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpRequest.cs: fixed Path property, returns unescaped url

2006-12-16  Marek Habersack  <grendello@gmail.com>

	* HttpRequest.cs: Fix for http exception during first visit to an
	application when the visit path is not the app's virtual root.

2006-12-12 Igor Zelmanovich <igorz@mainsoft.com>

	* SiteMapProvider.cs.cs:
	* XmlSiteMapProvider.cs: fixed: because more then one node with empty url
	is allowed unique key is generated for each node.		

2006-12-12 Igor Zelmanovich <igorz@mainsoft.com>

	* SiteMapProvider.cs.cs: fixed: IsAccessibleToUser resolvs relative url.
	* StaticSiteMapProvider.cs: fixed: RemoveNode	

2006-12-12 Igor Zelmanovich <igorz@mainsoft.com>

	* VirtualPathUtility.cs: fixed: Combine(), ToAbsolute() methods.

2006-12-12 Igor Zelmanovich <igorz@mainsoft.com>

	* VirtualPathUtility.cs: fixed: IsAppRelative() method.

2006-12-07  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* BrowserCapabilities.cs: fixed MSDomVersion property

2006-12-05 Igor Zelmanovich <igorz@mainsoft.com>

	* VirtualPathUtility.cs: fixed: ToAbsolute() method.

2006-12-05 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: call MapPath on the HttpWorkerRequest so that if
	FilePath is changed we get the new physical path, not the one of the
	original request. Fixes bug #80152.

2006-12-03 Igor Zelmanovich <igorz@mainsoft.com>

	* HttpWriter.cs: reverted r38835.

2006-12-01 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWriter.cs: remove unused WriteBytes method.

2006-11-30 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: physical path comes from GetFilePathTranslated to
	avoid trimming in HttpRequest.MapPath.

2006-11-29  Marek Habersack  <grendello@gmail.com>

	* HttpApplication.cs: Make use of the handler stack implemented
	in HttpContext.

	* HttpCacheVaryByHeaders.cs: Optionally omit the vary:* header
	value in the 2.0 profile.

	* HttpServerUtility.cs: Make use of the handler stack implemented
	in HttpContext.
	Implemented the UrlToken{Encode,Decode} 2.0 methods.

	* HttpResponse.cs: Implemented the IsRequestBeingRedirected
	property.

	* HttpContext.cs: Implemented the CurrentHandler and PreviousHandler
	methods, together with helper functions to handle the handler
	stack.
	GetSection(string) should be present only in the 2.0 profile.

	* HttpCachePolicy.cs: implement the SetNoServerCaching,
	SetNoStore, SetNoTransforms, SetValidUntilExpires and
	SetOmitVaryStar methods.
	Added code to set the no-store and no-transform options of the
	Cache-Control header.

2006-11-25 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpServerUtility.cs: don't prepend extra '?' when the original url
	already has a query string. Fixes bug #80042.

2006-11-24  Miguel de Icaza  <miguel@novell.com>

	* HttpApplicationFactory.cs (InitType): Also look for "Web.Config"
	casing here.

2006-11-20  Marek Habersack  <grendello@gmail.com>

	* HttpApplication.cs: Added support for automatic detection of
	user's preferred language.

2006-11-16 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: don't leak the directory name for non-local
	connections.

2006-11-13 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* CapabilitiesLoader.cs: made the hasstable that contains the properties
	for the brower case insensitive. Fixes bug #79795.

2006-11-13 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: fix typo that prevented Server.Execute from restoring
	the initial output stream used. Closes bug #79916.

2006-11-12  Marek Habersack  <grendello@gmail.com>

	* HttpContext.cs: Implemented the 2.0 RewritePath overloads.

2006-11-08  Marek Habersack  <grendello@gmail.com>

	* HttpRuntime.cs: Moved the resource compiler results handling to
	the resource compiler itself.

	* HttpApplicationFactory.cs: Add invocation of the App_Code
	compiler. Moved the resource compiler results handling to the
	resource compiler itself. Removed compilation of the local
	resources from here - it should be done only when a request
	determines that the App_LocalResources directory exists.
	

2006-11-07  Andrew Skiba  <andrews@mainsoft.com>

	* HttpRuntime.cs: TARGET_JVM ifdef

2006-11-05  Andrew Skiba  <andrews@mainsoft.com>

	* SiteMapProvider.cs: don't iterate through Roles when they are null.

2006-11-05  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpContext.cs: implemented Profile property

2006-11-04 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: the unexpected 'tick' exceptions can be an abort
	exception due to timeout or end of the request.

2006-10-18  Marek Habersack  <grendello@gmail.com>

	* HttpRuntime.cs: add support for compilation of local resources
	at the start of request.

	* HttpContext.cs: implement the GetGlobalResourceObject APIs

	* HttpApplicationFactory.cs: include the bootstrap code for the
	global/local resources compiler.

2006-10-09  Marek Habersack  <grendello@gmail.com>

	* HttpApplication.cs: change the pipeline order for ASP.NET 2.0 to
	comply with the Microsoft documentation.

2006-09-28 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: this makes the test run successfully. Still need
	to figure out why that is null.

2006-09-28 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: band-aid patch to help debugging hang running 2.0
	tests.

2006-09-27 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpServerUtility.cs: 1.1 Execute(s) preserves the query string.
	Thanks to Hubert Fongarnand. Fixes bug #79506.

2006-09-26 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* QueueManager.cs: if disposed, always return null for next request.
	* HttpRuntime.cs: dispose the queue manager when shutting down the
	domain. This will close pending requests with a 503.
	* HttpApplication.cs: release the handler before marking the request
	as completed. If in PipelineDone context is null, use
	HttpContext.Current. Fixes some of those "Tick detected an unhandled
	exception" errors printed out.

2006-09-11  Andrew Skiba <andrews@mainsoft.com>

	* XmlSiteMapProvider.cs: ifdef TARGET_JVM

2006-09-11  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpWriter.cs: fixed WriteLine to work correctly in utf-16 encoding

2006-09-08  Robert Jordan  <robertj@gmx.net>

	* TraceData.cs: fixed NRE if `sizes' is null, which may happen
	if a page was unable to save its viewstate and size.

2006-09-07 Andrew Skiba <andrews@mainsoft.com>

	* HttpApplicationFactory.cs: ifdef the previous fix with TARGET_JVM to
	pass compilation.

2006-09-06 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplicationFactory.cs: watch web.config too. Fixes bug #78356.

2006-09-05  Konstantin Triger <kostat@mainsoft.com>

	* SiteMapProvider.cs: consider authorization section for access decision.

2006-09-04 Igor Zelmanovich <igorz@mainsoft.com>

	* HttpUtility.cs: fixed UrlPathEncode method.

2006-08-31	Boris Kirzner <borisk@mainsoft.com>

	* VirtualPathUtility.cs : pass parameters in correct order.

2006-08-21 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplicationFactory.cs: handle the 'renamed' event too.

2006-08-08  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpApplication.cs: fixed BeginProcessRequest, TARGET_JVM part
	merged

2006-08-04 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: don't leak local path names when a file is not
	found.

2006-06-21 Konstantin Triger <kostat@mainsoft.com>

	* XmlSiteMapProvider.cs: if the url is relative, make it relative to the
		context root.

2006-06-07 Juraj Skripsky <js@hotfeet.ch>

	* HttpException.cs (GetHtmlizedErrorMessage): Beautify compilation error
	page by showing multiple errors on separate lines.

2006-06-05 Juraj Skripsky <js@hotfeet.ch>

	* HttpRequest.cs: simplify code around uri_builder (and rename 
	to url_components). Move storage of query_string into 
	uri_builder.Query and initialize it lazily using 
	worker_request.GetQueryStringRawBytes() or GetQueryString().
	(QueryString): Use HttpUtility.ParseQueryString instead of 
	duplicating its functionality.

2006-06-05 Juraj Skripsky <js@hotfeet.ch>

	* HttpUtility.cs (ParseQueryString): move core of
	ParseQueryString into internal method to make it available to 
	HttpRequest.

2006-06-05 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: assign the context when run from a thread not in
	the threadpool. Patch by Andrew Skiba. Fixes bug #78583.

2006-05-26 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: context.Handler does not change for
	HttpServerUtility.Execute, so moved setting it into the pipeline instead
	of GetHandler.

2006-05-17  Kazuki Oikawa  <kazuki@panicode.com>

	* HttpUtility.cs: implemented ParseQueryString

2006-05-10 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpUtility.cs: get rid of TryParseHexa.

2006-04-25 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplicationFactory.cs: make sure that the application start event
	is run before any request is processed.

2006-04-24 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpServerUtility.cs: don't reset the query string in Execute() when
	the path does not contain it and we have one from the previous request.
	Fixes bug #78177.

2006-04-20 Andrew Skiba <andrews@mainsoft.com>

	* SiteMapNode.cs: fix few null reference exceptions

2006-04-18 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs:
	(TransmitFile): make sure we can read the file before buffering it.

2006-04-18 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplicationFactory.cs: don't fail on events that are not
	EventHandlers. Patch by Matthew Metnetsky.

2006-04-11 Andrew Skiba <andrews@mainsoft.com>

	* HttpRequest.cs: remove code duplication (see UrlUtils.Combine)

2006-04-10 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpUtility.cs: allow "%%" as a escape for '%' and ignore invalid
	hexadecimal characters. Based on a patch by Vladimir Krasnov.

2006-04-09 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWriter.cs: only keep the byte buffer around if its size is less
	than or equals to 32K.

2006-04-08  Miguel de Icaza  <miguel@novell.com>

	* HttpWriter.cs (Write): Added missing check for null string as
	something is now calling it like that. 

2006-03-27 Joshua Tauberer <tauberer@for.net>

	* HttpWriter.cs: Avoid creation of a byte[] on each Write()
	  by reusing and resizing a private array.

2006-04-07 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: the field content_length can be < 0 and then we try to
	read when there's no data and block.

2006-04-05 Andrew Skiba <andrews@mainsoft.com>

	* HttpUtility: UrlEncode and UrlEncodeUnicode logic unified, behaviour
	fixed to match dotnet and http://rfc.net/rfc1738.html

2006-03-30 Konstantin Triger <kostat@mainsoft.com>

	* HttpApplicationFactory.cs: refactoring: remove static modifier from session_end field.
	Does not check the behavior as HttpApplicationFactory is a singleton.

2006-03-27 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpUtility.cs: UrlDecode does not throw if an hexadecimal sequence
	fails to parse as an integer. Fixes bug #77931.

2006-03-23 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: more fixes for CacheControl: MS allows to set it to
	null and "" and the getter value does not completely depend on Cache.

	* HttpRequest.cs: fail validating the request input if there's a control
	character after a '<'. Fixes XSS_Null test.

	All System.Web tests pass again.
2006-03-22  Robert Jordan  <robertj@gmx.net>

	* HttpCachePolicy.cs: fix the Cache-control header. Fixes bug #77826.

2006-03-22  Chris Toshok  <toshok@ximian.com>

	* HttpApplication.cs: fix typo - AuthenticateRequest =>
	PostAuthenticateRequest.

2006-03-21 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ChangeLog:
	* HttpRequest.cs: revert part of r58229.

2006-03-21  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* ServerVariablesCollection.cs: fixed "URL" variable, it should not
	return path info

2006-03-20 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs:
	(CheckString): style and don't index the string twice per iteration.

2006-03-19 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* TempFileStream.cs: a FileStream that removes the file once
	it is disposed.
	* HttpRequest.cs: support for writing request data to on-disk
	files if the request is longer than the threshold specified in the
	configuration files. In mono this will work for 1.x and 2.0, while with
	MS this only works for 2.0.

2006-03-18  Robert Jordan  <robertj@gmx.net>

	* HttpCachePolicy.cs: expose the validation callbacks.
	Fixes bug #77825.

2006-03-18 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: fix upper bound when iterating through the module
	collection.

2006-03-16 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: use the provided content encoding to decode the file
	name. Fixes bug #77714.

2006-03-15 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: allow setting a Cache-Control header through
	AppendHeader. Fixes bug #77775.

2006-03-15  Chris Toshok  <toshok@ximian.com>

	* XmlSiteMapProvider.cs (RemoveProvider): oops, no override.

	* StaticSiteMapProvider.cs (AddNode): call MapUrl.
	(FindSiteMapNode): same.

2006-03-15  Chris Toshok  <toshok@ximian.com>

	* SiteMapProvider.cs (ReturnNodeIfAccessible): new function,
	either return the node or throw InvalidOperationException.
	(get_RootNode): use ReturnNodeIfAccessible.
	(IsAccessibleToUser): flesh this out a bit, and add comments on
	how the rest of the implementation should be written.
	(FindSiteMapNodeFromKey): implement to match MS behavior, docs be
	damned.

	* XmlSiteMapProvider.cs: corcompare work.

	* StaticSiteMapProvider.cs (AddNode): Add a check to see if node
	== RootNode.  Not sure if this is actually correct, but it's
	required given our implementation of XmlSiteMapProvider.  without
	this check, we end up assigning RootNode.ParentNode == RootNode,
	which makes for an infinite loop when we traverse up the tree.

2006-03-15  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpRequest.cs: fixed MakeInputStream method under TARGET_JVM,
	fixed if content lenght value is less that byte received

2006-03-10  Chris Toshok  <toshok@ximian.com>

	* StaticSiteMapProvider.cs (UrlToNode): this entire file is #if
	NET_2_0, no need to embed another #if NET_2_0.

	* SiteMapProvider.cs (AddNode): throw NotImplementedException.
	(FindSiteMapNode): with null context, return null.  don't throw
	ArgumentNullException.
	(RemoveNode): throw NotImplementedException.
	(IsAccessibleToUser): check arguments to make test pass.  still
	lacking the method's actual functionality.
	(ResourceKey): add missing property.

2006-03-10  Chris Toshok  <toshok@ximian.com>

	* HttpRequest.cs (CheckString): add back in the check for \xff1c
	that i took out.  oops.

2006-03-10  Chris Toshok  <toshok@ximian.com>

	* HttpRequest.cs (CheckString): implement as described in
	Shackow's "Professional ASP.NET 2.0 Security, Membership, and Role
	Management", page 310.

2006-03-08  Chris Toshok  <toshok@ximian.com>

	* SiteMap.cs: clean this up a bunch.  use the SiteMapSection to
	initialize the provider collection, and don't add a provider.
	web.config handles that for us.  Also, don't always return true
	from get_Enabled.

2006-02-28  Chris Toshok  <toshok@ximian.com>

	* HttpCookieMode.cs: corcompare work.

	* ProcessShutdownReason.cs: same.

	* SiteMapNodeCollection.cs: same.

	* SiteMapNode.cs: same.

	* SiteMapProvider.cs: same.

	* HttpCacheRevalidation.cs: same.

	* HttpCacheability.cs: same.

	* StaticSiteMapProvider.cs: same.

	* HttpValidationStatus.cs: same.
	
2006-02-06 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* DefaultHttpHandler.cs: New file.

2006-02-01  Chris Toshok  <toshok@ximian.com>

	* SiteMap.cs: use GetSection instead of GetWebApplicationSection.

2006-02-01  Chris Toshok  <toshok@ximian.com>

	* HttpApplication.cs: CONFIGURATION_2_0 => NET_2_0, and use
	GetSection instead of GetWebApplicationSection.

	* HttpApplication.jvm.cs: same.
	
	* HttpApplicationFactory.cs: same.

	* HttpContext.cs: same.

	* CapabilitiesLoader.cs: same.

	* QueueManager.cs: same.

	* HttpRuntime.cs: same.

	* TraceManager.cs: same.

	* HttpRequest.cs: same.
	
2006-01-31 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: keep any exception that happens during
	initialization.

2006-01-30 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpDataTransferMode.cs: Removed file.
	* HttpRequestPriority.cs: Removed file.
	* ApplicationShutdownReason.cs:
	* SiteMap.cs:
	* HttpRuntime.cs:
	* HttpApplication.cs: minor class status fixes.

2006-01-30 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* VirtualPathUtility.cs: done with all the not implemented methods.

2006-01-26 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: use UInt64.Parse for content length. In AppendHeader,
	set cache_control through the property to update the cachebility
	accordingly. When using the cached headers, don't add again all the
	headers to that collection.
	* HttpCacheVaryByParams.cs: if there are no params, return null.
	Otherwise we get an empty 'Vary' header.

2006-01-25  Chris Toshok  <toshok@ximian.com>

	* HttpApplication.cs (Start): wrap InitOnce in a try/catch block,
	and if there's a configuration error, output it and end things
	immediately.

2006-01-24 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: fixed the file path when RewritePath is used. Also
	add the PathInfo to the Url. Fixes bug #77291.

2006-01-22  Chris Toshok  <toshok@ximian.com>

	* HttpRequest.cs (ReadBoundary): remove two unused variables to
	quiet mcs.
	(IsBoundary): remove unused method.

	* MimeTypes.cs (.cctor): use a 2.0 friendly form of the Hashtable
	ctor to silence a warning.

	* HttpCacheVaryByHeaders.cs (.ctor): same.

	* HttpCacheVaryByParams.cs (.ctor): same.

	* StaticSiteMapProvider.cs (UrlToNode): same.

2006-01-22  Konstantin Triger <kostat@mainsoft.com>

	* HttpWorkerRequest.cs: ensure case insensitivity in header search.

2006-01-19  Konstantin Triger <kostat@mainsoft.com>

	* HttpApplication.jvm.cs: merge HttpApplication.cs changes.

2006-01-17  Chris Toshok  <toshok@ximian.com>

	* CapabilitiesLoader.cs (Init): use WebConfigurationManager in the
	CONFIGURATION_2_0 case.

	* HttpRuntime.cs (MachineConfigurationDirectory): same.

2006-01-16  Chris Toshok  <toshok@ximian.com>

	* HttpApplicationFactory.cs: call WebConfigurationManager.Init in
	the CONFIGURATION_2_0 case.

2006-01-13 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWriter.cs: made Write (char) less memory hungry. Thanks to Mike
	Glenn for pointing this out.

2006-01-11 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplicationFactory.cs: fix condition for ContextAvailable.

2006-01-11  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpResponse.cs: removed TARGET_JVM block from End
	* GetJavaTextReader: Merged TARGET_JVM block from LoadFile
	to GetJavaTextReader

2006-01-11  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpRequest.cs: removed TARGET_JVM block from MapPath

2006-01-11  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpRequest.cs: little fix in MapPath(), virtualPath.Replace
	return value wasnt stored.

2006-01-10 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: typo in comment.

	* HttpApplicationFactory.cs:
	* HttpApplication.cs: don't discard the application used for running the
	Application_Start event to allow for Redirect/Transfer to be used. Fail
	to get the request/response from the application object as MS does (it
	can still be retrieved through HttpContext.Current.blah). Fixes
	bug #77162.

2006-01-09  Vladimir Krasnov <vladimirk@mainsoft.com>

	* CapabilitiesLoader.cs: Merged TARGET_JVM parts in LoadFile
	from /main/9
	* HttpException.cs: Merged TARGET_JVM parts in GetHtmlizedErrorMessage
	from /main/13
	* HttpRequest.cs: Merged TARGET_JVM parts in MapPath from /main/29
	* HttpResponse.cs: Merged TARGET_JVM parts in End() from /main/30
	* StaticFileHandler.cs: Merged TARGET_JVM parts in ProcessRequest
	from /main/7

2006-01-08  Konstantin Triger <kostat@mainsoft.com>

	* BrowserCapabilities.cs, HttpBrowserCapabilities.cs,
	HttpResponseStream.cs: TARGET_JVM changes to let the compilation
	pass with csc 1.1.

2006-01-04  Chris Toshok  <toshok@ximian.com>

	* HttpContext.cs (IsCustomErrorEnabled): add CONFIGURATION_2_0
	code.  use a nasty 'using' hack to map the 2.0 CustomErrorsMode to
	the 1.x CustomErrorMode name.
	(IsDebuggingEnabled): add CONFIGURATION_2_0 code.
	(ConfigTimeout): add CONFIGURATION_2_0 code.

	* HttpRequest.cs (MakeInputStream): add CONFIGURATION_2_0 code.

	* HttpApplication.cs (RedirectCustomError): add CONFIGURATION_2_0
	code.

	* SiteMap.c (Init): use
	WebConfigurationManager.GetWebApplicationSection.

2005-12-21  Miguel de Icaza  <miguel@novell.com>

	* HttpUtility.cs (UrlEncodeUnicode): The generated encoding of
	unicode values must be in %XXXX format, not %XX sometimes.

2005-12-08 Robert Jordan  <robertj@gmx.net> 

	* MimeTypes.cs: added entry for "jpg".

2005-12-07 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: only read up to content-length when provided. Patch
	by Peter Teichman.

2005-12-06 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpCookie.cs: fixed the set_Secure. Closes bug #76906.

2005-11-28 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponseStream.cs: flush the filter stream before closing.
	Patch by Geir Bergum that fixes bug #76753.

2005-11-28  Chris Toshok  <toshok@ximian.com>

	* HttpContext.cs (Profile): remove the #if false from around this,
	as we now have the ProfileBase type.
	(GetConfig): add CONFIGURATION_2_0 version.
	(GetSection): add CONFIGURATION_2_0 version.

2005-11-28  Chris Toshok  <toshok@ximian.com>

	* TraceManager.cs (..ctor): CONFIGURATION_2_0 work.

	* QueueManager.cs (..ctor): CONFIGURATION_2_0 work.

	* HttpRequest.cs (AnonymousID): add 2.0 property.
	(MakeInputStream): CONFIGURATION_2_0 work.

	* HttpApplication.cs (InitOnce): change around the
	CONFIGURATION_2_0 stuff since we need additional Culture foo for
	it.

2005-11-27  Chris Toshok  <toshok@ximian.com>

	* HttpApplication.cs (InitOnce): add Configuration_2.0 code.
	(GetHandler): same.

2005-11-26  Miguel de Icaza  <miguel@novell.com>

	* HttpResponseStream.cs: Do not try to write zero bytes.

2005-11-24  Miguel de Icaza  <miguel@novell.com>

	* WebROCollection.cs: Do not add an empty "=" to the query string
	if the key is empty or null.

2005-11-21 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebROCollection.cs: override ToString and generate a query string from
	the key/value pairs. Fixes bug #76779.

2005-11-21 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpServerUtility.cs: prevent possible nullref in GetLastError().

2005-11-07  Jason Diamond  <jason@diamond.name>

	* HttpRequest.cs: Don't throw exception when Content-Length doesn't
	match length of POSTed data. Also, allow charset parameter on
	Content-Type header when type is "application/x-www-form-urlencoded".

2005-11-07 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebROCollection.cs: add an ID for the collection. Page needs it.

2005-11-03 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: no need to allocate the buffer when all the content
	is preloaded.

2005-11-02 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: ignore TAE in ProcesssError. The Error event might
	redirect or transfer and that causes a TAE to be thrown. Fixes
	bug #76573.

2005-11-01  Chris Toshok  <toshok@ximian.com>

	* VirtualPathUtility.cs: new (partial implementation) to get some
	MS provider examples compiling.

2005-10-31 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpContext.cs: added a new internal overload for ClearError.

2005-10-24 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRuntime.cs: invoke callbacks on private items in the cache before 
	calling disposing the app. factory. This way we get notifications of
	removal for all sessions stored in the cache (InProc only).

2005-10-19 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponseStream.cs: reworked buffering so that adjacents blocks are
	written at once. Also fix bug #76460.

2005-10-18 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponseStream.cs: when allocating a chunk larger than the
	default chunk size, mark all the blocks as taken. Fixes bug
	#76452.

2005-10-17 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: use HaveFilter instead of Filter.
	* HttpResponseStream.cs: allocate chunks of the requested size
	when it's > 32KB. Fixes bug #76460.

2005-10-14  Sebastien Pouliot  <sebastien@ximian.com> 

	* ServerVariablesCollection.cs: Added a demand for 
	SerializationFormatter on GetObjectData method (even if it's not 
	really required in this case as it remove warnings from gendarme.

2005-10-07 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs:
	* HttpRequest.cs: buglets in error checking in Filter.

2005-10-03 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* OutputFilterStream.cs: proxy class for response filters.
	* HttpResponse.cs: moved all the actual write operations into the
	response stream. Handle response filtering. When caching, get the
	actual length of the data, not the buffer length.
	* HttpApplication.cs: if there's no error, invoke the filters before
	updating the request cache.
	* HttpResponseStream.cs: new Filter property. SendChunkSize is moved
	here and now supports writing the final chunk. New method ApplyFilter
	that filters the existing buckets and replaces them with the filtered
	ones. Modified Write to deal with buffering and filtering.

2005-10-03 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponseStream.cs: allow for writes of more than 32K at once.

2005-10-03 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* InputFilterStream.cs proxy stream for use by filters.
	* HttpRequest.cs: implement input filtering.

2005-10-02 Eyal Alaluf <eyala@mainsoft.com>
	* HttpApplication.jvm.cs - Workaround for use of yield in
	HttpApplication.cs HttpRuntime.cs: AppDomain.Unload is not supported
	* under TARGET_J2EE

2005-09-30 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponseStream.cs: remove dead code.

2005-09-29  Sebastien Pouliot  <sebastien@ximian.com> 

	* HttpClientCertificate.cs: Remove last TODO on IsValid. This now 
	works when using XSP. Now use flags to determine valid/presence.

2005-09-26  Chris Toshok  <toshok@ximian.com>

	* HttpApplicationFactory.cs (OnAppFileChanged): add null checks
	for bin_watcher and app_file_watcher so we don't get NRE's here.

2005-09-23 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* BrowserCapabilities.cs: don't rely on the win32 attribute to be there.
	Just use the platform to determine whether Win32 is true or not. Fixes
	bug #74777.

2005-09-23 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: fixed typo when setting UI culture. Closes bug
	#76189.

2005-09-22 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: new SetFilePath() that does not conflict with
	SetCurrentExePath. Now when transfering from a page to another,
	CurrentExecutionFilePath and FilePath are correct.

2005-09-21 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* TraceContext.cs: add new method to store size of controls.
	* TraceData.cs: render control size.
	* HttpResponse.cs: new internal method to get the number of bytes of
	buffered output.
	* HttpResponseStream.cs: added Length property to the Buckets and new
	GetTotalLength.

2005-09-20 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* TraceData.cs: we have to change the method of getting a control render
	size. MS does not do this or otherwise would run into the same bug
	(#76051) that this patch fixes. This is temporarily setting the size
	to 0.

2005-09-20 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponseStream.cs: implemented Send(stream) for files. Fixes bug
	#76145.

2005-09-19 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRuntime.cs: catch errors when compiling global.asax and
	initializing the application. Fixes bug #76090.

2005-09-14  Sebastien Pouliot  <sebastien@ximian.com> 
 
	* BrowserCapabilities.cs: Fixed changes (in 2.0) with versions. Fixed
	compare with "True" (culture and case sensitivity).
	* HttpApplicationState.cs: Added LinkDemand for Minimal. Use the 
	internal HttpStaticObjectsCollection ctor to avoid the UnmanagedCode
	demand.
	* HttpContext.cs: Added LinkDemand for Minimal. Added 2.0 properties
	and methods to test CAS on them.
	* HttpRequest.cs: Added LinkDemand for Minimal. Ensure we return 
	proper values when worker_request is null.
	* HttpResponse.cs: Added LinkDemand for Minimal. Ensure we return 
	proper values when context or WorkerRequest is null. Added 2.0 
	properties and methods to test CAS on them.
	* HttpRuntime.cs: Added LinkDemand for Minimal. Added PathDiscovery 
	demands for properties returning directories. Added demand for High 
	level on AppDomainAppId and AppDomainId properties, Low level on 
	IsOnUNCShare, Medium level on ProcessRequest and a demand for 
	UnmanagedCode on UnloadAppDomain method. Constructor also has a 
	UnmanagedCode demand for 1.x.
	* HttpStaticObjectsCollection.cs: Added LinkDemand for Minimal. Added
	a UnmanagedCode demand to public ctor. Added internal ctor without the
	demand. Changed Serialize and Deserialize methods to public for 2.0.

2005-09-14  Sebastien Pouliot  <sebastien@ximian.com>

	* HttpWorkerRequest.cs: Removed TODO for 2.0 APIs and return the 
	default values for them.

2005-09-13  Sebastien Pouliot  <sebastien@ximian.com>

	* HttpApplication.cs: : Added LinkDemand and InheritanceDemand (class)
	for Minimal. Changed AssemblyLocation to a property (so it doesn't 
	require special permission, PathDiscovery) to create an instance. 
	Protected Modules property with a Demand for High level. Added some 
	missing HttpException for null context.
	* HttpServerUtility.cs: Added LinkDemand for Minimal. Added demands 
	for UnmanagedCode on all CreateObject* methods. Added demand for 
	Medium level on MachineName and ScriptTimeout properties. Added new
	overloaded Transfer method (2.0) to test CAS on it.
	* HttpUtility.cs: Added LinkDemand for Minimal. Added [Obsolete] to 
	ctor (2.0). Changed some return values when 'count' is 0. Added 
	ParseQueryString (overload) methods for 2.0 (to enabled CAS testing on
	them).
	* HttpWorkerRequest.cs: Added LinkDemand and InheritanceDemand (class)
	for Minimal. Added RequestTraceIdentifier and RootWebConfigPath (2.0) 
	properties, GetPreloadedEntityBody, GetPreloadedEntityBodyLength, 
	GetTotalEntityBodyLength and ReadEntityBody (2.0) methods to test CAS 
	on them. Fixed SendResponseFromMemory to ignore IntPtr.Zero (used in 
	tests without failures).
	* ServerVariablesCollection.cs: Fixed loadServerVariablesCollection 
	when HttpWorkerRequest is null.
	* TraceContext.cs: Added LinkDemand for Minimal. Fixed default Mode 
	(SortByTime). Added new (2.0) TraceFinished event to test CAS on it.

2005-09-13  Sebastien Pouliot  <sebastien@ximian.com> 
 
	* HttpBrowserCapabilities.cs: Added LinkDemand and InheritanceDemand 
	(class) for Minimal. Note that current MCS has problem compiling 
	security attributes on partial class (bug #75969).
	* HttpCachePolicy.cs: Added LinkDemand for Minimal. Added 2.0 methods
	(stub) to enable CAS tests on them.
	* HttpCacheVaryByHeaders.cs: Added LinkDemand for Minimal.
	* HttpCacheVaryByParams.cs: Added LinkDemand for Minimal.
	* HttpClientCertificate.cs: Added LinkDemand and InheritanceDemand 
	(class) for Minimal.
	* HttpCookie.cs: Added LinkDemand for Minimal.
	* HttpCookieCollection.cs: Added LinkDemand for Minimal.
	* HttpFileCollection.cs: Added LinkDemand for Minimal.
	* HttpModuleCollection.cs: Added LinkDemand for Minimal.
	* HttpPostedFile.cs: Added LinkDemand for Minimal.
	* HttpRequestPriority.cs: Fix enum values.
	* HttpWriter.cs: Added LinkDemand for Minimal.

2005-09-13  Sebastien Pouliot  <sebastien@ximian.com>

	* ProcessInfo.cs: Added LinkDemand and InheritanceDemand (class) for
	Minimal.
	* ProcessModelInfo.cs: Added LinkDemand and InheritanceDemand (class)
	for Minimal. Methods GetCurrentProcessInfo and GetHistory are also
	protected by Demand for High level.

2005-09-13  Sebastien Pouliot  <sebastien@ximian.com> 
 
	* HttpCompileException.cs: Added new public ctors and [Serializable]
	to 2.0. Added new Message property and GetObjectData (protected by a
	demand for SerializationFormatter) for 2.0. Fixed line-ending.
	* HttpException.cs: Added LinkDemand and InheritanceDemand (class) for
	Minimal. Renamed parameters to match documentation.
	* HttpParseException.cs: Added LinkDemand (class) for Minimal. Added
	demand for SerializationFormatter on GetObjectData method. Fixed 
	line-ending.
	* HttpRequestValidationException.cs: Added new public ctors and 
	[Serializable] to 2.0. Added LinkDemand for Minimal.
	* HttpUnhandledException.cs: Added new public ctors and [Serializable]
	to 2.0. Removed unused internal ctor. Added LinkDemand for Minimal.
	Fixed line-ending.

2005-09-13  Sebastien Pouliot  <sebastien@ximian.com>

	* HttpResponseSubstitutionCallback.cs: New. 2.0 delegate.
	* TraceContextEventArgs.cs: New. 2.0 class.
	* TraceContextEventHandler.cs: New. 2.0 delegate.

2005-09-13 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: use GetServerName instead of GetLocalAddress when
	building the Url.

2005-09-09 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: fix the indexer.

2005-09-08 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpPostedFile.cs: fixes in Seek and Position.

2005-09-08  Sebastien Pouliot  <sebastien@ximian.com>

	* HttpRequest.cs: Make sure the MemoryStream created have their 
	contents marked as public - or else you can't call GetBuffer on them!

2005-09-08  Miguel de Icaza  <miguel@novell.com>

	* HttpRequest.cs: Patch from Juraj Skripsky <js@hotfeet.ch> that
	fixes UrlReferrer. 

2005-09-08 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpPostedFile.cs: Make this class actually work. Every time we read,
	we have to position the underlying stream.

2005-09-08 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: reading multipart/form-data works again.

2005-09-08 Eyal Alaluf <eyala@mainsoft.com>
	* HttpRequest.cs: Under TARGET_JVM the input stream must allow GetBuffer.

2005-09-08 Eyal Alaluf <eyala@mainsoft.com>
	* HttpApplicationFactory.cs: TARGET_J2EE/JVM fix.

2005-09-07 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: correctly detect multipart/form-data.

2005-09-07 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplicationFactory.cs: recycle after invoking session_end.

2005-09-06 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRuntime.cs: remove Console.

	* HttpApplicationFactory.cs: don't hook Session_End, but keep
	the MethodInfo around for later invocation if needed. Don't call
	GetMethods() for every HttpApplication (or derived class) instances.
	Added a method, used by SessionStateModule, that will create use an
	application without context to invoke Session_End. Keep a pool of
	applications that are meant to be used by this method only.

	* HttpApplication.cs: add a SetSession method and do not
	attach all the events if the application is for Session_End only.

2005-09-06 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRuntime.cs: actually unload the domain when requested. Reformatted
	FinishUnavailable() and removed the 'Location' header form the error.

	* HttpApplicationFactory.cs: set up the watcher for the bin directory.
	This also prevents a nullref when global.asax is changed.

2005-09-06 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: fixed bug introduced when moving GetHandler call
	around. Now we get error pages again.

2005-09-06  Miguel de Icaza  <miguel@novell.com>

	* HttpApplication.cs: Catch EndRequest errors as well.

2005-09-05  Miguel de Icaza  <miguel@novell.com>

	* HttpApplication.cs: Invoke EndRequest handler before OutputPage
	as FormsAuthentication will issue a Redirect from the EndRequest 
	handler. 

2005-09-05 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: when writing an error message, catch the possible
	write error.

2005-09-05 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponseStream.cs: prevent invalid cast exception if the first
	thing written is a file.

2005-09-04 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: fix invalid cast exception (bug #75926).

2005-09-01 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplicationFactory.cs: only trigger the Application_Start event
	once. It was being invoked more than once when several clients were
	hitting the server at the same time on startup.

2005-09-01 Eyal Alaluf <eyala@mainsoft.com>

	* HttpContext.cs HttpResponse.cs HttpWorkerRequest.cs HttpRuntime.cs
	  HttpApplicationFactory.cs HttpApplication.cs: TARGET_J2EE/JVM fixes.
	  Mostly workaround limited AppModel in TARGET_J2EE.

2005-08-31 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: if the request method is HEAD, that's equivalent to
	SuppressContent. Added an internal TransmitFile that allows setting the
	final_flush flag.
	* StaticFileHandler.cs: use the new internal TransmitFile and remove
	generation of Content-Length header, as now it's computed correctly.
	* HttpApplication.cs: remove debugging stuff.
	* HttpResponseStream.cs: suppress_content is checked in HttpResponse.

2005-08-31  Miguel de Icaza  <miguel@novell.com>

	Removed debugging info.
	
	* HttpApplication.cs: Add support for async handlers. 

	Add extra 2.x methods. 

2005-08-31 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* BrowserCapabilities.cs: removed extra 'using'.

	* HttpApplication.cs: use just the 'modcoll' to hold the collection of
	modules instead of having a separate 'modules' one.

2005-08-30 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: clone the module collection so that
	it's not shared between HttpApplications. Call GetHandler() in the
	right place.

2005-08-30  Miguel de Icaza  <miguel@novell.com>

	* HttpApplication.cs: Add the new 2.x method overloads that take a
	data object.

	(RunHooks): Pass the extra data instead of null.

	* HttpCookie.cs (HttpOnly): Add 2.x cookie header.

	* BrowserCapabilities.cs: Move the core of the capabilities into a
	separate file.  Use partial classes to choose what version to
	compile against.

	* HttpBrowserCapabilities.cs: Update to move the code elsewhere.

2005-08-30 Eyal Alaluf <eyala@mainsoft.com>

	* HttpResponseStream.cs: Fix a bug introduced by last fix (thanks to
	Ben)

2005-08-30 Eyal Alaluf <eyala@mainsoft.com>

	* HttpResponseStream.cs: Compilation fixes for TARGET_JVM. TARGET_JVM
	does not support unsafe code. I localized all unsafe code within Chunk
	& Block and created a managed version of Chunk.

2005-08-30 Eyal Alaluf <eyala@mainsoft.com>
	* HttpApplicationFactory.cs: Compilation fixes for TARGET_J2EE. Under
	TARGET_J2EE static fields are shared by all app domains. We handle
	this difference by explicitly getting/setting values from the app
	domain.  Since HttpApplicationFactory has many static fields, I
	refactored it to have one static instance and moved the static fields
	into instance fields.

2005-08-29 Eyal Alaluf <eyala@mainsoft.com>

	* HttpRequest.cs: Disable use of IntPtrStream for TARGET_JVM

2005-08-29 Eyal Alaluf <eyala@mainsoft.com>

	* HttpContext.cs: Compilation fixes for TARGET_J2EE/JVM

2005-08-28 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: don't duplicate the 'charset=' and don't send a
	charset for unknown MIME types.
	* StaticFileHandler.cs: set the Content-Length header here.
	* HttpRequest.cs: prevent nullrefs when we have no 'charset='.

2005-08-28 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* StaticFileHandler.cs: use TransmitFile instead of WriteFile. This way
	xsp will use sendfile().

2005-08-28  Chris Toshok  <toshok@ximian.com>

	* SiteMapNode.cs: fix IHierarchyData.GetParent.

2005-08-26 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs:
	* IntPtrStream.cs: now we only have a read-only MemoryStream or an
	IntPtrStream. The copy is moved into HttpRequest.

2005-08-26  Sebastien Pouliot  <sebastien@ximian.com>

	* WebCategoryAttribute.cs: New. Required internal attribute.
	* WebSysDescriptionAttribute.cs: New. Required internal attribute.

2005-08-26  Jackson Harper  <jackson@ximian.com>

	* HttpResponseStream.cs: Use GetBuffer so the memory isn't
	duplicated.

2005-08-26 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: GetHandler might return null when, for example,
	a web service fails, but that does not mean that returning a null
	handler should throw another exception, as the web service code
	serialized the error as a faultString. So if the handler is null, just
	don't call ProcessRequest and keep going.

2005-08-26  Jackson Harper  <jackson@ximian.com>

	* HttpResponse.cs: Send the cached headers if this is a cached
	response. Save the headers, date header, and page data. Fix a typo.
	* HttpResponseStream.cs: Add new accesor to get a byte [] of the
	page data.

2005-08-26 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWorkerRequest.cs: SetEndOfSendNotification is a noop. No matter
	what callback you use that never gets called. In XSP I actually
	implement something for this method.
	* HttpServerUtility.cs: unused variable.

2005-08-26 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpInputStream.cs: new ctor that takes a byte [].
	* IntPtrStream.cs: make it work on a byte [] too.

	* HttpRequest.cs:
	(ContentLength): return 0 for negative numbers or error parsing, but
	keep content_length negative in those cases.
	(MakeInputStream): when there's no content-length (or it's negative),
	we still read the request into a MemoryStream. Use
	IsEntireEntityIsPreloaded() as a fast path.

2005-08-25  Sebastien Pouliot  <sebastien@ximian.com>

	* HttpClientCertificate.cs: On 1.x the .ctor throws a 
	ArgumentNullException (but 2.0 throws a NRE).

2005-08-25 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: HttpMethod deserves its own field. Fix IsLocal.

2005-08-25  Chris Toshok  <toshok@ximian.com>

	* HttpApplication.cs (IsReusable): return true.
	(InitOnce): remove the initialization of handler_factory from
	here.
	(GetHandler) and move it here, so we make sure to load handlers
	from all needed web.config files.

2005-08-25 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpServerUtility.cs: use GetHandler().
	* HttpApplication.cs: remove obsolete method. Now Transfe/Execute work.

2005-08-25 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: no need for the local var. here.

2005-08-25  Chris Toshok  <toshok@ximian.com>

	* HttpApplication.cs (InitOnce): move the initialization of
	modules above the call to HttpApplicationFactory.AttachEvents,
	since that method accesses HttpApplication.Modules.  Fixes
	nGallery.
	(IsReusable): mark TODO.

2005-08-23 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponseHeader.cs: removed obsolete class.
	* HttpResponse.cs: no more 'obsolete' warnings.

2005-08-23 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRuntime.cs: implemeted some missing properties.

2005-08-22 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: implemented RemoveOutputCacheItem().

2005-08-22 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: implemented GetVaryByCustomString().

2005-08-22 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: implemented SetHeader (allows adding a header
	circumventing the read-only protection of the collection) and SetForm,
	which just assigns a value of the 'form' collection.
	* HttpServerUtility.cs: NameValueCollection -> WebROCollection.

2005-08-22 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpContext.cs:
	* HttpRequest.cs: implemented RewritePath and supporting methods.

2005-08-22  Sebastien Pouliot  <sebastien@ximian.com>

	* HttpRequest.cs: Avoid NRE if work_request if null in the ctor.
	* HttpResponse.cs: Avoid NRE if work_request if null in the ctor.

2005-08-20 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: if there's any exception thrown when getting the
	handler, don't add an extra error to the context, as we already have
	one.

2005-08-20 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWriter.cs:
	* HttpResponse.cs:
	* HttpWorkerRequest.cs:
	* HttpApplication.cs: added mising attributes and enabled methods
	present in 1.1 SP1.

2005-08-20 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebROCollection.cs: a collection that allows setting IsReadOnly.
	* HttpRequest.cs: implemented MapImageCoordinates(). Use WebROCollection
	instead of a NameValueCollection in Form, Headers, Params, QueryString.

2005-08-19 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpInputStream.cs: new copy ctor.
	* IntPtrStream.cs: getters for base_address and size.
	* HttpRequest.cs: implemented SaveAs(). Use a wrapper on top of
	InputStream so that reading POST form or files does not modify the state
	if InputStream. Don't use uri_builder.Query in QueryStringRaw, as it
	returns the '?'.

2005-08-18 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: implemented UserLanguages and reuse code from
	AcceptTypes.

2005-08-18 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: implemented AcceptTypes.

2005-08-18 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: implemented this[] in terms of Params. Don't add the
	header collection in Params.

2005-08-18 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: fix Files property.
	* HttpApplication.cs: invoke the default authentication event after all 
	the other auth. modules.

2005-08-18 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ServerVariablesCollection.cs: mark the collection as read-only except
	when we fill it. Add the HTTP_blah key/value pairs too.

2005-08-18  Chris Toshok  <toshok@ximian.com>

	* HttpRequest.cs (get_Params): implement.

2005-08-17  Chris Toshok  <toshok@ximian.com>

	* HttpResponse.cs: HttpResponse's Cookie's collection acts
	differently than HttpRequests in that it never returns null from
	the "this [string]" accessor.

2005-08-17 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: check length 0 case when reading a POST.

2005-08-17 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpContext.cs: added security attributes for User and
	SkipAuthorization properties.
	* HttpApplicationFactory.cs: AttachEvents is now called form the
	application .ctor. Recycle instead of dispose.
	* HttpApplication.cs: attach events to the newly created application.

2005-08-15  Jackson Harper  <jackson@ximian.com>

	* ApplicationShutdownReason.cs: make build

2005-08-15  Miguel de Icaza  <miguel@novell.com>

	* HttpApplication.cs: Update comments

	* HttpPostedFile.cs: Use a substream to read from the uploaded
	multiparts. 

	* HttpRequest.cs: use new code to read the uploaded files.

2005-08-12  Miguel de Icaza  <miguel@novell.com>

	2.x API fixage and small additions:
	
	* HttpResponse.cs: Make constructor internal.

	* HttpRequest.cs (IsLocal): Expose if NET_2.x

	* HttpContext.cs: Remove internal routine.

	* HttpApplication.cs: Add 2.x events. 

	* HttpRequest.cs: Another iFolder issue: I was not setting up the
	uri_builder here.

	Fixes to get iFolder to work:
	
	* HttpApplicationFactory.cs: Set the context when we are initting
	the application.

	* HttpApplication.cs (SetContext): helper routine. 

	* HttpResponse.cs: Implement the various cache operations:n
	Expires, ExpiresAbsolute, CacheControl.

	Actually produce the Cache-Control header, the "Cache" property
	takes precedence over the compatibility settings (Expires,
	ExpiresAbsolutely and CacheControl). 

	* HttpCachePolicy.cs: Fix style.

	Fix the generation of the headers, use lower-case values, do not
	add the max-value if the value is zero.  

	Allow for all possible values in SetCacheability. 

	* HttpRuntime.cs (ClrInstallDirectory): Implement.

	* HttpResponseStream.cs: Remove debugging stuff. 

2005-08-11  Miguel de Icaza  <miguel@novell.com>

	Big chunked handling rewrite, and integration of Ben's unmanaged
	output stream.

	* HttpWriter.cs: Delegate chunked encoding writing to the
	HttpResponse. 

	* HttpResponse.cs: Rework the chunked encoding system, centralize
	it all. 

	* HttpResponseStream.cs: Deploy Ben's bucket-base unmanaged
	buffers code. 

	Changed the way that we handle chunked encoding, centralize it
	all;  

	Remove a lot of manual handling of buffering turned off, and
	instead delegate it all to Flush, fixes several issues with the
	new framework.

	* HttpWorkerRequest.cs (SendResponseFromMemory (IntPtr, int)):
	Provide a default implementation since currently XSP does not have
	this method implemented. 

2005-08-11  Sebastien Pouliot  <sebastien@ximian.com> 
 
	* HttpClientCertificate.cs: Culture insensitive int parsing. Fixed
	NET_2_0 build.

2005-08-10  Miguel de Icaza  <miguel@novell.com>

	* ServerVariablesCollection.cs: For Ben.  Implement the header
	fetching here, do not implement it in HttpRequest.cs.

2005-08-10  Sebastien Pouliot  <sebastien@ximian.com> 
 
	* HttpClientCertificate.cs: Changed IsPresent logic so that new unit
	tests will work as expected.

2005-08-10  Sebastien Pouliot  <sebastien@ximian.com>

	* HttpClientCertificate.cs: Implemented, except for validation. Note 
	that the HttpWorkerRequest derived classes must be updated to supply 
	the required informations.
	* HttpRequest.cs: Create an HttpClientCertificate on first call to
	ClientCertificate.

2005-08-09  Miguel de Icaza  <miguel@novell.com>

	* HttpRuntime.cs (AspInstallDirectory): Implement.

2005-08-09  Sebastien Pouliot  <sebastien@ximian.com>

	* HttpClientCertificate.cs: New. Stub. It won't be fun to test.

2005-08-04  Ben Maurer  <bmaurer@ximian.com>

	* HttpContext.cs: Kill a NIE.

2005-08-04  Miguel de Icaza  <miguel@novell.com>

	* HttpApplicationFactory.cs: Change "Start" event like the "End"
	event, and only do this once, when we init the type.

	Fire the "Application_Start" event after we create the type.

2005-08-03 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: catch a ThreadAbort (coming from Response.End)
	here too.

2005-08-03 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: setting the Status property resets the
	StatusDescription (see the tests) and the default value for the
	description is the one provided by GetStatusDescription() in
	HttpWorkerRequest.

2005-08-03 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: s/boundry/boundary/ and fix typo in array creation.

2005-08-03 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: add call to EndOfRequest when everything is said
	and done.

2005-08-02  Miguel de Icaza  <miguel@novell.com>

	* HttpResponse.cs: Stub for TransmitFile.

	* HttpRequest.cs (IsAuthenticated): Implement.

2005-08-01  Miguel de Icaza  <miguel@novell.com>

	* HttpRequest.cs: Cope with implementations of HttpWorkerRequest
	(unpatched xsp) that do not send back the PreloadedEntityBody. 

	* HttpApplication.cs: keep track of the factory. 
	(Dispose): Only dispose once, clean up other variables, release
	the ManualResetEvent.
	Release the handler to the factory.

	* HttpApplicationFactory.cs: Implement a stack to reuse the
	applications. 

	* HttpRequest.cs: On uploads, if the ContentLenght is zero, throw
	a 411.

	* HttpRuntime.cs: Recycle the application after using it.

	* HttpPostedFile.cs: Implement SaveAs.

	* HttpContext.cs: Return the "Server" property.

2005-08-01 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpServerUtility.cs: implemented missing bits.

2005-08-01 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: query string was getting a '?' as the start of the
	first variable name. This makes the asmx help page work again.

2005-08-01  Miguel de Icaza  <miguel@novell.com>

	* HttpRequest.cs (Cookies, Forms): Add validation.
	(Forms): Add application/x-www-form-urlencoded parsing and
	multipart/form-data parsing.
	
	(HttpMultiPart): Implement new class to load multi-part data from
	a stream since there is no longer a byte [] that holds the data
	(currently we have an unmanaged IntPtr buffer wrapped as a
	stream).  Also the 2.x framework will add support for large
	uploads which are sent directly to disk, which will require the
	FileStream interface. 
	
	(Path, PathInfo): Fill a couple more methods to avoid crashes.

	* HttpContext.cs: Fill another one to get web services summary
	page painting.  The page does not work though.
	
	* HttpApplication.cs: Rework the pipeline to not depend on
	`finally', as `finally' would not be invoked if we choose not to
	call the pipeline again (which happens if the `stop' variable is
	set). 

	Instead force the pipeline to go to the shutdown, and yield from
	there after all the release-state callbacks have been invoked. 

2005-07-31  Miguel de Icaza  <miguel@novell.com>

	* HttpApplication.cs: Remove debugging messages since the compiler
	bug has been fixed.

	You must use at least mcs from revision 47879 for the application
	pipeline to work. 

2005-07-30  Miguel de Icaza  <miguel@novell.com>

	* HttpContext.cs: Error handling methods.

	* HttpResponse.cs: Trigger the last event.

	* HttpRuntime.cs: Add queueing of the next request. 

	* HttpApplication.cs: Deploy the new yield-based application
	pipeline, add error handling to the pipeline.
	
	* HttpApplication.cs (AsyncRequestState): Just use the done event
	from the parent.

2005-07-29  Miguel de Icaza  <miguel@novell.com>

	* HttpResponseStream.cs, HttpRequest.cs: Fix bugs found by nunit.

	* HttpApplication.cs: Fix a race condition. 

	* HttpResponseStream.cs: Fix bug, send the size of the buffer that
	we have so far instead of the internal size of the buffer.   This
	will need work later to ensure we enforce the Content-Length
	maximum output size if set.

	* ServerVariablesCollection.cs: This class now inherits from
	NameValueCollection, we should probably review what the middle
	class did, there are no dependencies on it.

	I need to write tests to investigate if something is missing or
	has changed in this implementation. 

2005-07-27  Miguel de Icaza  <miguel@novell.com>

	* HttpRequest.cs: No happy replies here, send a 411.

2005-07-27  Chris Toshok  <toshok@ximian.com>

	* HttpResponseHeader.cs: remove spew.
	
2005-07-27  Chris Toshok  <toshok@ximian.com>

	* HttpResponseHeader.cs (HttpResponseHandler..ctor): use
	HttpWorkerRequest.GetKnownResponseHeaderName instead of
	GetKnownRequestHeaderName.  Fixes Response.Redirect until miguel's
	new HttpReponse is online.

2005-07-26  Miguel de Icaza  <miguel@novell.com>

	* HttpResponse.cs: use_chunked is now a byte-array, if not null,
	we use it to hold the size of the chunked so we do not have to
	allocate many of these. 
	(SendSize): Helper routine to send the chunked headers.
	(BinaryWrite): First user of the chunked writer.

	* HttpApplication.cs: Do not crash if they request a Server
	instance, but throw a NotImplementedException.

	* HttpRequest.cs: fix a few problems exposed by the regression
	test suite.

	* HttpRequest.cs (Cookies): use Chris' new constructor to get the
	cookies parsed.

	: The big Uri rework: instead of using QueryString
	as the population mechanism, populate an UriBuilder from the
	various HttpWorkerRequest methods.

	* HttpWorkerRequest.cs (GetProtocol): Implement in terms of
	IsSecure().

	* HttpResponse.cs: Pointed by Ben, Write (null) is a nop instead
	of a crash.

	* HttpContext.cs: Add a couple of properties to help the 2.x
	build.
	
	* HttpResponse.cs: Make ContentLength a long, add back support for
	session's app_path_mod.
	(ApplyAppPathmodifier): put back.
	(End): Pass a flag to abort so we can tell the exceptions appart
	in HttpApplication.
	(WriteHeaders): Send the HTTP status.
	(Redirect): Implement.
	(Write): Use the Output property to load writer when needed.
	
	* HttpRequest.cs (ctor): Temporary use of InitFromWR, will fix
	later. 
	(MakeInputStream): check content-length size, use routines to load
	the preloaded data, handle incomplete transfers.
	(Query): Do not insert null keys into the collection.
	(Url): implement.
	(UrlReferer): implement.

	* HttpApplication.cs (RunHooks): Catch Thread.Abort, and call
	Thread.ResetAbort after each step.

	Ensure that ReleaseState is called if we ever succeed in acquiring
	the state even if we have stopped the request pipeline.

	Report file not found, directory not found.

2005-07-25  Miguel de Icaza  <miguel@novell.com>

	* HttpCookieCollection.cs: Add expiration of the cookie. 

	* HttpRequest.cs: Add check for ContentLength, use
	GetPreloadedEntityBody, correct number of bytes uploaded.

2005-07-21  Miguel de Icaza  <miguel@novell.com>

	* HttpResponseHeader.cs: Our implementation of HttpResponse only
	uses the text headers, does not use any constants as XSP would go
	through a slower code path anyways.

2005-07-21  Chris Toshok  <toshok@ximian.com>

	* HttpBrowserCapabilities.cs: enable support for the W3CDomVersion
	and EcmaScriptVersion properties.

2005-07-21  Chris Toshok  <toshok@ximian.com>

	* HttpResponseHeader.cs: hi, i'm stupid and missed String.Replace.
	
2005-07-21  Chris Toshok  <toshok@ximian.com>

	* HttpResponseHeader.cs: url encode just \r and \n if they're
	present in the value.

2005-07-20  Chris Toshok  <toshok@ximian.com>

	* HttpPostedFile.cs: add missing ContentLength property.

2005-07-20  Chris Toshok  <toshok@ximian.com>

	* HttpCookieCollection.cs: add a new ctor that takes a string (the
	contents of the Cookies: header).

2005-07-20  Chris Toshok  <toshok@ximian.com>

	* HttpCookieCollection.cs: add another ctor (internal, but not
	obsolete, so we aren't passing a stupid HttpResponse in in order
	to change the behavior of the collection.)

	* HttpCookie.cs: init this.values in the internal ctor.

2005-07-20  Chris Toshok  <toshok@ximian.com>

	* HttpCookieCollection.cs: use "auto-fill mode" when we're dealing
	with an HttpResponse's cookie collection.  That is, create the
	cookie if the consumer looks it up.

2005-07-20  Miguel de Icaza  <miguel@novell.com>

	* HttpApplication.cs: Ongoing work on pipeline, I will need to
	redo this later.

2005-07-19  Miguel de Icaza  <miguel@novell.com>

	* HttpContext.cs (GetService): Implement.  Return all of the
	properties that we have access to.  Make HttpWorkerRequest the
	first match as this is the only likely reason people need to use
	this. 

	* IntPtrStream.cs: Bring from corlib.

	* MultiPartContentParser.cs: use a MemoryStream as HttpInputStream
	will now be using IntPtrStream. 

	* HttpRequest.cs (MakeInputStream): move code that loads the
	request here
	(CloseInputStream): Helper method that we will call later to
	ensure that we dispose properly the malloced() block. 
	(BinaryRead): Implemented.

	* HttpInputStream.cs: Rewrite to be a descendant of
	IntPtrStream.cs 

2005-07-18  Miguel de Icaza  <miguel@novell.com>

	* HttpApplication.cs (Modules): Add modules support and
	AsyncResult.

2005-07-18  Chris Toshok  <toshok@ximian.com>

	* HttpResponseHeader.cs: initial implementation.

2005-07-18  Chris Toshok  <toshok@ximian.com>

	* HttpModuleCollection.cs (HttpModuleCollection.GetKey): add
	missing method.

	* HttpFileCollection.cs: initial implementation.

2005-07-18  Chris Toshok  <toshok@ximian.com>

	* HttpModuleCollection.cs (HttpModuleCollection.CopyTo): implement
	missing method.

2005-07-18  Chris Toshok  <toshok@ximian.com>

	* HttpModuleCollection.cs: initial implementation.

2005-07-18  Chris Toshok  <toshok@ximian.com>

	* HttpCacheVaryByHeaders.cs: only add the header if it's not
	already in the hash.

	* HttpCacheVaryByParams.cs: only add the param if it's not already
	in the hash.

2005-07-18  Chris Toshok  <toshok@ximian.com>

	* HttpCookie.cs (HttpCookie+CookieNVC.Set): new override to fix an
	MS quirk.

2005-07-17  Miguel de Icaza  <miguel@novell.com>

	* HttpRequest.cs (Headers, InputStream): implemented two more
	properties.

	* HttpInputStream.cs: All we need is a MemoryStream with writable
	set to false.

	* HttpPostedFile.cs: Use a Stream.

2005-07-16  Chris Toshok  <toshok@ximian.com>

	* HttpCacheVaryByHeaders.cs: make sure we set vary_by_unspecified
	= false in the custom setter.

2005-07-16  Chris Toshok  <toshok@ximian.com>

	* HttpCacheVaryByParams.cs: initial implementation.

2005-07-16  Chris Toshok  <toshok@ximian.com>

	* HttpCacheVaryByHeaders.cs: initial implementation.

2005-07-15  Chris Toshok  <toshok@ximian.com>

	* HttpCookie.cs: one more time.

2005-07-15  Chris Toshok  <toshok@ximian.com>

	* HttpCookie.cs (HttpCookie.GetCookieHeader): use
	expires.ToString().
	
2005-07-15  Chris Toshok  <toshok@ximian.com>

	* HttpCookie.cs (HttpCookie.GetCookieHeader): implement to fix
	ben's bug.

2005-07-15  Chris Toshok  <toshok@ximian.com>

	* HttpCookieCollection.cs: initial implementation (with a couple
	of labeled inefficiencies.)

2005-07-15  Chris Toshok  <toshok@ximian.com>

	* HttpCookie.cs (HttpCookie.get_HasKeys): use values.HasKeys()
	instead of trying to be smart about it ourselves.

2005-07-15  Chris Toshok  <toshok@ximian.com>

	* HttpCookie.cs: initial implementation.  we fail one unit test,
	but it might be due to a bug in NameValueCollection.

2005-07-15  Miguel de Icaza  <miguel@novell.com>

	* HttpRequest.cs: 

2005-07-14  Miguel de Icaza  <miguel@novell.com>

	* HttpRuntime.cs: Return a few of the values from the AppDomain
	data. 

	Put the application shutdown process.

	* HttpApplicationFactory.cs (AddEvent): Fixed bug when more than
	one method existed.
	
	(FireEvent): Do not ignore errors.

	* HttpContext.cs (GetAppConfig, GetConfig): First success, use
	ConfigurationSettings.GetConfig to get the value that QueueManager
	needed.

2005-07-14  Dick Porter  <dick@ximian.com>

	* HttpPostedFile.cs: New basic implementation; needs someone to
	figure out what a HttpRequestStream does

2005-07-13  Miguel de Icaza  <miguel@novell.com>

	* HttpRequest.cs: More work on this file

	* HttpRequest.cs, HttpApplication.cs, HttpContext.cs,
	HttpRuntime.cs: New from scratch implementation.

2005-07-01  Lluis Sanchez Gual <lluis@novell.com>

	* SiteMap.cs: Read provider info from the configuration files.

2005-06-27 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponseHeader.cs: URL encode \r and \n in header values. Fixes
	bug #75392.

2005-06-26 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpUtility.cs: fix another stupid buglet in htmldecode.

2005-06-26 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpContext.cs:
	* HttpResponse.cs:
	* HttpRequest.cs: use StrUtils (invariant culture).

2005-06-26 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: use StartsWith when looking for 'multipart/form-data'.
	File uploading was broken since a few commits ago.

2005-06-26 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: ensure that the last chunk ('0\r\n\r\n') is sent
	even if response.Close is called before a final flush. MS/IIS fails to
	do this.

2005-06-25 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: don't print anything for unknown content types in
	ParseFormData. Use lowercase compare.

2005-06-25 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: invariant love.

2005-06-25 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: avoid 1 string concat.
	* HttpRequest.cs: fix BinaryRead. It was totally wrong.

2005-06-23 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpUtility.cs: don't append an extra 0 when no digits seen. Fixes
	bug #75370.

2005-06-23 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpUtility.cs: the lower limit for using &#xx; encoding is 160, not
	128. Reset number back to 0 after use. Fixes bug #75365.

2005-06-19  Svetlana Zholkovsky <svetlanaz-at-mainsoft.com>
		* In following classes added TARGET_J2EE or/and TARGET_JVM
		  directives:
			- HttpResponse.cs
			- HttpRuntime.cs
			- HttpUtility.cs
			- CapabilitiesLoader.cs
			- HttpApplication.cs
			- HttpApplicationFactory.cs
			- HttpContext.cs
			- HttpException.cs
			- HttpRequest.cs
		* Added Mainsoft's specific files :
			- GhHttpAsyncResult.jvm.cs

2005-06-10 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: avoid one intermediate buffer when reading the request
	body and fail for over limit content length when the content type is
	not handled as form or multipart data.

2005-06-09 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: fix the check in Close() so that CloseConnection is
	called even if there has been no final Flush. Fixes bug #75176.

2005-06-08 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpParseException.cs:
	* HttpResponse.cs:
	* HttpApplication.cs: updates for 1.1 service pack.

2005-06-06 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpUtility.cs: fix InvalidCastException.

2005-06-05  Kornél Pál <kornelpal@hotmail.com>

	* HttpWriter.cs: Fixed: _OutputFilter.Close () was called twice.

2005-06-02 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpUtility.cs: modified HtmlDecode so that it does not need to call
	Int32.Parse and handles improper &# sequences. Fixes bug #74907.

2005-05-26  Lluis Sanchez Gual <lluis@novell.com>

	* SiteMapNodeCollection.cs: Implemented missing methods. The collection
	does not inherit from CollectionBase any more.
	* SiteMapNode.cs: Track api changes.
	* SiteMapProvider.cs: Moved several methods to the new
	StaticSiteMapProvider class. Other fixes.
	* XmlSiteMapProvider.cs: Watch changes in the xml files. Other fixes.
	* SiteMapProviderCollection.cs: Minor fixes.
	* SiteMap.cs: Added missing event. Avoid double check lock.
	* StaticSiteMapProvider.cs: New class that implements some of the
	funtionality of SiteMapProvider.

2005-05-25  Ben Maurer  <bmaurer@ximian.com>

	* MimeTypes.cs: Remove extra spaces, they were typos. Fixes 75049.

2005-05-13 Atsushi Enomoto <atsishi@ximian.com>

	* HttpUtility.cs : UrlDecodeToBytes() incorrectly decoded escaped 
	  characters. Patch by Kazuki Oikawa.

2005-05-09 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRuntime.cs: PlatformID.Unix.

2005-05-08 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: cleaned up the .ctors, fix IsClientConnected and just
	Clear the _Headers array instead of creating a new ArrayList in
	ClearHeaders().

2005-05-08 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: we had 2 variables to track client connection status.
	Use only one. Increase the buffer size to 28KB when writing from a file.

	* StaticFileHandler.cs: set the Content-Type before writing the file.
	This allows flushing before all the content is written.

	* HttpApplication.cs: use the variable instead of the property when
	setting the Principal for the current process.

2005-05-08 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ReusableMemoryStream.cs:
	* HttpWriter.cs: keep a pool of buffers to avoid allocations.

2005-05-07 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: no need to save/restore the thread culture when
	getting the Date header. According to Ben's profiling, this is a big
	deal in performance.

	* HttpRuntime.cs: ignore exceptions that might be thrown when unloading 
	a domain.

2005-05-04 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplicationFactory.cs: ignore any exception thrown when invoking
	an application event.

2005-04-23 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpBrowserCapabilities.cs: fix Win32 property.

2005-04-21 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: only add the charset when explicitly set or for
	well-known content types.

2005-04-20 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpCachePolicy.cs:
	* HttpAsyncResult.cs:
	* HttpClientCertificate.cs:
	* HttpException.cs:
	* HttpRuntime.cs:
	* HttpCacheVaryByHeaders.cs:
	* HttpBrowserCapabilities.cs:
	* HttpUtility.cs:
	* HttpCacheVaryByParams.cs: no more warnings.

	* QueueManager.cs: check for local connections with minLocalFreeThreads.

2005-04-19 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ServerVariablesCollection.cs: shuffled variables, added missing ones
	and call a method in HttpRequest to set the HTTP_ variables.

	* HttpRequest.cs: new method to add HTTP_ variables to a collection.

2005-04-19 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: GetAllHeaders was returning the value twice instead
	of 'name: value'. When HTTP_ is requested on the output, don't include
	unknown headers.

2005-03-23 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpCookieCollection.cs: when adding more than one cookie with the
	same name, the last one is the winner.

2005-03-09 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: correctly store the value cookies in Params. Fixes
	bug #73345.

2005-02-28 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: Path and FilePath also change when RewritePath is
	called. Fixes bug #73055.

2005-02-23  Sebastien Pouliot  <sebastien@ximian.com>

	* HttpRequest.cs: Make sure that any access after a ValidateInput 
	throws an exception if the data isn't safe.

2005-02-22 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* CapabilitiesLoader.cs: fix the path, as machine.config is now in a
	x.x/ directory below $PREFIX/etc/mono.

2005-02-22 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: fail on unicode full-width '<' and '>' too. Fixes
	a security report (http://secunia.com/advisories/14325) that wan't
	reported to us before public disclosure.

2005-02-18 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: send the calculated content length even when it's 0.
	Fixes bug #72655.

2005-02-04  Lluis Sanchez Gual <lluis@novell.com>

	* HttpContext.cs: Added internal property to keep a reference to
	the last accessed page. Page uses this to implement PreviousPage.

2005-02-02  Lluis Sanchez Gual <lluis@novell.com>

	* ProcessModelInfo.cs: Fixed warning.

2005-02-01 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* TraceContext.cs: writing a message without any other argument is not
	a warniing. Fixes bug #72017.

2005-01-20 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: if there are no more handlers, finish the
	request and ensure we call Complete on it. Now FreeTextBox 3.0 works.

2004-12-21 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: honor the maxRequestSize limit from machine.config.

2004-12-15 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: reread application CultureInfo as web.config
	might have changed. Fixes bug #62539.

2004-11-30 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: fixed ApplyAppPathModifier to insert the session ID.

2004-11-29 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplicationFactory.cs: monitor changes in global.asax and bin
	directory and shutdown the application when that happens. Fixes bug
	#49651.

2004-11-29 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ReusableMemoryStream.cs: copied from System.IO.MemoryStream and
	slightly modified to allow expanding the buffer for cases on which the
	regular MemoryStream don't allow it.

	* HttpWriter.cs: use the new ReusableMemoryStream and fix bug #59841.
	Otherwise we would have to allocate a new MemoryStream...

2004-11-28 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: Create() is now GetInstance().

2004-11-18 Lluis Sanchez Gual <lluis@novell.com>

	* SiteMapNodeCollection.cs: Added missing properties.
	* HttpParseException.cs: Added 2.0 methods and properties.
	* SiteMapNode.cs: Added missing methods and properties.
	* SiteMapProvider.cs, XmlSiteMapProvider.cs, 
	SiteMapProviderCollection.cs: IProvider does not exist any
	more, it is now	ProviderBase.
	* ISiteMapProvider.cs: Deleted.
	* ParserErrorCollection.cs, ParserError.cs, SiteMapResolveEventArgs.cs:
	  Implemented.
	* SiteMap.cs: Minor fixes.	

2004-11-15 Lluis Sanchez Gual <lluis@novell.com>

	* SiteMapProviderCollection.cs: Fixed warning.
	* HttpApplication.cs: Added new 2.0 events.

2004-11-12 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: added internl SetHeadersSent.
	* HttpRuntime.cs: don't throw the 'headers already sent' exception
	if we're sending a runtime error.

2004-11-11 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: undo the TimeoutManager.(Add|Remove) shuffling.
	It causes troubles under heavy load.

2004-11-08 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* SiteMap.cs: don't lock on Type.
	* CapabilitiesLoader.cs: avoid 2 locks when loading data.

2004-11-08 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: patch by Dennis Gervalle that fixes PhysicalPath in
	presence of rewriting.

2004-10-27 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: don't hang if a sync step is aborted. Fixes the
	system.web portion of bug #68270.

2004-10-10 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* TraceContext.cs: don't cast to Page is the handler it's
	not a page.

2004-10-06 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: CurrentExecutionFilePath is the one that
	changes when Transfer or Execute are used, not FilePath.

	* HttpServerUtility.cs: moved form saving/restoring from
	Transfer to Execute, as it's needed there too. the query string is
	correctly set now. Fixes bug #67388.

	* HttpContext.cs: use SetCurrentExePath instead of SetFilePath.

2004-10-03 Ben Maurer  <bmaurer@ximian.com>

	* HttpResponse.cs: use UtcNow

2004-10-01 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: SuppressContent does not throw and clears all the
	buffered output. Fixes bug #67213.

2004-09-30 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpUtility.cs: UrlPathEncode is static. Fixes bug #67155.

2004-09-29 Ben Maurer  <bmaurer@ximian.com>

	* HttpContext.cs, TimeoutManager: Use DateTime.UtcNow.

2004-09-25 Ben Maurer  <bmaurer@ximian.com>

	* HttpApplication.cs: Make sure requests are removed from
	the timeout manager. Fixes a major leak. #66751.

2004-09-24 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplicationFactory.cs:
	* HttpRuntime.cs: implemented UnloadAppDomain and be ready for domain
	unloading.

2004-09-12 Ben Maurer  <bmaurer@ximian.com>

	* HttpContext.cs: use CallContext. It is a little bit faster.

2004-09-09 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpStaticObjectsCollection.cs: don't share static session objects
	declared in the application file across the application, but on a
	per-session basis. Fixes bug #65446.

2004-09-09 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpServerUtility.cs: in Transfer(path), don't keep form data if
	the transfer is done from inside a page that received a postback.
	Fixes bug #65613.

2004-09-08 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpValueCollection.cs: fixed signature of ToString (). Closes bug
	#65392.

2004-09-06 Ben Maurer  <bmaurer@users.sourceforge.net>

	* HttpWriter.cs (.ctor): Dont create teh StreamWriter twice
	(Clear): Don't recreate the MemoryStream and StreamWriter

2004-09-05 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: only add/remove to/from the timeout
	manager when we're in a interruptible step.

2004-09-05 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* TraceContext.cs: when IsEnabled has not been set, return the value
	from the TraceManager. Fixes bug #63469.

2004-08-31 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRuntime.cs: initialize the response writer when finishing a
	request because it cannot be queued. Under heavy load we made new
	requests be processed before the ones that might be queued. This is
	no longer the case.

	* QueueManager.cs: instead of queueing/dequeuing separately, we now
	have a single method that does everything needed to decide which one
	will be the next request processed.

2004-08-27 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRuntime.cs: removed initializations to null in .cctor. Prevent
	other requests from avoiding the lock if they are received before the
	configuration system is inited. Ensure that the queue manager is not
	null before using it (it can be null while the first request is being
	processed).

2004-08-22 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpServerUtility.cs: ensure we have a full virtual path for the
	request being executed.

2004-08-02  Duncan Mak  <duncan@ximian.com>

	* ApplicationShutdownReason.cs: Fixed typos.

	* HttpCookieMode.cs:
	* HttpDataTransferMode.cs:
	* HttpRequestPriority.cs: Added [Serializable] attribute.
	
2004-08-02  Duncan Mak  <duncan@ximian.com>

	* ApplicationShutdownReason.cs:
	* HttpCookieMode.cs:
	* HttpDataTransferMode.cs:
	* HttpRequestPriority.cs: Added 2.0 enumerations.
	
2004-07-21 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: the file not found might be a dependency.

2004-07-20 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpCookie.cs: use invariant when formatting expires date. Fixes bug
	#61690.

2004-07-07 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: don't keep the session around if we got it from
	the context. Fixes bug #61232.

2004-07-06 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpUtility.cs: fixed stupid bug in UrlDecode from bytes. Closes bug
	#61181.

2004-07-02 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* TraceContext.cs: added internal HaveTrace property whose
	value is true when the page has a Trace attribute.

2004-06-15 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* TraceData.cs: fixed <br> output. Closes bug #60181.

2004-06-11  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpUtility.cs: check for control characters in the string to encode
	or decode and return the same string if there are none.

2004-06-11  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: change/restore the IPrincipal in their own methods
	and make them internal.

2004-06-09  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpContext.cs: reverting Pedro's patch and sending mail with test
	to mono-devel.

2004-06-09  Pedro Martnez Juli  <yoros@wanadoo.es>

	* HttpContext: User property returns its own "user" value because
	the context can walk through different Threads. When "User" property
	is changed, change "Thread.CurrentPrincipal" too.

2004-06-08  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: removed extra ^Ms and fixed style of last patch.

2004-06-08  Alon Gazit  <along@mainsoft.com>

	* HttpRequest.cs: Add a patch for HttpRequest.ServerVariables.

2004-06-07  Sebastien Pouliot  <sebastien@ximian.com>

	* HttpContext.cs: User property now get/set Thread.CurrentPrincipal.
	Fix (at least partially) #59683.

2004-06-07  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: reverting patch from Alon Gazit. Uses the above file
	that doesn't compile.

2004-06-07  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* TraceData.cs: fixes nullref in an application that relies on
	r ["Message"] not being null. Closes bug #59679.

2004-06-07  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpCachePolicy.cs: implemented SetAllowResponseInBrowserHistory.

2004-06-07  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRuntime.cs: implemented a 5 simple properties that were TODOs.

2004-06-07  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpBrowserCapabilities.cs: implemented ClrVersion and GetClrVersions.
	* HttpException.cs: removed MonoTODO.

2004-06-05  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* TraceContext.cs: don't check if HttpRuntime.TraceManager
	is enabled when writing.

2004-06-04  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: added ClientTarget internal property.

2004-06-03  Lluis Sanchez Gual <lluis@ximian.com>

	* HttpApplication.cs: Clear the http handler list after releasing the
	  handlers.

2004-06-02  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* TraceData.cs: html-encode the messages written to the trace. Fixes
	bug #59431.

2004-06-01  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWorkerRequest.cs: the hashtables are now case-insensitive. Thanks
	to Markus Krutner.

2004-05-31  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: nullify _sRequestRootVirtualDir and baseVirtualDir
	when SetFilePath is called. This way the cached values are reset and
	get the right value in case someone (namely SessionStateModule + 
	cookieless session) changes the FilePath after the property cached its
	value. Fixes bug #59364.

2004-05-27	Patrik Torstensson <totte@hiddenpeaks.com>

	* HttpApplicationFactory.cs: Added SignalError (still todo)

2004-05-26  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: remove hardcoded "HTTP/1.0" version that kept
	chunked encoding disabled. Fixed chunked suffix and end. Send the
	'lastchunk' marked when in the final Flush even if the content length
	is 0. This makes mod-mono-server work fine with chunked encoding.
	 
	* HttpRuntime.cs: Set the _firstRequest* variables to true
	earlier. TraceContext don't take any parameter now.

	* TraceManager.cs: don't need a context. Use GetAppConfig.

2004-05-25  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: set culture/uiculture from configuration and
	restore it after each step. Fixes bug #52851.

2004-05-18  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpUtility.cs: use lower case in UrlEncode like MS does. Delay
	entities hashtable creation until it's really needed.

2004-05-18  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplicationFactory.cs: if no module matches the name found for a
	possible event, ignore it. Fixes bug #58542.

2004-05-16	Patrik Torstensson <totte@hiddenpeaks.com>

	* HttpRuntime (Init): Removed old todo
	* HttApplication : Implemented IHttpHandlerFactory recycling
	
2004-04-28	Patrik Torstensson

	* HttpApplicationState.cs: Performance, usage of ReaderWriter lock,
	removed MonoTodo

2004-04-16  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpUtility.cs: return null in HtmlDecode for null input instead of
	throwing an exception. Patch by Jan Jaros (bug #57083).

2004-04-10  Vladimir Vukicevic  <vladimir@pobox.com>

	* TimeoutManager.cs: Swap the order of initialization of contexts
	and the Timer, to avoid race condition of CheckTimeouts being called
	before contexts gets initialized.

2004-03-27  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequestStream.cs: patch from Jan Jaros that fixes bug #56080.
	Now the posted file content does not have the boundaries and headers
	included.

2004-03-25  Alon Gazit <along@mainsoft.com>

	* HttpRequest.cs: fix ValidateCookieCollection() to prevent
	InvalidCastException.

2004-03-15  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpValueCollection.cs: don't UrlDecode cookies. Fixes bug #55254.

2004-03-01  Larry Ewing  <lewing@ximian.com>

	* HttpUtility.cs: fix UrlEncodeToBytes count check.

2004-02-12  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpServerUtility.cs:
	* HttpUtility.cs: added some checks for null. Fixed UrlPathEncode (bug
	#53670).

2004-02-12  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpUtility.cs: fixed length check. Closes bug #54201.
	Thanks to Michal Moskal. Use MemoryStream instead of an ArrayList when
	decoding.

2004-02-11  Jackson Harper <jackson@ximian.com>

	* TraceData.cs: Use ToString for cookie/header/var name values so
	null is handled properly.
	
2004-02-09  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: ApplicationState is inited by the factory so,
	return that value in the property. when we use the context Session,
	cache it in the instance field.

	* HttpApplicationFactory.cs: fixed target Type for the event when
	hooking application and module events. Initialize application
	and session scope objects. Fixes non-aplication events hook up.

	* HttpStaticObjectsCollection.cs: added StaticItem and delay the
	creation of the objects until they are requested.

2004-01-28  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplicationFactory.cs: fixlet for session events hook.

2004-01-28  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplicationFactory.cs: attach all events from Type and BaseType
	at the same time. Fixes bug #53454.

2004-01-27  Jackson Harper <jackson@ximian.com>

	* HttpCachePolicy.cs: varybyparams::GetResponseHeader can return
	null now, dont hadd the header if it does.
	* HttpCacheVaryByParams.cs: Return null if there are no items.

2004-01-23  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpCachePolicy.cs: it's not public.
	* HttpRuntime.cs: wait for requests before disposing the queue.

2004-01-15  Jackson Harper <jackson@ximian.com>

	* HttpCachePolicy.cs: Fix typo causing varyby params headers to be
	created when they shouldn't be.
	
2004-01-14  Jackson Harper <jackson@ximian.com>

	* TraceData.cs: Fix some typos in the output text. Fix control
	position when adding controls recursively.
	
2004-01-14  Jackson Harper <jackson@ximian.com>

	* HttpCachePolicy.cs: Expose duration and sliding properties.
	
2004-01-14  Jackson Harper <jackson@ximian.com>

	* HttpCachePolicy.cs: Add an event that is fired when the
	cacheability is updated. The response uses this to determine
	whether or not it needs to cache itself.
	* HttpResponse.cs: When the cacheability is updated either create
	or dispose of the cached raw response based on whether or not we
	wil need it. This allows output caching to be controlled
	programatically.
	
2004-01-12  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpContext.cs: add setter for ConfigTimeout.
	* HttpException.cs: added Description property and HTML encode some
	unescaped values.

	* HttpRequest.cs: support request validation.

	* HttpRequestValidationException.cs: added message and description.

	* HttpServerUtility.cs: implemented ScriptTimeout.

2004-01-11  Jackson Harper <jackson@ximian.com>

	* TraceManager.cs: Dont crash if there is no trace config element.
	
2004-01-11  Jackson Harper <jackson@ximian.com>

	* HttpRequest.cs: Add property for determining if the request is
	local or not.
	
2004-01-10  Jackson Harper <jackson@ximian.com>

	* TraceContext.cs: Handle tracing when it is enabled in the config
	file but not on the page.
	* TraceManager.cs: Get settings from the configuration object.
	* HttpRuntime.cs: Create trace manager in the first request start
	so it can get configuration settings.
	
2004-01-10  Jackson Harper <jackson@ximian.com>

	* TraceContext.cs: Save the request path in the trace data.
	* TraceData.cs: Add RequestPath property, make some rendering
	methods internal static so the TraceHandler can use them.
	* TraceManager.cs: Expose trace data, add a method for clearing
	trace data.
	
2004-01-10  Jackson Harper <jackson@ximian.com>

	* HttpRuntime.cs: Add trace manager
	* TraceManager.cs: New class for handling trace configuration and
	storing trace data objects.
	* TraceContext.cs: Save trace data to the trace manager. Fix typo.
	
2004-01-10  Jackson Harper <jackson@ximian.com>

	* TraceData.cs: New class for storing trace data. Data is stored
	here instead of the trace context so it can be saved and accessed
	from the trace handler.
	* TraceContext.cs: Save data in the TraceData object, let the
	trace data object handle the rendering.
	
2004-01-08  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: use ContentEncoding for QueryString. Fixes bug #52577.
	Thanks to Jan Jaros (mono-bug@jerryweb.info).

	* HttpRequestValidationException.cs: fix comment.

2004-01-06  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpException.cs: default to error 500. Fixes bug #52623.

2004-01-04  Jackson Harper <jackson@ximian.com>

	* TraceContext.cs: Store and render trace info times. Also render
	cookie sizes. Remove debug code.
	
2004-01-04  Jackson Harper <jackson@ximian.com>

	* HttpResponse.cs: Set the cached response date header so it can
	be updated.
	* HttpResponseHeader.cs: Let values be set so we can update cached 
	response header values.
	
2004-01-04  Jackson Harper <jackson@ximian.com>

	* HttpResponse.cs: Implement RemoveOutputCacheItem.
	
2004-01-04  Jackson Harper <jackson@ximian.com>

	* HttpCachePolicy.cs: Add internal method to get the vary by custom string
	* HttpCacheVaryByHeaders.cs: Add internal method to get the header names.
	
2004-01-03  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRuntime.cs: implemented MachineConfigurationDirectory,

2004-1-1  Alon Gazit <along@mainsoft.com>
	* HttpWriter.cs: add check in Write() in order to prevent
	NullReferenceException.

2004-1-1  Alon Gazit <along@mainsoft.com>
	* HttpResponse.cs: implemented ExpiresAbsolute and Expires.

2003-12-18  Jackson Harper <jackson@ximian.com>

	* TraceContext.cs: Write () methods are not warnings.
	
2003-12-18  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpBrowserCapabilities.cs: added GetClrVersions ().
	* HttpCachePolicy.cs: added SetAllowResponseInBrowserHistory ().
	* HttpContext.cs: added set_Current and RewritePath (s, s, s) for 1.1.
	* HttpRequest.cs: added set_ContentType, SetPathInfo and ValidateInput.
	* HttpRequestValidationException.cs: new class for 1.1
	* HttpResponse.cs: added RedirectLocation.
	* HttpRuntime.cs: added UnloadAppDomain.
	* HttpServerUtility.cs: Execute (s, t, b) is internal for < 1.2
	* HttpUtility.cs: copied UrlPathEncode from HttpServerUtility.
	* HttpWorkerRequest.cs: added [ComVisible] and made the ctor public.

2003-12-17  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpContext.cs: implemented IsCustomErrorEnabled and
	IsDebuggingEnabled. Added internal ErrorPage property.

	* HttpRuntime.cs: on error, check if we have a custom error page enabled
	to handle it and redirect.

	* HttpResponse.cs: added RedirectCustomError (), which actually does
	the redirection to the error page.
	
2003-12-16  Jackson Harper <jackson@ximian.com>

	* TraceContext.cs: Render all the data, and the stylesheet.
	
2003-12-16  Jackson Harper <jackson@ximian.com>

	* TraceContext.cs: Add incomplete render method.
	
2003-12-16  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* CapabilitiesLoader.cs: loads browser detection and capabilities data
	from browscap.ini file by Gary J. Keith.

	* HttpBrowserCapabilities.cs: removed almost all TODOs.

	* HttpRequest.cs: fixed Browser property.

2003-12-15  Jackson Harper <jackson@ximian.com>

	* TraceContext.cs: Initial implementation of storing data.
	* HttpContext.cs: Create and expose a trace object.
	
2003-12-04  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: ThreadAbortException is ok on Redirect.
	* HttpContext.cs: added TimeoutPossible property.
	* HttpResponse.cs: throw ThreadAbortException if End () is called within
	a step in which is possible to timeout.

	Fixes bug #51703.

2003-12-04  Jackson Harper <jackson@ximian.com>

	* HttpRequest.cs: Cleanup method.
	
2003-12-04  Jackson Harper <jackson@ximian.com>

	* HttpValueCollection.cs: Allow blank value names. Posting
	<blank>=SomeValue is valid. And occurs if a radio button does
	not have its name set.
	
2003-12-03  Jackson Harper <jackson@ximian.com>

	* HttpResponse.cs: Actually apply an app path modifier in
	ApplyAppPathModifer and add a method to set the app path modifier.
	* HttpRequest.cs: Add utility method for setting a request header.
	
2003-12-02  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: handle FileNotFound and DirectoryNotFound
	exceptions when creating the handler to generate a better error page.

	* HttpException.cs: display the http_code if available.  Changed all
	\n by \r\n to make the hidden stack trace readable.
	
	* StaticFileHandler.cs: don't send the real path in th eerror.

2003-12-02  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpContext.cs: updated GetConfig and GetAppConfig to new API.
	
	* HttpResponse.cs: separate initialization of the HttpWriter, as it
	tries to read configuration settings while the config. system is not
	available (ie, before the first request).
	
	* HttpRuntime.cs: delayed queueManager and response writer
	initialization until the configuration system is working.

2003-11-26  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRuntime.cs: added request queue handling.

	* QueueManager.cs: simple request queue.
	
	* TimeoutManager.cs: added some locks to prevent the enumerator used in
	CheckTimeouts to be out of synch.

2003-11-25  Jackson Harper <jackson@ximian.com>

	* HttpStaticObjectsCollection.cs: Add methods for serialization
	and conversion to/from byte arrays.
	
2003-11-21  Jackson Harper <jackson@ximian.com>

	* HttpResponse.cs: When caching data set the content length in the
	cached repsonse so that only that amount will be written back to
	the client. Add method to write a range of binary data.
	* HttpCacheVaryByParams.cs: Add method to retrieve param names.
	
2003-11-21  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs:
	* HttpContext.cs:
	* HttpRuntime.cs: add timeout handling.
	* TimeoutManager.cs: new class that takes care of aborting threads on
	timeout.

2003-11-19  Jackson Harper <jackson@ximian.com>

	* HttpWriter.cs: Use a constant for the buffer size so the cache
	can get the buffer size. Add method to get the buffer.
	* HttpResponse.cs: Methods for getting data to cache, and setting
	vars from the cache.
	* HttpCachePolicy.cs: Expose a pages cache expire time.
	
2003-11-18  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: 
	* HttpWriter.cs: some fixes to allow closing a response stream without
	messing the rest.

2003-11-13  Jackson Harper  <jackson@ximian.com>

	* HttpCachePolicy.cs: Make sure cacheability and maxage get
	set. Add method to set Http response header data
	* HttpCacheVaryByParams.cs: Add method to create a response header.
	* HttpCacheability.cs: Add ServerAndPrivate and ServerAndNoCache.
	* HttpResponse.cs: Set cache headers.
	
2003-11-11 Ben Maurer  <bmaurer@users.sourceforge.net>

	* HttpModuleCollection.cs (GetKey): Recursion, again!

2003-11-11 Ben Maurer  <bmaurer@users.sourceforge.net>

	* HttpClientCertificate.cs (ValidUntil): recursion!

2003-11-08 Ben Maurer  <bmaurer@users.sourceforge.net>

	* SiteMapNode.cs (GetDataSourceView): Implement.
	* SiteMapProvider.cs: Typo fixing.
	* XmlSiteMapProvider.cs: We shouldnt resolve here.
	
2003-11-08 Ben Maurer  <bmaurer@users.sourceforge.net>

	* SiteMap.cs (Init): implement a hack that doesnt need the config
	stuff. Should do that later.
	* SiteMapNodeCollection (OnValidate): Fix recursion.
	* SiteMapProvider.cs: We dont implement some culture stuff work
	around it. Fix typo.
	* XmlSiteMapProvider.cs: Added.
	
2003-11-07 Ben Maurer  <bmaurer@users.sourceforge.net>

	* ISiteMapProvider.cs:
	* SiteMap.cs:
	* SiteMapNode.cs:
	* SiteMapNodeCollection.cs:
	* SiteMapProvider.cs:
	* SiteMapProviderCollection.cs: V2 sitemap related stuff.

2003-11-07  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: don't attempt to read more bytes than specified
	content length.

2003-11-05  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs:
	* HttpResponse.cs:
	* HttpUtility.cs:
	* HttpValueCollection.cs: encoding fixes/updates.

	* HttpWriter.cs: when updating the encoding, flush the existing stream.
	Encoding updates.

2003-11-04 Ben Maurer  <bmaurer@users.sourceforge.net>

	* HttpContext.cs (IsCustomErrorEnabled): dont throw exception, just
	return false (which makes sense, as the custom errors *arent* enabled;
	ie they dont work.
	* HttpResponseStream.cs: you actually can write with len = 0

2003-11-03 Jackson Harper <jackson@ximian.com>

	* HttpResponse.cs (ContentEncoding): Throw
	ArgumentNullException. Patch by Yaron Shkop.
	
2003-10-30  Atsushi Enomoto <ginga@kit.hi-ho.ne.jp>

	* HttpMultipartContentParser.cs : Quick fix for cygwin build. 
	  CSC complains that constant char cannot be casted as byte.

2003-10-22  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: added AssemblyLocation property.

2003-10-18  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplicationFactory.cs: use NoParamsInvoker.
	* HttpRequest.cs: support request filters.
	* HttpRequestStream.cs: mono-stylized and added new Set method.

	* NoParamsInvoker.cs: proxy class to invoke user-provided methods
	without parameters that are invoked by EventHandlers.

2003-10-13  Lluis Sanchez Gual <lluis@ximian.com>

	* HttpResponse.cs: Changed harcoded switch to en-US culture to a switch
	  to invariant culture.

2003-10-11  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs:
	* HttpServerUtility.cs: change the response writer in Execute. Thanks
	to Rich Alimi <rich@velvetsea.net> for noticing this.

2003-10-11  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplicationFactory.cs: support for wiring up events without
	parameters.

2003-10-06  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpUtility.cs: small memory usage reduction.

2003-10-01  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: pass the Uri, not the file path to
	when looking for a handler.

2003-09-21  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: small fix needed when reading big POST data.

2003-09-04  Lluis Sanchez Gual <lluis@ximian.com>

	* HttpRequest.cs: Url property: use GetLocalAddress() to get the address
	  (this will get the address from the request headers).

2003-09-04  Lluis Sanchez Gual <lluis@ximian.com>

	* HttpServerUtility.cs: In Transfer(), preserve the query string if
	  told to do so.

2003-08-29  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: ensure we do all the EndRequest steps. Don't
	filter the output on error.
	
	* HttpResponse.cs: modified DoFilter to allow bypassing filtering.

2003-08-27  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: when the request is completed or an
	error happens, execute all the delegates attached to EndRequest, not
	only the last one. This makes xsp/test/authtest work again.
	
	* HttpMethodNotAllowedHandler.cs: fixed description for http
	status code.

2003-08-22  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: quick way of checking that the path is within the
	root for the application. Thanks to Johannes for reporting.
	
	* HttpRuntime.cs: use the status code from teh exception when it'ss a
	HttpException.

	* StaticFileHandler.cs: forbidden is 403.

2003-08-20  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpServerUtility.cs: fixed path and query. Path by Rich Alimi
	<rich@velvetsea.net>.

2003-08-19  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpException.cs: make the unhandled error more like the MS one.
	* HttpRuntime.cs: set a 500 error code on unhandled exceptions.

2003-08-19  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: flush headers when the body length is 0.
	* StaticFileHandler.cs: added If-Modified-Since handling patch slightly
	modified from the original by Piers Haken <piersh@friskit.com>.

2003-08-14  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: another patch from totte and me. This one prevents
	writing output if the client have disconnected and filters the data
	when there's a non-final Flush in the middle of the process.

2003-08-12  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: fixed typos. Closes bug #44197.

2003-08-12  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs:
	* HttpApplicationFactory.cs: fix duplicate application OnStart events.

	Patch by Patrik Torstensson.

2003-08-11  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplicationFactory.cs: use the correct Delegate.CreateDelegate
	overload. The previous one only admits static methods.

2003-08-01  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* ProcessModelInfo.cs: Fixed signature

2003-07-30  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* WebCategoryAttribute.cs: Implemented localization
	* WebSysDescriptionAttribute.cs: Implemented localization

2003-07-23  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRuntime.cs: also clear the headers that may have been set upon
	error processing the request.

2003-07-23  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponseStreamProxy.cs: reformatted. Fixed infinite recursion in
	Write method.

	* HttpWriter.cs: flush the filter after writing.

2003-07-22  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWriter.cs: avoid duplicating the MemoryStream byte buffer.

2003-07-08  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpContext.cs: Session doesn't have a setter.

	* HttpResponse.cs: Request is private.

2003-07-03  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: fixed Headers property. It was getting known headers
	values instead of known headers names.

2003-07-01  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: prevent nullref if an error happens before context
	is set.
	* HttpException.cs: small fix in the stack trace sent.
	* HttpUtility.cs: the lock is not needed.

2003-06-30  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: added REMOTE_PORT.
	* HttpValueCollection.cs: fixed bug #45490.

2003-05-13  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs:
	* HttpApplicationFactory.cs: fire application start and session
	start/end events.

2003-05-06  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpException.cs: encode as HTML the inner exception that
	is appended as a comment at the end of error pages.

2003-05-03  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWriter.cs: don't do anything in Flush. Fixes #42249.

2003-05-01  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HtmlizedException.cs: added more virtual methods.

	* HttpException.cs:  some work on the output when there's a source
	file present.

2003-04-30  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HtmlizedException.cs: simplified to cope with the new interface.

	* HttpApplicationFactory.cs: use the application file parser to get the 
	application Type.
	
	* HttpException.cs: small changes. Needs some more work on
	ParseExceptions.
	
2003-03-25  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: fixed Url property.

2003-03-24  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HtmlizedException.cs:
	* HttpException.cs: display the correct line number in error messages.

2003-03-22  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpCachePolicy.cs: implemented all TODOs.
	* HttpRequestStream.cs: make it internal.

2003-03-18  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpContext.cs: implemented RewritePath in other way.
	* HttpRequest.cs: removed SetPhysicalPath and added SetForm.
	* HttpServerUtility.cs: implemented Transfer (string, bool).

2003-03-16  Daniel Lopez Ridruejo <daniel @ rawbyte.com>
	* HttpContext.cs : Implemented RewritePath
	* HttpRequest.cs : Added internal function SetPhysicalPath

2003-03-14  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpServerUtility.cs: implemented Transfer ().

2003-03-13  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRuntime.cs: Cache no longer have a Dispose method.

	* HttpServerUtility.cs: removed MonoTODO.

2003-03-03  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpHelper.cs: store the values in an ArrayList to get them in correct
	order.

2003-02-17  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplicationFactory.cs: Global.asax takes precedence over
	global.asax if it exists.

	* HttpRequest.cs: use allowCrossAppMapping in MapPath.

2003-02-17  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: CreateHttpHandler is now internal.

	* HttpRequest.cs: allow setting QueryStringRaw, which
	invalidates the data obtained from the previous value. Added internal
	SetFilePath method.

	* HttpServerUtility.cs: implemented Execute and GetLastError.

2003-02-17  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpServerUtility.cs: style.

2003-02-13  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: only execute the EndRequest step on error
	condition or request marked as completed. This prevent page events from
	being called when, for example, the url authorization module forbids
	the request.

2003-02-12  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: implemented the indexer.

2003-02-11  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HtmlizedException.cs: base class for exceptions that makes it easy to
	generate error pages.

	* HttpException.cs: improved error displaying.

	* HttpRuntime.cs: removed debugging output.

2003-02-06  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: display the error instead of hanging when we get
	any error before the last step of the request.

2003-02-04  Tim Haynes <thaynes@openlinksw.com>

	* HttpApplicationFactory.cs: fixed HttpRuntime.Close() to decrement
	instance counter.

2003-01-29  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: added BaseVirtualDir property and use it in MapPath.

2003-01-17  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: implemented CurrentExecutionFilePath.

2003-01-10  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: keep _lasterror if no context. Attach
	application events *after* modules initialization (if not, User is not
	set when the user handler is called).
	
	* HttpApplicationFactory.cs: made all methods related to
	AttachEvents static. I will fix OnStart/OnEnd for application and
	session later.
	
	* HttpRequest.cs: don't initialize cookies twice.

2003-01-10  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs:
	(ApplyAppPathModifiers): return the root directory for "".

2003-01-08  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpUtility.cs: fixed HtmlDecode to avoid ArgumentOutOfRangeException.

2003-01-04  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: added new state to handle default authentication.

2003-01-03  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpContext.cs: removed hack to get the User.

2003-01-03  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpUtility.cs: fixed bug #36038. Thanks to juancri@tagnet.org for
	reporting the bug and how to fix it.

2002-12-20  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpCookie.cs: send 'expires' in the header.

2002-12-19  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpValueCollection.cs: patch from Botjan Vizin 
	<bostjan.vizin@siol.net> that implements ToString (bool).

2002-12-18  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplicationFactory.cs: add the context as parameter when building
	the application Type.
	
	* HttpCookie.cs: new internal constructor.
	* HttpCookieCollection.cs: new internal method to make a cookie expire.

	* HttpRequest.cs: MapPath fixes.
	* HttpResponse.cs: implemented ApplyAppPathModifier.
	* HttpRuntime.cs: fixed typo in AppDomainAppVirtualPath.

2002-12-17  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpContext.cs: hack to create a default user when there's no one.
	Implemented GetConfig (string).

	* HttpRequest.cs: fixes to MapPath (string).

2002-12-12  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRuntime.cs: avoid nulls and exception when getting resource
	format strings.

	* StaticFileHandler.cs: added file name to error message.

2002-12-05  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: avoid sending chunked content for HTTP/1.1.

2002-12-02  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplicationFactory.cs: get the events from the application class,
	fire Application/Session Start/End and add the others as application
	events.

2002-11-30  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplicationFactory.cs: compile global.asax file if it exists.

2002-11-27  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: provide a default Browser until we detect it.
	* HttpResponse.cs:
	(End): do not close the connection here.
	(Flush (bool)): send the headers when, for example, Redirect () is
	called.

2002-11-12  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpException.cs: simple error output.

2002-11-12  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: style.
	* HttpException.cs: style.
	* HttpRuntime.cs: only flush the response if there are no errors.
	Otherwise, write an error output.
	* HttpWriter.cs: change Unicode to UTF8.

2002-11-09  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: don't begin the request using ExecuteNextAsync
	(it fails to work on NetServ).

	* HttpWorkerRequest.cs: typo.

2002-11-07  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpValueCollection.cs: the value may contain trailing '=' as it is
	UrlEncoded. Don't split name=value based on '='.

2002-11-02  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpCookie.cs: made GetCookieHeader internal.

	* HttpRequest.cs: get cookies from request.

	* HttpResponse.cs: send cookies. Implemented
	AddFileDependencies (). Added check for _Writer == null in Flush
	(Patrik ;-). Clear the content if HEAD or SupressContent == true.
	Removed redirect hack used in old server.

2002-10-31  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: fixed GetRawContent (). Now it only tries to read at
	most ContentLength bytes.

	* HttpResponse.cs: now it sends the headers. Added
	X-Powered-By header :-).

	* HttpRuntime.cs: fixed typo.

	* HttpValueCollection.cs: cosmetic changes.

2002-10-27  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: reenabled a few lines of code
	(ThreadPool already fixed). 
	
	* HttpRequest.cs:
	* HttpResponse.cs:
	* HttpUtility.cs:
	* HttpValueCollection.cs:
	* HttpWriter.cs: Use WebEncoding.Encoding.

2002-10-25  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWriter.cs: changed encoding of the writer from Unicode to UTF8.
	This fixes sending bytes and allows mixing byte with chars.

2002-10-25  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: implemented WriteFile methods.
	* MimeTypes.cs: removed duplicated entries.

2002-10-24  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: don't throw exception in a couple of
	methods not yet implemented.

2002-10-08  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: fixed type and handle factories when creating
	IHttpHandler for a request.

2002-10-08  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: use handlers from configuration.
	* HttpContext.cs: get handlers from ConfigurationSettings.

2002-10-02  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpMethodNotAllowedHandler.cs:
	* HttpRuntime.cs:
	* StaticFileHandler.cs: Modified file.

	* HttpUtility.cs: implemented all missing methods.


2002-09-30  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* System.Web/HttpApplication.cs: use the static file handler.
	* System.Web/HttpForbiddenHandler.cs: handler to forbid access.
	* System.Web/HttpMethodNotAllowedHandler.cs: handler for method not
	allowed.
	
	* System.Web/HttpUtility.cs: finished all UrlDecode methods.
	* System.Web/MimeTypes.cs: map from file extension to MIME type.
	* System.Web/StaticFileHandler.cs: serves static files

2002-09-28  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* System.Web/HttpApplication.cs:
	* System.Web/HttpApplicationFactory.cs:
	* System.Web/HttpRequest.cs:
	* System.Web/HttpRuntime.cs: we are now able to compile pages and use
	HttpApplication, HttpRuntime and SimpleWorkerRequest.

2002-09-25  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: added some missing methods.
	* HttpApplicationFactory.cs: get event handlers for the application.
	* HttpAsyncResult.cs: little fixes.
	* HttpRequest.cs: make Encoding work even with no worker request.

2002-08-26  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWorkerRequest.cs: mcs doesn't go crazy. It's just me, that forgot
	to add HttpMapPath to the list file...

2002-08-26  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWorkerRequest.cs: fixes compilation with mcs. I will add a bug
	report when i get a test case.

2002-08-26  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplicationFactory.cs:
	* HttpCachePolicy.cs:
	* HttpResponseHeader.cs:
	* HttpResponseStream.cs:
	* HttpResponseStreamProxy.cs:
	* HttpValueCollection.cs: misc. fixes based on class status page.

	* IHttpMapPath.cs: New file.

	* HttpRequest.cs: implemented ContentEncoding.
	* HttpWorkerRequest.cs: mono-stylized and implemented
	SendResponseFromMemory.

2002-08-18  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpContext.cs: reformatted.
	* HttpStaticObjectsCollection.cs: implemented GetEnumertor, CopyTo and
	the indexer.

2002-08-05  Patrik Torstensson <ptorsten@hotmail.com>

	* HttpApplication.cs: Implemented a state machine to allow handling of
	HttpModules and HttpHandlers. Implementation of async handlers. 
								 
	* HttpApplicationFactory.cs: Factory for creating HttpApplication
	instances, including caching.
	
	* HttpRuntime.cs: Usage of the new HttpApplicationFactory to get a
	application instance to execute requests in and implementation of 
	request execution (still no request queue). 
							 
	* HttpAsyncResult.cs: New file to handle async module results.						
							 
	* HttpRequest.cs: Change signature of Dispose
	* HttpResponse.cs: new internal method allowing filtering to happen
	during the request flow in the state machine.

2002-07-28  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs: events were not being initialized.

2002-07-25  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ProcessModelInfo.cs: fixed compilation.

2002-07-25  Tim Coleman <tim@timcoleman.com>
	* ProcessModelInfo.cs:
		New class added
	* HttpParseException.cs:
	* HttpCompileException.cs:
	* HttpUnhandledException.cs:
		Internal constructors added to these

2002-07-24  Tim Coleman <tim@timcoleman.com>
	* ProcessInfo.cs: 
		Fix constructor, reference to shutdownreason.

2002-07-24  Tim Coleman <tim@timcoleman.com>
	* HttpCachePolicy.cs:
		Added stubbs to this class.
	* HttpCacheability.cs:
	* HttpCacheRevalidation.cs:
	* HttpValidationStatus.cs:
	* ProcessShutdownReason.cs:
	* ProcessStatus.cs:
	* TraceMode.cs:
		Reorder the enumerations (and in some cases make
		one-based) in order to agree with the .NET 
		implementation, based on the class status page.
	* ProcessInfo.cs:
		Implementation of this class.

2002-07-23  Tim Coleman <tim@timcoleman.com>
	* HttpCompileException.cs:
	* HttpParseException.cs:
	* HttpUnhandledException.cs:
		New stubbs created.
	* HttpApplication.cs:
	* HttpBrowserCapabilities.cs:
		Added missing methods stubbs and attributes based
		on the class status page.  Also reformatted some
		source for consistency.

2002-07-23  Tim Coleman <tim@timcoleman.com>
	* HttpUtility.cs: Moved entities hashtable into main
		class as a static object, so we don't instantiate
		a new one every time.  Also put the hashtable
		building into a lock block.

2002-07-22  Tim Coleman <tim@timcoleman.com>
	* HttpUtility.cs: Cleanup of the code, implementation
		of HtmlDecode/HtmlEncode functions

2002-07-14  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpResponse.cs: quick&dirty hack to make redirection work. Should
	be out of there once we have SimpleWorkerRequest.

2002-07-13  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpUtility.cs: little typo, big headache.

2002-07-10  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRuntime.cs: don't throw NotImplemented in a couple of methods.

2002-06-30  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* System.Web/HttpResponse.cs: 

	Fixes based on class status page:
	
		- Add attributes (DefaultEvent, ParseChildren).
		- Fix declarations.
		- Explicitly implement some interfaces (IPostBackDataHandler
		and IPostBackEventHandler).
		- Implemented some missing methods.

2002-06-29  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpContext.cs:
	(Session): return null instead of throwing an exception.

	* HttpRequest.cs:
	(HttpMethod): return RequestType if not set.
	(GetRawContent): return QueryString if we don't have a
	HttpWorkerRequest.

	* HttpUtility.cs: fixed Decode and Encode.

2002-06-25  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpApplication.cs:
	* HttpContext.cs: added System.Web.SessionState namespace.

	* HttpSessionState.cs: removed. It is under
	System.Web.SessionState.

2002-06-10  Duncan Mak  <duncan@ximian.com>

	* HttpBrowserCapabilities.cs (BackgroundSounds): Fixed typo.

2002-06-04  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpRequest.cs: implemented Browser property.

2002-06-03  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpBrowserCapabilities.cs: stubbed out.

2002-05-18  Miguel de Icaza  <miguel@ximian.com>

	* HttpRuntime.cs: Reformat file.

2002-05-07  Duncan Mak  <duncan@ximian.com>

	* HttpBrowserCapabilities.cs: Added, replacing
	HttpBrowserCapabilites because of typo.

	* HttpBrowserCapabilites.cs: Removed, replaced by above.

	* HttpRequest.cs (Browser): Fixed typo.

2002-04-12  Patrik Torstensson <patrik.torstensson@labs2.com>

	* HttpApplication.cs: Minor updates
	* HttpApplicationState.cs: Ready.
	* HttpClientCertificate.cs: Signature updates
	* HttpValueCollection.cs: ready
	* HttpStaticObjectsCollection.cs: ready
	* HttpResponseHeader.cs: made internal only
	* HttpResponse.cs: Signature updates
	* HttpPostedFile.cs: ready
	* HttpCacheVaryByHeaders.cs: ready (except communication to policy)
	* HttpCacheVaryByParams.cs: ready (except communication to policy)
	
	System.Web is now over 60% ready.. 

2002-04-11  Patrik Torstensson <patrik.torstensson@labs2.com>

	* HttpException.cs: 95% ready, only windows dependent code left
	* HttpFileCollection.cs: Finished.
	* HttpRequest.cs: Minor fixes and fixed signature problems
	* HttpResponse.cs: Implementation of missing methods and signature problems
	* HttpResponseHeader.cs: Fixed signature problems
	* HttpRuntime.cs: Fixed signature problems
	* HttpServerUtility.cs: Added support for HttpApplication
	* HttpSessionState.cs: Fixed signature issues
	* HttpUtility.cs: fixed signature issues
	* HttpValueCollection.cs: Support for cookie parsing and fixed signature issues
	* HttpWorkerRequest.cs: Fixed small signature issue
	* HttpWriter.cs: Fixed signature issue
	* HttpApplication.cs: Basic implementation
	* HttpApplicationState.cs: Small fixes to support major change comming up
	* HttpBrowserCapabilities.cs: Added Type method
	* HttpClientCertificate.cs: Almost ready, needs to parse certificate.
	* HttpContext.cs: Fixed signature issues and added last methods.
	* HttpCookie.cs: Full implementation
	* HttpCookieCollection.cs: Full implementation
	* TraceContext.cs: Methods implemented.
	* HttpPostedFile.cs: Placeholder
	* HttpStaticObjectsCollection.cs: Placeholder
	* HttpModuleCollection.cs: Ready, will be used during the major revamp.
	
	* Fixed a number of other small signature problems also (class status page)
	
	
2002-04-10  Patrik Torstensson <patrik.torstensson@labs2.com>

    * HttpWorkerRequest.EndOfSendNotification.cs Removed (included in WorkerRequest)
    * Checkin of all new files (noted in last changenote)

2002-04-10  Patrik Torstensson <patrik.torstensson@labs2.com>

    * HttpContext.cs: First implementation (basic support, few methods left to impl)
    * HttpException.cs: Partial implementation (basic support)
    * HttpHelper.cs: Header parse helper, used by runtime (non public)
    * HttpRequest.cs: Implementation (all methods there, not all fully impl)
    * HttpRequestStream.cs: Full implementation
    * HttpResponse.cs: Partial implementation(almost all methods)
    * HttpResponseHeader.cs: Header helper
    * HttpResponseStream.cs: Full implementation - Response stream support
    * HttpResponseStreamProxy.cs: Implementation - filter support
    * HttpRuntime.cs: Rewrite to support one IHttpModule (use for testing the runtime)
	* HttpServerUtility.cs: Implemented usage of HttpContext for methods
	                        and moved encoding functions to HttpUtility.

    * HttpUtility.cs: Added encoding/decoding functions from HttpServerUtility and
                      added the Attribute encoding functions.

    * HttpValueCollection.cs: Implementation.
    * HttpWorkerRequest.cs: Rewrite and implementation of all methods (ready)
    * HttpWriter.cs: Implementation (with filter support)    

    * HttpFileCollection: Added dummy class (placeholder)
    * HttpApplication.cs: Added dummy class (placeholder)
    * HttpApplicationState.cs: Added dummy class (placeholder)
    * HttpBrowserCapabilities.cs: Added dummy class (placeholder)
    * HtttpCachePolicy.cs: Added dummy class (placeholder)
    * HttpClientCertificate.cs: Added dummy class (placeholder)
    * HttpSessionState.cs: Added dummy class (placeholder)
    * TraceContext.cs: Added dummy class (placeholder)
    

2002/04/10  Nick Drochak <ndrochak@gol.com>

	* HttpServerUtility.cs: Fix build breaker.

2002-03-28  Wictor Wiln  <wictor@iBizkit.se>

	* HttpServerUtils.cs : Added some more functionality
	
2002-03-28  Martin Baulig  <martin@gnome.org>

	* HttpServerUtils.cs (UrlDecode): You cannot implicitly cast a
	char to a string, use ToString() instead.

2002-03-16  Gaurav Vaish  <gavish@iitk.ac.in>

	* WebCategoryAttribute.cs
	                       : Added private attribute.

2002-03-16  Gaurav Vaish  <gavish@iitk.ac.in>

	* HttpRuntime.cs       : Stubbed methods for
	          FormatStringResource(...) in agreement with the various
	          overloads available at String.Format(...)

2002-01-08  Gaurav Vaish  <gavish@iitk.ac.in>

	* TODOAttribute.cs     : Added, as an internal class to the assembly

2002-01-03  Nick Drochak  <ndrochak@gol.com>

	* HttpRuntime.cs: remove uneeded exception variable from catch and
	initialize remaining instance members to avoid compile warnings

2002-01-02  Nick Drochak  <ndrochak@gol.com>

	* HttpRuntime.cs: fix spelling error/variable name change.

2001-12-18  Gaurav Vaish <gvaish@iitk.ac.in>

        * HttpRuntime.cs       : Initial implementation

2001-08-29  Bob Smith  <bob@thestuff.net>

        * HttpWorkerRequest.cs: Partial Implementation.

2001-08-16  Bob Smith  <bob@thestuff.net>

         * HttpCookieCollection.cs, HttpCookie.cs: Bug fixes.

2001-08-09  Bob Smith  <bob@thestuff.net>

         * BeginEventHandler.cs: Implemented.
         * EndEventHandler.cs: Implemented.
         * HttpCacheability.cs: Implemented.
         * HttpCacheRevalidation.cs: Implemented.
         * HttpCacheValidateHandler.cs: Implemented.
         * HttpCookieCollection.cs: Implemented.
         * HttpCookie.cs: Implemented.
         * HttpValidationStatus.cs: Implemented.
         * HttpWorkerRequest.EndOfSendNotification.cs: Implemented.
         * IHttpAsyncHandler.cs: Implemented.
         * IHttpHandler.cs: Implemented.
         * IHttpHandlerFactory.cs: Implemented.
         * IHttpModule.cs: Implemented.
         * ProcessShutdownReason.cs: Implemented.
         * ProcessStatus.cs: Implemented.
         * TraceMode.cs: Implemented.
