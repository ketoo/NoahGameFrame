//#########################################################################
//generated by PostgreSQLMetal on 2008-Feb-05 - extracted from server localhost.
//#########################################################################

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Text;
using System.Linq;
//using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Reflection;
using DbLinq.Data.Linq;
using DbLinq.PostgreSql;

namespace AndrusDB
{

    /// <summary>
    /// This class represents PostgreSQL database Andrus.
    /// </summary>
    public partial class Andrus : DataContext
    {
        public Andrus(string connStr)
            : base(new Npgsql.NpgsqlConnection( connStr), new PgsqlVendor())
        {
        }
        public Andrus(System.Data.IDbConnection connection)
            : base(connection, new PgsqlVendor())
        {
        }

        //these fields represent tables in database and are
        //ordered - parent tables first, child tables next. Do not change the order.
        public Table<T3> T3s { get { return base.GetTable<T3>("T3s"); } }
        public Table<Tcompositepk> Tcompositepks { get { return base.GetTable<Tcompositepk>("Tcompositepks"); } }
        public Table<Employee> Employees { get { return base.GetTable<Employee>("Employees"); } }
        public Table<Char_Pk> Char_Pks { get { return base.GetTable<Char_Pk>("Char_Pks"); } }
        public Table<T5> T5s { get { return base.GetTable<T5>("T5s"); } }
        public Table<T4> T4s { get { return base.GetTable<T4>("T4s"); } }
        public Table<T1> T1s { get { return base.GetTable<T1>("T1s"); } }
        public Table<T2> T2s { get { return base.GetTable<T2>("T2s"); } }


    }



    [Table(Name = "public.t3")]
    public partial class T3
    {
        
        protected int _id1;
        protected int? _f1;


        public T3()
        {
        }


        #region properties - accessors

        [Column(Storage = "_id1", Name = "id1", DbType = "integer(32,0)", IsDbGenerated = true, CanBeNull = false, Expression = "nextval('t3_id1_seq')")]
        [DebuggerNonUserCode]
        public int Id1
        {
            get { return _id1; }
            set { _id1 = value; IsModified = true; }
        }


        [Column(Storage = "_f1", Name = "f1", DbType = "integer(32,0)", CanBeNull = true)]
        [DebuggerNonUserCode]
        public int? F1
        {
            get { return _f1; }
            set { _f1 = value; IsModified = true; }
        }

        #endregion
//#warning L189 table public.t3 has no primary key. Multiple c# objects will refer to the same row.

        #region childtables
        #endregion
        #region parenttables
        #endregion

        public bool IsModified { get; set; }
    }



    [Table(Name = "public.tcompositepk")]
    public partial class Tcompositepk
    {

        protected int _f1;
        protected string _f2;
        protected int? _f3;


        public Tcompositepk()
        {
        }


        #region properties - accessors

        [Column(Storage = "_f1", Name = "f1", DbType = "integer(32,0)", IsPrimaryKey = true)]
        [DebuggerNonUserCode]
        public int F1
        {
            get { return _f1; }
            set { _f1 = value; IsModified = true; }
        }


        [Column(Storage = "_f2", Name = "f2", DbType = "character varying(5)", IsPrimaryKey = true)]
        [DebuggerNonUserCode]
        public string F2
        {
            get { return _f2; }
            set { _f2 = value; IsModified = true; }
        }


        [Column(Storage = "_f3", Name = "f3", DbType = "integer(32,0)", CanBeNull = true)]
        [DebuggerNonUserCode]
        public int? F3
        {
            get { return _f3; }
            set { _f3 = value; IsModified = true; }
        }

        #endregion

        #region GetHashCode(),Equals() - uses column $fieldID to look up objects in liveObjectMap
        //TODO: move this logic our of user code, into a generated class
        public override int GetHashCode()
        {
            return _f1.GetHashCode() ^ (_f2 == null ? 0 : _f2.GetHashCode());
        }
        public override bool Equals(object obj)
        {
            Tcompositepk o2 = obj as Tcompositepk;
            if (o2 == null)
                return false;
            return _f1 == o2._f1 && object.Equals(_f2, o2._f2);
        }
        #endregion

        #region childtables
        #endregion
        #region parenttables
        #endregion

        public bool IsModified { get; set; }
    }



    [Table(Name = "public.employee")]
    [InheritanceMapping(Code = 0,
        Type = typeof(HourlyEmployee), IsDefault = true)]
    [InheritanceMapping(Code = 1,
        Type = typeof(SalariedEmployee))]
    [InheritanceMapping(Code = 2,
        Type = typeof(CommissionedEmployee))]
    public partial class Employee
    {
        
        protected int _employeeid;
        protected int _employeetype;
        protected string _employeename;


        public Employee()
        {
        }


        #region properties - accessors

        [Column(Storage = "_employeeid", Name = "employeeid", DbType = "integer(32,0)", IsPrimaryKey = true, IsDbGenerated = true, Expression = "nextval('employee_employeeid_seq')")]
        [DebuggerNonUserCode]
        public int EmployeeID
        {
            get { return _employeeid; }
            set { _employeeid = value; IsModified = true; }
        }


        [Column(Storage = "_employeetype", Name = "employeetype", DbType = "integer(32,0)", CanBeNull = false, IsDiscriminator = true)]
        [DebuggerNonUserCode]
        public int Employeetype
        {
            get { return _employeetype; }
            set { _employeetype = value; IsModified = true; }
        }


        [Column(Storage = "_employeename", Name = "employeename", DbType = "character varying(99)", CanBeNull = true)]
        [DebuggerNonUserCode]
        public string Employeename
        {
            get { return _employeename; }
            set { _employeename = value; IsModified = true; }
        }

        #endregion

        #region GetHashCode(),Equals() - uses column $fieldID to look up objects in liveObjectMap
        //TODO: move this logic our of user code, into a generated class
        public override int GetHashCode()
        {
            return _employeeid.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            Employee o2 = obj as Employee;
            if (o2 == null)
                return false;
            return _employeeid == o2._employeeid;
        }
        #endregion

        #region childtables
        #endregion
        #region parenttables
        #endregion

        public bool IsModified { get; set; }
    }



    [Table(Name = "public.char_pk")]
    public partial class Char_Pk
    {

        protected string _col1;
        protected int? _val1;


        public Char_Pk()
        {
        }


        #region properties - accessors

        [Column(Storage = "_col1", Name = "col1", DbType = "character(1)", IsPrimaryKey = true)]
        [DebuggerNonUserCode]
        public string Col1
        {
            get { return _col1; }
            set { _col1 = value; IsModified = true; }
        }


        [Column(Storage = "_val1", Name = "val1", DbType = "integer(32,0)", CanBeNull = true)]
        [DebuggerNonUserCode]
        public int? Val1
        {
            get { return _val1; }
            set { _val1 = value; IsModified = true; }
        }

        #endregion

        #region GetHashCode(),Equals() - uses column $fieldID to look up objects in liveObjectMap
        //TODO: move this logic our of user code, into a generated class
        public override int GetHashCode()
        {
            return (_col1 == null ? 0 : _col1.GetHashCode());
        }
        public override bool Equals(object obj)
        {
            Char_Pk o2 = obj as Char_Pk;
            if (o2 == null)
                return false;
            return object.Equals(_col1, o2._col1);
        }
        #endregion

        #region childtables
        #endregion
        #region parenttables
        #endregion

        public bool IsModified { get; set; }
    }



    [Table(Name = "public.t5")]
    public partial class T5
    {
        
        protected int _myid;
        protected int? _myval;


        public T5()
        {
        }


        #region properties - accessors

        [Column(Storage = "_myid", Name = "myid", DbType = "integer(32,0)", IsDbGenerated = true, CanBeNull = false, Expression = "nextval('t5_myid_seq')")]
        [DebuggerNonUserCode]
        public int MyID
        {
            get { return _myid; }
            set { _myid = value; IsModified = true; }
        }


        [Column(Storage = "_myval", Name = "myval", DbType = "integer(32,0)", CanBeNull = true)]
        [DebuggerNonUserCode]
        public int? Myval
        {
            get { return _myval; }
            set { _myval = value; IsModified = true; }
        }

        #endregion
//#warning L189 table public.t5 has no primary key. Multiple c# objects will refer to the same row.

        #region childtables
        #endregion
        #region parenttables
        #endregion

        public bool IsModified { get; set; }
    }



    [Table(Name = "public.t4")]
    public partial class T4
    {

        protected decimal? _mydec;
        protected string _mychar;


        public T4()
        {
        }


        #region properties - accessors

        [Column(Storage = "_mydec", Name = "mydec", DbType = "numeric(30,2)", CanBeNull = true)]
        [DebuggerNonUserCode]
        public decimal? Mydec
        {
            get { return _mydec; }
            set { _mydec = value; IsModified = true; }
        }


        [Column(Storage = "_mychar", Name = "mychar", DbType = "character varying(30)", CanBeNull = true)]
        [DebuggerNonUserCode]
        public string Mychar
        {
            get { return _mychar; }
            set { _mychar = value; IsModified = true; }
        }

        #endregion
//#warning L189 table public.t4 has no primary key. Multiple c# objects will refer to the same row.

        #region childtables
        #endregion
        #region parenttables
        #endregion

        public bool IsModified { get; set; }
    }



    [Table(Name = "public.t1")]
    public partial class T1
    {

        protected int _private;


        public T1()
        {
        }


        #region properties - accessors

        [Column(Storage = "_private", Name = "private", DbType = "integer(32,0)", IsPrimaryKey = true)]
        [DebuggerNonUserCode]
        public int Private
        {
            get { return _private; }
            set { _private = value; IsModified = true; }
        }

        #endregion

        #region GetHashCode(),Equals() - uses column $fieldID to look up objects in liveObjectMap
        //TODO: move this logic our of user code, into a generated class
        public override int GetHashCode()
        {
            return _private.GetHashCode();
        }
        public override bool Equals(object obj)
        {
            T1 o2 = obj as T1;
            if (o2 == null)
                return false;
            return _private == o2._private;
        }
        #endregion

        #region childtables

        [Association(Storage = "null", OtherKey = "f1", Name = "t2_f1_fkey")]
        public System.Data.Linq.EntitySet<T2> T2s
        {
            get { return null; } //L212 - child data available only when part of query
        }

        [Association(Storage = "null", OtherKey = "f2", Name = "t2_f2_fkey")]
        public System.Data.Linq.EntitySet<T2> T2s_t2_f2_fkey
        {
            get { return null; } //L212 - child data available only when part of query
        }
        #endregion
        #region parenttables
        #endregion

        public bool IsModified { get; set; }
    }



    [Table(Name = "public.t2")]
    public partial class T2
    {

        protected int? _f1;
        protected int? _f2;


        public T2()
        {
        }


        #region properties - accessors

        [Column(Storage = "_f1", Name = "f1", DbType = "integer(32,0)", CanBeNull = true)]
        [DebuggerNonUserCode]
        public int? F1
        {
            get { return _f1; }
            set { _f1 = value; IsModified = true; }
        }


        [Column(Storage = "_f2", Name = "f2", DbType = "integer(32,0)", CanBeNull = true)]
        [DebuggerNonUserCode]
        public int? F2
        {
            get { return _f2; }
            set { _f2 = value; IsModified = true; }
        }

        #endregion
//#warning L189 table public.t2 has no primary key. Multiple c# objects will refer to the same row.

        #region childtables
        #endregion
        #region parenttables

        private System.Data.Linq.EntityRef<T1> _T1;

        [Association(Storage = "_T1", ThisKey = "f1", Name = "t2_f1_fkey")]
        [DebuggerNonUserCode]
        public T1 T1
        {
            get { return this._T1.Entity; }
            set { this._T1.Entity = value; }
        }

        private System.Data.Linq.EntityRef<T1> _T1_t2_f2_fkey;

        [Association(Storage = "_T1_t2_f2_fkey", ThisKey = "f2", Name = "t2_f2_fkey")]
        [DebuggerNonUserCode]
        public T1 T1_t2_f2_fkey
        {
            get { return this._T1_t2_f2_fkey.Entity; }
            set { this._T1_t2_f2_fkey.Entity = value; }
        }
        #endregion

        public bool IsModified { get; set; }
    }
}