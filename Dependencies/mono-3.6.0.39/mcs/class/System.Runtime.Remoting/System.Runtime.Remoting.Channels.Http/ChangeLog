2009-09-15 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpClientTransportSink.cs: ensure the response stream is disposed.
	* HttpServerTransportSink.cs: use the public API of HttpConnection.
	* RemotingHttpListener.cs: use the public API of HttpConnection
	instead of hooking into an internal method, possibly cause exception
	and leave the Connection in an unstable state.

2009-02-08 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpClientTransportSink.cs: if we get an WebException that does not
	have a response, dispatch it to the sink.

2008-11-10  Michael Hutchinson  <mhutchinson@novell.com>

	* HttpServerTransportSink.cs: Seek to beginning of server response 
	  stream. Fixes Bug 436995 - Xml-Rpc.net does not work since 
	  Mono 1.9.x.

2008-09-30  Michael Hutchinson  <mhutchinson@novell.com>

	* HttpServerChannel.cs: make sure the channel data object is set 
	  when the port is auto-assigned.
	* HttpClientTransportSink.cs: Use the __RequestUri header for the 
	  request's URI. Includes workaround for bad __RequestUri values.
	
	Fixes Bug 378713 - [regression] Remoting - HttpChannel.

2008-09-24  Michael Hutchinson  <mhutchinson@novell.com>

	* HttpServerTransportSink.cs: Disable chunking on the server, as 
	  for some reason it was breaking the tests. This reduces efficiency 
	  but right now is unavoidable.
	  
	* HttpServerChannel.cs: Implement AddHookChannelUri. Thanks to 
	  Lluis for the patch.

2008-09-23  Michael Hutchinson  <mhutchinson@novell.com>

	* HttpClientChannel.cs: Fix logic error from ==/!= typo. Stops 
	  channel from trying to handle IPC URLs, which was breaking the 
	  IPC tests.

2008-09-19  Michael Hutchinson  <mhutchinson@novell.com>

	* HttpServerChannel.cs:
	* HttpClientChannel.cs:
	* HttpChannel.cs: Fixes from corcompare, and some cleanup.

2008-09-19  Jeffrey Stedfast  <fejj@novell.com>

	* HttpChannel.cs: Throw ArgumentNullException if url is null.

2008-09-18  Michael Hutchinson  <mhutchinson@novell.com>

	* HttpServerTransportSink.cs:
	* HttpServerChannel.cs: Cleanup.
	* HttpClientTransportSink.cs: Use username/password/domain parameters, 
	  fix some spelling, add FIXME comment regarding stream copying.
	* HttpClientChannel.cs: 
	* HttpChannel.cs: Fix 1.1 API slip.

2008-09-18  Michael Hutchinson  <mhutchinson@novell.com>

	* HttpServerChannel.cs: Don't try to resolve IPAddress.Any, so that 
	by default we bind to localhost/lo as well as the host address.
	Also remove dead code for binding to multiple IP addresses; I don't 
	think we need to handle that.

2008-09-18  Michael Hutchinson  <mhutchinson@novell.com>

	* HttpChannel.cs: Fix default channel name.

2008-09-18  Michael Hutchinson  <mhutchinson@novell.com>

	* HttpClientTransportSink: Fix logic error that broke async client 
	functionality. Fixes HttpAsyncCallTest tests.

2008-06-14  Sebastien Pouliot  <sebastien@ximian.com>

	* HttpRemotingHandler.cs: Remove double assignment to bodyBuffer.
	[Found using Gendarme]

2008-02-12  Roei Erez (roeie@mainsoft.com)

	* HttpServerChannel.cs: Always initialize channel uri.

2007-10-30  Robert Jordan  <robertj@gmx.net>

	* HttpHelper.cs: Support for the "https" scheme. Make scheme parser
	case invariant. Fixes bug #81701.

	* HttpServerChannel.cs (GetChannelUri): Take channel data into account.

	* HttpServerChannel.cs (SetupChannel): Initialize channel data
	with "null", because at this stage we don't necessary have a valid
	channel URI.

2007-08-23  Robert Jordan  <robertj@gmx.net>

	* HttpRemotingHandlerFactory.cs: configure Remoting because
	System.Web doesn't anymore. Fixes #81831.

2006-12-18  Lluis Sanchez Gual  <lluis@novell.com>

	* HttpServerChannel.cs: The remoting infrastructure does not call
	  StartListening() anymore, so it has to be called by the channel.

2006-03-05  Andrew Skiba <andrews@mainsoft.com>

	* HttpClientChannel.cs, HttpServerChannel.cs: exceptions propagating
	incompatible with dotnet. Patch by roeie@mainsoft.com

2005-11-06  Svetlana Zholkovsky  <svetlanaz@mainsoft.com>

    * Add HttpHandlerFactory.jvm.cs
	* HttpHandlerFactory.cs: Create and register HttpChannel in case it 
	was not registered before.
	* HttpHandler.cs: Send response headers.
	* HttpServerChannel.cs:
	  - Change default port to -1.
	  - Don't start a listener if the port == -1
	  - Send response to the client also in case of DispatchRequest fails

2005-10-10  Lluis Sanchez Gual  <lluis@novell.com>

	* HttpServer.cs: Removed all non-sense regular expressions for
	parsing files. Makes the channel faster and fixes bug #75886.

2005-07-06  Lluis Sanchez Gual  <lluis@novell.com>

	* HttpServer.cs: Close the connection after processing the request.
	Based on a patch by Brion Vibber. Fixes bug #75467.

2005-05-18  Lluis Sanchez Gual  <lluis@novell.com>

	* HttpServerChannel.cs: Catch exceptions thrown in the server thread.
	In StopListening, wait for the server thread to stop before returning.

2005-01-25  Lluis Sanchez Gual  <lluis@novell.com>

	* HttpServer.cs: Use a single stream for in an out stream, since they
	where the same. Set IPAddress and ConnectionId transport headers.

2005-01-14  Lluis Sanchez Gual  <lluis@novell.com>

	* HttpServerChannel.cs: Use the new RemotingThreadPool to manage threads.
	  Fixed some warnings.
	* HttpServer.cs: Minor fix.

2004-12-17  Lluis Sanchez Gual <lluis@ximian.com>

	* HttpHelper.cs: Removed unused method. Optimized CopyStream method.
	* HttpServerChannel.cs: SendResponse does not return a bool any
	  more, it throws an exception when it fails.
	* HttpServer.cs: Improved handling of errors.

2004-10-22  Lluis Sanchez Gual <lluis@ximian.com>

	* HttpClientChannel.cs: In CreateMessageSink, process the remote channel
	  data if the provided url does not have the expected format. This fixes
	  a regression from the fix for bug #66768 and fixes #68669.

2004-09-27  Lluis Sanchez Gual <lluis@ximian.com>

	* HttpClientChannel.cs: Throw an http exception if the response is a 500,
	  don't try to deserialize the exception.

2004-05-26  Lluis Sanchez Gual <lluis@ximian.com>

	* HttpServerChannel.cs: Default port is 0.

2004-05-25  Lluis Sanchez Gual <lluis@ximian.com>

	* HttpServerChannel.cs: Take unused port if the provided prot is 0.

2004-05-13  Lluis Sanchez Gual <lluis@ximian.com>

	* HttpChannel.cs, HttpClientChannel.cs: Added missing IDictionary 
	properties.
	* HttpRemotingHandler.cs: Added missing constructor.
	* HttpRemotingHandlerFactory.cs: Made ConfigureHttpChannel private.
	* HttpServerChannel.cs: Fixed IDictionary properties.

2004-04-30  Lluis Sanchez Gual <lluis@ximian.com>

	* HttpServer.cs: Removed dead code.

2004-02-27  Lluis Sanchez Gual  <lluis@ximian.com>

	* HttpClientChannel.cs: Set the RequestUri transport header before sending 
	  the request.

2004-02-04  Lluis Sanchez Gual  <lluis@ximian.com>

	* HttpRemotingHandlerFactory.cs: Loading of remoting configuration moved
	  to System.Web.Configuraiton.

2003-12-12  Lluis Sanchez Gual  <lluis@ximian.com>

	* HttpServer.cs: Removed debug code.
	
2003-12-10  Lluis Sanchez Gual  <lluis@ximian.com>

	* HttpServer.cs: Allow the use of GET method (SdlServerSink supports it).
	Added some text constans for transport keys.
	* HttpServerChannel.cs: Add SdlChannelSinkProvider to the default 
	sink provider chain. Removed unused ErrorMessage class.

2003-11-16  Lluis Sanchez Gual  <lluis@ximian.com>

	* HttpHelper.cs: Removed usnused method GetMachineIp.
	* HttpServerChannel.cs: Added support for priority, bindTo, useIpAddress and
	  machineName properties.

2003-11-13  Lluis Sanchez Gual <lluis@ximian.com>

	* HttpChannel.cs: Create empty property dictionary in the default
	  constructor.

2003-11-13  Lluis Sanchez Gual <lluis@ximian.com>

	* HttpChannel.cs: Moved initialization code in SetupChannel to the
	  respective client and server channels. Added implementatoin of the
	  interface IChannelReceiverHook.
	* HttpRemotingHandler.cs: Implemented.
	* HttpRemotingHandlerFactory.cs: Implemented.
	* HttpServer.cs: In general, use Stream instances instead of Socket. It is
	  more reusable in this way. Also improved formatting.
	* HttpServerChannel.cs: Implemented support for IChannelReceiverHook.
	  Added new method DispatchRequest in HttpServerTransportSink that can
	  be reused by HttpRemotingHandler.

2003-11-12  Lluis Sanchez Gual <lluis@ximian.com>

	* HttpServerChannel.cs: Removed StartListening call from constructor. It
	  is called by the remoting framework.
	* HttpClientChannel.cs, HttpHelper.cs: Fixed some formatting.

2003-09-17  Lluis Sanchez Gual <lluis@ximian.com>

	* HttpHelper.cs: Fixed bug #48468. Patch by Jean-Marc Andre.
	* HttpClientChannel.cs HttpServer.cs HttpServerChannel.cs: Fixed some warnings.

2003-08-22  Lluis Sanchez Gual <lluis@ximian.com>

	* HttpClientChannel.cs: Changed text for user-agent header (removed references
	  to MS.NET).
	  Removed try/catch from AsyncProcessRequest. If there is an exception it must
	  flow to the caller.
	  in AsyncRequestHandler, improved management of exceptions. HttpWebRequest
	  throws an exception if the result code is 400, 500. Is is not a communication
	  error, but an application or server error. The content of the body must be
	  deserialized like in normal responses.
	  In CreateWebRequest, if the stream being sent is a MemoryStream, use a more
	  efficient way of writing the content.
	  In SendAndRecieve, same as in AsyncRequestHandler. Also moved some code to a
	  new method named ReceiveResponse, so it can be reused from AsyncRequestHandler.
	* HttpHelper.cs: Removed some debugging code that is not needed.
	* HttpServer.cs: Improved formatting of some code.
	  In CheckRequest method, send a 100-continue response if the request has
	  the header: expect:100-continue.
	  Method SendResponse: the remoting formatter may include the result code and
	  reason phrase to use in the transport headers. Used them if provided.
	* HttpServerChannel.cs: Use ThreadPool to create the thread that will answer
	  a request.

2003-08-18  Lluis Sanchez Gual <lluis@ximian.com>

	* HttpClientChannel.cs, HttpServerChannel.cs: Fixed bug #47703

2003-06-21  Lluis Sanchez Gual <lluis@ximian.com>

	* HttpChannel.cs, HttpClientChannel.cs, HttpHelper.cs, HttpServer.cs,
	  HttpServerChannel.cs, HttpThread.cs: added new implementation of the HttpChannel
	  by Ahmad Tantawy, Ahmad Kadry and Hussein Mehanna.
	* unix.args: added HttpHelper.cs,HttpServer.cs,HttpThread.cs.

