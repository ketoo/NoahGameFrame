// THIS FILE AUTOMATICALLY GENERATED BY xpidl2cs.pl
// EDITING IS PROBABLY UNWISE
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// Copyright (c) 2007, 2008 Novell, Inc.
//
// Authors:
//	Andreia Gaita (avidigal@novell.com)
//

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Text;

namespace Mono.Mozilla {

	[Guid ("1A180F60-93B2-11d2-9B8B-00805F8A16D9")]
	[InterfaceType (ComInterfaceType.InterfaceIsIUnknown)]
	[ComImport ()]
	internal interface nsIPersistentProperties : nsIProperties {
#region nsIProperties
		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int get ([MarshalAs (UnmanagedType.LPStr) ]  string prop,
				[MarshalAs (UnmanagedType.LPStruct) ]  Guid iid,
				out IntPtr result);

		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int set ([MarshalAs (UnmanagedType.LPStr) ]  string prop,
				[MarshalAs (UnmanagedType.Interface) ]  IntPtr value);

		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int has ([MarshalAs (UnmanagedType.LPStr) ]  string prop,
				out bool ret);

		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int undefine ([MarshalAs (UnmanagedType.LPStr) ]  string prop);

		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int getKeys (out UInt32 count,
				[MarshalAs (UnmanagedType.LPStr) ] out string[] keys);

#endregion

#region nsIPersistentProperties
		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int load ([MarshalAs (UnmanagedType.Interface) ]  nsIInputStream input);

		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int save ([MarshalAs (UnmanagedType.Interface) ]  nsIOutputStream output,
				 /*AUTF8String*/ HandleRef header);

		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int subclass ([MarshalAs (UnmanagedType.Interface) ]  nsIPersistentProperties superclass);

		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int enumerate ([MarshalAs (UnmanagedType.Interface) ] out nsISimpleEnumerator ret);

		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int getStringProperty ( /*AUTF8String*/ HandleRef key,
				 /*AString*/ HandleRef ret);

		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int setStringProperty ( /*AUTF8String*/ HandleRef key,
				 /*AString*/ HandleRef value,
				 /*AString*/ HandleRef ret);

#endregion
	}


	internal class nsPersistentProperties {
		public static nsIPersistentProperties GetProxy (Mono.WebBrowser.IWebBrowser control, nsIPersistentProperties obj)
		{
			object o = Base.GetProxyForObject (control, typeof(nsIPersistentProperties).GUID, obj);
			return o as nsIPersistentProperties;
		}
	}
}
#if example

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Text;

	internal class PersistentProperties : nsIPersistentProperties {

#region nsIPersistentProperties
		int nsIPersistentProperties.load ([MarshalAs (UnmanagedType.Interface) ]  nsIInputStream input)
		{
			return ;
		}



		int nsIPersistentProperties.save ([MarshalAs (UnmanagedType.Interface) ]  nsIOutputStream output,
				 /*AUTF8String*/ HandleRef header)
		{
			return ;
		}



		int nsIPersistentProperties.subclass ([MarshalAs (UnmanagedType.Interface) ]  nsIPersistentProperties superclass)
		{
			return ;
		}



		int nsIPersistentProperties.enumerate ([MarshalAs (UnmanagedType.Interface) ] out nsISimpleEnumerator ret)
		{
			return ;
		}



		int nsIPersistentProperties.getStringProperty ( /*AUTF8String*/ HandleRef key,
				 /*AString*/ HandleRef ret)
		{
			return ;
		}



		int nsIPersistentProperties.setStringProperty ( /*AUTF8String*/ HandleRef key,
				 /*AString*/ HandleRef value,
				 /*AString*/ HandleRef ret)
		{
			return ;
		}



#endregion
	}
#endif
