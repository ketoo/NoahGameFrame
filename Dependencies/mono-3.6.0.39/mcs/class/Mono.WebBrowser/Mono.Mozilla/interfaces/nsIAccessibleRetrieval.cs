// THIS FILE AUTOMATICALLY GENERATED BY xpidl2cs.pl
// EDITING IS PROBABLY UNWISE
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// Copyright (c) 2007, 2008 Novell, Inc.
//
// Authors:
//	Andreia Gaita (avidigal@novell.com)
//

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Text;

namespace Mono.Mozilla {

	[Guid ("244e4c67-a1d3-44f2-9cab-cdaa31b68046")]
	[InterfaceType (ComInterfaceType.InterfaceIsIUnknown)]
	[ComImport ()]
	internal interface nsIAccessibleRetrieval {

#region nsIAccessibleRetrieval
		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int getAccessibleFor ([MarshalAs (UnmanagedType.Interface) ]  nsIDOMNode aNode,
				[MarshalAs (UnmanagedType.Interface) ] out nsIAccessible ret);

		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int getAttachedAccessibleFor ([MarshalAs (UnmanagedType.Interface) ]  nsIDOMNode aNode,
				[MarshalAs (UnmanagedType.Interface) ] out nsIAccessible ret);

		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int getRelevantContentNodeFor ([MarshalAs (UnmanagedType.Interface) ]  nsIDOMNode aNode,
				[MarshalAs (UnmanagedType.Interface) ] out nsIDOMNode ret);

		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int getAccessibleInWindow ([MarshalAs (UnmanagedType.Interface) ]  nsIDOMNode aNode,
				[MarshalAs (UnmanagedType.Interface) ]  nsIDOMWindow aDOMWin,
				[MarshalAs (UnmanagedType.Interface) ] out nsIAccessible ret);

		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int getAccessibleInWeakShell ([MarshalAs (UnmanagedType.Interface) ]  nsIDOMNode aNode,
				[MarshalAs (UnmanagedType.Interface) ]  nsIWeakReference aPresShell,
				[MarshalAs (UnmanagedType.Interface) ] out nsIAccessible ret);

		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int getAccessibleInShell ([MarshalAs (UnmanagedType.Interface) ]  nsIDOMNode aNode,
				 /*nsIPresShell*/ IntPtr aPresShell,
				[MarshalAs (UnmanagedType.Interface) ] out nsIAccessible ret);

		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int getCachedAccessNode ([MarshalAs (UnmanagedType.Interface) ]  nsIDOMNode aNode,
				[MarshalAs (UnmanagedType.Interface) ]  nsIWeakReference aShell,
				[MarshalAs (UnmanagedType.Interface) ] out nsIAccessNode ret);

		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int getCachedAccessible ([MarshalAs (UnmanagedType.Interface) ]  nsIDOMNode aNode,
				[MarshalAs (UnmanagedType.Interface) ]  nsIWeakReference aShell,
				[MarshalAs (UnmanagedType.Interface) ] out nsIAccessible ret);

		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int getStringRole ( uint aRole,
				 /*AString*/ HandleRef ret);

		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int getStringStates ( uint aStates,
				 uint aExtraStates,
				[MarshalAs (UnmanagedType.Interface) ] out nsIDOMDOMStringList ret);

		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int getStringEventType ( uint aEventType,
				 /*AString*/ HandleRef ret);

		[PreserveSigAttribute]
		[MethodImpl (MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
		int getStringRelationType ( uint aRelationType,
				 /*AString*/ HandleRef ret);

#endregion
	}


	internal class nsAccessibleRetrieval {
		public static nsIAccessibleRetrieval GetProxy (Mono.WebBrowser.IWebBrowser control, nsIAccessibleRetrieval obj)
		{
			object o = Base.GetProxyForObject (control, typeof(nsIAccessibleRetrieval).GUID, obj);
			return o as nsIAccessibleRetrieval;
		}
	}
}
#if example

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Text;

	internal class AccessibleRetrieval : nsIAccessibleRetrieval {

#region nsIAccessibleRetrieval
		int nsIAccessibleRetrieval.getAccessibleFor ([MarshalAs (UnmanagedType.Interface) ]  nsIDOMNode aNode,
				[MarshalAs (UnmanagedType.Interface) ] out nsIAccessible ret)
		{
			return ;
		}



		int nsIAccessibleRetrieval.getAttachedAccessibleFor ([MarshalAs (UnmanagedType.Interface) ]  nsIDOMNode aNode,
				[MarshalAs (UnmanagedType.Interface) ] out nsIAccessible ret)
		{
			return ;
		}



		int nsIAccessibleRetrieval.getRelevantContentNodeFor ([MarshalAs (UnmanagedType.Interface) ]  nsIDOMNode aNode,
				[MarshalAs (UnmanagedType.Interface) ] out nsIDOMNode ret)
		{
			return ;
		}



		int nsIAccessibleRetrieval.getAccessibleInWindow ([MarshalAs (UnmanagedType.Interface) ]  nsIDOMNode aNode,
				[MarshalAs (UnmanagedType.Interface) ]  nsIDOMWindow aDOMWin,
				[MarshalAs (UnmanagedType.Interface) ] out nsIAccessible ret)
		{
			return ;
		}



		int nsIAccessibleRetrieval.getAccessibleInWeakShell ([MarshalAs (UnmanagedType.Interface) ]  nsIDOMNode aNode,
				[MarshalAs (UnmanagedType.Interface) ]  nsIWeakReference aPresShell,
				[MarshalAs (UnmanagedType.Interface) ] out nsIAccessible ret)
		{
			return ;
		}



		int nsIAccessibleRetrieval.getAccessibleInShell ([MarshalAs (UnmanagedType.Interface) ]  nsIDOMNode aNode,
				 /*nsIPresShell*/ IntPtr aPresShell,
				[MarshalAs (UnmanagedType.Interface) ] out nsIAccessible ret)
		{
			return ;
		}



		int nsIAccessibleRetrieval.getCachedAccessNode ([MarshalAs (UnmanagedType.Interface) ]  nsIDOMNode aNode,
				[MarshalAs (UnmanagedType.Interface) ]  nsIWeakReference aShell,
				[MarshalAs (UnmanagedType.Interface) ] out nsIAccessNode ret)
		{
			return ;
		}



		int nsIAccessibleRetrieval.getCachedAccessible ([MarshalAs (UnmanagedType.Interface) ]  nsIDOMNode aNode,
				[MarshalAs (UnmanagedType.Interface) ]  nsIWeakReference aShell,
				[MarshalAs (UnmanagedType.Interface) ] out nsIAccessible ret)
		{
			return ;
		}



		int nsIAccessibleRetrieval.getStringRole ( uint aRole,
				 /*AString*/ HandleRef ret)
		{
			return ;
		}



		int nsIAccessibleRetrieval.getStringStates ( uint aStates,
				 uint aExtraStates,
				[MarshalAs (UnmanagedType.Interface) ] out nsIDOMDOMStringList ret)
		{
			return ;
		}



		int nsIAccessibleRetrieval.getStringEventType ( uint aEventType,
				 /*AString*/ HandleRef ret)
		{
			return ;
		}



		int nsIAccessibleRetrieval.getStringRelationType ( uint aRelationType,
				 /*AString*/ HandleRef ret)
		{
			return ;
		}



#endregion
	}
#endif
