<?xml version="1.0"?>
<clause number="21.3" title="Enum members">
  <paragraph>The body of an enum type declaration defines zero or more enum members, which are the named constants of the enum type. No two enum members can have the same name. <grammar_production><name><non_terminal where="21.3">enum-member-declaration</non_terminal>s</name> : <rhs><non_terminal where="21.3">enum-member-declaration</non_terminal></rhs><rhs><non_terminal where="21.3">enum-member-declarations</non_terminal><terminal>,</terminal><non_terminal where="21.3">enum-member-declaration</non_terminal></rhs></grammar_production><grammar_production><name><non_terminal where="21.3">enum-member-declaration</non_terminal></name> : <rhs><non_terminal where="24.2">attributes</non_terminal><opt/><non_terminal where="9.4.2">identifier</non_terminal></rhs><rhs><non_terminal where="24.2">attributes</non_terminal><opt/><non_terminal where="9.4.2">identifier</non_terminal><terminal>=</terminal><non_terminal where="14.15">constant-expression</non_terminal></rhs></grammar_production></paragraph>
  <paragraph>Each enum member has an associated constant value. The type of this value is the underlying type for the containing enum. The constant value for each enum member must be in the range of the underlying type for the enum. <example>[Example: The example <code_example><![CDATA[
enum Color: uint  
{  
   Red = -1,  
   Green = -2,  
   Blue = -3  
}  
]]></code_example>results in a compile-time error because the constant values -1, -2, and -3 are not in the range of the underlying integral type <keyword>uint</keyword>. end example]</example> </paragraph>
  <paragraph>Multiple enum members may share the same associated value. <example>[Example: The example <code_example><![CDATA[
enum Color   
{  
   Red,  
   Green,  
   Blue,  
   
   Max = Blue  
}  
]]></code_example>shows an enum that has two enum members-Blue and Max-that have the same associated value. end example]</example> </paragraph>
  <paragraph>The associated value of an enum member is assigned either implicitly or explicitly. If the declaration of the enum member has a <non_terminal where="14.15">constant-expression</non_terminal> initializer, the value of that constant expression, implicitly converted to the underlying type of the enum, is the associated value of the enum member. If the declaration of the enum member has no initializer, its associated value is set implicitly, as follows: <list><list_item> If the enum member is the first enum member declared in the enum type, its associated value is zero. </list_item><list_item> Otherwise, the associated value of the enum member is obtained by increasing the associated value of the textually preceding enum member by one. This increased value must be within the range of values that can be represented by the underlying type. </list_item></list></paragraph>
  <paragraph>
    <example>[Example: The example <code_example><![CDATA[
using System;  
enum Color  
{  
   Red,  
   Green = 10,  
   Blue  
}  
class Test  
{  
   static void Main() {  
      Console.WriteLine(StringFromColor(Color.Red));  
      Console.WriteLine(StringFromColor(Color.Green));  
      Console.WriteLine(StringFromColor(Color.Blue));  
   }  
   static string StringFromColor(Color c) {  
      switch (c) {  
         case Color.Red:   
         return String.Format("Red = {0}", (int) c);  
         case Color.Green:  
         return String.Format("Green = {0}", (int) c);  
         case Color.Blue:  
         return String.Format("Blue = {0}", (int) c);  
         default:  
         return "Invalid color";  
      }  
   }  
}  
]]></code_example>prints out the enum member names and their associated values. The output is: <code_example><![CDATA[
Red = 0  
Green = 10  
Blue = 11  
]]></code_example>for the following reasons: <list><list_item> the enum member Red is automatically assigned the value zero (since it has no initializer and is the first enum member); </list_item><list_item> the enum member Green is explicitly given the value 10; </list_item><list_item> and the enum member Blue is automatically assigned the value one greater than the member that textually precedes it. end example]</list_item></list></example>
  </paragraph>
  <paragraph>The associated value of an enum member may not, directly or indirectly, use the value of its own associated enum member. Other than this circularity restriction, enum member initializers may freely refer to other enum member initializers, regardless of their textual position. Within an enum member initializer, values of other enum members are always treated as having the type of their underlying type, so that casts are not necessary when referring to other enum members. </paragraph>
  <paragraph>
    <example>[Example: The example <code_example><![CDATA[
enum Circular  
{  
   A = B,  
   B  
}  
]]></code_example>results in a compile-time error because the declarations of A and B are circular. A depends on B explicitly, and B depends on A implicitly. end example]</example>
  </paragraph>
  <paragraph>Enum members are named and scoped in a manner exactly analogous to fields within classes. The scope of an enum member is the body of its containing enum type. Within that scope, enum members can be referred to by their simple name. From all other code, the name of an enum member must be qualified with the name of its enum type. Enum members do not have any declared accessibility-an enum member is accessible if its containing enum type is accessible. </paragraph>
</clause>
