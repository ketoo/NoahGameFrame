<?xml version="1.0"?>
<clause number="15.9.2" title="The continue statement">
  <paragraph>The continue statement starts a new iteration of the nearest enclosing while, do, for, or foreach statement. <grammar_production><name><non_terminal where="15.9.2">continue-statement</non_terminal></name> : <rhs><keyword>continue</keyword><terminal>;</terminal></rhs></grammar_production></paragraph>
  <paragraph>The target of a continue statement is the end point of the embedded statement of the nearest enclosing while, do, for, or foreach statement. If a continue statement is not enclosed by a while, do, for, or foreach statement, a compile-time error occurs. </paragraph>
  <paragraph>When multiple while, do, for, or foreach statements are nested within each other, a continue statement applies only to the innermost statement. To transfer control across multiple nesting levels, a goto statement (<hyperlink>15.9.3</hyperlink>) must be used. </paragraph>
  <paragraph>A continue statement cannot exit a finally block (<hyperlink>15.10</hyperlink>). When a continue statement occurs within a finally block, the target of the continue statement must be within the same finally block; otherwise a compile-time error occurs. </paragraph>
  <paragraph>A continue statement is executed as follows: <list><list_item> If the continue statement exits one or more try blocks with associated finally blocks, control is initially transferred to the finally block of the innermost try statement. When and if control reaches the end point of a finally block, control is transferred to the finally block of the next enclosing try statement. This process is repeated until the finally blocks of all intervening try statements have been executed. </list_item><list_item> Control is transferred to the target of the continue statement. </list_item></list></paragraph>
  <paragraph>Because a continue statement unconditionally transfers control elsewhere, the end point of a continue statement is never reachable. </paragraph>
</clause>
