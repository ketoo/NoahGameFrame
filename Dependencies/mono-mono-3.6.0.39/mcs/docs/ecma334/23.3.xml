<?xml version="1.0"?>
<clause number="23.3" title="How exceptions are handled">
  <paragraph>Exceptions are handled by a try statement (<hyperlink>15.10</hyperlink>). </paragraph>
  <paragraph>When an exception occurs, the system searches for the nearest catch clause that can handle the exception, as determined by the run-time type of the exception. First, the current method is searched for a lexically enclosing try statement, and the associated catch clauses of the try statement are considered in order. If that fails, the method that called the current method is searched for a lexically enclosing try statement that encloses the point of the call to the current method. This search continues until a catch clause is found that can handle the current exception, by naming an exception class that is of the same class, or a base class, of the run-time type of the exception being thrown. A catch clause that doesn't name an exception class can handle any exception. </paragraph>
  <paragraph>Once a matching catch clause is found, the system prepares to transfer control to the first statement of the catch clause. Before execution of the catch clause begins, the system first executes, in order any finally clauses that were associated with try statements more nested that than the one that caught the exception. </paragraph>
  <paragraph>If no matching catch clause is found, one of two things occurs: <list><list_item> If the search for a matching catch clause reaches a static constructor (<hyperlink>17.11</hyperlink>) or static field initializer, then a System.TypeInitializationException is thrown at the point that triggered the invocation of the static constructor. The inner exception of the System.TypeInitializationException contains the exception that was originally thrown. </list_item><list_item> If the search for matching catch clauses reaches the code that initially started the thread, then execution of the thread is terminated. The impact of such termination is implementation-defined. </list_item></list></paragraph>
  <paragraph>Exceptions that occur during destructor execution are worth special mention. If an exception occurs during destructor execution, and that exception is not caught, then the execution of that destructor is terminated and the destructor of the base class (if any) is called. If there is no base class (as in the case of the object type) or if there is no base class destructor, then the exception is discarded. </paragraph>
</clause>
