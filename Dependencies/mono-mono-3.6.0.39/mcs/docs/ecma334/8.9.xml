<?xml version="1.0"?>
<clause number="8.9" title="Interfaces" informative="true">
  <paragraph>An interface defines a contract. A class or struct that implements an interface must adhere to its contract. Interfaces can contain methods, properties, events, and indexers as members. </paragraph>
  <paragraph>The example <code_example><![CDATA[
interface IExample  
{  
   string this[int index] { get; set; }  
   event EventHandler E;  
   void F(int value);  
   string P { get; set; }  
}  
public delegate void EventHandler(object sender, EventArgs e);  
]]></code_example>shows an interface that contains an indexer, an event E, a method F, and a property P. </paragraph>
  <paragraph>Interfaces may employ multiple inheritance. In the example <code_example><![CDATA[
interface IControl  
{  
   void Paint();  
}  
interface ITextBox: IControl  
{  
   void SetText(string text);  
}  
interface IListBox: IControl  
{  
   void SetItems(string[] items);  
}  
interface IComboBox: ITextBox, IListBox {}  
]]></code_example>the interface IComboBox inherits from both ITextBox and IListBox. </paragraph>
  <paragraph>Classes and structs can implement multiple interfaces. In the example <code_example><![CDATA[
interface IDataBound  
{  
   void Bind(Binder b);  
}  
public class EditBox: Control, IControl, IDataBound  
{  
   public void Paint() {...}  
   public void Bind(Binder b) {...}  
}   
]]></code_example>the class EditBox derives from the class Control and implements both IControl and IDataBound. </paragraph>
  <paragraph>In the previous example, the Paint method from the IControl interface and the Bind method from IDataBound interface are implemented using public members on the EditBox class. C# provides an alternative way of implementing these methods that allows the implementing class to avoid having these members be public. Interface members can be implemented using a qualified name. For example, the EditBox class could instead be implemented by providing IControl.Paint and IDataBound.Bind methods. <code_example><![CDATA[
public class EditBox: IControl, IDataBound  
{  
   void IControl.Paint() {...}  
   void IDataBound.Bind(Binder b) {...}  
}  
]]></code_example></paragraph>
  <paragraph>Interface members implemented in this way are called explicit interface members because each member explicitly designates the interface member being implemented. Explicit interface members can only be called via the interface. For example, the EditBox's implementation of the Paint method can be called only by casting to the IControl interface. <code_example><![CDATA[
class Test  
{  
   static void Main() {  
      EditBox editbox = new EditBox();  
      editbox.Paint();  // error: no such method  
      IControl control = editbox;  
      control.Paint();  // calls EditBox's Paint implementation  
   }  
}  
]]></code_example></paragraph>
</clause>
