<?xml version="1.0" encoding="utf-8"?>
<masterdoc assembly="mscorlib">
    <class name="Object" namespace="System">
        <constructor name="Object()" argnames="" />
        <method name="Finalize()" argnames="" returntype="System.Void" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Equals(System.Object, System.Object)" argnames="objA, objB" returntype="System.Boolean" />
        <method name="ReferenceEquals(System.Object, System.Object)" argnames="objA, objB" returntype="System.Boolean" />
        <method name="GetType()" argnames="" returntype="System.Type" />
        <method name="MemberwiseClone()" argnames="" returntype="System.Object" />
    </class>
    <class name="Array" namespace="System">
        <property name="Length" propertytype="System.Int32" />
        <property name="Rank" propertytype="System.Int32" />
        <property name="SyncRoot" propertytype="System.Object" />
        <property name="IsReadOnly" propertytype="System.Boolean" />
        <property name="IsFixedSize" propertytype="System.Boolean" />
        <property name="IsSynchronized" propertytype="System.Boolean" />
        <method name="GetEnumerator()" argnames="" returntype="System.Collections.IEnumerator" />
        <method name="CopyTo(System.Array, System.Int32)" argnames="array, index" returntype="System.Void" />
        <method name="Clone()" argnames="" returntype="System.Object" />
        <method name="CreateInstance(System.Type, System.Int32)" argnames="elementType, length" returntype="System.Array" />
        <method name="CreateInstance(System.Type, System.Int32, System.Int32)" argnames="elementType, length1, length2" returntype="System.Array" />
        <method name="CreateInstance(System.Type, System.Int32, System.Int32, System.Int32)" argnames="elementType, length1, length2, length3" returntype="System.Array" />
        <method name="CreateInstance(System.Type, System.Int32[])" argnames="elementType, lengths" returntype="System.Array" />
        <method name="CreateInstance(System.Type, System.Int32[], System.Int32[])" argnames="elementType, lengths, lowerBounds" returntype="System.Array" />
        <method name="Copy(System.Array, System.Array, System.Int32)" argnames="sourceArray, destinationArray, length" returntype="System.Void" />
        <method name="Copy(System.Array, System.Int32, System.Array, System.Int32, System.Int32)" argnames="sourceArray, sourceIndex, destinationArray, destinationIndex, length" returntype="System.Void" />
        <method name="Clear(System.Array, System.Int32, System.Int32)" argnames="array, index, length" returntype="System.Void" />
        <method name="GetValue(System.Int32[])" argnames="indices" returntype="System.Object" />
        <method name="GetValue(System.Int32)" argnames="index" returntype="System.Object" />
        <method name="GetValue(System.Int32, System.Int32)" argnames="index1, index2" returntype="System.Object" />
        <method name="GetValue(System.Int32, System.Int32, System.Int32)" argnames="index1, index2, index3" returntype="System.Object" />
        <method name="SetValue(System.Object, System.Int32)" argnames="value, index" returntype="System.Void" />
        <method name="SetValue(System.Object, System.Int32, System.Int32)" argnames="value, index1, index2" returntype="System.Void" />
        <method name="SetValue(System.Object, System.Int32, System.Int32, System.Int32)" argnames="value, index1, index2, index3" returntype="System.Void" />
        <method name="SetValue(System.Object, System.Int32[])" argnames="value, indices" returntype="System.Void" />
        <method name="GetLength(System.Int32)" argnames="dimension" returntype="System.Int32" />
        <method name="GetUpperBound(System.Int32)" argnames="dimension" returntype="System.Int32" />
        <method name="GetLowerBound(System.Int32)" argnames="dimension" returntype="System.Int32" />
        <method name="BinarySearch(System.Array, System.Object)" argnames="array, value" returntype="System.Int32" />
        <method name="BinarySearch(System.Array, System.Int32, System.Int32, System.Object)" argnames="array, index, length, value" returntype="System.Int32" />
        <method name="BinarySearch(System.Array, System.Object, System.Collections.IComparer)" argnames="array, value, comparer" returntype="System.Int32" />
        <method name="BinarySearch(System.Array, System.Int32, System.Int32, System.Object, System.Collections.IComparer)" argnames="array, index, length, value, comparer" returntype="System.Int32" />
        <method name="IndexOf(System.Array, System.Object)" argnames="array, value" returntype="System.Int32" />
        <method name="IndexOf(System.Array, System.Object, System.Int32)" argnames="array, value, startIndex" returntype="System.Int32" />
        <method name="IndexOf(System.Array, System.Object, System.Int32, System.Int32)" argnames="array, value, startIndex, count" returntype="System.Int32" />
        <method name="LastIndexOf(System.Array, System.Object)" argnames="array, value" returntype="System.Int32" />
        <method name="LastIndexOf(System.Array, System.Object, System.Int32)" argnames="array, value, startIndex" returntype="System.Int32" />
        <method name="LastIndexOf(System.Array, System.Object, System.Int32, System.Int32)" argnames="array, value, startIndex, count" returntype="System.Int32" />
        <method name="Reverse(System.Array)" argnames="array" returntype="System.Void" />
        <method name="Reverse(System.Array, System.Int32, System.Int32)" argnames="array, index, length" returntype="System.Void" />
        <method name="Sort(System.Array)" argnames="array" returntype="System.Void" />
        <method name="Sort(System.Array, System.Array)" argnames="keys, items" returntype="System.Void" />
        <method name="Sort(System.Array, System.Int32, System.Int32)" argnames="array, index, length" returntype="System.Void" />
        <method name="Sort(System.Array, System.Array, System.Int32, System.Int32)" argnames="keys, items, index, length" returntype="System.Void" />
        <method name="Sort(System.Array, System.Collections.IComparer)" argnames="array, comparer" returntype="System.Void" />
        <method name="Sort(System.Array, System.Array, System.Collections.IComparer)" argnames="keys, items, comparer" returntype="System.Void" />
        <method name="Sort(System.Array, System.Int32, System.Int32, System.Collections.IComparer)" argnames="array, index, length, comparer" returntype="System.Void" />
        <method name="Sort(System.Array, System.Array, System.Int32, System.Int32, System.Collections.IComparer)" argnames="keys, items, index, length, comparer" returntype="System.Void" />
        <method name="Initialize()" argnames="" returntype="System.Void" />
    </class>
    <class name="String" namespace="System">
        <constructor name="String(System.Char*)" argnames="value" />
        <constructor name="String(System.Char*, System.Int32, System.Int32)" argnames="value, startIndex, length" />
        <constructor name="String(System.SByte*)" argnames="value" />
        <constructor name="String(System.SByte*, System.Int32, System.Int32)" argnames="value, startIndex, length" />
        <constructor name="String(System.SByte*, System.Int32, System.Int32, System.Text.Encoding)" argnames="value, startIndex, length, enc" />
        <constructor name="String(System.Char[], System.Int32, System.Int32)" argnames="value, startIndex, length" />
        <constructor name="String(System.Char[])" argnames="value" />
        <constructor name="String(System.Char, System.Int32)" argnames="c, count" />
        <field name="Empty" />
        <property name="Chars" propertytype="System.Char" />
        <property name="Length" propertytype="System.Int32" />
        <property name="ArrayLength" propertytype="System.Int32" />
        <property name="Capacity" propertytype="System.Int32" />
        <method name="ToString(System.IFormatProvider)" argnames="provider" returntype="System.String" />
        <method name="GetTypeCode()" argnames="" returntype="System.TypeCode" />
        <method name="Clone()" argnames="" returntype="System.Object" />
        <method name="CompareTo(System.Object)" argnames="value" returntype="System.Int32" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Join(System.String, System.String[])" argnames="separator, value" returntype="System.String" />
        <method name="Join(System.String, System.String[], System.Int32, System.Int32)" argnames="separator, value, startIndex, count" returntype="System.String" />
        <method name="Equals(System.String)" argnames="value" returntype="System.Boolean" />
        <method name="Equals(System.String, System.String)" argnames="a, b" returntype="System.Boolean" />
        <method name="CopyTo(System.Int32, System.Char[], System.Int32, System.Int32)" argnames="sourceIndex, destination, destinationIndex, count" returntype="System.Void" />
        <method name="ToCharArray()" argnames="" returntype="System.Char[]" />
        <method name="ToCharArray(System.Int32, System.Int32)" argnames="startIndex, length" returntype="System.Char[]" />
        <method name="Split(System.Char[])" argnames="separator" returntype="System.String[]" />
        <method name="Split(System.Char[], System.Int32)" argnames="separator, count" returntype="System.String[]" />
        <method name="Substring(System.Int32)" argnames="startIndex" returntype="System.String" />
        <method name="Substring(System.Int32, System.Int32)" argnames="startIndex, length" returntype="System.String" />
        <method name="Trim(System.Char[])" argnames="trimChars" returntype="System.String" />
        <method name="TrimStart(System.Char[])" argnames="trimChars" returntype="System.String" />
        <method name="TrimEnd(System.Char[])" argnames="trimChars" returntype="System.String" />
        <method name="Compare(System.String, System.String)" argnames="strA, strB" returntype="System.Int32" />
        <method name="Compare(System.String, System.String, System.Boolean)" argnames="strA, strB, ignoreCase" returntype="System.Int32" />
        <method name="Compare(System.String, System.String, System.Boolean, System.Globalization.CultureInfo)" argnames="strA, strB, ignoreCase, culture" returntype="System.Int32" />
        <method name="Compare(System.String, System.Int32, System.String, System.Int32, System.Int32)" argnames="strA, indexA, strB, indexB, length" returntype="System.Int32" />
        <method name="Compare(System.String, System.Int32, System.String, System.Int32, System.Int32, System.Boolean)" argnames="strA, indexA, strB, indexB, length, ignoreCase" returntype="System.Int32" />
        <method name="Compare(System.String, System.Int32, System.String, System.Int32, System.Int32, System.Boolean, System.Globalization.CultureInfo)" argnames="strA, indexA, strB, indexB, length, ignoreCase, culture" returntype="System.Int32" />
        <method name="CompareTo(System.String)" argnames="strB" returntype="System.Int32" />
        <method name="CompareOrdinal(System.String, System.String)" argnames="strA, strB" returntype="System.Int32" />
        <method name="CompareOrdinal(System.String, System.Int32, System.String, System.Int32, System.Int32)" argnames="strA, indexA, strB, indexB, length" returntype="System.Int32" />
        <method name="EndsWith(System.String)" argnames="value" returntype="System.Boolean" />
        <method name="IndexOf(System.Char)" argnames="value" returntype="System.Int32" />
        <method name="IndexOf(System.Char, System.Int32)" argnames="value, startIndex" returntype="System.Int32" />
        <method name="IndexOf(System.Char, System.Int32, System.Int32)" argnames="value, startIndex, count" returntype="System.Int32" />
        <method name="IndexOfAny(System.Char[])" argnames="anyOf" returntype="System.Int32" />
        <method name="IndexOfAny(System.Char[], System.Int32)" argnames="anyOf, startIndex" returntype="System.Int32" />
        <method name="IndexOfAny(System.Char[], System.Int32, System.Int32)" argnames="anyOf, startIndex, count" returntype="System.Int32" />
        <method name="IndexOf(System.String)" argnames="value" returntype="System.Int32" />
        <method name="IndexOf(System.String, System.Int32)" argnames="value, startIndex" returntype="System.Int32" />
        <method name="IndexOf(System.String, System.Int32, System.Int32)" argnames="value, startIndex, count" returntype="System.Int32" />
        <method name="LastIndexOf(System.Char)" argnames="value" returntype="System.Int32" />
        <method name="LastIndexOf(System.Char, System.Int32)" argnames="value, startIndex" returntype="System.Int32" />
        <method name="LastIndexOf(System.Char, System.Int32, System.Int32)" argnames="value, startIndex, count" returntype="System.Int32" />
        <method name="LastIndexOfAny(System.Char[])" argnames="anyOf" returntype="System.Int32" />
        <method name="LastIndexOfAny(System.Char[], System.Int32)" argnames="anyOf, startIndex" returntype="System.Int32" />
        <method name="LastIndexOfAny(System.Char[], System.Int32, System.Int32)" argnames="anyOf, startIndex, count" returntype="System.Int32" />
        <method name="LastIndexOf(System.String)" argnames="value" returntype="System.Int32" />
        <method name="LastIndexOf(System.String, System.Int32)" argnames="value, startIndex" returntype="System.Int32" />
        <method name="LastIndexOf(System.String, System.Int32, System.Int32)" argnames="value, startIndex, count" returntype="System.Int32" />
        <method name="PadLeft(System.Int32)" argnames="totalWidth" returntype="System.String" />
        <method name="PadLeft(System.Int32, System.Char)" argnames="totalWidth, paddingChar" returntype="System.String" />
        <method name="PadRight(System.Int32)" argnames="totalWidth" returntype="System.String" />
        <method name="PadRight(System.Int32, System.Char)" argnames="totalWidth, paddingChar" returntype="System.String" />
        <method name="StartsWith(System.String)" argnames="value" returntype="System.Boolean" />
        <method name="ToLower()" argnames="" returntype="System.String" />
        <method name="ToLower(System.Globalization.CultureInfo)" argnames="culture" returntype="System.String" />
        <method name="ToUpper()" argnames="" returntype="System.String" />
        <method name="ToUpper(System.Globalization.CultureInfo)" argnames="culture" returntype="System.String" />
        <method name="Trim()" argnames="" returntype="System.String" />
        <method name="Insert(System.Int32, System.String)" argnames="startIndex, value" returntype="System.String" />
        <method name="Replace(System.Char, System.Char)" argnames="oldChar, newChar" returntype="System.String" />
        <method name="Replace(System.String, System.String)" argnames="oldValue, newValue" returntype="System.String" />
        <method name="Remove(System.Int32, System.Int32)" argnames="startIndex, count" returntype="System.String" />
        <method name="Format(System.String, System.Object)" argnames="format, arg0" returntype="System.String" />
        <method name="Format(System.String, System.Object, System.Object)" argnames="format, arg0, arg1" returntype="System.String" />
        <method name="Format(System.String, System.Object, System.Object, System.Object)" argnames="format, arg0, arg1, arg2" returntype="System.String" />
        <method name="Format(System.String, System.Object[])" argnames="format, args" returntype="System.String" />
        <method name="Format(System.IFormatProvider, System.String, System.Object[])" argnames="provider, format, args" returntype="System.String" />
        <method name="Copy(System.String)" argnames="str" returntype="System.String" />
        <method name="Concat(System.Object)" argnames="arg0" returntype="System.String" />
        <method name="Concat(System.Object, System.Object)" argnames="arg0, arg1" returntype="System.String" />
        <method name="Concat(System.Object, System.Object, System.Object)" argnames="arg0, arg1, arg2" returntype="System.String" />
        <method name="Concat(System.Object, System.Object, System.Object, System.Object)" argnames="arg0, arg1, arg2, arg3" returntype="System.String" />
        <method name="Concat(System.Object[])" argnames="args" returntype="System.String" />
        <method name="Concat(System.String, System.String)" argnames="str0, str1" returntype="System.String" />
        <method name="Concat(System.String, System.String, System.String)" argnames="str0, str1, str2" returntype="System.String" />
        <method name="Concat(System.String, System.String, System.String, System.String)" argnames="str0, str1, str2, str3" returntype="System.String" />
        <method name="Concat(System.String[])" argnames="values" returntype="System.String" />
        <method name="Intern(System.String)" argnames="str" returntype="System.String" />
        <method name="IsInterned(System.String)" argnames="str" returntype="System.String" />
        <method name="GetEnumerator()" argnames="" returntype="System.CharEnumerator" />
        <operator name="op_Equality(System.String, System.String)" argnames="a, b" />
        <operator name="op_Inequality(System.String, System.String)" argnames="a, b" />
    </class>
    <class name="Exception" namespace="System">
        <constructor name="Exception()" argnames="" />
        <constructor name="Exception(System.String)" argnames="message" />
        <constructor name="Exception(System.String, System.Exception)" argnames="message, innerException" />
        <constructor name="Exception(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
        <property name="Message" propertytype="System.String" />
        <property name="InnerException" propertytype="System.Exception" />
        <property name="TargetSite" propertytype="System.Reflection.MethodBase" />
        <property name="StackTrace" propertytype="System.String" />
        <property name="HelpLink" propertytype="System.String" />
        <property name="Source" propertytype="System.String" />
        <property name="HResult" propertytype="System.Int32" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
        <method name="GetBaseException()" argnames="" returntype="System.Exception" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </class>
    <class name="ValueType" namespace="System">
        <constructor name="ValueType()" argnames="" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </class>
    <class name="SystemException" namespace="System">
        <constructor name="SystemException()" argnames="" />
        <constructor name="SystemException(System.String)" argnames="message" />
        <constructor name="SystemException(System.String, System.Exception)" argnames="message, innerException" />
        <constructor name="SystemException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="OutOfMemoryException" namespace="System">
        <constructor name="OutOfMemoryException()" argnames="" />
        <constructor name="OutOfMemoryException(System.String)" argnames="message" />
        <constructor name="OutOfMemoryException(System.String, System.Exception)" argnames="message, innerException" />
        <constructor name="OutOfMemoryException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="StackOverflowException" namespace="System">
        <constructor name="StackOverflowException()" argnames="" />
        <constructor name="StackOverflowException(System.String)" argnames="message" />
        <constructor name="StackOverflowException(System.String, System.Exception)" argnames="message, innerException" />
    </class>
    <class name="ExecutionEngineException" namespace="System">
        <constructor name="ExecutionEngineException()" argnames="" />
        <constructor name="ExecutionEngineException(System.String)" argnames="message" />
        <constructor name="ExecutionEngineException(System.String, System.Exception)" argnames="message, innerException" />
    </class>
    <class name="Delegate" namespace="System">
        <constructor name="Delegate(System.Object, System.String)" argnames="target, method" />
        <constructor name="Delegate(System.Type, System.String)" argnames="target, method" />
        <property name="Method" propertytype="System.Reflection.MethodInfo" />
        <property name="Target" propertytype="System.Object" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
        <method name="Clone()" argnames="" returntype="System.Object" />
        <method name="RemoveImpl(System.Delegate)" argnames="d" returntype="System.Delegate" />
        <method name="CombineImpl(System.Delegate)" argnames="d" returntype="System.Delegate" />
        <method name="GetMethodImpl()" argnames="" returntype="System.Reflection.MethodInfo" />
        <method name="GetInvocationList()" argnames="" returntype="System.Delegate[]" />
        <method name="DynamicInvokeImpl(System.Object[])" argnames="args" returntype="System.Object" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="DynamicInvoke(System.Object[])" argnames="args" returntype="System.Object" />
        <method name="Combine(System.Delegate, System.Delegate)" argnames="a, b" returntype="System.Delegate" />
        <method name="Combine(System.Delegate[])" argnames="delegates" returntype="System.Delegate" />
        <method name="Remove(System.Delegate, System.Delegate)" argnames="source, value" returntype="System.Delegate" />
        <method name="CreateDelegate(System.Type, System.Object, System.String)" argnames="type, target, method" returntype="System.Delegate" />
        <method name="CreateDelegate(System.Type, System.Object, System.String, System.Boolean)" argnames="type, target, method, ignoreCase" returntype="System.Delegate" />
        <method name="CreateDelegate(System.Type, System.Type, System.String)" argnames="type, target, method" returntype="System.Delegate" />
        <method name="CreateDelegate(System.Type, System.Reflection.MethodInfo)" argnames="type, method" returntype="System.Delegate" />
        <operator name="op_Equality(System.Delegate, System.Delegate)" argnames="d1, d2" />
        <operator name="op_Inequality(System.Delegate, System.Delegate)" argnames="d1, d2" />
    </class>
    <class name="MemberAccessException" namespace="System">
        <constructor name="MemberAccessException()" argnames="" />
        <constructor name="MemberAccessException(System.String)" argnames="message" />
        <constructor name="MemberAccessException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="MemberAccessException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="Activator" namespace="System">
        <method name="CreateInstance(System.Type, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)" argnames="type, bindingAttr, binder, args, culture" returntype="System.Object" />
        <method name="CreateInstance(System.Type, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo, System.Object[])" argnames="type, bindingAttr, binder, args, culture, activationAttributes" returntype="System.Object" />
        <method name="CreateInstance(System.Type, System.Object[])" argnames="type, args" returntype="System.Object" />
        <method name="CreateInstance(System.Type, System.Object[], System.Object[])" argnames="type, args, activationAttributes" returntype="System.Object" />
        <method name="CreateInstance(System.Type)" argnames="type" returntype="System.Object" />
        <method name="CreateInstance(System.String, System.String)" argnames="assemblyName, typeName" returntype="System.Runtime.Remoting.ObjectHandle" />
        <method name="CreateInstance(System.String, System.String, System.Object[])" argnames="assemblyName, typeName, activationAttributes" returntype="System.Runtime.Remoting.ObjectHandle" />
        <method name="CreateInstance(System.Type, System.Boolean)" argnames="type, nonPublic" returntype="System.Object" />
        <method name="CreateInstanceFrom(System.String, System.String)" argnames="assemblyFile, typeName" returntype="System.Runtime.Remoting.ObjectHandle" />
        <method name="CreateInstanceFrom(System.String, System.String, System.Object[])" argnames="assemblyFile, typeName, activationAttributes" returntype="System.Runtime.Remoting.ObjectHandle" />
        <method name="CreateInstance(System.String, System.String, System.Boolean, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo, System.Object[], System.Security.Policy.Evidence)" argnames="assemblyName, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityInfo" returntype="System.Runtime.Remoting.ObjectHandle" />
        <method name="CreateInstanceFrom(System.String, System.String, System.Boolean, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo, System.Object[], System.Security.Policy.Evidence)" argnames="assemblyFile, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityInfo" returntype="System.Runtime.Remoting.ObjectHandle" />
        <method name="CreateComInstanceFrom(System.String, System.String)" argnames="assemblyName, typeName" returntype="System.Runtime.Remoting.ObjectHandle" />
        <method name="GetObject(System.Type, System.String)" argnames="type, url" returntype="System.Object" />
        <method name="GetObject(System.Type, System.String, System.Object)" argnames="type, url, state" returntype="System.Object" />
    </class>
    <class name="ApplicationException" namespace="System">
        <constructor name="ApplicationException()" argnames="" />
        <constructor name="ApplicationException(System.String)" argnames="message" />
        <constructor name="ApplicationException(System.String, System.Exception)" argnames="message, innerException" />
        <constructor name="ApplicationException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="EventArgs" namespace="System">
        <constructor name="EventArgs()" argnames="" />
        <field name="Empty" />
    </class>
    <class name="ResolveEventArgs" namespace="System">
        <constructor name="ResolveEventArgs(System.String)" argnames="name" />
        <property name="Name" propertytype="System.String" />
    </class>
    <class name="AssemblyLoadEventArgs" namespace="System">
        <constructor name="AssemblyLoadEventArgs(System.Reflection.Assembly)" argnames="loadedAssembly" />
        <property name="LoadedAssembly" propertytype="System.Reflection.Assembly" />
    </class>
    <class name="MarshalByRefObject" namespace="System">
        <constructor name="MarshalByRefObject()" argnames="" />
        <method name="CreateObjRef(System.Type)" argnames="requestedType" returntype="System.Runtime.Remoting.ObjRef" />
        <method name="InitializeLifetimeService()" argnames="" returntype="System.Object" />
        <method name="GetLifetimeService()" argnames="" returntype="System.Object" />
    </class>
    <class name="AppDomain" namespace="System">
        <property name="CurrentDomain" propertytype="System.AppDomain" />
        <property name="Evidence" propertytype="System.Security.Policy.Evidence" />
        <property name="InternalEvidence" propertytype="System.Security.Policy.Evidence" />
        <property name="FriendlyName" propertytype="System.String" />
        <property name="BaseDirectory" propertytype="System.String" />
        <property name="RelativeSearchPath" propertytype="System.String" />
        <property name="ShadowCopyFiles" propertytype="System.Boolean" />
        <property name="DynamicDirectory" propertytype="System.String" />
        <property name="RemotingData" propertytype="System.Runtime.Remoting.DomainSpecificRemotingData" />
        <property name="FusionStore" propertytype="System.AppDomainSetup" />
        <property name="LocalStore" propertytype="System.Collections.Hashtable" />
        <property name="SetupInformation" propertytype="System.AppDomainSetup" />
        <method name="DoCallBack(System.CrossAppDomainDelegate)" argnames="callBackDelegate" returntype="System.Void" />
        <method name="SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)" argnames="policy" returntype="System.Void" />
        <method name="SetThreadPrincipal(System.Security.Principal.IPrincipal)" argnames="principal" returntype="System.Void" />
        <method name="SetAppDomainPolicy(System.Security.Policy.PolicyLevel)" argnames="domainPolicy" returntype="System.Void" />
        <method name="GetData(System.String)" argnames="name" returntype="System.Object" />
        <method name="SetData(System.String, System.Object)" argnames="name, data" returntype="System.Void" />
        <method name="SetCachePath(System.String)" argnames="path" returntype="System.Void" />
        <method name="ClearShadowCopyPath()" argnames="" returntype="System.Void" />
        <method name="SetShadowCopyPath(System.String)" argnames="path" returntype="System.Void" />
        <method name="ClearPrivatePath()" argnames="" returntype="System.Void" />
        <method name="AppendPrivatePath(System.String)" argnames="path" returntype="System.Void" />
        <method name="GetAssemblies()" argnames="" returntype="System.Reflection.Assembly[]" />
        <method name="ExecuteAssembly(System.String, System.Security.Policy.Evidence, System.String[])" argnames="assemblyFile, assemblySecurity, args" returntype="System.Int32" />
        <method name="ExecuteAssembly(System.String)" argnames="assemblyFile" returntype="System.Int32" />
        <method name="ExecuteAssembly(System.String, System.Security.Policy.Evidence)" argnames="assemblyFile, assemblySecurity" returntype="System.Int32" />
        <method name="Load(System.String, System.Security.Policy.Evidence)" argnames="assemblyString, assemblySecurity" returntype="System.Reflection.Assembly" />
        <method name="Load(System.Reflection.AssemblyName, System.Security.Policy.Evidence)" argnames="assemblyRef, assemblySecurity" returntype="System.Reflection.Assembly" />
        <method name="Load(System.Byte[], System.Byte[], System.Security.Policy.Evidence)" argnames="rawAssembly, rawSymbolStore, securityEvidence" returntype="System.Reflection.Assembly" />
        <method name="Load(System.Byte[], System.Byte[])" argnames="rawAssembly, rawSymbolStore" returntype="System.Reflection.Assembly" />
        <method name="Load(System.Byte[])" argnames="rawAssembly" returntype="System.Reflection.Assembly" />
        <method name="Load(System.String)" argnames="assemblyString" returntype="System.Reflection.Assembly" />
        <method name="Load(System.Reflection.AssemblyName)" argnames="assemblyRef" returntype="System.Reflection.Assembly" />
        <method name="CreateInstanceFrom(System.String, System.String, System.Boolean, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo, System.Object[], System.Security.Policy.Evidence)" argnames="assemblyFile, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityAttributes" returntype="System.Runtime.Remoting.ObjectHandle" />
        <method name="CreateInstance(System.String, System.String, System.Boolean, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo, System.Object[], System.Security.Policy.Evidence)" argnames="assemblyName, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityAttributes" returntype="System.Runtime.Remoting.ObjectHandle" />
        <method name="CreateInstanceFrom(System.String, System.String, System.Object[])" argnames="assemblyFile, typeName, activationAttributes" returntype="System.Runtime.Remoting.ObjectHandle" />
        <method name="CreateInstance(System.String, System.String, System.Object[])" argnames="assemblyName, typeName, activationAttributes" returntype="System.Runtime.Remoting.ObjectHandle" />
        <method name="CreateInstanceFrom(System.String, System.String)" argnames="assemblyFile, typeName" returntype="System.Runtime.Remoting.ObjectHandle" />
        <method name="CreateInstance(System.String, System.String)" argnames="assemblyName, typeName" returntype="System.Runtime.Remoting.ObjectHandle" />
        <method name="DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.String, System.Security.Policy.Evidence, System.Security.PermissionSet, System.Security.PermissionSet, System.Security.PermissionSet, System.Boolean)" argnames="name, access, dir, evidence, requiredPermissions, optionalPermissions, refusedPermissions, isSynchronized" returntype="System.Reflection.Emit.AssemblyBuilder" />
        <method name="DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.String, System.Security.Policy.Evidence, System.Security.PermissionSet, System.Security.PermissionSet, System.Security.PermissionSet)" argnames="name, access, dir, evidence, requiredPermissions, optionalPermissions, refusedPermissions" returntype="System.Reflection.Emit.AssemblyBuilder" />
        <method name="DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.Security.Policy.Evidence, System.Security.PermissionSet, System.Security.PermissionSet, System.Security.PermissionSet)" argnames="name, access, evidence, requiredPermissions, optionalPermissions, refusedPermissions" returntype="System.Reflection.Emit.AssemblyBuilder" />
        <method name="DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.String, System.Security.PermissionSet, System.Security.PermissionSet, System.Security.PermissionSet)" argnames="name, access, dir, requiredPermissions, optionalPermissions, refusedPermissions" returntype="System.Reflection.Emit.AssemblyBuilder" />
        <method name="DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.String, System.Security.Policy.Evidence)" argnames="name, access, dir, evidence" returntype="System.Reflection.Emit.AssemblyBuilder" />
        <method name="DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.Security.PermissionSet, System.Security.PermissionSet, System.Security.PermissionSet)" argnames="name, access, requiredPermissions, optionalPermissions, refusedPermissions" returntype="System.Reflection.Emit.AssemblyBuilder" />
        <method name="DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.Security.Policy.Evidence)" argnames="name, access, evidence" returntype="System.Reflection.Emit.AssemblyBuilder" />
        <method name="DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.String)" argnames="name, access, dir" returntype="System.Reflection.Emit.AssemblyBuilder" />
        <method name="DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess)" argnames="name, access" returntype="System.Reflection.Emit.AssemblyBuilder" />
        <method name="GetType()" argnames="" returntype="System.Type" />
        <method name="InitializeLifetimeService()" argnames="" returntype="System.Object" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="CreateComInstanceFrom(System.String, System.String)" argnames="assemblyName, typeName" returntype="System.Runtime.Remoting.ObjectHandle" />
        <method name="IsFinalizingForUnload()" argnames="" returntype="System.Boolean" />
        <method name="GetCurrentThreadId()" argnames="" returntype="System.Int32" />
        <method name="Unload(System.AppDomain)" argnames="domain" returntype="System.Void" />
        <method name="CreateDomain(System.String, System.Security.Policy.Evidence)" argnames="friendlyName, securityInfo" returntype="System.AppDomain" />
        <method name="CreateDomain(System.String, System.Security.Policy.Evidence, System.String, System.String, System.Boolean)" argnames="friendlyName, securityInfo, appBasePath, appRelativeSearchPath, shadowCopyFiles" returntype="System.AppDomain" />
        <method name="CreateDomain(System.String)" argnames="friendlyName" returntype="System.AppDomain" />
        <method name="CreateDomain(System.String, System.Security.Policy.Evidence, System.AppDomainSetup)" argnames="friendlyName, securityInfo, info" returntype="System.AppDomain" />
        <method name="SetShadowCopyFiles()" argnames="" returntype="System.Void" />
        <method name="SetDynamicBase(System.String)" argnames="path" returntype="System.Void" />
        <method name="CreateInstanceAndUnwrap(System.String, System.String)" argnames="assemblyName, typeName" returntype="System.Object" />
        <method name="CreateInstanceAndUnwrap(System.String, System.String, System.Object[])" argnames="assemblyName, typeName, activationAttributes" returntype="System.Object" />
        <method name="CreateInstanceAndUnwrap(System.String, System.String, System.Boolean, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo, System.Object[], System.Security.Policy.Evidence)" argnames="assemblyName, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityAttributes" returntype="System.Object" />
        <method name="CreateInstanceFromAndUnwrap(System.String, System.String)" argnames="assemblyName, typeName" returntype="System.Object" />
        <method name="CreateInstanceFromAndUnwrap(System.String, System.String, System.Object[])" argnames="assemblyName, typeName, activationAttributes" returntype="System.Object" />
        <method name="CreateInstanceFromAndUnwrap(System.String, System.String, System.Boolean, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo, System.Object[], System.Security.Policy.Evidence)" argnames="assemblyName, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityAttributes" returntype="System.Object" />
        <event name="DomainUnload" />
        <event name="AssemblyLoad" />
        <event name="ProcessExit" />
        <event name="TypeResolve" />
        <event name="ResourceResolve" />
        <event name="AssemblyResolve" />
        <event name="UnhandledException" />
    </class>
    <class name="Attribute" namespace="System">
        <constructor name="Attribute()" argnames="" />
        <property name="TypeId" propertytype="System.Object" />
        <method name="IsDefaultAttribute()" argnames="" returntype="System.Boolean" />
        <method name="Match(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="GetCustomAttributes(System.Reflection.MemberInfo, System.Type)" argnames="element, type" returntype="System.Attribute[]" />
        <method name="GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean)" argnames="element, type, inherit" returntype="System.Attribute[]" />
        <method name="GetCustomAttributes(System.Reflection.MemberInfo)" argnames="element" returntype="System.Attribute[]" />
        <method name="GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean)" argnames="element, inherit" returntype="System.Attribute[]" />
        <method name="GetCustomAttributes(System.Reflection.ParameterInfo, System.Type)" argnames="element, attributeType" returntype="System.Attribute[]" />
        <method name="GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean)" argnames="element, attributeType, inherit" returntype="System.Attribute[]" />
        <method name="GetCustomAttributes(System.Reflection.Module, System.Type)" argnames="element, attributeType" returntype="System.Attribute[]" />
        <method name="GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean)" argnames="element, attributeType, inherit" returntype="System.Attribute[]" />
        <method name="GetCustomAttributes(System.Reflection.Assembly, System.Type)" argnames="element, attributeType" returntype="System.Attribute[]" />
        <method name="GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean)" argnames="element, attributeType, inherit" returntype="System.Attribute[]" />
        <method name="GetCustomAttributes(System.Reflection.ParameterInfo)" argnames="element" returntype="System.Attribute[]" />
        <method name="GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean)" argnames="element, inherit" returntype="System.Attribute[]" />
        <method name="GetCustomAttributes(System.Reflection.Module)" argnames="element" returntype="System.Attribute[]" />
        <method name="GetCustomAttributes(System.Reflection.Module, System.Boolean)" argnames="element, inherit" returntype="System.Attribute[]" />
        <method name="GetCustomAttributes(System.Reflection.Assembly)" argnames="element" returntype="System.Attribute[]" />
        <method name="GetCustomAttributes(System.Reflection.Assembly, System.Boolean)" argnames="element, inherit" returntype="System.Attribute[]" />
        <method name="IsDefined(System.Reflection.MemberInfo, System.Type)" argnames="element, attributeType" returntype="System.Boolean" />
        <method name="IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean)" argnames="element, attributeType, inherit" returntype="System.Boolean" />
        <method name="IsDefined(System.Reflection.ParameterInfo, System.Type)" argnames="element, attributeType" returntype="System.Boolean" />
        <method name="IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean)" argnames="element, attributeType, inherit" returntype="System.Boolean" />
        <method name="IsDefined(System.Reflection.Module, System.Type)" argnames="element, attributeType" returntype="System.Boolean" />
        <method name="IsDefined(System.Reflection.Module, System.Type, System.Boolean)" argnames="element, attributeType, inherit" returntype="System.Boolean" />
        <method name="IsDefined(System.Reflection.Assembly, System.Type)" argnames="element, attributeType" returntype="System.Boolean" />
        <method name="IsDefined(System.Reflection.Assembly, System.Type, System.Boolean)" argnames="element, attributeType, inherit" returntype="System.Boolean" />
        <method name="GetCustomAttribute(System.Reflection.MemberInfo, System.Type)" argnames="element, attributeType" returntype="System.Attribute" />
        <method name="GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean)" argnames="element, attributeType, inherit" returntype="System.Attribute" />
        <method name="GetCustomAttribute(System.Reflection.ParameterInfo, System.Type)" argnames="element, attributeType" returntype="System.Attribute" />
        <method name="GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean)" argnames="element, attributeType, inherit" returntype="System.Attribute" />
        <method name="GetCustomAttribute(System.Reflection.Module, System.Type)" argnames="element, attributeType" returntype="System.Attribute" />
        <method name="GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean)" argnames="element, attributeType, inherit" returntype="System.Attribute" />
        <method name="GetCustomAttribute(System.Reflection.Assembly, System.Type)" argnames="element, attributeType" returntype="System.Attribute" />
        <method name="GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean)" argnames="element, attributeType, inherit" returntype="System.Attribute" />
    </class>
    <class name="LoaderOptimizationAttribute" namespace="System">
        <constructor name="LoaderOptimizationAttribute(System.Byte)" argnames="value" />
        <constructor name="LoaderOptimizationAttribute(System.LoaderOptimization)" argnames="value" />
        <property name="Value" propertytype="System.LoaderOptimization" />
    </class>
    <class name="AppDomainUnloadedException" namespace="System">
        <constructor name="AppDomainUnloadedException()" argnames="" />
        <constructor name="AppDomainUnloadedException(System.String)" argnames="message" />
        <constructor name="AppDomainUnloadedException(System.String, System.Exception)" argnames="message, innerException" />
        <constructor name="AppDomainUnloadedException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="ArgumentException" namespace="System">
        <constructor name="ArgumentException()" argnames="" />
        <constructor name="ArgumentException(System.String)" argnames="message" />
        <constructor name="ArgumentException(System.String, System.Exception)" argnames="message, innerException" />
        <constructor name="ArgumentException(System.String, System.String, System.Exception)" argnames="message, paramName, innerException" />
        <constructor name="ArgumentException(System.String, System.String)" argnames="message, paramName" />
        <constructor name="ArgumentException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
        <property name="Message" propertytype="System.String" />
        <property name="ParamName" propertytype="System.String" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
    </class>
    <class name="ArgumentNullException" namespace="System">
        <constructor name="ArgumentNullException()" argnames="" />
        <constructor name="ArgumentNullException(System.String)" argnames="paramName" />
        <constructor name="ArgumentNullException(System.String, System.String)" argnames="paramName, message" />
        <constructor name="ArgumentNullException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
        <property name="NullMessage" propertytype="System.String" />
    </class>
    <class name="ArgumentOutOfRangeException" namespace="System">
        <constructor name="ArgumentOutOfRangeException()" argnames="" />
        <constructor name="ArgumentOutOfRangeException(System.String)" argnames="paramName" />
        <constructor name="ArgumentOutOfRangeException(System.String, System.String)" argnames="paramName, message" />
        <constructor name="ArgumentOutOfRangeException(System.String, System.Object, System.String)" argnames="paramName, actualValue, message" />
        <constructor name="ArgumentOutOfRangeException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
        <property name="RangeMessage" propertytype="System.String" />
        <property name="Message" propertytype="System.String" />
        <property name="ActualValue" propertytype="System.Object" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
    </class>
    <class name="ArithmeticException" namespace="System">
        <constructor name="ArithmeticException()" argnames="" />
        <constructor name="ArithmeticException(System.String)" argnames="message" />
        <constructor name="ArithmeticException(System.String, System.Exception)" argnames="message, innerException" />
        <constructor name="ArithmeticException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="ArrayTypeMismatchException" namespace="System">
        <constructor name="ArrayTypeMismatchException()" argnames="" />
        <constructor name="ArrayTypeMismatchException(System.String)" argnames="message" />
        <constructor name="ArrayTypeMismatchException(System.String, System.Exception)" argnames="message, innerException" />
        <constructor name="ArrayTypeMismatchException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="AttributeUsageAttribute" namespace="System">
        <constructor name="AttributeUsageAttribute(System.AttributeTargets)" argnames="validOn" />
        <property name="ValidOn" propertytype="System.AttributeTargets" />
        <property name="AllowMultiple" propertytype="System.Boolean" />
        <property name="Inherited" propertytype="System.Boolean" />
    </class>
    <class name="BadImageFormatException" namespace="System">
        <constructor name="BadImageFormatException()" argnames="" />
        <constructor name="BadImageFormatException(System.String)" argnames="message" />
        <constructor name="BadImageFormatException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="BadImageFormatException(System.String, System.String)" argnames="message, fileName" />
        <constructor name="BadImageFormatException(System.String, System.String, System.Exception)" argnames="message, fileName, inner" />
        <constructor name="BadImageFormatException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
        <property name="Message" propertytype="System.String" />
        <property name="FileName" propertytype="System.String" />
        <property name="FusionLog" propertytype="System.String" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </class>
    <class name="BitConverter" namespace="System">
        <field name="IsLittleEndian" />
        <method name="GetBytes(System.Boolean)" argnames="value" returntype="System.Byte[]" />
        <method name="GetBytes(System.Char)" argnames="value" returntype="System.Byte[]" />
        <method name="GetBytes(System.Int16)" argnames="value" returntype="System.Byte[]" />
        <method name="GetBytes(System.Int32)" argnames="value" returntype="System.Byte[]" />
        <method name="GetBytes(System.Int64)" argnames="value" returntype="System.Byte[]" />
        <method name="GetBytes(System.UInt16)" argnames="value" returntype="System.Byte[]" />
        <method name="GetBytes(System.UInt32)" argnames="value" returntype="System.Byte[]" />
        <method name="GetBytes(System.UInt64)" argnames="value" returntype="System.Byte[]" />
        <method name="GetBytes(System.Single)" argnames="value" returntype="System.Byte[]" />
        <method name="GetBytes(System.Double)" argnames="value" returntype="System.Byte[]" />
        <method name="ToChar(System.Byte[], System.Int32)" argnames="value, startIndex" returntype="System.Char" />
        <method name="ToInt16(System.Byte[], System.Int32)" argnames="value, startIndex" returntype="System.Int16" />
        <method name="ToInt32(System.Byte[], System.Int32)" argnames="value, startIndex" returntype="System.Int32" />
        <method name="ToInt64(System.Byte[], System.Int32)" argnames="value, startIndex" returntype="System.Int64" />
        <method name="ToUInt16(System.Byte[], System.Int32)" argnames="value, startIndex" returntype="System.UInt16" />
        <method name="ToUInt32(System.Byte[], System.Int32)" argnames="value, startIndex" returntype="System.UInt32" />
        <method name="ToUInt64(System.Byte[], System.Int32)" argnames="value, startIndex" returntype="System.UInt64" />
        <method name="ToSingle(System.Byte[], System.Int32)" argnames="value, startIndex" returntype="System.Single" />
        <method name="ToDouble(System.Byte[], System.Int32)" argnames="value, startIndex" returntype="System.Double" />
        <method name="ToString(System.Byte[], System.Int32, System.Int32)" argnames="value, startIndex, length" returntype="System.String" />
        <method name="ToString(System.Byte[])" argnames="value" returntype="System.String" />
        <method name="ToString(System.Byte[], System.Int32)" argnames="value, startIndex" returntype="System.String" />
        <method name="ToBoolean(System.Byte[], System.Int32)" argnames="value, startIndex" returntype="System.Boolean" />
        <method name="DoubleToInt64Bits(System.Double)" argnames="value" returntype="System.Int64" />
        <method name="Int64BitsToDouble(System.Int64)" argnames="value" returntype="System.Double" />
    </class>
    <class name="Buffer" namespace="System">
        <method name="BlockCopy(System.Array, System.Int32, System.Array, System.Int32, System.Int32)" argnames="src, srcOffset, dst, dstOffset, count" returntype="System.Void" />
        <method name="GetByte(System.Array, System.Int32)" argnames="array, index" returntype="System.Byte" />
        <method name="SetByte(System.Array, System.Int32, System.Byte)" argnames="array, index, value" returntype="System.Void" />
        <method name="ByteLength(System.Array)" argnames="array" returntype="System.Int32" />
    </class>
    <class name="CannotUnloadAppDomainException" namespace="System">
        <constructor name="CannotUnloadAppDomainException()" argnames="" />
        <constructor name="CannotUnloadAppDomainException(System.String)" argnames="message" />
        <constructor name="CannotUnloadAppDomainException(System.String, System.Exception)" argnames="message, innerException" />
        <constructor name="CannotUnloadAppDomainException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="CharEnumerator" namespace="System">
        <property name="Current" propertytype="System.Char" />
        <method name="Clone()" argnames="" returntype="System.Object" />
        <method name="Reset()" argnames="" returntype="System.Void" />
        <method name="MoveNext()" argnames="" returntype="System.Boolean" />
    </class>
    <class name="CLSCompliantAttribute" namespace="System">
        <constructor name="CLSCompliantAttribute(System.Boolean)" argnames="isCompliant" />
        <property name="IsCompliant" propertytype="System.Boolean" />
    </class>
    <class name="TypeUnloadedException" namespace="System">
        <constructor name="TypeUnloadedException()" argnames="" />
        <constructor name="TypeUnloadedException(System.String)" argnames="message" />
        <constructor name="TypeUnloadedException(System.String, System.Exception)" argnames="message, innerException" />
        <constructor name="TypeUnloadedException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="__ComObject" namespace="System" />
    <class name="Console" namespace="System">
        <property name="Error" propertytype="System.IO.TextWriter" />
        <property name="In" propertytype="System.IO.TextReader" />
        <property name="Out" propertytype="System.IO.TextWriter" />
        <method name="OpenStandardError()" argnames="" returntype="System.IO.Stream" />
        <method name="OpenStandardError(System.Int32)" argnames="bufferSize" returntype="System.IO.Stream" />
        <method name="OpenStandardInput()" argnames="" returntype="System.IO.Stream" />
        <method name="OpenStandardInput(System.Int32)" argnames="bufferSize" returntype="System.IO.Stream" />
        <method name="OpenStandardOutput()" argnames="" returntype="System.IO.Stream" />
        <method name="OpenStandardOutput(System.Int32)" argnames="bufferSize" returntype="System.IO.Stream" />
        <method name="SetIn(System.IO.TextReader)" argnames="newIn" returntype="System.Void" />
        <method name="SetOut(System.IO.TextWriter)" argnames="newOut" returntype="System.Void" />
        <method name="SetError(System.IO.TextWriter)" argnames="newError" returntype="System.Void" />
        <method name="Read()" argnames="" returntype="System.Int32" />
        <method name="ReadLine()" argnames="" returntype="System.String" />
        <method name="WriteLine()" argnames="" returntype="System.Void" />
        <method name="WriteLine(System.Boolean)" argnames="value" returntype="System.Void" />
        <method name="WriteLine(System.Char)" argnames="value" returntype="System.Void" />
        <method name="WriteLine(System.Char[])" argnames="buffer" returntype="System.Void" />
        <method name="WriteLine(System.Char[], System.Int32, System.Int32)" argnames="buffer, index, count" returntype="System.Void" />
        <method name="WriteLine(System.Decimal)" argnames="value" returntype="System.Void" />
        <method name="WriteLine(System.Double)" argnames="value" returntype="System.Void" />
        <method name="WriteLine(System.Single)" argnames="value" returntype="System.Void" />
        <method name="WriteLine(System.Int32)" argnames="value" returntype="System.Void" />
        <method name="WriteLine(System.UInt32)" argnames="value" returntype="System.Void" />
        <method name="WriteLine(System.Int64)" argnames="value" returntype="System.Void" />
        <method name="WriteLine(System.UInt64)" argnames="value" returntype="System.Void" />
        <method name="WriteLine(System.Object)" argnames="value" returntype="System.Void" />
        <method name="WriteLine(System.String)" argnames="value" returntype="System.Void" />
        <method name="WriteLine(System.String, System.Object)" argnames="format, arg0" returntype="System.Void" />
        <method name="WriteLine(System.String, System.Object, System.Object)" argnames="format, arg0, arg1" returntype="System.Void" />
        <method name="WriteLine(System.String, System.Object, System.Object, System.Object)" argnames="format, arg0, arg1, arg2" returntype="System.Void" />
        <method name="WriteLine(System.String, System.Object, System.Object, System.Object, System.Object)" argnames="format, arg0, arg1, arg2, arg3" returntype="System.Void" />
        <method name="WriteLine(System.String, System.Object[])" argnames="format, arg" returntype="System.Void" />
        <method name="Write(System.String, System.Object)" argnames="format, arg0" returntype="System.Void" />
        <method name="Write(System.String, System.Object, System.Object)" argnames="format, arg0, arg1" returntype="System.Void" />
        <method name="Write(System.String, System.Object, System.Object, System.Object)" argnames="format, arg0, arg1, arg2" returntype="System.Void" />
        <method name="Write(System.String, System.Object, System.Object, System.Object, System.Object)" argnames="format, arg0, arg1, arg2, arg3" returntype="System.Void" />
        <method name="Write(System.String, System.Object[])" argnames="format, arg" returntype="System.Void" />
        <method name="Write(System.Boolean)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Char)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Char[])" argnames="buffer" returntype="System.Void" />
        <method name="Write(System.Char[], System.Int32, System.Int32)" argnames="buffer, index, count" returntype="System.Void" />
        <method name="Write(System.Double)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Decimal)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Single)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Int32)" argnames="value" returntype="System.Void" />
        <method name="Write(System.UInt32)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Int64)" argnames="value" returntype="System.Void" />
        <method name="Write(System.UInt64)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Object)" argnames="value" returntype="System.Void" />
        <method name="Write(System.String)" argnames="value" returntype="System.Void" />
    </class>
    <class name="ContextMarshalException" namespace="System">
        <constructor name="ContextMarshalException()" argnames="" />
        <constructor name="ContextMarshalException(System.String)" argnames="message" />
        <constructor name="ContextMarshalException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="ContextMarshalException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="Convert" namespace="System">
        <field name="DBNull" />
        <method name="GetTypeCode(System.Object)" argnames="value" returntype="System.TypeCode" />
        <method name="IsDBNull(System.Object)" argnames="value" returntype="System.Boolean" />
        <method name="ChangeType(System.Object, System.TypeCode)" argnames="value, typeCode" returntype="System.Object" />
        <method name="ChangeType(System.Object, System.TypeCode, System.IFormatProvider)" argnames="value, typeCode, provider" returntype="System.Object" />
        <method name="ChangeType(System.Object, System.Type)" argnames="value, conversionType" returntype="System.Object" />
        <method name="ChangeType(System.Object, System.Type, System.IFormatProvider)" argnames="value, conversionType, provider" returntype="System.Object" />
        <method name="ToBoolean(System.Object)" argnames="value" returntype="System.Boolean" />
        <method name="ToBoolean(System.Object, System.IFormatProvider)" argnames="value, provider" returntype="System.Boolean" />
        <method name="ToBoolean(System.Boolean)" argnames="value" returntype="System.Boolean" />
        <method name="ToBoolean(System.SByte)" argnames="value" returntype="System.Boolean" />
        <method name="ToBoolean(System.Char)" argnames="value" returntype="System.Boolean" />
        <method name="ToBoolean(System.Byte)" argnames="value" returntype="System.Boolean" />
        <method name="ToBoolean(System.Int16)" argnames="value" returntype="System.Boolean" />
        <method name="ToBoolean(System.UInt16)" argnames="value" returntype="System.Boolean" />
        <method name="ToBoolean(System.Int32)" argnames="value" returntype="System.Boolean" />
        <method name="ToBoolean(System.UInt32)" argnames="value" returntype="System.Boolean" />
        <method name="ToBoolean(System.Int64)" argnames="value" returntype="System.Boolean" />
        <method name="ToBoolean(System.UInt64)" argnames="value" returntype="System.Boolean" />
        <method name="ToBoolean(System.String)" argnames="value" returntype="System.Boolean" />
        <method name="ToBoolean(System.String, System.IFormatProvider)" argnames="value, provider" returntype="System.Boolean" />
        <method name="ToBoolean(System.Single)" argnames="value" returntype="System.Boolean" />
        <method name="ToBoolean(System.Double)" argnames="value" returntype="System.Boolean" />
        <method name="ToBoolean(System.Decimal)" argnames="value" returntype="System.Boolean" />
        <method name="ToBoolean(System.DateTime)" argnames="value" returntype="System.Boolean" />
        <method name="ToChar(System.Object)" argnames="value" returntype="System.Char" />
        <method name="ToChar(System.Object, System.IFormatProvider)" argnames="value, provider" returntype="System.Char" />
        <method name="ToChar(System.Boolean)" argnames="value" returntype="System.Char" />
        <method name="ToChar(System.Char)" argnames="value" returntype="System.Char" />
        <method name="ToChar(System.SByte)" argnames="value" returntype="System.Char" />
        <method name="ToChar(System.Byte)" argnames="value" returntype="System.Char" />
        <method name="ToChar(System.Int16)" argnames="value" returntype="System.Char" />
        <method name="ToChar(System.UInt16)" argnames="value" returntype="System.Char" />
        <method name="ToChar(System.Int32)" argnames="value" returntype="System.Char" />
        <method name="ToChar(System.UInt32)" argnames="value" returntype="System.Char" />
        <method name="ToChar(System.Int64)" argnames="value" returntype="System.Char" />
        <method name="ToChar(System.UInt64)" argnames="value" returntype="System.Char" />
        <method name="ToChar(System.String)" argnames="value" returntype="System.Char" />
        <method name="ToChar(System.String, System.IFormatProvider)" argnames="value, provider" returntype="System.Char" />
        <method name="ToChar(System.Single)" argnames="value" returntype="System.Char" />
        <method name="ToChar(System.Double)" argnames="value" returntype="System.Char" />
        <method name="ToChar(System.Decimal)" argnames="value" returntype="System.Char" />
        <method name="ToChar(System.DateTime)" argnames="value" returntype="System.Char" />
        <method name="ToSByte(System.Object)" argnames="value" returntype="System.SByte" />
        <method name="ToSByte(System.Object, System.IFormatProvider)" argnames="value, provider" returntype="System.SByte" />
        <method name="ToSByte(System.Boolean)" argnames="value" returntype="System.SByte" />
        <method name="ToSByte(System.SByte)" argnames="value" returntype="System.SByte" />
        <method name="ToSByte(System.Char)" argnames="value" returntype="System.SByte" />
        <method name="ToSByte(System.Byte)" argnames="value" returntype="System.SByte" />
        <method name="ToSByte(System.Int16)" argnames="value" returntype="System.SByte" />
        <method name="ToSByte(System.UInt16)" argnames="value" returntype="System.SByte" />
        <method name="ToSByte(System.Int32)" argnames="value" returntype="System.SByte" />
        <method name="ToSByte(System.UInt32)" argnames="value" returntype="System.SByte" />
        <method name="ToSByte(System.Int64)" argnames="value" returntype="System.SByte" />
        <method name="ToSByte(System.UInt64)" argnames="value" returntype="System.SByte" />
        <method name="ToSByte(System.Single)" argnames="value" returntype="System.SByte" />
        <method name="ToSByte(System.Double)" argnames="value" returntype="System.SByte" />
        <method name="ToSByte(System.Decimal)" argnames="value" returntype="System.SByte" />
        <method name="ToSByte(System.String)" argnames="value" returntype="System.SByte" />
        <method name="ToSByte(System.String, System.IFormatProvider)" argnames="value, provider" returntype="System.SByte" />
        <method name="ToSByte(System.DateTime)" argnames="value" returntype="System.SByte" />
        <method name="ToByte(System.Object)" argnames="value" returntype="System.Byte" />
        <method name="ToByte(System.Object, System.IFormatProvider)" argnames="value, provider" returntype="System.Byte" />
        <method name="ToByte(System.Boolean)" argnames="value" returntype="System.Byte" />
        <method name="ToByte(System.Byte)" argnames="value" returntype="System.Byte" />
        <method name="ToByte(System.Char)" argnames="value" returntype="System.Byte" />
        <method name="ToByte(System.SByte)" argnames="value" returntype="System.Byte" />
        <method name="ToByte(System.Int16)" argnames="value" returntype="System.Byte" />
        <method name="ToByte(System.UInt16)" argnames="value" returntype="System.Byte" />
        <method name="ToByte(System.Int32)" argnames="value" returntype="System.Byte" />
        <method name="ToByte(System.UInt32)" argnames="value" returntype="System.Byte" />
        <method name="ToByte(System.Int64)" argnames="value" returntype="System.Byte" />
        <method name="ToByte(System.UInt64)" argnames="value" returntype="System.Byte" />
        <method name="ToByte(System.Single)" argnames="value" returntype="System.Byte" />
        <method name="ToByte(System.Double)" argnames="value" returntype="System.Byte" />
        <method name="ToByte(System.Decimal)" argnames="value" returntype="System.Byte" />
        <method name="ToByte(System.String)" argnames="value" returntype="System.Byte" />
        <method name="ToByte(System.String, System.IFormatProvider)" argnames="value, provider" returntype="System.Byte" />
        <method name="ToByte(System.DateTime)" argnames="value" returntype="System.Byte" />
        <method name="ToInt16(System.Object)" argnames="value" returntype="System.Int16" />
        <method name="ToInt16(System.Object, System.IFormatProvider)" argnames="value, provider" returntype="System.Int16" />
        <method name="ToInt16(System.Boolean)" argnames="value" returntype="System.Int16" />
        <method name="ToInt16(System.Char)" argnames="value" returntype="System.Int16" />
        <method name="ToInt16(System.SByte)" argnames="value" returntype="System.Int16" />
        <method name="ToInt16(System.Byte)" argnames="value" returntype="System.Int16" />
        <method name="ToInt16(System.UInt16)" argnames="value" returntype="System.Int16" />
        <method name="ToInt16(System.Int32)" argnames="value" returntype="System.Int16" />
        <method name="ToInt16(System.UInt32)" argnames="value" returntype="System.Int16" />
        <method name="ToInt16(System.Int16)" argnames="value" returntype="System.Int16" />
        <method name="ToInt16(System.Int64)" argnames="value" returntype="System.Int16" />
        <method name="ToInt16(System.UInt64)" argnames="value" returntype="System.Int16" />
        <method name="ToInt16(System.Single)" argnames="value" returntype="System.Int16" />
        <method name="ToInt16(System.Double)" argnames="value" returntype="System.Int16" />
        <method name="ToInt16(System.Decimal)" argnames="value" returntype="System.Int16" />
        <method name="ToInt16(System.String)" argnames="value" returntype="System.Int16" />
        <method name="ToInt16(System.String, System.IFormatProvider)" argnames="value, provider" returntype="System.Int16" />
        <method name="ToInt16(System.DateTime)" argnames="value" returntype="System.Int16" />
        <method name="ToUInt16(System.Object)" argnames="value" returntype="System.UInt16" />
        <method name="ToUInt16(System.Object, System.IFormatProvider)" argnames="value, provider" returntype="System.UInt16" />
        <method name="ToUInt16(System.Boolean)" argnames="value" returntype="System.UInt16" />
        <method name="ToUInt16(System.Char)" argnames="value" returntype="System.UInt16" />
        <method name="ToUInt16(System.SByte)" argnames="value" returntype="System.UInt16" />
        <method name="ToUInt16(System.Byte)" argnames="value" returntype="System.UInt16" />
        <method name="ToUInt16(System.Int16)" argnames="value" returntype="System.UInt16" />
        <method name="ToUInt16(System.Int32)" argnames="value" returntype="System.UInt16" />
        <method name="ToUInt16(System.UInt16)" argnames="value" returntype="System.UInt16" />
        <method name="ToUInt16(System.UInt32)" argnames="value" returntype="System.UInt16" />
        <method name="ToUInt16(System.Int64)" argnames="value" returntype="System.UInt16" />
        <method name="ToUInt16(System.UInt64)" argnames="value" returntype="System.UInt16" />
        <method name="ToUInt16(System.Single)" argnames="value" returntype="System.UInt16" />
        <method name="ToUInt16(System.Double)" argnames="value" returntype="System.UInt16" />
        <method name="ToUInt16(System.Decimal)" argnames="value" returntype="System.UInt16" />
        <method name="ToUInt16(System.String)" argnames="value" returntype="System.UInt16" />
        <method name="ToUInt16(System.String, System.IFormatProvider)" argnames="value, provider" returntype="System.UInt16" />
        <method name="ToUInt16(System.DateTime)" argnames="value" returntype="System.UInt16" />
        <method name="ToInt32(System.Object)" argnames="value" returntype="System.Int32" />
        <method name="ToInt32(System.Object, System.IFormatProvider)" argnames="value, provider" returntype="System.Int32" />
        <method name="ToInt32(System.Boolean)" argnames="value" returntype="System.Int32" />
        <method name="ToInt32(System.Char)" argnames="value" returntype="System.Int32" />
        <method name="ToInt32(System.SByte)" argnames="value" returntype="System.Int32" />
        <method name="ToInt32(System.Byte)" argnames="value" returntype="System.Int32" />
        <method name="ToInt32(System.Int16)" argnames="value" returntype="System.Int32" />
        <method name="ToInt32(System.UInt16)" argnames="value" returntype="System.Int32" />
        <method name="ToInt32(System.UInt32)" argnames="value" returntype="System.Int32" />
        <method name="ToInt32(System.Int32)" argnames="value" returntype="System.Int32" />
        <method name="ToInt32(System.Int64)" argnames="value" returntype="System.Int32" />
        <method name="ToInt32(System.UInt64)" argnames="value" returntype="System.Int32" />
        <method name="ToInt32(System.Single)" argnames="value" returntype="System.Int32" />
        <method name="ToInt32(System.Double)" argnames="value" returntype="System.Int32" />
        <method name="ToInt32(System.Decimal)" argnames="value" returntype="System.Int32" />
        <method name="ToInt32(System.String)" argnames="value" returntype="System.Int32" />
        <method name="ToInt32(System.String, System.IFormatProvider)" argnames="value, provider" returntype="System.Int32" />
        <method name="ToInt32(System.DateTime)" argnames="value" returntype="System.Int32" />
        <method name="ToUInt32(System.Object)" argnames="value" returntype="System.UInt32" />
        <method name="ToUInt32(System.Object, System.IFormatProvider)" argnames="value, provider" returntype="System.UInt32" />
        <method name="ToUInt32(System.Boolean)" argnames="value" returntype="System.UInt32" />
        <method name="ToUInt32(System.Char)" argnames="value" returntype="System.UInt32" />
        <method name="ToUInt32(System.SByte)" argnames="value" returntype="System.UInt32" />
        <method name="ToUInt32(System.Byte)" argnames="value" returntype="System.UInt32" />
        <method name="ToUInt32(System.Int16)" argnames="value" returntype="System.UInt32" />
        <method name="ToUInt32(System.UInt16)" argnames="value" returntype="System.UInt32" />
        <method name="ToUInt32(System.Int32)" argnames="value" returntype="System.UInt32" />
        <method name="ToUInt32(System.UInt32)" argnames="value" returntype="System.UInt32" />
        <method name="ToUInt32(System.Int64)" argnames="value" returntype="System.UInt32" />
        <method name="ToUInt32(System.UInt64)" argnames="value" returntype="System.UInt32" />
        <method name="ToUInt32(System.Single)" argnames="value" returntype="System.UInt32" />
        <method name="ToUInt32(System.Double)" argnames="value" returntype="System.UInt32" />
        <method name="ToUInt32(System.Decimal)" argnames="value" returntype="System.UInt32" />
        <method name="ToUInt32(System.String)" argnames="value" returntype="System.UInt32" />
        <method name="ToUInt32(System.String, System.IFormatProvider)" argnames="value, provider" returntype="System.UInt32" />
        <method name="ToUInt32(System.DateTime)" argnames="value" returntype="System.UInt32" />
        <method name="ToInt64(System.Object)" argnames="value" returntype="System.Int64" />
        <method name="ToInt64(System.Object, System.IFormatProvider)" argnames="value, provider" returntype="System.Int64" />
        <method name="ToInt64(System.Boolean)" argnames="value" returntype="System.Int64" />
        <method name="ToInt64(System.Char)" argnames="value" returntype="System.Int64" />
        <method name="ToInt64(System.SByte)" argnames="value" returntype="System.Int64" />
        <method name="ToInt64(System.Byte)" argnames="value" returntype="System.Int64" />
        <method name="ToInt64(System.Int16)" argnames="value" returntype="System.Int64" />
        <method name="ToInt64(System.UInt16)" argnames="value" returntype="System.Int64" />
        <method name="ToInt64(System.Int32)" argnames="value" returntype="System.Int64" />
        <method name="ToInt64(System.UInt32)" argnames="value" returntype="System.Int64" />
        <method name="ToInt64(System.UInt64)" argnames="value" returntype="System.Int64" />
        <method name="ToInt64(System.Int64)" argnames="value" returntype="System.Int64" />
        <method name="ToInt64(System.Single)" argnames="value" returntype="System.Int64" />
        <method name="ToInt64(System.Double)" argnames="value" returntype="System.Int64" />
        <method name="ToInt64(System.Decimal)" argnames="value" returntype="System.Int64" />
        <method name="ToInt64(System.String)" argnames="value" returntype="System.Int64" />
        <method name="ToInt64(System.String, System.IFormatProvider)" argnames="value, provider" returntype="System.Int64" />
        <method name="ToInt64(System.DateTime)" argnames="value" returntype="System.Int64" />
        <method name="ToUInt64(System.Object)" argnames="value" returntype="System.UInt64" />
        <method name="ToUInt64(System.Object, System.IFormatProvider)" argnames="value, provider" returntype="System.UInt64" />
        <method name="ToUInt64(System.Boolean)" argnames="value" returntype="System.UInt64" />
        <method name="ToUInt64(System.Char)" argnames="value" returntype="System.UInt64" />
        <method name="ToUInt64(System.SByte)" argnames="value" returntype="System.UInt64" />
        <method name="ToUInt64(System.Byte)" argnames="value" returntype="System.UInt64" />
        <method name="ToUInt64(System.Int16)" argnames="value" returntype="System.UInt64" />
        <method name="ToUInt64(System.UInt16)" argnames="value" returntype="System.UInt64" />
        <method name="ToUInt64(System.Int32)" argnames="value" returntype="System.UInt64" />
        <method name="ToUInt64(System.UInt32)" argnames="value" returntype="System.UInt64" />
        <method name="ToUInt64(System.Int64)" argnames="value" returntype="System.UInt64" />
        <method name="ToUInt64(System.UInt64)" argnames="value" returntype="System.UInt64" />
        <method name="ToUInt64(System.Single)" argnames="value" returntype="System.UInt64" />
        <method name="ToUInt64(System.Double)" argnames="value" returntype="System.UInt64" />
        <method name="ToUInt64(System.Decimal)" argnames="value" returntype="System.UInt64" />
        <method name="ToUInt64(System.String)" argnames="value" returntype="System.UInt64" />
        <method name="ToUInt64(System.String, System.IFormatProvider)" argnames="value, provider" returntype="System.UInt64" />
        <method name="ToUInt64(System.DateTime)" argnames="value" returntype="System.UInt64" />
        <method name="ToSingle(System.Object)" argnames="value" returntype="System.Single" />
        <method name="ToSingle(System.Object, System.IFormatProvider)" argnames="value, provider" returntype="System.Single" />
        <method name="ToSingle(System.SByte)" argnames="value" returntype="System.Single" />
        <method name="ToSingle(System.Byte)" argnames="value" returntype="System.Single" />
        <method name="ToSingle(System.Char)" argnames="value" returntype="System.Single" />
        <method name="ToSingle(System.Int16)" argnames="value" returntype="System.Single" />
        <method name="ToSingle(System.UInt16)" argnames="value" returntype="System.Single" />
        <method name="ToSingle(System.Int32)" argnames="value" returntype="System.Single" />
        <method name="ToSingle(System.UInt32)" argnames="value" returntype="System.Single" />
        <method name="ToSingle(System.Int64)" argnames="value" returntype="System.Single" />
        <method name="ToSingle(System.UInt64)" argnames="value" returntype="System.Single" />
        <method name="ToSingle(System.Single)" argnames="value" returntype="System.Single" />
        <method name="ToSingle(System.Double)" argnames="value" returntype="System.Single" />
        <method name="ToSingle(System.Decimal)" argnames="value" returntype="System.Single" />
        <method name="ToSingle(System.String)" argnames="value" returntype="System.Single" />
        <method name="ToSingle(System.String, System.IFormatProvider)" argnames="value, provider" returntype="System.Single" />
        <method name="ToSingle(System.Boolean)" argnames="value" returntype="System.Single" />
        <method name="ToSingle(System.DateTime)" argnames="value" returntype="System.Single" />
        <method name="ToDouble(System.Object)" argnames="value" returntype="System.Double" />
        <method name="ToDouble(System.Object, System.IFormatProvider)" argnames="value, provider" returntype="System.Double" />
        <method name="ToDouble(System.SByte)" argnames="value" returntype="System.Double" />
        <method name="ToDouble(System.Byte)" argnames="value" returntype="System.Double" />
        <method name="ToDouble(System.Int16)" argnames="value" returntype="System.Double" />
        <method name="ToDouble(System.Char)" argnames="value" returntype="System.Double" />
        <method name="ToDouble(System.UInt16)" argnames="value" returntype="System.Double" />
        <method name="ToDouble(System.Int32)" argnames="value" returntype="System.Double" />
        <method name="ToDouble(System.UInt32)" argnames="value" returntype="System.Double" />
        <method name="ToDouble(System.Int64)" argnames="value" returntype="System.Double" />
        <method name="ToDouble(System.UInt64)" argnames="value" returntype="System.Double" />
        <method name="ToDouble(System.Single)" argnames="value" returntype="System.Double" />
        <method name="ToDouble(System.Double)" argnames="value" returntype="System.Double" />
        <method name="ToDouble(System.Decimal)" argnames="value" returntype="System.Double" />
        <method name="ToDouble(System.String)" argnames="value" returntype="System.Double" />
        <method name="ToDouble(System.String, System.IFormatProvider)" argnames="value, provider" returntype="System.Double" />
        <method name="ToDouble(System.Boolean)" argnames="value" returntype="System.Double" />
        <method name="ToDouble(System.DateTime)" argnames="value" returntype="System.Double" />
        <method name="ToDecimal(System.Object)" argnames="value" returntype="System.Decimal" />
        <method name="ToDecimal(System.Object, System.IFormatProvider)" argnames="value, provider" returntype="System.Decimal" />
        <method name="ToDecimal(System.SByte)" argnames="value" returntype="System.Decimal" />
        <method name="ToDecimal(System.Byte)" argnames="value" returntype="System.Decimal" />
        <method name="ToDecimal(System.Char)" argnames="value" returntype="System.Decimal" />
        <method name="ToDecimal(System.Int16)" argnames="value" returntype="System.Decimal" />
        <method name="ToDecimal(System.UInt16)" argnames="value" returntype="System.Decimal" />
        <method name="ToDecimal(System.Int32)" argnames="value" returntype="System.Decimal" />
        <method name="ToDecimal(System.UInt32)" argnames="value" returntype="System.Decimal" />
        <method name="ToDecimal(System.Int64)" argnames="value" returntype="System.Decimal" />
        <method name="ToDecimal(System.UInt64)" argnames="value" returntype="System.Decimal" />
        <method name="ToDecimal(System.Single)" argnames="value" returntype="System.Decimal" />
        <method name="ToDecimal(System.Double)" argnames="value" returntype="System.Decimal" />
        <method name="ToDecimal(System.String)" argnames="value" returntype="System.Decimal" />
        <method name="ToDecimal(System.String, System.IFormatProvider)" argnames="value, provider" returntype="System.Decimal" />
        <method name="ToDecimal(System.Decimal)" argnames="value" returntype="System.Decimal" />
        <method name="ToDecimal(System.Boolean)" argnames="value" returntype="System.Decimal" />
        <method name="ToDecimal(System.DateTime)" argnames="value" returntype="System.Decimal" />
        <method name="ToDateTime(System.DateTime)" argnames="value" returntype="System.DateTime" />
        <method name="ToDateTime(System.Object)" argnames="value" returntype="System.DateTime" />
        <method name="ToDateTime(System.Object, System.IFormatProvider)" argnames="value, provider" returntype="System.DateTime" />
        <method name="ToDateTime(System.String)" argnames="value" returntype="System.DateTime" />
        <method name="ToDateTime(System.String, System.IFormatProvider)" argnames="value, provider" returntype="System.DateTime" />
        <method name="ToDateTime(System.SByte)" argnames="value" returntype="System.DateTime" />
        <method name="ToDateTime(System.Byte)" argnames="value" returntype="System.DateTime" />
        <method name="ToDateTime(System.Int16)" argnames="value" returntype="System.DateTime" />
        <method name="ToDateTime(System.UInt16)" argnames="value" returntype="System.DateTime" />
        <method name="ToDateTime(System.Int32)" argnames="value" returntype="System.DateTime" />
        <method name="ToDateTime(System.UInt32)" argnames="value" returntype="System.DateTime" />
        <method name="ToDateTime(System.Int64)" argnames="value" returntype="System.DateTime" />
        <method name="ToDateTime(System.UInt64)" argnames="value" returntype="System.DateTime" />
        <method name="ToDateTime(System.Boolean)" argnames="value" returntype="System.DateTime" />
        <method name="ToDateTime(System.Char)" argnames="value" returntype="System.DateTime" />
        <method name="ToDateTime(System.Single)" argnames="value" returntype="System.DateTime" />
        <method name="ToDateTime(System.Double)" argnames="value" returntype="System.DateTime" />
        <method name="ToDateTime(System.Decimal)" argnames="value" returntype="System.DateTime" />
        <method name="ToString(System.Object)" argnames="value" returntype="System.String" />
        <method name="ToString(System.Object, System.IFormatProvider)" argnames="value, provider" returntype="System.String" />
        <method name="ToString(System.Boolean)" argnames="value" returntype="System.String" />
        <method name="ToString(System.Boolean, System.IFormatProvider)" argnames="value, provider" returntype="System.String" />
        <method name="ToString(System.Char)" argnames="value" returntype="System.String" />
        <method name="ToString(System.Char, System.IFormatProvider)" argnames="value, provider" returntype="System.String" />
        <method name="ToString(System.SByte)" argnames="value" returntype="System.String" />
        <method name="ToString(System.SByte, System.IFormatProvider)" argnames="value, provider" returntype="System.String" />
        <method name="ToString(System.Byte)" argnames="value" returntype="System.String" />
        <method name="ToString(System.Byte, System.IFormatProvider)" argnames="value, provider" returntype="System.String" />
        <method name="ToString(System.Int16)" argnames="value" returntype="System.String" />
        <method name="ToString(System.Int16, System.IFormatProvider)" argnames="value, provider" returntype="System.String" />
        <method name="ToString(System.UInt16)" argnames="value" returntype="System.String" />
        <method name="ToString(System.UInt16, System.IFormatProvider)" argnames="value, provider" returntype="System.String" />
        <method name="ToString(System.Int32)" argnames="value" returntype="System.String" />
        <method name="ToString(System.Int32, System.IFormatProvider)" argnames="value, provider" returntype="System.String" />
        <method name="ToString(System.UInt32)" argnames="value" returntype="System.String" />
        <method name="ToString(System.UInt32, System.IFormatProvider)" argnames="value, provider" returntype="System.String" />
        <method name="ToString(System.Int64)" argnames="value" returntype="System.String" />
        <method name="ToString(System.Int64, System.IFormatProvider)" argnames="value, provider" returntype="System.String" />
        <method name="ToString(System.UInt64)" argnames="value" returntype="System.String" />
        <method name="ToString(System.UInt64, System.IFormatProvider)" argnames="value, provider" returntype="System.String" />
        <method name="ToString(System.Single)" argnames="value" returntype="System.String" />
        <method name="ToString(System.Single, System.IFormatProvider)" argnames="value, provider" returntype="System.String" />
        <method name="ToString(System.Double)" argnames="value" returntype="System.String" />
        <method name="ToString(System.Double, System.IFormatProvider)" argnames="value, provider" returntype="System.String" />
        <method name="ToString(System.Decimal)" argnames="value" returntype="System.String" />
        <method name="ToString(System.Decimal, System.IFormatProvider)" argnames="value, provider" returntype="System.String" />
        <method name="ToString(System.DateTime)" argnames="value" returntype="System.String" />
        <method name="ToString(System.DateTime, System.IFormatProvider)" argnames="value, provider" returntype="System.String" />
        <method name="ToString(System.String)" argnames="value" returntype="System.String" />
        <method name="ToString(System.String, System.IFormatProvider)" argnames="value, provider" returntype="System.String" />
        <method name="ToByte(System.String, System.Int32)" argnames="value, fromBase" returntype="System.Byte" />
        <method name="ToSByte(System.String, System.Int32)" argnames="value, fromBase" returntype="System.SByte" />
        <method name="ToInt16(System.String, System.Int32)" argnames="value, fromBase" returntype="System.Int16" />
        <method name="ToUInt16(System.String, System.Int32)" argnames="value, fromBase" returntype="System.UInt16" />
        <method name="ToInt32(System.String, System.Int32)" argnames="value, fromBase" returntype="System.Int32" />
        <method name="ToUInt32(System.String, System.Int32)" argnames="value, fromBase" returntype="System.UInt32" />
        <method name="ToInt64(System.String, System.Int32)" argnames="value, fromBase" returntype="System.Int64" />
        <method name="ToUInt64(System.String, System.Int32)" argnames="value, fromBase" returntype="System.UInt64" />
        <method name="ToString(System.Byte, System.Int32)" argnames="value, toBase" returntype="System.String" />
        <method name="ToString(System.Int16, System.Int32)" argnames="value, toBase" returntype="System.String" />
        <method name="ToString(System.Int32, System.Int32)" argnames="value, toBase" returntype="System.String" />
        <method name="ToString(System.Int64, System.Int32)" argnames="value, toBase" returntype="System.String" />
        <method name="ToBase64String(System.Byte[])" argnames="inArray" returntype="System.String" />
        <method name="ToBase64String(System.Byte[], System.Int32, System.Int32)" argnames="inArray, offset, length" returntype="System.String" />
        <method name="FromBase64String(System.String)" argnames="s" returntype="System.Byte[]" />
        <method name="ToBase64CharArray(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)" argnames="inArray, offsetIn, length, outArray, offsetOut" returntype="System.Int32" />
        <method name="FromBase64CharArray(System.Char[], System.Int32, System.Int32)" argnames="inArray, offset, length" returntype="System.Byte[]" />
    </class>
    <class name="ContextBoundObject" namespace="System">
        <constructor name="ContextBoundObject()" argnames="" />
    </class>
    <class name="ContextStaticAttribute" namespace="System">
        <constructor name="ContextStaticAttribute()" argnames="" />
    </class>
    <class name="TimeZone" namespace="System">
        <constructor name="TimeZone()" argnames="" />
        <property name="CurrentTimeZone" propertytype="System.TimeZone" />
        <property name="StandardName" propertytype="System.String" />
        <property name="DaylightName" propertytype="System.String" />
        <method name="IsDaylightSavingTime(System.DateTime)" argnames="time" returntype="System.Boolean" />
        <method name="GetDaylightChanges(System.Int32)" argnames="year" returntype="System.Globalization.DaylightTime" />
        <method name="ToLocalTime(System.DateTime)" argnames="time" returntype="System.DateTime" />
        <method name="ToUniversalTime(System.DateTime)" argnames="time" returntype="System.DateTime" />
        <method name="GetUtcOffset(System.DateTime)" argnames="time" returntype="System.TimeSpan" />
        <method name="IsDaylightSavingTime(System.DateTime, System.Globalization.DaylightTime)" argnames="time, daylightTimes" returntype="System.Boolean" />
    </class>
    <class name="DBNull" namespace="System">
        <field name="Value" />
        <method name="ToString(System.IFormatProvider)" argnames="provider" returntype="System.String" />
        <method name="GetTypeCode()" argnames="" returntype="System.TypeCode" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </class>
    <class name="DivideByZeroException" namespace="System">
        <constructor name="DivideByZeroException()" argnames="" />
        <constructor name="DivideByZeroException(System.String)" argnames="message" />
        <constructor name="DivideByZeroException(System.String, System.Exception)" argnames="message, innerException" />
        <constructor name="DivideByZeroException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="DuplicateWaitObjectException" namespace="System">
        <constructor name="DuplicateWaitObjectException()" argnames="" />
        <constructor name="DuplicateWaitObjectException(System.String)" argnames="parameterName" />
        <constructor name="DuplicateWaitObjectException(System.String, System.String)" argnames="parameterName, message" />
        <constructor name="DuplicateWaitObjectException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
        <property name="DuplicateWaitObjectMessage" propertytype="System.String" />
    </class>
    <class name="TypeLoadException" namespace="System">
        <constructor name="TypeLoadException()" argnames="" />
        <constructor name="TypeLoadException(System.String)" argnames="message" />
        <constructor name="TypeLoadException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="TypeLoadException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
        <property name="Message" propertytype="System.String" />
        <property name="TypeName" propertytype="System.String" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
    </class>
    <class name="EntryPointNotFoundException" namespace="System">
        <constructor name="EntryPointNotFoundException()" argnames="" />
        <constructor name="EntryPointNotFoundException(System.String)" argnames="message" />
        <constructor name="EntryPointNotFoundException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="EntryPointNotFoundException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="DllNotFoundException" namespace="System">
        <constructor name="DllNotFoundException()" argnames="" />
        <constructor name="DllNotFoundException(System.String)" argnames="message" />
        <constructor name="DllNotFoundException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="DllNotFoundException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="Environment" namespace="System">
        <enum name="SpecialFolder" namespace="System">
            <field name="ApplicationData" />
            <field name="CommonApplicationData" />
            <field name="LocalApplicationData" />
            <field name="Cookies" />
            <field name="Favorites" />
            <field name="History" />
            <field name="InternetCache" />
            <field name="Programs" />
            <field name="Recent" />
            <field name="SendTo" />
            <field name="StartMenu" />
            <field name="Startup" />
            <field name="System" />
            <field name="Templates" />
            <field name="DesktopDirectory" />
            <field name="Personal" />
            <field name="ProgramFiles" />
            <field name="CommonProgramFiles" />
        </enum>
        <property name="TickCount" propertytype="System.Int32" />
        <property name="ExitCode" propertytype="System.Int32" />
        <property name="CommandLine" propertytype="System.String" />
        <property name="CurrentDirectory" propertytype="System.String" />
        <property name="SystemDirectory" propertytype="System.String" />
        <property name="MachineName" propertytype="System.String" />
        <property name="NewLine" propertytype="System.String" />
        <property name="Version" propertytype="System.Version" />
        <property name="WorkingSet" propertytype="System.Int64" />
        <property name="OSVersion" propertytype="System.OperatingSystem" />
        <property name="OSInfo" propertytype="System.Environment+OSName" />
        <property name="StackTrace" propertytype="System.String" />
        <property name="HasShutdownStarted" propertytype="System.Boolean" />
        <property name="UserName" propertytype="System.String" />
        <property name="UserInteractive" propertytype="System.Boolean" />
        <property name="UserDomainName" propertytype="System.String" />
        <method name="Exit(System.Int32)" argnames="exitCode" returntype="System.Void" />
        <method name="ExpandEnvironmentVariables(System.String)" argnames="name" returntype="System.String" />
        <method name="GetCommandLineArgs()" argnames="" returntype="System.String[]" />
        <method name="GetEnvironmentVariable(System.String)" argnames="variable" returntype="System.String" />
        <method name="GetEnvironmentVariables()" argnames="" returntype="System.Collections.IDictionary" />
        <method name="GetLogicalDrives()" argnames="" returntype="System.String[]" />
        <method name="GetFolderPath(System.Environment.SpecialFolder)" argnames="folder" returntype="System.String" />
    </class>
    <class name="FieldAccessException" namespace="System">
        <constructor name="FieldAccessException()" argnames="" />
        <constructor name="FieldAccessException(System.String)" argnames="message" />
        <constructor name="FieldAccessException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="FieldAccessException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="FlagsAttribute" namespace="System">
        <constructor name="FlagsAttribute()" argnames="" />
    </class>
    <class name="FormatException" namespace="System">
        <constructor name="FormatException()" argnames="" />
        <constructor name="FormatException(System.String)" argnames="message" />
        <constructor name="FormatException(System.String, System.Exception)" argnames="message, innerException" />
        <constructor name="FormatException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="GC" namespace="System">
        <property name="MaxGeneration" propertytype="System.Int32" />
        <method name="GetGeneration(System.Object)" argnames="obj" returntype="System.Int32" />
        <method name="Collect(System.Int32)" argnames="generation" returntype="System.Void" />
        <method name="Collect()" argnames="" returntype="System.Void" />
        <method name="KeepAlive(System.Object)" argnames="obj" returntype="System.Void" />
        <method name="GetGeneration(System.WeakReference)" argnames="wo" returntype="System.Int32" />
        <method name="WaitForPendingFinalizers()" argnames="" returntype="System.Void" />
        <method name="SuppressFinalize(System.Object)" argnames="obj" returntype="System.Void" />
        <method name="ReRegisterForFinalize(System.Object)" argnames="obj" returntype="System.Void" />
        <method name="GetTotalMemory(System.Boolean)" argnames="forceFullCollection" returntype="System.Int64" />
    </class>
    <class name="IndexOutOfRangeException" namespace="System">
        <constructor name="IndexOutOfRangeException()" argnames="" />
        <constructor name="IndexOutOfRangeException(System.String)" argnames="message" />
        <constructor name="IndexOutOfRangeException(System.String, System.Exception)" argnames="message, innerException" />
    </class>
    <class name="InvalidCastException" namespace="System">
        <constructor name="InvalidCastException()" argnames="" />
        <constructor name="InvalidCastException(System.String)" argnames="message" />
        <constructor name="InvalidCastException(System.String, System.Exception)" argnames="message, innerException" />
        <constructor name="InvalidCastException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="InvalidOperationException" namespace="System">
        <constructor name="InvalidOperationException()" argnames="" />
        <constructor name="InvalidOperationException(System.String)" argnames="message" />
        <constructor name="InvalidOperationException(System.String, System.Exception)" argnames="message, innerException" />
        <constructor name="InvalidOperationException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="InvalidProgramException" namespace="System">
        <constructor name="InvalidProgramException()" argnames="" />
        <constructor name="InvalidProgramException(System.String)" argnames="message" />
        <constructor name="InvalidProgramException(System.String, System.Exception)" argnames="message, inner" />
    </class>
    <class name="LocalDataStoreSlot" namespace="System">
        <property name="Manager" propertytype="System.LocalDataStoreMgr" />
        <property name="Slot" propertytype="System.Int32" />
        <method name="Finalize()" argnames="" returntype="System.Void" />
    </class>
    <class name="Math" namespace="System">
        <field name="PI" />
        <field name="E" />
        <method name="Acos(System.Double)" argnames="d" returntype="System.Double" />
        <method name="Asin(System.Double)" argnames="d" returntype="System.Double" />
        <method name="Atan(System.Double)" argnames="d" returntype="System.Double" />
        <method name="Atan2(System.Double, System.Double)" argnames="y, x" returntype="System.Double" />
        <method name="Cos(System.Double)" argnames="d" returntype="System.Double" />
        <method name="Sin(System.Double)" argnames="a" returntype="System.Double" />
        <method name="Tan(System.Double)" argnames="a" returntype="System.Double" />
        <method name="Cosh(System.Double)" argnames="value" returntype="System.Double" />
        <method name="Sinh(System.Double)" argnames="value" returntype="System.Double" />
        <method name="Tanh(System.Double)" argnames="value" returntype="System.Double" />
        <method name="Round(System.Double)" argnames="a" returntype="System.Double" />
        <method name="Round(System.Double, System.Int32)" argnames="value, digits" returntype="System.Double" />
        <method name="Round(System.Decimal)" argnames="d" returntype="System.Decimal" />
        <method name="Round(System.Decimal, System.Int32)" argnames="d, decimals" returntype="System.Decimal" />
        <method name="Ceiling(System.Double)" argnames="a" returntype="System.Double" />
        <method name="Floor(System.Double)" argnames="d" returntype="System.Double" />
        <method name="Sqrt(System.Double)" argnames="d" returntype="System.Double" />
        <method name="Log(System.Double)" argnames="d" returntype="System.Double" />
        <method name="Log10(System.Double)" argnames="d" returntype="System.Double" />
        <method name="Exp(System.Double)" argnames="d" returntype="System.Double" />
        <method name="Pow(System.Double, System.Double)" argnames="x, y" returntype="System.Double" />
        <method name="IEEERemainder(System.Double, System.Double)" argnames="x, y" returntype="System.Double" />
        <method name="Abs(System.SByte)" argnames="value" returntype="System.SByte" />
        <method name="Abs(System.Int16)" argnames="value" returntype="System.Int16" />
        <method name="Abs(System.Int32)" argnames="value" returntype="System.Int32" />
        <method name="Abs(System.Int64)" argnames="value" returntype="System.Int64" />
        <method name="Abs(System.Single)" argnames="value" returntype="System.Single" />
        <method name="Abs(System.Double)" argnames="value" returntype="System.Double" />
        <method name="Abs(System.Decimal)" argnames="value" returntype="System.Decimal" />
        <method name="Max(System.SByte, System.SByte)" argnames="val1, val2" returntype="System.SByte" />
        <method name="Max(System.Byte, System.Byte)" argnames="val1, val2" returntype="System.Byte" />
        <method name="Max(System.Int16, System.Int16)" argnames="val1, val2" returntype="System.Int16" />
        <method name="Max(System.UInt16, System.UInt16)" argnames="val1, val2" returntype="System.UInt16" />
        <method name="Max(System.Int32, System.Int32)" argnames="val1, val2" returntype="System.Int32" />
        <method name="Max(System.UInt32, System.UInt32)" argnames="val1, val2" returntype="System.UInt32" />
        <method name="Max(System.Int64, System.Int64)" argnames="val1, val2" returntype="System.Int64" />
        <method name="Max(System.UInt64, System.UInt64)" argnames="val1, val2" returntype="System.UInt64" />
        <method name="Max(System.Single, System.Single)" argnames="val1, val2" returntype="System.Single" />
        <method name="Max(System.Double, System.Double)" argnames="val1, val2" returntype="System.Double" />
        <method name="Max(System.Decimal, System.Decimal)" argnames="val1, val2" returntype="System.Decimal" />
        <method name="Min(System.SByte, System.SByte)" argnames="val1, val2" returntype="System.SByte" />
        <method name="Min(System.Byte, System.Byte)" argnames="val1, val2" returntype="System.Byte" />
        <method name="Min(System.Int16, System.Int16)" argnames="val1, val2" returntype="System.Int16" />
        <method name="Min(System.UInt16, System.UInt16)" argnames="val1, val2" returntype="System.UInt16" />
        <method name="Min(System.Int32, System.Int32)" argnames="val1, val2" returntype="System.Int32" />
        <method name="Min(System.UInt32, System.UInt32)" argnames="val1, val2" returntype="System.UInt32" />
        <method name="Min(System.Int64, System.Int64)" argnames="val1, val2" returntype="System.Int64" />
        <method name="Min(System.UInt64, System.UInt64)" argnames="val1, val2" returntype="System.UInt64" />
        <method name="Min(System.Single, System.Single)" argnames="val1, val2" returntype="System.Single" />
        <method name="Min(System.Double, System.Double)" argnames="val1, val2" returntype="System.Double" />
        <method name="Min(System.Decimal, System.Decimal)" argnames="val1, val2" returntype="System.Decimal" />
        <method name="Log(System.Double, System.Double)" argnames="a, newBase" returntype="System.Double" />
        <method name="Sign(System.SByte)" argnames="value" returntype="System.Int32" />
        <method name="Sign(System.Int16)" argnames="value" returntype="System.Int32" />
        <method name="Sign(System.Int32)" argnames="value" returntype="System.Int32" />
        <method name="Sign(System.Int64)" argnames="value" returntype="System.Int32" />
        <method name="Sign(System.Single)" argnames="value" returntype="System.Int32" />
        <method name="Sign(System.Double)" argnames="value" returntype="System.Int32" />
        <method name="Sign(System.Decimal)" argnames="value" returntype="System.Int32" />
    </class>
    <class name="MethodAccessException" namespace="System">
        <constructor name="MethodAccessException()" argnames="" />
        <constructor name="MethodAccessException(System.String)" argnames="message" />
        <constructor name="MethodAccessException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="MethodAccessException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="MissingMemberException" namespace="System">
        <constructor name="MissingMemberException()" argnames="" />
        <constructor name="MissingMemberException(System.String)" argnames="message" />
        <constructor name="MissingMemberException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="MissingMemberException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
        <constructor name="MissingMemberException(System.String, System.String)" argnames="className, memberName" />
        <field name="ClassName" />
        <field name="MemberName" />
        <field name="Signature" />
        <property name="Message" propertytype="System.String" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
    </class>
    <class name="MissingFieldException" namespace="System">
        <constructor name="MissingFieldException()" argnames="" />
        <constructor name="MissingFieldException(System.String)" argnames="message" />
        <constructor name="MissingFieldException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="MissingFieldException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
        <constructor name="MissingFieldException(System.String, System.String)" argnames="className, fieldName" />
        <property name="Message" propertytype="System.String" />
    </class>
    <class name="MissingMethodException" namespace="System">
        <constructor name="MissingMethodException()" argnames="" />
        <constructor name="MissingMethodException(System.String)" argnames="message" />
        <constructor name="MissingMethodException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="MissingMethodException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
        <constructor name="MissingMethodException(System.String, System.String)" argnames="className, methodName" />
        <property name="Message" propertytype="System.String" />
    </class>
    <class name="MulticastNotSupportedException" namespace="System">
        <constructor name="MulticastNotSupportedException()" argnames="" />
        <constructor name="MulticastNotSupportedException(System.String)" argnames="message" />
        <constructor name="MulticastNotSupportedException(System.String, System.Exception)" argnames="message, inner" />
    </class>
    <class name="NonSerializedAttribute" namespace="System">
        <constructor name="NonSerializedAttribute()" argnames="" />
    </class>
    <class name="NotFiniteNumberException" namespace="System">
        <constructor name="NotFiniteNumberException()" argnames="" />
        <constructor name="NotFiniteNumberException(System.Double)" argnames="offendingNumber" />
        <constructor name="NotFiniteNumberException(System.String)" argnames="message" />
        <constructor name="NotFiniteNumberException(System.String, System.Double)" argnames="message, offendingNumber" />
        <constructor name="NotFiniteNumberException(System.String, System.Double, System.Exception)" argnames="message, offendingNumber, innerException" />
        <constructor name="NotFiniteNumberException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
        <property name="OffendingNumber" propertytype="System.Double" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
    </class>
    <class name="NotImplementedException" namespace="System">
        <constructor name="NotImplementedException()" argnames="" />
        <constructor name="NotImplementedException(System.String)" argnames="message" />
        <constructor name="NotImplementedException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="NotImplementedException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="NotSupportedException" namespace="System">
        <constructor name="NotSupportedException()" argnames="" />
        <constructor name="NotSupportedException(System.String)" argnames="message" />
        <constructor name="NotSupportedException(System.String, System.Exception)" argnames="message, innerException" />
        <constructor name="NotSupportedException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="NullReferenceException" namespace="System">
        <constructor name="NullReferenceException()" argnames="" />
        <constructor name="NullReferenceException(System.String)" argnames="message" />
        <constructor name="NullReferenceException(System.String, System.Exception)" argnames="message, innerException" />
        <constructor name="NullReferenceException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="ObjectDisposedException" namespace="System">
        <constructor name="ObjectDisposedException(System.String)" argnames="objectName" />
        <constructor name="ObjectDisposedException(System.String, System.String)" argnames="objectName, message" />
        <constructor name="ObjectDisposedException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
        <property name="Message" propertytype="System.String" />
        <property name="ObjectName" propertytype="System.String" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
    </class>
    <class name="ObsoleteAttribute" namespace="System">
        <constructor name="ObsoleteAttribute()" argnames="" />
        <constructor name="ObsoleteAttribute(System.String)" argnames="message" />
        <constructor name="ObsoleteAttribute(System.String, System.Boolean)" argnames="message, error" />
        <property name="Message" propertytype="System.String" />
        <property name="IsError" propertytype="System.Boolean" />
    </class>
    <class name="OperatingSystem" namespace="System">
        <constructor name="OperatingSystem(System.PlatformID, System.Version)" argnames="platform, version" />
        <property name="Platform" propertytype="System.PlatformID" />
        <property name="Version" propertytype="System.Version" />
        <method name="Clone()" argnames="" returntype="System.Object" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </class>
    <class name="OverflowException" namespace="System">
        <constructor name="OverflowException()" argnames="" />
        <constructor name="OverflowException(System.String)" argnames="message" />
        <constructor name="OverflowException(System.String, System.Exception)" argnames="message, innerException" />
        <constructor name="OverflowException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="ParamArrayAttribute" namespace="System">
        <constructor name="ParamArrayAttribute()" argnames="" />
    </class>
    <class name="PlatformNotSupportedException" namespace="System">
        <constructor name="PlatformNotSupportedException()" argnames="" />
        <constructor name="PlatformNotSupportedException(System.String)" argnames="message" />
        <constructor name="PlatformNotSupportedException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="PlatformNotSupportedException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="Random" namespace="System">
        <constructor name="Random()" argnames="" />
        <constructor name="Random(System.Int32)" argnames="Seed" />
        <method name="NextBytes(System.Byte[])" argnames="buffer" returntype="System.Void" />
        <method name="NextDouble()" argnames="" returntype="System.Double" />
        <method name="Next(System.Int32)" argnames="maxValue" returntype="System.Int32" />
        <method name="Next(System.Int32, System.Int32)" argnames="minValue, maxValue" returntype="System.Int32" />
        <method name="Next()" argnames="" returntype="System.Int32" />
        <method name="Sample()" argnames="" returntype="System.Double" />
    </class>
    <class name="RankException" namespace="System">
        <constructor name="RankException()" argnames="" />
        <constructor name="RankException(System.String)" argnames="message" />
        <constructor name="RankException(System.String, System.Exception)" argnames="message, innerException" />
        <constructor name="RankException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="Type" namespace="System">
        <constructor name="Type()" argnames="" />
        <field name="FilterAttribute" />
        <field name="FilterName" />
        <field name="FilterNameIgnoreCase" />
        <field name="Missing" />
        <field name="Delimiter" />
        <field name="EmptyTypes" />
        <property name="MemberType" propertytype="System.Reflection.MemberTypes" />
        <property name="DeclaringType" propertytype="System.Type" />
        <property name="ReflectedType" propertytype="System.Type" />
        <property name="GUID" propertytype="System.Guid" />
        <property name="DefaultBinder" propertytype="System.Reflection.Binder" />
        <property name="Module" propertytype="System.Reflection.Module" />
        <property name="Assembly" propertytype="System.Reflection.Assembly" />
        <property name="TypeHandle" propertytype="System.RuntimeTypeHandle" />
        <property name="FullName" propertytype="System.String" />
        <property name="Namespace" propertytype="System.String" />
        <property name="AssemblyQualifiedName" propertytype="System.String" />
        <property name="BaseType" propertytype="System.Type" />
        <property name="TypeInitializer" propertytype="System.Reflection.ConstructorInfo" />
        <property name="Attributes" propertytype="System.Reflection.TypeAttributes" />
        <property name="IsNotPublic" propertytype="System.Boolean" />
        <property name="IsPublic" propertytype="System.Boolean" />
        <property name="IsNestedPublic" propertytype="System.Boolean" />
        <property name="IsNestedPrivate" propertytype="System.Boolean" />
        <property name="IsNestedFamily" propertytype="System.Boolean" />
        <property name="IsNestedAssembly" propertytype="System.Boolean" />
        <property name="IsNestedFamANDAssem" propertytype="System.Boolean" />
        <property name="IsNestedFamORAssem" propertytype="System.Boolean" />
        <property name="IsAutoLayout" propertytype="System.Boolean" />
        <property name="IsLayoutSequential" propertytype="System.Boolean" />
        <property name="IsExplicitLayout" propertytype="System.Boolean" />
        <property name="IsClass" propertytype="System.Boolean" />
        <property name="IsInterface" propertytype="System.Boolean" />
        <property name="IsValueType" propertytype="System.Boolean" />
        <property name="IsAbstract" propertytype="System.Boolean" />
        <property name="IsSealed" propertytype="System.Boolean" />
        <property name="IsEnum" propertytype="System.Boolean" />
        <property name="IsSpecialName" propertytype="System.Boolean" />
        <property name="IsImport" propertytype="System.Boolean" />
        <property name="IsSerializable" propertytype="System.Boolean" />
        <property name="IsAnsiClass" propertytype="System.Boolean" />
        <property name="IsUnicodeClass" propertytype="System.Boolean" />
        <property name="IsAutoClass" propertytype="System.Boolean" />
        <property name="IsArray" propertytype="System.Boolean" />
        <property name="IsByRef" propertytype="System.Boolean" />
        <property name="IsPointer" propertytype="System.Boolean" />
        <property name="IsPrimitive" propertytype="System.Boolean" />
        <property name="IsCOMObject" propertytype="System.Boolean" />
        <property name="IsGenericCOMObject" propertytype="System.Boolean" />
        <property name="HasElementType" propertytype="System.Boolean" />
        <property name="IsContextful" propertytype="System.Boolean" />
        <property name="IsMarshalByRef" propertytype="System.Boolean" />
        <property name="HasProxyAttribute" propertytype="System.Boolean" />
        <property name="UnderlyingSystemType" propertytype="System.Type" />
        <method name="InvokeMember(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object, System.Object[], System.Reflection.ParameterModifier[], System.Globalization.CultureInfo, System.String[])" argnames="name, invokeAttr, binder, target, args, modifiers, culture, namedParameters" returntype="System.Object" />
        <method name="GetMembers(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Reflection.MemberInfo[]" />
        <method name="GetMember(System.String, System.Reflection.BindingFlags)" argnames="name, bindingAttr" returntype="System.Reflection.MemberInfo[]" />
        <method name="GetProperties(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Reflection.PropertyInfo[]" />
        <method name="GetProperty(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Type, System.Type[], System.Reflection.ParameterModifier[])" argnames="name, bindingAttr, binder, returnType, types, modifiers" returntype="System.Reflection.PropertyInfo" />
        <method name="GetProperty(System.String, System.Reflection.BindingFlags)" argnames="name, bindingAttr" returntype="System.Reflection.PropertyInfo" />
        <method name="GetFields(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Reflection.FieldInfo[]" />
        <method name="GetField(System.String, System.Reflection.BindingFlags)" argnames="name, bindingAttr" returntype="System.Reflection.FieldInfo" />
        <method name="GetMethods(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Reflection.MethodInfo[]" />
        <method name="GetMethod(System.String, System.Reflection.BindingFlags)" argnames="name, bindingAttr" returntype="System.Reflection.MethodInfo" />
        <method name="GetMethod(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Type[], System.Reflection.ParameterModifier[])" argnames="name, bindingAttr, binder, types, modifiers" returntype="System.Reflection.MethodInfo" />
        <method name="GetInterfaceMap(System.Type)" argnames="interfaceType" returntype="System.Reflection.InterfaceMapping" />
        <method name="IsAssignableFrom(System.Type)" argnames="c" returntype="System.Boolean" />
        <method name="IsInstanceOfType(System.Object)" argnames="o" returntype="System.Boolean" />
        <method name="IsSubclassOf(System.Type)" argnames="c" returntype="System.Boolean" />
        <method name="HasElementTypeImpl()" argnames="" returntype="System.Boolean" />
        <method name="GetElementType()" argnames="" returntype="System.Type" />
        <method name="IsMarshalByRefImpl()" argnames="" returntype="System.Boolean" />
        <method name="IsContextfulImpl()" argnames="" returntype="System.Boolean" />
        <method name="IsCOMObjectImpl()" argnames="" returntype="System.Boolean" />
        <method name="IsPrimitiveImpl()" argnames="" returntype="System.Boolean" />
        <method name="IsPointerImpl()" argnames="" returntype="System.Boolean" />
        <method name="IsByRefImpl()" argnames="" returntype="System.Boolean" />
        <method name="IsArrayImpl()" argnames="" returntype="System.Boolean" />
        <method name="GetAttributeFlagsImpl()" argnames="" returntype="System.Reflection.TypeAttributes" />
        <method name="IsValueTypeImpl()" argnames="" returntype="System.Boolean" />
        <method name="FindMembers(System.Reflection.MemberTypes, System.Reflection.BindingFlags, System.Reflection.MemberFilter, System.Object)" argnames="memberType, bindingAttr, filter, filterCriteria" returntype="System.Reflection.MemberInfo[]" />
        <method name="GetDefaultMembers()" argnames="" returntype="System.Reflection.MemberInfo[]" />
        <method name="GetMember(System.String, System.Reflection.MemberTypes, System.Reflection.BindingFlags)" argnames="name, type, bindingAttr" returntype="System.Reflection.MemberInfo[]" />
        <method name="GetNestedType(System.String, System.Reflection.BindingFlags)" argnames="name, bindingAttr" returntype="System.Type" />
        <method name="GetNestedTypes(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Type[]" />
        <method name="GetPropertyImpl(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Type, System.Type[], System.Reflection.ParameterModifier[])" argnames="name, bindingAttr, binder, returnType, types, modifiers" returntype="System.Reflection.PropertyInfo" />
        <method name="GetEvents(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Reflection.EventInfo[]" />
        <method name="GetEvents()" argnames="" returntype="System.Reflection.EventInfo[]" />
        <method name="GetEvent(System.String, System.Reflection.BindingFlags)" argnames="name, bindingAttr" returntype="System.Reflection.EventInfo" />
        <method name="FindInterfaces(System.Reflection.TypeFilter, System.Object)" argnames="filter, filterCriteria" returntype="System.Type[]" />
        <method name="GetInterfaces()" argnames="" returntype="System.Type[]" />
        <method name="GetInterface(System.String, System.Boolean)" argnames="name, ignoreCase" returntype="System.Type" />
        <method name="GetMethodImpl(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])" argnames="name, bindingAttr, binder, callConvention, types, modifiers" returntype="System.Reflection.MethodInfo" />
        <method name="GetConstructors(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Reflection.ConstructorInfo[]" />
        <method name="GetConstructorImpl(System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])" argnames="bindingAttr, binder, callConvention, types, modifiers" returntype="System.Reflection.ConstructorInfo" />
        <method name="GetArrayRank()" argnames="" returntype="System.Int32" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="o" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="GetType(System.String, System.Boolean, System.Boolean)" argnames="typeName, throwOnError, ignoreCase" returntype="System.Type" />
        <method name="GetType(System.String, System.Boolean)" argnames="typeName, throwOnError" returntype="System.Type" />
        <method name="GetType(System.String)" argnames="typeName" returntype="System.Type" />
        <method name="GetTypeFromProgID(System.String)" argnames="progID" returntype="System.Type" />
        <method name="GetTypeFromProgID(System.String, System.Boolean)" argnames="progID, throwOnError" returntype="System.Type" />
        <method name="GetTypeFromProgID(System.String, System.String)" argnames="progID, server" returntype="System.Type" />
        <method name="GetTypeFromProgID(System.String, System.String, System.Boolean)" argnames="progID, server, throwOnError" returntype="System.Type" />
        <method name="GetTypeFromCLSID(System.Guid)" argnames="clsid" returntype="System.Type" />
        <method name="GetTypeFromCLSID(System.Guid, System.Boolean)" argnames="clsid, throwOnError" returntype="System.Type" />
        <method name="GetTypeFromCLSID(System.Guid, System.String)" argnames="clsid, server" returntype="System.Type" />
        <method name="GetTypeFromCLSID(System.Guid, System.String, System.Boolean)" argnames="clsid, server, throwOnError" returntype="System.Type" />
        <method name="GetTypeCode(System.Type)" argnames="type" returntype="System.TypeCode" />
        <method name="InvokeMember(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object, System.Object[], System.Globalization.CultureInfo)" argnames="name, invokeAttr, binder, target, args, culture" returntype="System.Object" />
        <method name="InvokeMember(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object, System.Object[])" argnames="name, invokeAttr, binder, target, args" returntype="System.Object" />
        <method name="GetTypeHandle(System.Object)" argnames="o" returntype="System.RuntimeTypeHandle" />
        <method name="GetTypeFromHandle(System.RuntimeTypeHandle)" argnames="handle" returntype="System.Type" />
        <method name="GetConstructor(System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])" argnames="bindingAttr, binder, callConvention, types, modifiers" returntype="System.Reflection.ConstructorInfo" />
        <method name="GetConstructor(System.Reflection.BindingFlags, System.Reflection.Binder, System.Type[], System.Reflection.ParameterModifier[])" argnames="bindingAttr, binder, types, modifiers" returntype="System.Reflection.ConstructorInfo" />
        <method name="GetConstructor(System.Type[])" argnames="types" returntype="System.Reflection.ConstructorInfo" />
        <method name="GetConstructors()" argnames="" returntype="System.Reflection.ConstructorInfo[]" />
        <method name="GetMethod(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])" argnames="name, bindingAttr, binder, callConvention, types, modifiers" returntype="System.Reflection.MethodInfo" />
        <method name="GetMethod(System.String, System.Type[], System.Reflection.ParameterModifier[])" argnames="name, types, modifiers" returntype="System.Reflection.MethodInfo" />
        <method name="GetMethod(System.String, System.Type[])" argnames="name, types" returntype="System.Reflection.MethodInfo" />
        <method name="GetMethod(System.String)" argnames="name" returntype="System.Reflection.MethodInfo" />
        <method name="GetMethods()" argnames="" returntype="System.Reflection.MethodInfo[]" />
        <method name="GetField(System.String)" argnames="name" returntype="System.Reflection.FieldInfo" />
        <method name="GetFields()" argnames="" returntype="System.Reflection.FieldInfo[]" />
        <method name="GetInterface(System.String)" argnames="name" returntype="System.Type" />
        <method name="GetEvent(System.String)" argnames="name" returntype="System.Reflection.EventInfo" />
        <method name="GetProperty(System.String, System.Type, System.Type[], System.Reflection.ParameterModifier[])" argnames="name, returnType, types, modifiers" returntype="System.Reflection.PropertyInfo" />
        <method name="GetProperty(System.String, System.Type, System.Type[])" argnames="name, returnType, types" returntype="System.Reflection.PropertyInfo" />
        <method name="GetProperty(System.String, System.Type[])" argnames="name, types" returntype="System.Reflection.PropertyInfo" />
        <method name="GetProperty(System.String, System.Type)" argnames="name, returnType" returntype="System.Reflection.PropertyInfo" />
        <method name="GetProperty(System.String)" argnames="name" returntype="System.Reflection.PropertyInfo" />
        <method name="GetProperties()" argnames="" returntype="System.Reflection.PropertyInfo[]" />
        <method name="GetNestedTypes()" argnames="" returntype="System.Type[]" />
        <method name="GetNestedType(System.String)" argnames="name" returntype="System.Type" />
        <method name="GetMember(System.String)" argnames="name" returntype="System.Reflection.MemberInfo[]" />
        <method name="GetMembers()" argnames="" returntype="System.Reflection.MemberInfo[]" />
        <method name="GetTypeArray(System.Object[])" argnames="args" returntype="System.Type[]" />
        <method name="Equals(System.Type)" argnames="o" returntype="System.Boolean" />
    </class>
    <class name="SerializableAttribute" namespace="System">
        <constructor name="SerializableAttribute()" argnames="" />
    </class>
    <class name="TypeInitializationException" namespace="System">
        <constructor name="TypeInitializationException(System.String, System.Exception)" argnames="fullTypeName, innerException" />
        <property name="TypeName" propertytype="System.String" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
    </class>
    <class name="UnauthorizedAccessException" namespace="System">
        <constructor name="UnauthorizedAccessException()" argnames="" />
        <constructor name="UnauthorizedAccessException(System.String)" argnames="message" />
        <constructor name="UnauthorizedAccessException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="UnauthorizedAccessException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="UnhandledExceptionEventArgs" namespace="System">
        <constructor name="UnhandledExceptionEventArgs(System.Object, System.Boolean)" argnames="exception, isTerminating" />
        <property name="ExceptionObject" propertytype="System.Object" />
        <property name="IsTerminating" propertytype="System.Boolean" />
    </class>
    <class name="Version" namespace="System">
        <constructor name="Version(System.Int32, System.Int32, System.Int32, System.Int32)" argnames="major, minor, build, revision" />
        <constructor name="Version(System.Int32, System.Int32, System.Int32)" argnames="major, minor, build" />
        <constructor name="Version(System.Int32, System.Int32)" argnames="major, minor" />
        <constructor name="Version(System.String)" argnames="version" />
        <constructor name="Version()" argnames="" />
        <property name="Major" propertytype="System.Int32" />
        <property name="Minor" propertytype="System.Int32" />
        <property name="Build" propertytype="System.Int32" />
        <property name="Revision" propertytype="System.Int32" />
        <method name="CompareTo(System.Object)" argnames="version" returntype="System.Int32" />
        <method name="Clone()" argnames="" returntype="System.Object" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="ToString(System.Int32)" argnames="fieldCount" returntype="System.String" />
        <operator name="op_Equality(System.Version, System.Version)" argnames="v1, v2" />
        <operator name="op_Inequality(System.Version, System.Version)" argnames="v1, v2" />
        <operator name="op_LessThan(System.Version, System.Version)" argnames="v1, v2" />
        <operator name="op_LessThanOrEqual(System.Version, System.Version)" argnames="v1, v2" />
        <operator name="op_GreaterThan(System.Version, System.Version)" argnames="v1, v2" />
        <operator name="op_GreaterThanOrEqual(System.Version, System.Version)" argnames="v1, v2" />
    </class>
    <class name="WeakReference" namespace="System">
        <constructor name="WeakReference(System.Object)" argnames="target" />
        <constructor name="WeakReference(System.Object, System.Boolean)" argnames="target, trackResurrection" />
        <constructor name="WeakReference(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
        <property name="IsAlive" propertytype="System.Boolean" />
        <property name="TrackResurrection" propertytype="System.Boolean" />
        <property name="Target" propertytype="System.Object" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
        <method name="Finalize()" argnames="" returntype="System.Void" />
    </class>
    <class name="STAThreadAttribute" namespace="System">
        <constructor name="STAThreadAttribute()" argnames="" />
    </class>
    <class name="MTAThreadAttribute" namespace="System">
        <constructor name="MTAThreadAttribute()" argnames="" />
    </class>
    <class name="ThreadStaticAttribute" namespace="System">
        <constructor name="ThreadStaticAttribute()" argnames="" />
    </class>
    <class name="AppDomainSetup" namespace="System">
        <constructor name="AppDomainSetup()" argnames="" />
        <property name="Value" propertytype="System.String[]" />
        <property name="ApplicationBase" propertytype="System.String" />
        <property name="ApplicationBaseKey" propertytype="System.String" />
        <property name="ConfigurationFile" propertytype="System.String" />
        <property name="ConfigurationFileKey" propertytype="System.String" />
        <property name="DynamicBase" propertytype="System.String" />
        <property name="DynamicBaseKey" propertytype="System.String" />
        <property name="DisallowPublisherPolicy" propertytype="System.Boolean" />
        <property name="DeveloperPath" propertytype="System.String" />
        <property name="DisallowPublisherPolicyKey" propertytype="System.String" />
        <property name="DeveloperPathKey" propertytype="System.String" />
        <property name="ApplicationName" propertytype="System.String" />
        <property name="ApplicationNameKey" propertytype="System.String" />
        <property name="PrivateBinPath" propertytype="System.String" />
        <property name="PrivateBinPathKey" propertytype="System.String" />
        <property name="PrivateBinPathProbe" propertytype="System.String" />
        <property name="PrivateBinPathProbeKey" propertytype="System.String" />
        <property name="ShadowCopyDirectories" propertytype="System.String" />
        <property name="ShadowCopyDirectoriesKey" propertytype="System.String" />
        <property name="ShadowCopyFiles" propertytype="System.String" />
        <property name="ShadowCopyFilesKey" propertytype="System.String" />
        <property name="CachePath" propertytype="System.String" />
        <property name="CachePathKey" propertytype="System.String" />
        <property name="LicenseFile" propertytype="System.String" />
        <property name="LicenseFileKey" propertytype="System.String" />
        <property name="LoaderOptimization" propertytype="System.LoaderOptimization" />
        <property name="LoaderOptimizationKey" propertytype="System.String" />
        <property name="DynamicDirectoryKey" propertytype="System.String" />
        <property name="ConfigurationExtenstion" propertytype="System.String" />
        <property name="PrivateBinPathEnvironmentVariable" propertytype="System.String" />
        <property name="RuntimeConfigurationFile" propertytype="System.String" />
        <property name="MachineConfigKey" propertytype="System.String" />
        <property name="HostBindingKey" propertytype="System.String" />
    </class>
    <interface name="ICloneable" namespace="System">
        <method name="Clone()" argnames="" returntype="System.Object" />
    </interface>
    <interface name="IComparable" namespace="System">
        <method name="CompareTo(System.Object)" argnames="obj" returntype="System.Int32" />
    </interface>
    <interface name="IConvertible" namespace="System">
        <method name="ToType(System.Type, System.IFormatProvider)" argnames="conversionType, provider" returntype="System.Object" />
        <method name="ToString(System.IFormatProvider)" argnames="provider" returntype="System.String" />
        <method name="ToDateTime(System.IFormatProvider)" argnames="provider" returntype="System.DateTime" />
        <method name="ToDecimal(System.IFormatProvider)" argnames="provider" returntype="System.Decimal" />
        <method name="ToDouble(System.IFormatProvider)" argnames="provider" returntype="System.Double" />
        <method name="ToSingle(System.IFormatProvider)" argnames="provider" returntype="System.Single" />
        <method name="ToUInt64(System.IFormatProvider)" argnames="provider" returntype="System.UInt64" />
        <method name="ToInt64(System.IFormatProvider)" argnames="provider" returntype="System.Int64" />
        <method name="ToUInt32(System.IFormatProvider)" argnames="provider" returntype="System.UInt32" />
        <method name="ToInt32(System.IFormatProvider)" argnames="provider" returntype="System.Int32" />
        <method name="ToUInt16(System.IFormatProvider)" argnames="provider" returntype="System.UInt16" />
        <method name="ToInt16(System.IFormatProvider)" argnames="provider" returntype="System.Int16" />
        <method name="ToByte(System.IFormatProvider)" argnames="provider" returntype="System.Byte" />
        <method name="ToSByte(System.IFormatProvider)" argnames="provider" returntype="System.SByte" />
        <method name="ToChar(System.IFormatProvider)" argnames="provider" returntype="System.Char" />
        <method name="ToBoolean(System.IFormatProvider)" argnames="provider" returntype="System.Boolean" />
        <method name="GetTypeCode()" argnames="" returntype="System.TypeCode" />
    </interface>
    <interface name="IFormattable" namespace="System">
        <method name="ToString(System.String, System.IFormatProvider)" argnames="format, formatProvider" returntype="System.String" />
    </interface>
    <interface name="_AppDomain" namespace="System">
        <property name="Evidence" propertytype="System.Security.Policy.Evidence" />
        <property name="FriendlyName" propertytype="System.String" />
        <property name="BaseDirectory" propertytype="System.String" />
        <property name="RelativeSearchPath" propertytype="System.String" />
        <property name="ShadowCopyFiles" propertytype="System.Boolean" />
        <property name="DynamicDirectory" propertytype="System.String" />
        <method name="DoCallBack(System.CrossAppDomainDelegate)" argnames="theDelegate" returntype="System.Void" />
        <method name="SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)" argnames="policy" returntype="System.Void" />
        <method name="SetThreadPrincipal(System.Security.Principal.IPrincipal)" argnames="principal" returntype="System.Void" />
        <method name="SetAppDomainPolicy(System.Security.Policy.PolicyLevel)" argnames="domainPolicy" returntype="System.Void" />
        <method name="GetData(System.String)" argnames="name" returntype="System.Object" />
        <method name="SetData(System.String, System.Object)" argnames="name, data" returntype="System.Void" />
        <method name="SetCachePath(System.String)" argnames="s" returntype="System.Void" />
        <method name="ClearShadowCopyPath()" argnames="" returntype="System.Void" />
        <method name="SetShadowCopyPath(System.String)" argnames="s" returntype="System.Void" />
        <method name="ClearPrivatePath()" argnames="" returntype="System.Void" />
        <method name="AppendPrivatePath(System.String)" argnames="path" returntype="System.Void" />
        <method name="GetAssemblies()" argnames="" returntype="System.Reflection.Assembly[]" />
        <method name="ExecuteAssembly(System.String, System.Security.Policy.Evidence, System.String[])" argnames="assemblyFile, assemblySecurity, args" returntype="System.Int32" />
        <method name="ExecuteAssembly(System.String)" argnames="assemblyFile" returntype="System.Int32" />
        <method name="ExecuteAssembly(System.String, System.Security.Policy.Evidence)" argnames="assemblyFile, assemblySecurity" returntype="System.Int32" />
        <method name="Load(System.String, System.Security.Policy.Evidence)" argnames="assemblyString, assemblySecurity" returntype="System.Reflection.Assembly" />
        <method name="Load(System.Reflection.AssemblyName, System.Security.Policy.Evidence)" argnames="assemblyRef, assemblySecurity" returntype="System.Reflection.Assembly" />
        <method name="Load(System.Byte[], System.Byte[], System.Security.Policy.Evidence)" argnames="rawAssembly, rawSymbolStore, securityEvidence" returntype="System.Reflection.Assembly" />
        <method name="Load(System.Byte[], System.Byte[])" argnames="rawAssembly, rawSymbolStore" returntype="System.Reflection.Assembly" />
        <method name="Load(System.Byte[])" argnames="rawAssembly" returntype="System.Reflection.Assembly" />
        <method name="Load(System.String)" argnames="assemblyString" returntype="System.Reflection.Assembly" />
        <method name="Load(System.Reflection.AssemblyName)" argnames="assemblyRef" returntype="System.Reflection.Assembly" />
        <method name="CreateInstanceFrom(System.String, System.String, System.Boolean, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo, System.Object[], System.Security.Policy.Evidence)" argnames="assemblyFile, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityAttributes" returntype="System.Runtime.Remoting.ObjectHandle" />
        <method name="CreateInstance(System.String, System.String, System.Boolean, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo, System.Object[], System.Security.Policy.Evidence)" argnames="assemblyName, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityAttributes" returntype="System.Runtime.Remoting.ObjectHandle" />
        <method name="CreateInstanceFrom(System.String, System.String, System.Object[])" argnames="assemblyFile, typeName, activationAttributes" returntype="System.Runtime.Remoting.ObjectHandle" />
        <method name="CreateInstance(System.String, System.String, System.Object[])" argnames="assemblyName, typeName, activationAttributes" returntype="System.Runtime.Remoting.ObjectHandle" />
        <method name="CreateInstanceFrom(System.String, System.String)" argnames="assemblyFile, typeName" returntype="System.Runtime.Remoting.ObjectHandle" />
        <method name="CreateInstance(System.String, System.String)" argnames="assemblyName, typeName" returntype="System.Runtime.Remoting.ObjectHandle" />
        <method name="DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.String, System.Security.Policy.Evidence, System.Security.PermissionSet, System.Security.PermissionSet, System.Security.PermissionSet, System.Boolean)" argnames="name, access, dir, evidence, requiredPermissions, optionalPermissions, refusedPermissions, isSynchronized" returntype="System.Reflection.Emit.AssemblyBuilder" />
        <method name="DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.String, System.Security.Policy.Evidence, System.Security.PermissionSet, System.Security.PermissionSet, System.Security.PermissionSet)" argnames="name, access, dir, evidence, requiredPermissions, optionalPermissions, refusedPermissions" returntype="System.Reflection.Emit.AssemblyBuilder" />
        <method name="DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.Security.Policy.Evidence, System.Security.PermissionSet, System.Security.PermissionSet, System.Security.PermissionSet)" argnames="name, access, evidence, requiredPermissions, optionalPermissions, refusedPermissions" returntype="System.Reflection.Emit.AssemblyBuilder" />
        <method name="DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.String, System.Security.PermissionSet, System.Security.PermissionSet, System.Security.PermissionSet)" argnames="name, access, dir, requiredPermissions, optionalPermissions, refusedPermissions" returntype="System.Reflection.Emit.AssemblyBuilder" />
        <method name="DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.String, System.Security.Policy.Evidence)" argnames="name, access, dir, evidence" returntype="System.Reflection.Emit.AssemblyBuilder" />
        <method name="DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.Security.PermissionSet, System.Security.PermissionSet, System.Security.PermissionSet)" argnames="name, access, requiredPermissions, optionalPermissions, refusedPermissions" returntype="System.Reflection.Emit.AssemblyBuilder" />
        <method name="DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.Security.Policy.Evidence)" argnames="name, access, evidence" returntype="System.Reflection.Emit.AssemblyBuilder" />
        <method name="DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.String)" argnames="name, access, dir" returntype="System.Reflection.Emit.AssemblyBuilder" />
        <method name="DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess)" argnames="name, access" returntype="System.Reflection.Emit.AssemblyBuilder" />
        <method name="GetLifetimeService()" argnames="" returntype="System.Object" />
        <method name="InitializeLifetimeService()" argnames="" returntype="System.Object" />
        <method name="GetType()" argnames="" returntype="System.Type" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="other" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <event name="DomainUnload" />
        <event name="AssemblyLoad" />
        <event name="ProcessExit" />
        <event name="TypeResolve" />
        <event name="ResourceResolve" />
        <event name="AssemblyResolve" />
        <event name="UnhandledException" />
    </interface>
    <interface name="IAppDomainSetup" namespace="System">
        <property name="ApplicationBase" propertytype="System.String" />
        <property name="ApplicationName" propertytype="System.String" />
        <property name="CachePath" propertytype="System.String" />
        <property name="ConfigurationFile" propertytype="System.String" />
        <property name="DynamicBase" propertytype="System.String" />
        <property name="LicenseFile" propertytype="System.String" />
        <property name="PrivateBinPath" propertytype="System.String" />
        <property name="PrivateBinPathProbe" propertytype="System.String" />
        <property name="ShadowCopyDirectories" propertytype="System.String" />
        <property name="ShadowCopyFiles" propertytype="System.String" />
    </interface>
    <interface name="IAsyncResult" namespace="System">
        <property name="IsCompleted" propertytype="System.Boolean" />
        <property name="AsyncWaitHandle" propertytype="System.Threading.WaitHandle" />
        <property name="AsyncState" propertytype="System.Object" />
        <property name="CompletedSynchronously" propertytype="System.Boolean" />
    </interface>
    <interface name="ICustomFormatter" namespace="System">
        <method name="Format(System.String, System.Object, System.IFormatProvider)" argnames="format, arg, formatProvider" returntype="System.String" />
    </interface>
    <interface name="IDisposable" namespace="System">
        <method name="Dispose()" argnames="" returntype="System.Void" />
    </interface>
    <interface name="IFormatProvider" namespace="System">
        <method name="GetFormat(System.Type)" argnames="formatType" returntype="System.Object" />
    </interface>
    <interface name="IServiceProvider" namespace="System">
        <method name="GetService(System.Type)" argnames="serviceType" returntype="System.Object" />
    </interface>
    <struct name="DateTime" namespace="System">
        <constructor name="DateTime(System.Int64)" argnames="ticks" />
        <constructor name="DateTime(System.Int32, System.Int32, System.Int32)" argnames="year, month, day" />
        <constructor name="DateTime(System.Int32, System.Int32, System.Int32, System.Globalization.Calendar)" argnames="year, month, day, calendar" />
        <constructor name="DateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" argnames="year, month, day, hour, minute, second" />
        <constructor name="DateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Globalization.Calendar)" argnames="year, month, day, hour, minute, second, calendar" />
        <constructor name="DateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" argnames="year, month, day, hour, minute, second, millisecond" />
        <constructor name="DateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Globalization.Calendar)" argnames="year, month, day, hour, minute, second, millisecond, calendar" />
        <field name="MinValue" />
        <field name="MaxValue" />
        <property name="Date" propertytype="System.DateTime" />
        <property name="Day" propertytype="System.Int32" />
        <property name="DayOfWeek" propertytype="System.DayOfWeek" />
        <property name="DayOfYear" propertytype="System.Int32" />
        <property name="Hour" propertytype="System.Int32" />
        <property name="Millisecond" propertytype="System.Int32" />
        <property name="Minute" propertytype="System.Int32" />
        <property name="Month" propertytype="System.Int32" />
        <property name="Now" propertytype="System.DateTime" />
        <property name="UtcNow" propertytype="System.DateTime" />
        <property name="Second" propertytype="System.Int32" />
        <property name="Ticks" propertytype="System.Int64" />
        <property name="TimeOfDay" propertytype="System.TimeSpan" />
        <property name="Today" propertytype="System.DateTime" />
        <property name="Year" propertytype="System.Int32" />
        <method name="ToString(System.IFormatProvider)" argnames="provider" returntype="System.String" />
        <method name="GetTypeCode()" argnames="" returntype="System.TypeCode" />
        <method name="ToString(System.String, System.IFormatProvider)" argnames="format, provider" returntype="System.String" />
        <method name="CompareTo(System.Object)" argnames="value" returntype="System.Int32" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="value" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Add(System.TimeSpan)" argnames="value" returntype="System.DateTime" />
        <method name="AddDays(System.Double)" argnames="value" returntype="System.DateTime" />
        <method name="AddHours(System.Double)" argnames="value" returntype="System.DateTime" />
        <method name="AddMilliseconds(System.Double)" argnames="value" returntype="System.DateTime" />
        <method name="AddMinutes(System.Double)" argnames="value" returntype="System.DateTime" />
        <method name="AddMonths(System.Int32)" argnames="months" returntype="System.DateTime" />
        <method name="AddSeconds(System.Double)" argnames="value" returntype="System.DateTime" />
        <method name="AddTicks(System.Int64)" argnames="value" returntype="System.DateTime" />
        <method name="AddYears(System.Int32)" argnames="value" returntype="System.DateTime" />
        <method name="Compare(System.DateTime, System.DateTime)" argnames="t1, t2" returntype="System.Int32" />
        <method name="DaysInMonth(System.Int32, System.Int32)" argnames="year, month" returntype="System.Int32" />
        <method name="Equals(System.DateTime, System.DateTime)" argnames="t1, t2" returntype="System.Boolean" />
        <method name="FromFileTime(System.Int64)" argnames="fileTime" returntype="System.DateTime" />
        <method name="FromOADate(System.Double)" argnames="d" returntype="System.DateTime" />
        <method name="IsLeapYear(System.Int32)" argnames="year" returntype="System.Boolean" />
        <method name="Parse(System.String)" argnames="s" returntype="System.DateTime" />
        <method name="Parse(System.String, System.IFormatProvider)" argnames="s, provider" returntype="System.DateTime" />
        <method name="Parse(System.String, System.IFormatProvider, System.Globalization.DateTimeStyles)" argnames="s, provider, styles" returntype="System.DateTime" />
        <method name="ParseExact(System.String, System.String, System.IFormatProvider)" argnames="s, format, provider" returntype="System.DateTime" />
        <method name="ParseExact(System.String, System.String, System.IFormatProvider, System.Globalization.DateTimeStyles)" argnames="s, format, provider, style" returntype="System.DateTime" />
        <method name="ParseExact(System.String, System.String[], System.IFormatProvider, System.Globalization.DateTimeStyles)" argnames="s, formats, provider, style" returntype="System.DateTime" />
        <method name="Subtract(System.DateTime)" argnames="value" returntype="System.TimeSpan" />
        <method name="Subtract(System.TimeSpan)" argnames="value" returntype="System.DateTime" />
        <method name="ToOADate()" argnames="" returntype="System.Double" />
        <method name="ToFileTime()" argnames="" returntype="System.Int64" />
        <method name="ToLocalTime()" argnames="" returntype="System.DateTime" />
        <method name="ToLongDateString()" argnames="" returntype="System.String" />
        <method name="ToLongTimeString()" argnames="" returntype="System.String" />
        <method name="ToShortDateString()" argnames="" returntype="System.String" />
        <method name="ToShortTimeString()" argnames="" returntype="System.String" />
        <method name="ToString(System.String)" argnames="format" returntype="System.String" />
        <method name="ToUniversalTime()" argnames="" returntype="System.DateTime" />
        <method name="GetDateTimeFormats()" argnames="" returntype="System.String[]" />
        <method name="GetDateTimeFormats(System.IFormatProvider)" argnames="provider" returntype="System.String[]" />
        <method name="GetDateTimeFormats(System.Char)" argnames="format" returntype="System.String[]" />
        <method name="GetDateTimeFormats(System.Char, System.IFormatProvider)" argnames="format, provider" returntype="System.String[]" />
        <operator name="op_Addition(System.DateTime, System.TimeSpan)" argnames="d, t" />
        <operator name="op_Subtraction(System.DateTime, System.TimeSpan)" argnames="d, t" />
        <operator name="op_Subtraction(System.DateTime, System.DateTime)" argnames="d1, d2" />
        <operator name="op_Equality(System.DateTime, System.DateTime)" argnames="d1, d2" />
        <operator name="op_Inequality(System.DateTime, System.DateTime)" argnames="d1, d2" />
        <operator name="op_LessThan(System.DateTime, System.DateTime)" argnames="t1, t2" />
        <operator name="op_LessThanOrEqual(System.DateTime, System.DateTime)" argnames="t1, t2" />
        <operator name="op_GreaterThan(System.DateTime, System.DateTime)" argnames="t1, t2" />
        <operator name="op_GreaterThanOrEqual(System.DateTime, System.DateTime)" argnames="t1, t2" />
    </struct>
    <struct name="ArgIterator" namespace="System">
        <constructor name="ArgIterator(System.RuntimeArgumentHandle)" argnames="arglist" />
        <constructor name="ArgIterator(System.RuntimeArgumentHandle, System.Void*)" argnames="arglist, ptr" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="o" returntype="System.Boolean" />
        <method name="GetNextArg()" argnames="" returntype="System.TypedReference" />
        <method name="GetNextArg(System.RuntimeTypeHandle)" argnames="rth" returntype="System.TypedReference" />
        <method name="End()" argnames="" returntype="System.Void" />
        <method name="GetRemainingCount()" argnames="" returntype="System.Int32" />
        <method name="GetNextArgType()" argnames="" returntype="System.RuntimeTypeHandle" />
    </struct>
    <struct name="Boolean" namespace="System">
        <field name="TrueString" />
        <field name="FalseString" />
        <method name="ToString(System.IFormatProvider)" argnames="provider" returntype="System.String" />
        <method name="GetTypeCode()" argnames="" returntype="System.TypeCode" />
        <method name="CompareTo(System.Object)" argnames="obj" returntype="System.Int32" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Boolean" />
    </struct>
    <struct name="Byte" namespace="System">
        <field name="MaxValue" />
        <field name="MinValue" />
        <method name="ToString(System.IFormatProvider)" argnames="provider" returntype="System.String" />
        <method name="GetTypeCode()" argnames="" returntype="System.TypeCode" />
        <method name="ToString(System.String, System.IFormatProvider)" argnames="format, provider" returntype="System.String" />
        <method name="CompareTo(System.Object)" argnames="value" returntype="System.Int32" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="s" returntype="System.Byte" />
        <method name="Parse(System.String, System.Globalization.NumberStyles)" argnames="s, style" returntype="System.Byte" />
        <method name="Parse(System.String, System.IFormatProvider)" argnames="s, provider" returntype="System.Byte" />
        <method name="Parse(System.String, System.Globalization.NumberStyles, System.IFormatProvider)" argnames="s, style, provider" returntype="System.Byte" />
        <method name="ToString(System.String)" argnames="format" returntype="System.String" />
    </struct>
    <struct name="Char" namespace="System">
        <field name="MaxValue" />
        <field name="MinValue" />
        <method name="ToString(System.IFormatProvider)" argnames="provider" returntype="System.String" />
        <method name="GetTypeCode()" argnames="" returntype="System.TypeCode" />
        <method name="CompareTo(System.Object)" argnames="value" returntype="System.Int32" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="ToString(System.Char)" argnames="c" returntype="System.String" />
        <method name="Parse(System.String)" argnames="s" returntype="System.Char" />
        <method name="IsDigit(System.Char)" argnames="c" returntype="System.Boolean" />
        <method name="IsLetter(System.Char)" argnames="c" returntype="System.Boolean" />
        <method name="IsWhiteSpace(System.Char)" argnames="c" returntype="System.Boolean" />
        <method name="IsUpper(System.Char)" argnames="c" returntype="System.Boolean" />
        <method name="IsLower(System.Char)" argnames="c" returntype="System.Boolean" />
        <method name="IsPunctuation(System.Char)" argnames="c" returntype="System.Boolean" />
        <method name="IsLetterOrDigit(System.Char)" argnames="c" returntype="System.Boolean" />
        <method name="ToUpper(System.Char, System.Globalization.CultureInfo)" argnames="c, culture" returntype="System.Char" />
        <method name="ToUpper(System.Char)" argnames="c" returntype="System.Char" />
        <method name="ToLower(System.Char, System.Globalization.CultureInfo)" argnames="c, culture" returntype="System.Char" />
        <method name="ToLower(System.Char)" argnames="c" returntype="System.Char" />
        <method name="IsControl(System.Char)" argnames="c" returntype="System.Boolean" />
        <method name="IsControl(System.String, System.Int32)" argnames="s, index" returntype="System.Boolean" />
        <method name="IsDigit(System.String, System.Int32)" argnames="s, index" returntype="System.Boolean" />
        <method name="IsLetter(System.String, System.Int32)" argnames="s, index" returntype="System.Boolean" />
        <method name="IsLetterOrDigit(System.String, System.Int32)" argnames="s, index" returntype="System.Boolean" />
        <method name="IsLower(System.String, System.Int32)" argnames="s, index" returntype="System.Boolean" />
        <method name="IsNumber(System.Char)" argnames="c" returntype="System.Boolean" />
        <method name="IsNumber(System.String, System.Int32)" argnames="s, index" returntype="System.Boolean" />
        <method name="IsPunctuation(System.String, System.Int32)" argnames="s, index" returntype="System.Boolean" />
        <method name="IsSeparator(System.Char)" argnames="c" returntype="System.Boolean" />
        <method name="IsSeparator(System.String, System.Int32)" argnames="s, index" returntype="System.Boolean" />
        <method name="IsSurrogate(System.Char)" argnames="c" returntype="System.Boolean" />
        <method name="IsSurrogate(System.String, System.Int32)" argnames="s, index" returntype="System.Boolean" />
        <method name="IsSymbol(System.Char)" argnames="c" returntype="System.Boolean" />
        <method name="IsSymbol(System.String, System.Int32)" argnames="s, index" returntype="System.Boolean" />
        <method name="IsUpper(System.String, System.Int32)" argnames="s, index" returntype="System.Boolean" />
        <method name="IsWhiteSpace(System.String, System.Int32)" argnames="s, index" returntype="System.Boolean" />
        <method name="GetUnicodeCategory(System.Char)" argnames="c" returntype="System.Globalization.UnicodeCategory" />
        <method name="GetUnicodeCategory(System.String, System.Int32)" argnames="s, index" returntype="System.Globalization.UnicodeCategory" />
        <method name="GetNumericValue(System.Char)" argnames="c" returntype="System.Double" />
        <method name="GetNumericValue(System.String, System.Int32)" argnames="s, index" returntype="System.Double" />
    </struct>
    <struct name="Decimal" namespace="System">
        <constructor name="Decimal(System.Int32)" argnames="value" />
        <constructor name="Decimal(System.UInt32)" argnames="value" />
        <constructor name="Decimal(System.Int64)" argnames="value" />
        <constructor name="Decimal(System.UInt64)" argnames="value" />
        <constructor name="Decimal(System.Single)" argnames="value" />
        <constructor name="Decimal(System.Double)" argnames="value" />
        <constructor name="Decimal(System.Int32[])" argnames="bits" />
        <constructor name="Decimal(System.Int32, System.Int32, System.Int32, System.Boolean, System.Byte)" argnames="lo, mid, hi, isNegative, scale" />
        <field name="Zero" />
        <field name="One" />
        <field name="MinusOne" />
        <field name="MaxValue" />
        <field name="MinValue" />
        <method name="ToString(System.IFormatProvider)" argnames="provider" returntype="System.String" />
        <method name="GetTypeCode()" argnames="" returntype="System.TypeCode" />
        <method name="CompareTo(System.Object)" argnames="value" returntype="System.Int32" />
        <method name="ToString(System.String, System.IFormatProvider)" argnames="format, provider" returntype="System.String" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="value" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="ToOACurrency(System.Decimal)" argnames="value" returntype="System.Int64" />
        <method name="FromOACurrency(System.Int64)" argnames="cy" returntype="System.Decimal" />
        <method name="Add(System.Decimal, System.Decimal)" argnames="d1, d2" returntype="System.Decimal" />
        <method name="Compare(System.Decimal, System.Decimal)" argnames="d1, d2" returntype="System.Int32" />
        <method name="Divide(System.Decimal, System.Decimal)" argnames="d1, d2" returntype="System.Decimal" />
        <method name="Equals(System.Decimal, System.Decimal)" argnames="d1, d2" returntype="System.Boolean" />
        <method name="Floor(System.Decimal)" argnames="d" returntype="System.Decimal" />
        <method name="ToString(System.String)" argnames="format" returntype="System.String" />
        <method name="Parse(System.String)" argnames="s" returntype="System.Decimal" />
        <method name="Parse(System.String, System.Globalization.NumberStyles)" argnames="s, style" returntype="System.Decimal" />
        <method name="Parse(System.String, System.IFormatProvider)" argnames="s, provider" returntype="System.Decimal" />
        <method name="Parse(System.String, System.Globalization.NumberStyles, System.IFormatProvider)" argnames="s, style, provider" returntype="System.Decimal" />
        <method name="GetBits(System.Decimal)" argnames="d" returntype="System.Int32[]" />
        <method name="Remainder(System.Decimal, System.Decimal)" argnames="d1, d2" returntype="System.Decimal" />
        <method name="Multiply(System.Decimal, System.Decimal)" argnames="d1, d2" returntype="System.Decimal" />
        <method name="Negate(System.Decimal)" argnames="d" returntype="System.Decimal" />
        <method name="Round(System.Decimal, System.Int32)" argnames="d, decimals" returntype="System.Decimal" />
        <method name="Subtract(System.Decimal, System.Decimal)" argnames="d1, d2" returntype="System.Decimal" />
        <method name="ToByte(System.Decimal)" argnames="value" returntype="System.Byte" />
        <method name="ToSByte(System.Decimal)" argnames="value" returntype="System.SByte" />
        <method name="ToInt16(System.Decimal)" argnames="value" returntype="System.Int16" />
        <method name="ToDouble(System.Decimal)" argnames="d" returntype="System.Double" />
        <method name="ToInt32(System.Decimal)" argnames="d" returntype="System.Int32" />
        <method name="ToInt64(System.Decimal)" argnames="d" returntype="System.Int64" />
        <method name="ToUInt16(System.Decimal)" argnames="value" returntype="System.UInt16" />
        <method name="ToUInt32(System.Decimal)" argnames="d" returntype="System.UInt32" />
        <method name="ToUInt64(System.Decimal)" argnames="d" returntype="System.UInt64" />
        <method name="ToSingle(System.Decimal)" argnames="d" returntype="System.Single" />
        <method name="Truncate(System.Decimal)" argnames="d" returntype="System.Decimal" />
        <operator name="op_Implicit(System.Byte)" argnames="value" />
        <operator name="op_Implicit(System.SByte)" argnames="value" />
        <operator name="op_Implicit(System.Int16)" argnames="value" />
        <operator name="op_Implicit(System.UInt16)" argnames="value" />
        <operator name="op_Implicit(System.Char)" argnames="value" />
        <operator name="op_Implicit(System.Int32)" argnames="value" />
        <operator name="op_Implicit(System.UInt32)" argnames="value" />
        <operator name="op_Implicit(System.Int64)" argnames="value" />
        <operator name="op_Implicit(System.UInt64)" argnames="value" />
        <operator name="op_Explicit(System.Single)" argnames="value" />
        <operator name="op_Explicit(System.Double)" argnames="value" />
        <operator name="op_Explicit(System.Decimal)" argnames="value" />
        <operator name="op_Explicit(System.Decimal)" argnames="value" />
        <operator name="op_Explicit(System.Decimal)" argnames="value" />
        <operator name="op_Explicit(System.Decimal)" argnames="value" />
        <operator name="op_Explicit(System.Decimal)" argnames="value" />
        <operator name="op_Explicit(System.Decimal)" argnames="value" />
        <operator name="op_Explicit(System.Decimal)" argnames="value" />
        <operator name="op_Explicit(System.Decimal)" argnames="value" />
        <operator name="op_Explicit(System.Decimal)" argnames="value" />
        <operator name="op_Explicit(System.Decimal)" argnames="value" />
        <operator name="op_Explicit(System.Decimal)" argnames="value" />
        <operator name="op_UnaryPlus(System.Decimal)" argnames="d" />
        <operator name="op_UnaryNegation(System.Decimal)" argnames="d" />
        <operator name="op_Increment(System.Decimal)" argnames="d" />
        <operator name="op_Decrement(System.Decimal)" argnames="d" />
        <operator name="op_Addition(System.Decimal, System.Decimal)" argnames="d1, d2" />
        <operator name="op_Subtraction(System.Decimal, System.Decimal)" argnames="d1, d2" />
        <operator name="op_Multiply(System.Decimal, System.Decimal)" argnames="d1, d2" />
        <operator name="op_Division(System.Decimal, System.Decimal)" argnames="d1, d2" />
        <operator name="op_Modulus(System.Decimal, System.Decimal)" argnames="d1, d2" />
        <operator name="op_Equality(System.Decimal, System.Decimal)" argnames="d1, d2" />
        <operator name="op_Inequality(System.Decimal, System.Decimal)" argnames="d1, d2" />
        <operator name="op_LessThan(System.Decimal, System.Decimal)" argnames="d1, d2" />
        <operator name="op_LessThanOrEqual(System.Decimal, System.Decimal)" argnames="d1, d2" />
        <operator name="op_GreaterThan(System.Decimal, System.Decimal)" argnames="d1, d2" />
        <operator name="op_GreaterThanOrEqual(System.Decimal, System.Decimal)" argnames="d1, d2" />
    </struct>
    <struct name="Double" namespace="System">
        <field name="MinValue" />
        <field name="MaxValue" />
        <field name="Epsilon" />
        <field name="NegativeInfinity" />
        <field name="PositiveInfinity" />
        <field name="NaN" />
        <method name="ToString(System.IFormatProvider)" argnames="provider" returntype="System.String" />
        <method name="GetTypeCode()" argnames="" returntype="System.TypeCode" />
        <method name="ToString(System.String, System.IFormatProvider)" argnames="format, provider" returntype="System.String" />
        <method name="CompareTo(System.Object)" argnames="value" returntype="System.Int32" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="IsInfinity(System.Double)" argnames="d" returntype="System.Boolean" />
        <method name="IsPositiveInfinity(System.Double)" argnames="d" returntype="System.Boolean" />
        <method name="IsNegativeInfinity(System.Double)" argnames="d" returntype="System.Boolean" />
        <method name="IsNaN(System.Double)" argnames="d" returntype="System.Boolean" />
        <method name="ToString(System.String)" argnames="format" returntype="System.String" />
        <method name="Parse(System.String)" argnames="s" returntype="System.Double" />
        <method name="Parse(System.String, System.Globalization.NumberStyles)" argnames="s, style" returntype="System.Double" />
        <method name="Parse(System.String, System.IFormatProvider)" argnames="s, provider" returntype="System.Double" />
        <method name="Parse(System.String, System.Globalization.NumberStyles, System.IFormatProvider)" argnames="s, style, provider" returntype="System.Double" />
        <method name="TryParse(System.String, System.Globalization.NumberStyles, System.IFormatProvider, System.Double&amp;)" argnames="s, style, provider, result" returntype="System.Boolean" />
    </struct>
    <struct name="Guid" namespace="System">
        <constructor name="Guid(System.Byte[])" argnames="b" />
        <constructor name="Guid(System.UInt32, System.UInt16, System.UInt16, System.Byte, System.Byte, System.Byte, System.Byte, System.Byte, System.Byte, System.Byte, System.Byte)" argnames="a, b, c, d, e, f, g, h, i, j, k" />
        <constructor name="Guid(System.String)" argnames="g" />
        <constructor name="Guid(System.Int32, System.Int16, System.Int16, System.Byte[])" argnames="a, b, c, d" />
        <constructor name="Guid(System.Int32, System.Int16, System.Int16, System.Byte, System.Byte, System.Byte, System.Byte, System.Byte, System.Byte, System.Byte, System.Byte)" argnames="a, b, c, d, e, f, g, h, i, j, k" />
        <field name="Empty" />
        <method name="CompareTo(System.Object)" argnames="value" returntype="System.Int32" />
        <method name="ToString(System.String, System.IFormatProvider)" argnames="format, provider" returntype="System.String" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="o" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="ToByteArray()" argnames="" returntype="System.Byte[]" />
        <method name="NewGuid()" argnames="" returntype="System.Guid" />
        <method name="ToString(System.String)" argnames="format" returntype="System.String" />
        <operator name="op_Equality(System.Guid, System.Guid)" argnames="a, b" />
        <operator name="op_Inequality(System.Guid, System.Guid)" argnames="a, b" />
    </struct>
    <struct name="Int16" namespace="System">
        <field name="MaxValue" />
        <field name="MinValue" />
        <method name="ToString(System.IFormatProvider)" argnames="provider" returntype="System.String" />
        <method name="GetTypeCode()" argnames="" returntype="System.TypeCode" />
        <method name="ToString(System.String, System.IFormatProvider)" argnames="format, provider" returntype="System.String" />
        <method name="CompareTo(System.Object)" argnames="value" returntype="System.Int32" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="ToString(System.String)" argnames="format" returntype="System.String" />
        <method name="Parse(System.String)" argnames="s" returntype="System.Int16" />
        <method name="Parse(System.String, System.Globalization.NumberStyles)" argnames="s, style" returntype="System.Int16" />
        <method name="Parse(System.String, System.IFormatProvider)" argnames="s, provider" returntype="System.Int16" />
        <method name="Parse(System.String, System.Globalization.NumberStyles, System.IFormatProvider)" argnames="s, style, provider" returntype="System.Int16" />
    </struct>
    <struct name="Int32" namespace="System">
        <field name="MaxValue" />
        <field name="MinValue" />
        <method name="ToString(System.IFormatProvider)" argnames="provider" returntype="System.String" />
        <method name="GetTypeCode()" argnames="" returntype="System.TypeCode" />
        <method name="ToString(System.String, System.IFormatProvider)" argnames="format, provider" returntype="System.String" />
        <method name="CompareTo(System.Object)" argnames="value" returntype="System.Int32" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="ToString(System.String)" argnames="format" returntype="System.String" />
        <method name="Parse(System.String)" argnames="s" returntype="System.Int32" />
        <method name="Parse(System.String, System.Globalization.NumberStyles)" argnames="s, style" returntype="System.Int32" />
        <method name="Parse(System.String, System.IFormatProvider)" argnames="s, provider" returntype="System.Int32" />
        <method name="Parse(System.String, System.Globalization.NumberStyles, System.IFormatProvider)" argnames="s, style, provider" returntype="System.Int32" />
    </struct>
    <struct name="Int64" namespace="System">
        <field name="MaxValue" />
        <field name="MinValue" />
        <method name="ToString(System.IFormatProvider)" argnames="provider" returntype="System.String" />
        <method name="GetTypeCode()" argnames="" returntype="System.TypeCode" />
        <method name="ToString(System.String, System.IFormatProvider)" argnames="format, provider" returntype="System.String" />
        <method name="CompareTo(System.Object)" argnames="value" returntype="System.Int32" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="ToString(System.String)" argnames="format" returntype="System.String" />
        <method name="Parse(System.String)" argnames="s" returntype="System.Int64" />
        <method name="Parse(System.String, System.Globalization.NumberStyles)" argnames="s, style" returntype="System.Int64" />
        <method name="Parse(System.String, System.IFormatProvider)" argnames="s, provider" returntype="System.Int64" />
        <method name="Parse(System.String, System.Globalization.NumberStyles, System.IFormatProvider)" argnames="s, style, provider" returntype="System.Int64" />
    </struct>
    <struct name="IntPtr" namespace="System">
        <constructor name="IntPtr(System.Int32)" argnames="value" />
        <constructor name="IntPtr(System.Int64)" argnames="value" />
        <constructor name="IntPtr(System.Void*)" argnames="value" />
        <field name="Zero" />
        <property name="Size" propertytype="System.Int32" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="ToInt32()" argnames="" returntype="System.Int32" />
        <method name="ToInt64()" argnames="" returntype="System.Int64" />
        <method name="ToPointer()" argnames="" returntype="System.Void*" />
        <operator name="op_Explicit(System.Int32)" argnames="value" />
        <operator name="op_Explicit(System.Int64)" argnames="value" />
        <operator name="op_Explicit(System.Void*)" argnames="value" />
        <operator name="op_Explicit(System.IntPtr)" argnames="value" />
        <operator name="op_Explicit(System.IntPtr)" argnames="value" />
        <operator name="op_Explicit(System.IntPtr)" argnames="value" />
        <operator name="op_Equality(System.IntPtr, System.IntPtr)" argnames="value1, value2" />
        <operator name="op_Inequality(System.IntPtr, System.IntPtr)" argnames="value1, value2" />
    </struct>
    <struct name="RuntimeArgumentHandle" namespace="System" />
    <struct name="RuntimeFieldHandle" namespace="System">
        <property name="Value" propertytype="System.IntPtr" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
    </struct>
    <struct name="RuntimeMethodHandle" namespace="System">
        <property name="Value" propertytype="System.IntPtr" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
        <method name="GetFunctionPointer()" argnames="" returntype="System.IntPtr" />
    </struct>
    <struct name="RuntimeTypeHandle" namespace="System">
        <property name="Value" propertytype="System.IntPtr" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
    </struct>
    <struct name="SByte" namespace="System">
        <field name="MaxValue" />
        <field name="MinValue" />
        <method name="ToString(System.IFormatProvider)" argnames="provider" returntype="System.String" />
        <method name="GetTypeCode()" argnames="" returntype="System.TypeCode" />
        <method name="ToString(System.String, System.IFormatProvider)" argnames="format, provider" returntype="System.String" />
        <method name="CompareTo(System.Object)" argnames="obj" returntype="System.Int32" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="ToString(System.String)" argnames="format" returntype="System.String" />
        <method name="Parse(System.String)" argnames="s" returntype="System.SByte" />
        <method name="Parse(System.String, System.Globalization.NumberStyles)" argnames="s, style" returntype="System.SByte" />
        <method name="Parse(System.String, System.IFormatProvider)" argnames="s, provider" returntype="System.SByte" />
        <method name="Parse(System.String, System.Globalization.NumberStyles, System.IFormatProvider)" argnames="s, style, provider" returntype="System.SByte" />
    </struct>
    <struct name="Single" namespace="System">
        <field name="MinValue" />
        <field name="Epsilon" />
        <field name="MaxValue" />
        <field name="PositiveInfinity" />
        <field name="NegativeInfinity" />
        <field name="NaN" />
        <method name="ToString(System.IFormatProvider)" argnames="provider" returntype="System.String" />
        <method name="GetTypeCode()" argnames="" returntype="System.TypeCode" />
        <method name="ToString(System.String, System.IFormatProvider)" argnames="format, provider" returntype="System.String" />
        <method name="CompareTo(System.Object)" argnames="value" returntype="System.Int32" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="IsInfinity(System.Single)" argnames="f" returntype="System.Boolean" />
        <method name="IsPositiveInfinity(System.Single)" argnames="f" returntype="System.Boolean" />
        <method name="IsNegativeInfinity(System.Single)" argnames="f" returntype="System.Boolean" />
        <method name="IsNaN(System.Single)" argnames="f" returntype="System.Boolean" />
        <method name="ToString(System.String)" argnames="format" returntype="System.String" />
        <method name="Parse(System.String)" argnames="s" returntype="System.Single" />
        <method name="Parse(System.String, System.Globalization.NumberStyles)" argnames="s, style" returntype="System.Single" />
        <method name="Parse(System.String, System.IFormatProvider)" argnames="s, provider" returntype="System.Single" />
        <method name="Parse(System.String, System.Globalization.NumberStyles, System.IFormatProvider)" argnames="s, style, provider" returntype="System.Single" />
    </struct>
    <struct name="TimeSpan" namespace="System">
        <constructor name="TimeSpan(System.Int64)" argnames="ticks" />
        <constructor name="TimeSpan(System.Int32, System.Int32, System.Int32)" argnames="hours, minutes, seconds" />
        <constructor name="TimeSpan(System.Int32, System.Int32, System.Int32, System.Int32)" argnames="days, hours, minutes, seconds" />
        <constructor name="TimeSpan(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" argnames="days, hours, minutes, seconds, milliseconds" />
        <field name="Zero" />
        <field name="MaxValue" />
        <field name="MinValue" />
        <field name="TicksPerMillisecond" />
        <field name="TicksPerSecond" />
        <field name="TicksPerMinute" />
        <field name="TicksPerHour" />
        <field name="TicksPerDay" />
        <property name="Ticks" propertytype="System.Int64" />
        <property name="Days" propertytype="System.Int32" />
        <property name="Hours" propertytype="System.Int32" />
        <property name="Milliseconds" propertytype="System.Int32" />
        <property name="Minutes" propertytype="System.Int32" />
        <property name="Seconds" propertytype="System.Int32" />
        <property name="TotalDays" propertytype="System.Double" />
        <property name="TotalHours" propertytype="System.Double" />
        <property name="TotalMilliseconds" propertytype="System.Double" />
        <property name="TotalMinutes" propertytype="System.Double" />
        <property name="TotalSeconds" propertytype="System.Double" />
        <method name="CompareTo(System.Object)" argnames="value" returntype="System.Int32" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="value" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Add(System.TimeSpan)" argnames="ts" returntype="System.TimeSpan" />
        <method name="Compare(System.TimeSpan, System.TimeSpan)" argnames="t1, t2" returntype="System.Int32" />
        <method name="FromDays(System.Double)" argnames="value" returntype="System.TimeSpan" />
        <method name="Duration()" argnames="" returntype="System.TimeSpan" />
        <method name="Equals(System.TimeSpan, System.TimeSpan)" argnames="t1, t2" returntype="System.Boolean" />
        <method name="FromHours(System.Double)" argnames="value" returntype="System.TimeSpan" />
        <method name="FromMilliseconds(System.Double)" argnames="value" returntype="System.TimeSpan" />
        <method name="FromMinutes(System.Double)" argnames="value" returntype="System.TimeSpan" />
        <method name="Negate()" argnames="" returntype="System.TimeSpan" />
        <method name="Parse(System.String)" argnames="s" returntype="System.TimeSpan" />
        <method name="FromSeconds(System.Double)" argnames="value" returntype="System.TimeSpan" />
        <method name="Subtract(System.TimeSpan)" argnames="ts" returntype="System.TimeSpan" />
        <method name="FromTicks(System.Int64)" argnames="value" returntype="System.TimeSpan" />
        <operator name="op_UnaryNegation(System.TimeSpan)" argnames="t" />
        <operator name="op_Subtraction(System.TimeSpan, System.TimeSpan)" argnames="t1, t2" />
        <operator name="op_UnaryPlus(System.TimeSpan)" argnames="t" />
        <operator name="op_Addition(System.TimeSpan, System.TimeSpan)" argnames="t1, t2" />
        <operator name="op_Equality(System.TimeSpan, System.TimeSpan)" argnames="t1, t2" />
        <operator name="op_Inequality(System.TimeSpan, System.TimeSpan)" argnames="t1, t2" />
        <operator name="op_LessThan(System.TimeSpan, System.TimeSpan)" argnames="t1, t2" />
        <operator name="op_LessThanOrEqual(System.TimeSpan, System.TimeSpan)" argnames="t1, t2" />
        <operator name="op_GreaterThan(System.TimeSpan, System.TimeSpan)" argnames="t1, t2" />
        <operator name="op_GreaterThanOrEqual(System.TimeSpan, System.TimeSpan)" argnames="t1, t2" />
    </struct>
    <struct name="TypedReference" namespace="System">
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="o" returntype="System.Boolean" />
        <method name="MakeTypedReference(System.Object, System.Reflection.FieldInfo[])" argnames="target, flds" returntype="System.TypedReference" />
        <method name="ToObject(System.TypedReference)" argnames="value" returntype="System.Object" />
        <method name="GetTargetType(System.TypedReference)" argnames="value" returntype="System.Type" />
        <method name="TargetTypeToken(System.TypedReference)" argnames="value" returntype="System.RuntimeTypeHandle" />
        <method name="SetTypedReference(System.TypedReference, System.Object)" argnames="target, value" returntype="System.Void" />
    </struct>
    <struct name="UInt16" namespace="System">
        <field name="MaxValue" />
        <field name="MinValue" />
        <method name="ToString(System.IFormatProvider)" argnames="provider" returntype="System.String" />
        <method name="GetTypeCode()" argnames="" returntype="System.TypeCode" />
        <method name="ToString(System.String, System.IFormatProvider)" argnames="format, provider" returntype="System.String" />
        <method name="CompareTo(System.Object)" argnames="value" returntype="System.Int32" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="ToString(System.String)" argnames="format" returntype="System.String" />
        <method name="Parse(System.String)" argnames="s" returntype="System.UInt16" />
        <method name="Parse(System.String, System.Globalization.NumberStyles)" argnames="s, style" returntype="System.UInt16" />
        <method name="Parse(System.String, System.IFormatProvider)" argnames="s, provider" returntype="System.UInt16" />
        <method name="Parse(System.String, System.Globalization.NumberStyles, System.IFormatProvider)" argnames="s, style, provider" returntype="System.UInt16" />
    </struct>
    <struct name="UInt32" namespace="System">
        <field name="MaxValue" />
        <field name="MinValue" />
        <method name="ToString(System.IFormatProvider)" argnames="provider" returntype="System.String" />
        <method name="GetTypeCode()" argnames="" returntype="System.TypeCode" />
        <method name="ToString(System.String, System.IFormatProvider)" argnames="format, provider" returntype="System.String" />
        <method name="CompareTo(System.Object)" argnames="value" returntype="System.Int32" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="ToString(System.String)" argnames="format" returntype="System.String" />
        <method name="Parse(System.String)" argnames="s" returntype="System.UInt32" />
        <method name="Parse(System.String, System.Globalization.NumberStyles)" argnames="s, style" returntype="System.UInt32" />
        <method name="Parse(System.String, System.IFormatProvider)" argnames="s, provider" returntype="System.UInt32" />
        <method name="Parse(System.String, System.Globalization.NumberStyles, System.IFormatProvider)" argnames="s, style, provider" returntype="System.UInt32" />
    </struct>
    <struct name="UInt64" namespace="System">
        <field name="MaxValue" />
        <field name="MinValue" />
        <method name="ToString(System.IFormatProvider)" argnames="provider" returntype="System.String" />
        <method name="GetTypeCode()" argnames="" returntype="System.TypeCode" />
        <method name="ToString(System.String, System.IFormatProvider)" argnames="format, provider" returntype="System.String" />
        <method name="CompareTo(System.Object)" argnames="value" returntype="System.Int32" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="ToString(System.String)" argnames="format" returntype="System.String" />
        <method name="Parse(System.String)" argnames="s" returntype="System.UInt64" />
        <method name="Parse(System.String, System.Globalization.NumberStyles)" argnames="s, style" returntype="System.UInt64" />
        <method name="Parse(System.String, System.IFormatProvider)" argnames="s, provider" returntype="System.UInt64" />
        <method name="Parse(System.String, System.Globalization.NumberStyles, System.IFormatProvider)" argnames="s, style, provider" returntype="System.UInt64" />
    </struct>
    <struct name="UIntPtr" namespace="System">
        <constructor name="UIntPtr(System.UInt32)" argnames="value" />
        <constructor name="UIntPtr(System.UInt64)" argnames="value" />
        <constructor name="UIntPtr(System.Void*)" argnames="value" />
        <field name="Zero" />
        <property name="Size" propertytype="System.Int32" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="ToUInt32()" argnames="" returntype="System.UInt32" />
        <method name="ToUInt64()" argnames="" returntype="System.UInt64" />
        <method name="ToPointer()" argnames="" returntype="System.Void*" />
        <operator name="op_Explicit(System.UInt32)" argnames="value" />
        <operator name="op_Explicit(System.UInt64)" argnames="value" />
        <operator name="op_Explicit(System.UIntPtr)" argnames="value" />
        <operator name="op_Explicit(System.UIntPtr)" argnames="value" />
        <operator name="op_Explicit(System.Void*)" argnames="value" />
        <operator name="op_Explicit(System.UIntPtr)" argnames="value" />
        <operator name="op_Equality(System.UIntPtr, System.UIntPtr)" argnames="value1, value2" />
        <operator name="op_Inequality(System.UIntPtr, System.UIntPtr)" argnames="value1, value2" />
    </struct>
    <struct name="Void" namespace="System" />
    <delegate name="MulticastDelegate" namespace="System">
        <constructor name="MulticastDelegate(System.Object, System.String)" argnames="target, method" />
        <constructor name="MulticastDelegate(System.Type, System.String)" argnames="target, method" />
        <property name="Previous" propertytype="System.MulticastDelegate" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
        <method name="RemoveImpl(System.Delegate)" argnames="value" returntype="System.Delegate" />
        <method name="CombineImpl(System.Delegate)" argnames="follow" returntype="System.Delegate" />
        <method name="GetInvocationList()" argnames="" returntype="System.Delegate[]" />
        <method name="DynamicInvokeImpl(System.Object[])" argnames="args" returntype="System.Object" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <operator name="op_Equality(System.MulticastDelegate, System.MulticastDelegate)" argnames="d1, d2" />
        <operator name="op_Inequality(System.MulticastDelegate, System.MulticastDelegate)" argnames="d1, d2" />
    </delegate>
    <delegate name="ResolveEventHandler" namespace="System">
        <constructor name="ResolveEventHandler(System.Object, System.IntPtr)" argnames="object, method" />
        <method name="EndInvoke(System.IAsyncResult)" argnames="result" returntype="System.Reflection.Assembly" />
        <method name="BeginInvoke(System.Object, System.ResolveEventArgs, System.AsyncCallback, System.Object)" argnames="sender, args, callback, object" returntype="System.IAsyncResult" />
        <method name="Invoke(System.Object, System.ResolveEventArgs)" argnames="sender, args" returntype="System.Reflection.Assembly" />
    </delegate>
    <delegate name="AssemblyLoadEventHandler" namespace="System">
        <constructor name="AssemblyLoadEventHandler(System.Object, System.IntPtr)" argnames="object, method" />
        <method name="EndInvoke(System.IAsyncResult)" argnames="result" returntype="System.Void" />
        <method name="BeginInvoke(System.Object, System.AssemblyLoadEventArgs, System.AsyncCallback, System.Object)" argnames="sender, args, callback, object" returntype="System.IAsyncResult" />
        <method name="Invoke(System.Object, System.AssemblyLoadEventArgs)" argnames="sender, args" returntype="System.Void" />
    </delegate>
    <delegate name="CrossAppDomainDelegate" namespace="System">
        <constructor name="CrossAppDomainDelegate(System.Object, System.IntPtr)" argnames="object, method" />
        <method name="EndInvoke(System.IAsyncResult)" argnames="result" returntype="System.Void" />
        <method name="BeginInvoke(System.AsyncCallback, System.Object)" argnames="callback, object" returntype="System.IAsyncResult" />
        <method name="Invoke()" argnames="" returntype="System.Void" />
    </delegate>
    <delegate name="AsyncCallback" namespace="System">
        <constructor name="AsyncCallback(System.Object, System.IntPtr)" argnames="object, method" />
        <method name="EndInvoke(System.IAsyncResult)" argnames="result" returntype="System.Void" />
        <method name="BeginInvoke(System.IAsyncResult, System.AsyncCallback, System.Object)" argnames="ar, callback, object" returntype="System.IAsyncResult" />
        <method name="Invoke(System.IAsyncResult)" argnames="ar" returntype="System.Void" />
    </delegate>
    <delegate name="EventHandler" namespace="System">
        <constructor name="EventHandler(System.Object, System.IntPtr)" argnames="object, method" />
        <method name="EndInvoke(System.IAsyncResult)" argnames="result" returntype="System.Void" />
        <method name="BeginInvoke(System.Object, System.EventArgs, System.AsyncCallback, System.Object)" argnames="sender, e, callback, object" returntype="System.IAsyncResult" />
        <method name="Invoke(System.Object, System.EventArgs)" argnames="sender, e" returntype="System.Void" />
    </delegate>
    <delegate name="UnhandledExceptionEventHandler" namespace="System">
        <constructor name="UnhandledExceptionEventHandler(System.Object, System.IntPtr)" argnames="object, method" />
        <method name="EndInvoke(System.IAsyncResult)" argnames="result" returntype="System.Void" />
        <method name="BeginInvoke(System.Object, System.UnhandledExceptionEventArgs, System.AsyncCallback, System.Object)" argnames="sender, e, callback, object" returntype="System.IAsyncResult" />
        <method name="Invoke(System.Object, System.UnhandledExceptionEventArgs)" argnames="sender, e" returntype="System.Void" />
    </delegate>
    <enum name="LoaderOptimization" namespace="System">
        <field name="NotSpecified" />
        <field name="SingleDomain" />
        <field name="MultiDomain" />
        <field name="MultiDomainHost" />
    </enum>
    <enum name="AttributeTargets" namespace="System">
        <field name="Assembly" />
        <field name="Module" />
        <field name="Class" />
        <field name="Struct" />
        <field name="Enum" />
        <field name="Constructor" />
        <field name="Method" />
        <field name="Property" />
        <field name="Field" />
        <field name="Event" />
        <field name="Interface" />
        <field name="Parameter" />
        <field name="Delegate" />
        <field name="ReturnValue" />
        <field name="All" />
    </enum>
    <enum name="DayOfWeek" namespace="System">
        <field name="Sunday" />
        <field name="Monday" />
        <field name="Tuesday" />
        <field name="Wednesday" />
        <field name="Thursday" />
        <field name="Friday" />
        <field name="Saturday" />
    </enum>
    <enum name="SpecialFolder" namespace="System">
        <field name="ApplicationData" />
        <field name="CommonApplicationData" />
        <field name="LocalApplicationData" />
        <field name="Cookies" />
        <field name="Favorites" />
        <field name="History" />
        <field name="InternetCache" />
        <field name="Programs" />
        <field name="Recent" />
        <field name="SendTo" />
        <field name="StartMenu" />
        <field name="Startup" />
        <field name="System" />
        <field name="Templates" />
        <field name="DesktopDirectory" />
        <field name="Personal" />
        <field name="ProgramFiles" />
        <field name="CommonProgramFiles" />
    </enum>
    <enum name="PlatformID" namespace="System">
        <field name="Win32S" />
        <field name="Win32Windows" />
        <field name="Win32NT" />
    </enum>
    <enum name="TypeCode" namespace="System">
        <field name="Empty" />
        <field name="Object" />
        <field name="DBNull" />
        <field name="Boolean" />
        <field name="Char" />
        <field name="SByte" />
        <field name="Byte" />
        <field name="Int16" />
        <field name="UInt16" />
        <field name="Int32" />
        <field name="UInt32" />
        <field name="Int64" />
        <field name="UInt64" />
        <field name="Single" />
        <field name="Double" />
        <field name="Decimal" />
        <field name="DateTime" />
        <field name="String" />
    </enum>
    <class name="ArrayList" namespace="System.Collections">
        <constructor name="ArrayList()" argnames="" />
        <constructor name="ArrayList(System.Int32)" argnames="capacity" />
        <constructor name="ArrayList(System.Collections.ICollection)" argnames="c" />
        <property name="Capacity" propertytype="System.Int32" />
        <property name="Count" propertytype="System.Int32" />
        <property name="IsFixedSize" propertytype="System.Boolean" />
        <property name="IsReadOnly" propertytype="System.Boolean" />
        <property name="IsSynchronized" propertytype="System.Boolean" />
        <property name="SyncRoot" propertytype="System.Object" />
        <property name="Item" propertytype="System.Object" />
        <method name="Clone()" argnames="" returntype="System.Object" />
        <method name="GetEnumerator()" argnames="" returntype="System.Collections.IEnumerator" />
        <method name="CopyTo(System.Array, System.Int32)" argnames="array, arrayIndex" returntype="System.Void" />
        <method name="RemoveAt(System.Int32)" argnames="index" returntype="System.Void" />
        <method name="Remove(System.Object)" argnames="obj" returntype="System.Void" />
        <method name="Insert(System.Int32, System.Object)" argnames="index, value" returntype="System.Void" />
        <method name="IndexOf(System.Object)" argnames="value" returntype="System.Int32" />
        <method name="Clear()" argnames="" returntype="System.Void" />
        <method name="Contains(System.Object)" argnames="item" returntype="System.Boolean" />
        <method name="Add(System.Object)" argnames="value" returntype="System.Int32" />
        <method name="TrimToSize()" argnames="" returntype="System.Void" />
        <method name="ToArray(System.Type)" argnames="type" returntype="System.Array" />
        <method name="ToArray()" argnames="" returntype="System.Object[]" />
        <method name="Sort(System.Int32, System.Int32, System.Collections.IComparer)" argnames="index, count, comparer" returntype="System.Void" />
        <method name="Sort(System.Collections.IComparer)" argnames="comparer" returntype="System.Void" />
        <method name="Sort()" argnames="" returntype="System.Void" />
        <method name="GetRange(System.Int32, System.Int32)" argnames="index, count" returntype="System.Collections.ArrayList" />
        <method name="SetRange(System.Int32, System.Collections.ICollection)" argnames="index, c" returntype="System.Void" />
        <method name="Reverse(System.Int32, System.Int32)" argnames="index, count" returntype="System.Void" />
        <method name="Reverse()" argnames="" returntype="System.Void" />
        <method name="RemoveRange(System.Int32, System.Int32)" argnames="index, count" returntype="System.Void" />
        <method name="LastIndexOf(System.Object, System.Int32, System.Int32)" argnames="value, startIndex, count" returntype="System.Int32" />
        <method name="LastIndexOf(System.Object, System.Int32)" argnames="value, startIndex" returntype="System.Int32" />
        <method name="LastIndexOf(System.Object)" argnames="value" returntype="System.Int32" />
        <method name="InsertRange(System.Int32, System.Collections.ICollection)" argnames="index, c" returntype="System.Void" />
        <method name="IndexOf(System.Object, System.Int32, System.Int32)" argnames="value, startIndex, count" returntype="System.Int32" />
        <method name="IndexOf(System.Object, System.Int32)" argnames="value, startIndex" returntype="System.Int32" />
        <method name="GetEnumerator(System.Int32, System.Int32)" argnames="index, count" returntype="System.Collections.IEnumerator" />
        <method name="CopyTo(System.Int32, System.Array, System.Int32, System.Int32)" argnames="index, array, arrayIndex, count" returntype="System.Void" />
        <method name="CopyTo(System.Array)" argnames="array" returntype="System.Void" />
        <method name="BinarySearch(System.Object, System.Collections.IComparer)" argnames="value, comparer" returntype="System.Int32" />
        <method name="BinarySearch(System.Object)" argnames="value" returntype="System.Int32" />
        <method name="BinarySearch(System.Int32, System.Int32, System.Object, System.Collections.IComparer)" argnames="index, count, value, comparer" returntype="System.Int32" />
        <method name="AddRange(System.Collections.ICollection)" argnames="c" returntype="System.Void" />
        <method name="Adapter(System.Collections.IList)" argnames="list" returntype="System.Collections.ArrayList" />
        <method name="FixedSize(System.Collections.IList)" argnames="list" returntype="System.Collections.IList" />
        <method name="FixedSize(System.Collections.ArrayList)" argnames="list" returntype="System.Collections.ArrayList" />
        <method name="ReadOnly(System.Collections.IList)" argnames="list" returntype="System.Collections.IList" />
        <method name="ReadOnly(System.Collections.ArrayList)" argnames="list" returntype="System.Collections.ArrayList" />
        <method name="Repeat(System.Object, System.Int32)" argnames="value, count" returntype="System.Collections.ArrayList" />
        <method name="Synchronized(System.Collections.IList)" argnames="list" returntype="System.Collections.IList" />
        <method name="Synchronized(System.Collections.ArrayList)" argnames="list" returntype="System.Collections.ArrayList" />
    </class>
    <class name="BitArray" namespace="System.Collections">
        <constructor name="BitArray(System.Int32)" argnames="length" />
        <constructor name="BitArray(System.Int32, System.Boolean)" argnames="length, defaultValue" />
        <constructor name="BitArray(System.Byte[])" argnames="bytes" />
        <constructor name="BitArray(System.Boolean[])" argnames="values" />
        <constructor name="BitArray(System.Int32[])" argnames="values" />
        <constructor name="BitArray(System.Collections.BitArray)" argnames="bits" />
        <property name="Item" propertytype="System.Boolean" />
        <property name="Length" propertytype="System.Int32" />
        <property name="Count" propertytype="System.Int32" />
        <property name="SyncRoot" propertytype="System.Object" />
        <property name="IsReadOnly" propertytype="System.Boolean" />
        <property name="IsSynchronized" propertytype="System.Boolean" />
        <method name="Clone()" argnames="" returntype="System.Object" />
        <method name="GetEnumerator()" argnames="" returntype="System.Collections.IEnumerator" />
        <method name="CopyTo(System.Array, System.Int32)" argnames="array, index" returntype="System.Void" />
        <method name="Get(System.Int32)" argnames="index" returntype="System.Boolean" />
        <method name="Set(System.Int32, System.Boolean)" argnames="index, value" returntype="System.Void" />
        <method name="SetAll(System.Boolean)" argnames="value" returntype="System.Void" />
        <method name="And(System.Collections.BitArray)" argnames="value" returntype="System.Collections.BitArray" />
        <method name="Or(System.Collections.BitArray)" argnames="value" returntype="System.Collections.BitArray" />
        <method name="Xor(System.Collections.BitArray)" argnames="value" returntype="System.Collections.BitArray" />
        <method name="Not()" argnames="" returntype="System.Collections.BitArray" />
    </class>
    <class name="CaseInsensitiveComparer" namespace="System.Collections">
        <constructor name="CaseInsensitiveComparer()" argnames="" />
        <constructor name="CaseInsensitiveComparer(System.Globalization.CultureInfo)" argnames="culture" />
        <property name="Default" propertytype="System.Collections.CaseInsensitiveComparer" />
        <method name="Compare(System.Object, System.Object)" argnames="a, b" returntype="System.Int32" />
    </class>
    <class name="CaseInsensitiveHashCodeProvider" namespace="System.Collections">
        <constructor name="CaseInsensitiveHashCodeProvider()" argnames="" />
        <constructor name="CaseInsensitiveHashCodeProvider(System.Globalization.CultureInfo)" argnames="culture" />
        <property name="Default" propertytype="System.Collections.CaseInsensitiveHashCodeProvider" />
        <method name="GetHashCode(System.Object)" argnames="obj" returntype="System.Int32" />
    </class>
    <class name="CollectionBase" namespace="System.Collections">
        <constructor name="CollectionBase()" argnames="" />
        <property name="InnerList" propertytype="System.Collections.ArrayList" />
        <property name="List" propertytype="System.Collections.IList" />
        <property name="Count" propertytype="System.Int32" />
        <method name="GetEnumerator()" argnames="" returntype="System.Collections.IEnumerator" />
        <method name="RemoveAt(System.Int32)" argnames="index" returntype="System.Void" />
        <method name="Clear()" argnames="" returntype="System.Void" />
        <method name="OnRemoveComplete(System.Int32, System.Object)" argnames="index, value" returntype="System.Void" />
        <method name="OnClearComplete()" argnames="" returntype="System.Void" />
        <method name="OnInsertComplete(System.Int32, System.Object)" argnames="index, value" returntype="System.Void" />
        <method name="OnSetComplete(System.Int32, System.Object, System.Object)" argnames="index, oldValue, newValue" returntype="System.Void" />
        <method name="OnValidate(System.Object)" argnames="value" returntype="System.Void" />
        <method name="OnRemove(System.Int32, System.Object)" argnames="index, value" returntype="System.Void" />
        <method name="OnClear()" argnames="" returntype="System.Void" />
        <method name="OnInsert(System.Int32, System.Object)" argnames="index, value" returntype="System.Void" />
        <method name="OnSet(System.Int32, System.Object, System.Object)" argnames="index, oldValue, newValue" returntype="System.Void" />
    </class>
    <class name="Comparer" namespace="System.Collections">
        <field name="Default" />
        <method name="Compare(System.Object, System.Object)" argnames="a, b" returntype="System.Int32" />
    </class>
    <class name="DictionaryBase" namespace="System.Collections">
        <constructor name="DictionaryBase()" argnames="" />
        <property name="InnerHashtable" propertytype="System.Collections.Hashtable" />
        <property name="Dictionary" propertytype="System.Collections.IDictionary" />
        <property name="Count" propertytype="System.Int32" />
        <method name="CopyTo(System.Array, System.Int32)" argnames="array, index" returntype="System.Void" />
        <method name="GetEnumerator()" argnames="" returntype="System.Collections.IDictionaryEnumerator" />
        <method name="Clear()" argnames="" returntype="System.Void" />
        <method name="OnRemoveComplete(System.Object, System.Object)" argnames="key, value" returntype="System.Void" />
        <method name="OnClearComplete()" argnames="" returntype="System.Void" />
        <method name="OnInsertComplete(System.Object, System.Object)" argnames="key, value" returntype="System.Void" />
        <method name="OnSetComplete(System.Object, System.Object, System.Object)" argnames="key, oldValue, newValue" returntype="System.Void" />
        <method name="OnValidate(System.Object, System.Object)" argnames="key, value" returntype="System.Void" />
        <method name="OnRemove(System.Object, System.Object)" argnames="key, value" returntype="System.Void" />
        <method name="OnClear()" argnames="" returntype="System.Void" />
        <method name="OnInsert(System.Object, System.Object)" argnames="key, value" returntype="System.Void" />
        <method name="OnSet(System.Object, System.Object, System.Object)" argnames="key, oldValue, newValue" returntype="System.Void" />
        <method name="OnGet(System.Object, System.Object)" argnames="key, currentValue" returntype="System.Object" />
    </class>
    <class name="Hashtable" namespace="System.Collections">
        <constructor name="Hashtable()" argnames="" />
        <constructor name="Hashtable(System.Int32)" argnames="capacity" />
        <constructor name="Hashtable(System.Int32, System.Single)" argnames="capacity, loadFactor" />
        <constructor name="Hashtable(System.Int32, System.Single, System.Collections.IHashCodeProvider, System.Collections.IComparer)" argnames="capacity, loadFactor, hcp, comparer" />
        <constructor name="Hashtable(System.Collections.IHashCodeProvider, System.Collections.IComparer)" argnames="hcp, comparer" />
        <constructor name="Hashtable(System.Int32, System.Collections.IHashCodeProvider, System.Collections.IComparer)" argnames="capacity, hcp, comparer" />
        <constructor name="Hashtable(System.Collections.IDictionary)" argnames="d" />
        <constructor name="Hashtable(System.Collections.IDictionary, System.Single)" argnames="d, loadFactor" />
        <constructor name="Hashtable(System.Collections.IDictionary, System.Collections.IHashCodeProvider, System.Collections.IComparer)" argnames="d, hcp, comparer" />
        <constructor name="Hashtable(System.Collections.IDictionary, System.Single, System.Collections.IHashCodeProvider, System.Collections.IComparer)" argnames="d, loadFactor, hcp, comparer" />
        <constructor name="Hashtable(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
        <property name="hcp" propertytype="System.Collections.IHashCodeProvider" />
        <property name="comparer" propertytype="System.Collections.IComparer" />
        <property name="Item" propertytype="System.Object" />
        <property name="IsReadOnly" propertytype="System.Boolean" />
        <property name="IsFixedSize" propertytype="System.Boolean" />
        <property name="IsSynchronized" propertytype="System.Boolean" />
        <property name="Keys" propertytype="System.Collections.ICollection" />
        <property name="Values" propertytype="System.Collections.ICollection" />
        <property name="SyncRoot" propertytype="System.Object" />
        <property name="Count" propertytype="System.Int32" />
        <method name="Clone()" argnames="" returntype="System.Object" />
        <method name="OnDeserialization(System.Object)" argnames="sender" returntype="System.Void" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
        <method name="CopyTo(System.Array, System.Int32)" argnames="array, arrayIndex" returntype="System.Void" />
        <method name="Remove(System.Object)" argnames="key" returntype="System.Void" />
        <method name="GetEnumerator()" argnames="" returntype="System.Collections.IDictionaryEnumerator" />
        <method name="Clear()" argnames="" returntype="System.Void" />
        <method name="Add(System.Object, System.Object)" argnames="key, value" returntype="System.Void" />
        <method name="Contains(System.Object)" argnames="key" returntype="System.Boolean" />
        <method name="KeyEquals(System.Object, System.Object)" argnames="item, key" returntype="System.Boolean" />
        <method name="GetHash(System.Object)" argnames="key" returntype="System.Int32" />
        <method name="ContainsValue(System.Object)" argnames="value" returntype="System.Boolean" />
        <method name="ContainsKey(System.Object)" argnames="key" returntype="System.Boolean" />
        <method name="Synchronized(System.Collections.Hashtable)" argnames="table" returntype="System.Collections.Hashtable" />
    </class>
    <class name="Queue" namespace="System.Collections">
        <constructor name="Queue()" argnames="" />
        <constructor name="Queue(System.Int32)" argnames="capacity" />
        <constructor name="Queue(System.Int32, System.Single)" argnames="capacity, growFactor" />
        <constructor name="Queue(System.Collections.ICollection)" argnames="col" />
        <property name="Count" propertytype="System.Int32" />
        <property name="IsSynchronized" propertytype="System.Boolean" />
        <property name="SyncRoot" propertytype="System.Object" />
        <method name="Clone()" argnames="" returntype="System.Object" />
        <method name="GetEnumerator()" argnames="" returntype="System.Collections.IEnumerator" />
        <method name="CopyTo(System.Array, System.Int32)" argnames="array, index" returntype="System.Void" />
        <method name="TrimToSize()" argnames="" returntype="System.Void" />
        <method name="ToArray()" argnames="" returntype="System.Object[]" />
        <method name="Contains(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="Peek()" argnames="" returntype="System.Object" />
        <method name="Dequeue()" argnames="" returntype="System.Object" />
        <method name="Enqueue(System.Object)" argnames="obj" returntype="System.Void" />
        <method name="Clear()" argnames="" returntype="System.Void" />
        <method name="Synchronized(System.Collections.Queue)" argnames="queue" returntype="System.Collections.Queue" />
    </class>
    <class name="ReadOnlyCollectionBase" namespace="System.Collections">
        <constructor name="ReadOnlyCollectionBase()" argnames="" />
        <property name="InnerList" propertytype="System.Collections.ArrayList" />
        <property name="Count" propertytype="System.Int32" />
        <method name="GetEnumerator()" argnames="" returntype="System.Collections.IEnumerator" />
    </class>
    <class name="SortedList" namespace="System.Collections">
        <constructor name="SortedList()" argnames="" />
        <constructor name="SortedList(System.Int32)" argnames="initialCapacity" />
        <constructor name="SortedList(System.Collections.IComparer)" argnames="comparer" />
        <constructor name="SortedList(System.Collections.IComparer, System.Int32)" argnames="comparer, capacity" />
        <constructor name="SortedList(System.Collections.IDictionary)" argnames="d" />
        <constructor name="SortedList(System.Collections.IDictionary, System.Collections.IComparer)" argnames="d, comparer" />
        <property name="Capacity" propertytype="System.Int32" />
        <property name="Count" propertytype="System.Int32" />
        <property name="Keys" propertytype="System.Collections.ICollection" />
        <property name="Values" propertytype="System.Collections.ICollection" />
        <property name="IsReadOnly" propertytype="System.Boolean" />
        <property name="IsFixedSize" propertytype="System.Boolean" />
        <property name="IsSynchronized" propertytype="System.Boolean" />
        <property name="SyncRoot" propertytype="System.Object" />
        <property name="Item" propertytype="System.Object" />
        <method name="Clone()" argnames="" returntype="System.Object" />
        <method name="CopyTo(System.Array, System.Int32)" argnames="array, arrayIndex" returntype="System.Void" />
        <method name="Remove(System.Object)" argnames="key" returntype="System.Void" />
        <method name="GetEnumerator()" argnames="" returntype="System.Collections.IDictionaryEnumerator" />
        <method name="Clear()" argnames="" returntype="System.Void" />
        <method name="Add(System.Object, System.Object)" argnames="key, value" returntype="System.Void" />
        <method name="Contains(System.Object)" argnames="key" returntype="System.Boolean" />
        <method name="TrimToSize()" argnames="" returntype="System.Void" />
        <method name="SetByIndex(System.Int32, System.Object)" argnames="index, value" returntype="System.Void" />
        <method name="RemoveAt(System.Int32)" argnames="index" returntype="System.Void" />
        <method name="IndexOfValue(System.Object)" argnames="value" returntype="System.Int32" />
        <method name="IndexOfKey(System.Object)" argnames="key" returntype="System.Int32" />
        <method name="GetValueList()" argnames="" returntype="System.Collections.IList" />
        <method name="GetKeyList()" argnames="" returntype="System.Collections.IList" />
        <method name="GetKey(System.Int32)" argnames="index" returntype="System.Object" />
        <method name="GetByIndex(System.Int32)" argnames="index" returntype="System.Object" />
        <method name="ContainsValue(System.Object)" argnames="value" returntype="System.Boolean" />
        <method name="ContainsKey(System.Object)" argnames="key" returntype="System.Boolean" />
        <method name="Synchronized(System.Collections.SortedList)" argnames="list" returntype="System.Collections.SortedList" />
    </class>
    <class name="Stack" namespace="System.Collections">
        <constructor name="Stack()" argnames="" />
        <constructor name="Stack(System.Int32)" argnames="initialCapacity" />
        <constructor name="Stack(System.Collections.ICollection)" argnames="col" />
        <property name="Count" propertytype="System.Int32" />
        <property name="IsSynchronized" propertytype="System.Boolean" />
        <property name="SyncRoot" propertytype="System.Object" />
        <method name="Clone()" argnames="" returntype="System.Object" />
        <method name="GetEnumerator()" argnames="" returntype="System.Collections.IEnumerator" />
        <method name="CopyTo(System.Array, System.Int32)" argnames="array, index" returntype="System.Void" />
        <method name="ToArray()" argnames="" returntype="System.Object[]" />
        <method name="Push(System.Object)" argnames="obj" returntype="System.Void" />
        <method name="Pop()" argnames="" returntype="System.Object" />
        <method name="Peek()" argnames="" returntype="System.Object" />
        <method name="Contains(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="Clear()" argnames="" returntype="System.Void" />
        <method name="Synchronized(System.Collections.Stack)" argnames="stack" returntype="System.Collections.Stack" />
    </class>
    <interface name="IEnumerable" namespace="System.Collections">
        <method name="GetEnumerator()" argnames="" returntype="System.Collections.IEnumerator" />
    </interface>
    <interface name="ICollection" namespace="System.Collections">
        <property name="Count" propertytype="System.Int32" />
        <property name="SyncRoot" propertytype="System.Object" />
        <property name="IsSynchronized" propertytype="System.Boolean" />
        <method name="CopyTo(System.Array, System.Int32)" argnames="array, index" returntype="System.Void" />
    </interface>
    <interface name="IList" namespace="System.Collections">
        <property name="Item" propertytype="System.Object" />
        <property name="IsReadOnly" propertytype="System.Boolean" />
        <property name="IsFixedSize" propertytype="System.Boolean" />
        <method name="RemoveAt(System.Int32)" argnames="index" returntype="System.Void" />
        <method name="Remove(System.Object)" argnames="value" returntype="System.Void" />
        <method name="Insert(System.Int32, System.Object)" argnames="index, value" returntype="System.Void" />
        <method name="IndexOf(System.Object)" argnames="value" returntype="System.Int32" />
        <method name="Clear()" argnames="" returntype="System.Void" />
        <method name="Contains(System.Object)" argnames="value" returntype="System.Boolean" />
        <method name="Add(System.Object)" argnames="value" returntype="System.Int32" />
    </interface>
    <interface name="IEnumerator" namespace="System.Collections">
        <property name="Current" propertytype="System.Object" />
        <method name="Reset()" argnames="" returntype="System.Void" />
        <method name="MoveNext()" argnames="" returntype="System.Boolean" />
    </interface>
    <interface name="IComparer" namespace="System.Collections">
        <method name="Compare(System.Object, System.Object)" argnames="x, y" returntype="System.Int32" />
    </interface>
    <interface name="IHashCodeProvider" namespace="System.Collections">
        <method name="GetHashCode(System.Object)" argnames="obj" returntype="System.Int32" />
    </interface>
    <interface name="IDictionary" namespace="System.Collections">
        <property name="Item" propertytype="System.Object" />
        <property name="Keys" propertytype="System.Collections.ICollection" />
        <property name="Values" propertytype="System.Collections.ICollection" />
        <property name="IsReadOnly" propertytype="System.Boolean" />
        <property name="IsFixedSize" propertytype="System.Boolean" />
        <method name="Remove(System.Object)" argnames="key" returntype="System.Void" />
        <method name="GetEnumerator()" argnames="" returntype="System.Collections.IDictionaryEnumerator" />
        <method name="Clear()" argnames="" returntype="System.Void" />
        <method name="Add(System.Object, System.Object)" argnames="key, value" returntype="System.Void" />
        <method name="Contains(System.Object)" argnames="key" returntype="System.Boolean" />
    </interface>
    <interface name="IDictionaryEnumerator" namespace="System.Collections">
        <property name="Key" propertytype="System.Object" />
        <property name="Value" propertytype="System.Object" />
        <property name="Entry" propertytype="System.Collections.DictionaryEntry" />
    </interface>
    <struct name="DictionaryEntry" namespace="System.Collections">
        <constructor name="DictionaryEntry(System.Object, System.Object)" argnames="key, value" />
        <property name="Key" propertytype="System.Object" />
        <property name="Value" propertytype="System.Object" />
    </struct>
    <class name="StringBuilder" namespace="System.Text">
        <constructor name="StringBuilder()" argnames="" />
        <constructor name="StringBuilder(System.Int32)" argnames="capacity" />
        <constructor name="StringBuilder(System.String)" argnames="value" />
        <constructor name="StringBuilder(System.String, System.Int32)" argnames="value, capacity" />
        <constructor name="StringBuilder(System.String, System.Int32, System.Int32, System.Int32)" argnames="value, startIndex, length, capacity" />
        <constructor name="StringBuilder(System.Int32, System.Int32)" argnames="capacity, maxCapacity" />
        <property name="Capacity" propertytype="System.Int32" />
        <property name="MaxCapacity" propertytype="System.Int32" />
        <property name="Length" propertytype="System.Int32" />
        <property name="Chars" propertytype="System.Char" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="EnsureCapacity(System.Int32)" argnames="capacity" returntype="System.Int32" />
        <method name="ToString(System.Int32, System.Int32)" argnames="startIndex, length" returntype="System.String" />
        <method name="Append(System.Char, System.Int32)" argnames="value, repeatCount" returntype="System.Text.StringBuilder" />
        <method name="Append(System.Char[], System.Int32, System.Int32)" argnames="value, startIndex, charCount" returntype="System.Text.StringBuilder" />
        <method name="Append(System.String)" argnames="value" returntype="System.Text.StringBuilder" />
        <method name="Append(System.String, System.Int32, System.Int32)" argnames="value, startIndex, count" returntype="System.Text.StringBuilder" />
        <method name="Insert(System.Int32, System.String, System.Int32)" argnames="index, value, count" returntype="System.Text.StringBuilder" />
        <method name="Remove(System.Int32, System.Int32)" argnames="startIndex, length" returntype="System.Text.StringBuilder" />
        <method name="Append(System.Boolean)" argnames="value" returntype="System.Text.StringBuilder" />
        <method name="Append(System.SByte)" argnames="value" returntype="System.Text.StringBuilder" />
        <method name="Append(System.Byte)" argnames="value" returntype="System.Text.StringBuilder" />
        <method name="Append(System.Char)" argnames="value" returntype="System.Text.StringBuilder" />
        <method name="Append(System.Int16)" argnames="value" returntype="System.Text.StringBuilder" />
        <method name="Append(System.Int32)" argnames="value" returntype="System.Text.StringBuilder" />
        <method name="Append(System.Int64)" argnames="value" returntype="System.Text.StringBuilder" />
        <method name="Append(System.Single)" argnames="value" returntype="System.Text.StringBuilder" />
        <method name="Append(System.Double)" argnames="value" returntype="System.Text.StringBuilder" />
        <method name="Append(System.Decimal)" argnames="value" returntype="System.Text.StringBuilder" />
        <method name="Append(System.UInt16)" argnames="value" returntype="System.Text.StringBuilder" />
        <method name="Append(System.UInt32)" argnames="value" returntype="System.Text.StringBuilder" />
        <method name="Append(System.UInt64)" argnames="value" returntype="System.Text.StringBuilder" />
        <method name="Append(System.Object)" argnames="value" returntype="System.Text.StringBuilder" />
        <method name="Append(System.Char[])" argnames="value" returntype="System.Text.StringBuilder" />
        <method name="Insert(System.Int32, System.String)" argnames="index, value" returntype="System.Text.StringBuilder" />
        <method name="Insert(System.Int32, System.Boolean)" argnames="index, value" returntype="System.Text.StringBuilder" />
        <method name="Insert(System.Int32, System.SByte)" argnames="index, value" returntype="System.Text.StringBuilder" />
        <method name="Insert(System.Int32, System.Byte)" argnames="index, value" returntype="System.Text.StringBuilder" />
        <method name="Insert(System.Int32, System.Int16)" argnames="index, value" returntype="System.Text.StringBuilder" />
        <method name="Insert(System.Int32, System.Char)" argnames="index, value" returntype="System.Text.StringBuilder" />
        <method name="Insert(System.Int32, System.Char[])" argnames="index, value" returntype="System.Text.StringBuilder" />
        <method name="Insert(System.Int32, System.Char[], System.Int32, System.Int32)" argnames="index, value, startIndex, charCount" returntype="System.Text.StringBuilder" />
        <method name="Insert(System.Int32, System.Int32)" argnames="index, value" returntype="System.Text.StringBuilder" />
        <method name="Insert(System.Int32, System.Int64)" argnames="index, value" returntype="System.Text.StringBuilder" />
        <method name="Insert(System.Int32, System.Single)" argnames="index, value" returntype="System.Text.StringBuilder" />
        <method name="Insert(System.Int32, System.Double)" argnames="index, value" returntype="System.Text.StringBuilder" />
        <method name="Insert(System.Int32, System.Decimal)" argnames="index, value" returntype="System.Text.StringBuilder" />
        <method name="Insert(System.Int32, System.UInt16)" argnames="index, value" returntype="System.Text.StringBuilder" />
        <method name="Insert(System.Int32, System.UInt32)" argnames="index, value" returntype="System.Text.StringBuilder" />
        <method name="Insert(System.Int32, System.UInt64)" argnames="index, value" returntype="System.Text.StringBuilder" />
        <method name="Insert(System.Int32, System.Object)" argnames="index, value" returntype="System.Text.StringBuilder" />
        <method name="AppendFormat(System.String, System.Object)" argnames="format, arg0" returntype="System.Text.StringBuilder" />
        <method name="AppendFormat(System.String, System.Object, System.Object)" argnames="format, arg0, arg1" returntype="System.Text.StringBuilder" />
        <method name="AppendFormat(System.String, System.Object, System.Object, System.Object)" argnames="format, arg0, arg1, arg2" returntype="System.Text.StringBuilder" />
        <method name="AppendFormat(System.String, System.Object[])" argnames="format, args" returntype="System.Text.StringBuilder" />
        <method name="AppendFormat(System.IFormatProvider, System.String, System.Object[])" argnames="provider, format, args" returntype="System.Text.StringBuilder" />
        <method name="Replace(System.String, System.String)" argnames="oldValue, newValue" returntype="System.Text.StringBuilder" />
        <method name="Replace(System.String, System.String, System.Int32, System.Int32)" argnames="oldValue, newValue, startIndex, count" returntype="System.Text.StringBuilder" />
        <method name="Equals(System.Text.StringBuilder)" argnames="sb" returntype="System.Boolean" />
        <method name="Replace(System.Char, System.Char)" argnames="oldChar, newChar" returntype="System.Text.StringBuilder" />
        <method name="Replace(System.Char, System.Char, System.Int32, System.Int32)" argnames="oldChar, newChar, startIndex, count" returntype="System.Text.StringBuilder" />
    </class>
    <class name="Encoding" namespace="System.Text">
        <constructor name="Encoding()" argnames="" />
        <constructor name="Encoding(System.Int32)" argnames="codePage" />
        <property name="BodyName" propertytype="System.String" />
        <property name="EncodingName" propertytype="System.String" />
        <property name="HeaderName" propertytype="System.String" />
        <property name="WebName" propertytype="System.String" />
        <property name="WindowsCodePage" propertytype="System.Int32" />
        <property name="IsBrowserDisplay" propertytype="System.Boolean" />
        <property name="IsBrowserSave" propertytype="System.Boolean" />
        <property name="IsMailNewsDisplay" propertytype="System.Boolean" />
        <property name="IsMailNewsSave" propertytype="System.Boolean" />
        <property name="ASCII" propertytype="System.Text.Encoding" />
        <property name="CodePage" propertytype="System.Int32" />
        <property name="Default" propertytype="System.Text.Encoding" />
        <property name="Unicode" propertytype="System.Text.Encoding" />
        <property name="BigEndianUnicode" propertytype="System.Text.Encoding" />
        <property name="UTF7" propertytype="System.Text.Encoding" />
        <property name="UTF8" propertytype="System.Text.Encoding" />
        <method name="GetString(System.Byte[], System.Int32, System.Int32)" argnames="bytes, index, count" returntype="System.String" />
        <method name="GetString(System.Byte[])" argnames="bytes" returntype="System.String" />
        <method name="GetMaxCharCount(System.Int32)" argnames="byteCount" returntype="System.Int32" />
        <method name="GetMaxByteCount(System.Int32)" argnames="charCount" returntype="System.Int32" />
        <method name="GetEncoder()" argnames="" returntype="System.Text.Encoder" />
        <method name="GetDecoder()" argnames="" returntype="System.Text.Decoder" />
        <method name="GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)" argnames="bytes, byteIndex, byteCount, chars, charIndex" returntype="System.Int32" />
        <method name="GetChars(System.Byte[], System.Int32, System.Int32)" argnames="bytes, index, count" returntype="System.Char[]" />
        <method name="GetChars(System.Byte[])" argnames="bytes" returntype="System.Char[]" />
        <method name="GetCharCount(System.Byte[], System.Int32, System.Int32)" argnames="bytes, index, count" returntype="System.Int32" />
        <method name="GetCharCount(System.Byte[])" argnames="bytes" returntype="System.Int32" />
        <method name="GetBytes(System.String, System.Int32, System.Int32, System.Byte[], System.Int32)" argnames="s, charIndex, charCount, bytes, byteIndex" returntype="System.Int32" />
        <method name="GetBytes(System.String)" argnames="s" returntype="System.Byte[]" />
        <method name="GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)" argnames="chars, charIndex, charCount, bytes, byteIndex" returntype="System.Int32" />
        <method name="GetBytes(System.Char[], System.Int32, System.Int32)" argnames="chars, index, count" returntype="System.Byte[]" />
        <method name="GetBytes(System.Char[])" argnames="chars" returntype="System.Byte[]" />
        <method name="GetByteCount(System.Char[], System.Int32, System.Int32)" argnames="chars, index, count" returntype="System.Int32" />
        <method name="GetByteCount(System.String)" argnames="s" returntype="System.Int32" />
        <method name="GetByteCount(System.Char[])" argnames="chars" returntype="System.Int32" />
        <method name="GetPreamble()" argnames="" returntype="System.Byte[]" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="value" returntype="System.Boolean" />
        <method name="Convert(System.Text.Encoding, System.Text.Encoding, System.Byte[])" argnames="srcEncoding, dstEncoding, bytes" returntype="System.Byte[]" />
        <method name="Convert(System.Text.Encoding, System.Text.Encoding, System.Byte[], System.Int32, System.Int32)" argnames="srcEncoding, dstEncoding, bytes, index, count" returntype="System.Byte[]" />
        <method name="GetEncoding(System.Int32)" argnames="codepage" returntype="System.Text.Encoding" />
        <method name="GetEncoding(System.String)" argnames="name" returntype="System.Text.Encoding" />
    </class>
    <class name="Decoder" namespace="System.Text">
        <constructor name="Decoder()" argnames="" />
        <method name="GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)" argnames="bytes, byteIndex, byteCount, chars, charIndex" returntype="System.Int32" />
        <method name="GetCharCount(System.Byte[], System.Int32, System.Int32)" argnames="bytes, index, count" returntype="System.Int32" />
    </class>
    <class name="Encoder" namespace="System.Text">
        <constructor name="Encoder()" argnames="" />
        <method name="GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32, System.Boolean)" argnames="chars, charIndex, charCount, bytes, byteIndex, flush" returntype="System.Int32" />
        <method name="GetByteCount(System.Char[], System.Int32, System.Int32, System.Boolean)" argnames="chars, index, count, flush" returntype="System.Int32" />
    </class>
    <class name="ASCIIEncoding" namespace="System.Text">
        <constructor name="ASCIIEncoding()" argnames="" />
        <method name="GetString(System.Byte[], System.Int32, System.Int32)" argnames="bytes, byteIndex, byteCount" returntype="System.String" />
        <method name="GetString(System.Byte[])" argnames="bytes" returntype="System.String" />
        <method name="GetMaxCharCount(System.Int32)" argnames="byteCount" returntype="System.Int32" />
        <method name="GetMaxByteCount(System.Int32)" argnames="charCount" returntype="System.Int32" />
        <method name="GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)" argnames="bytes, byteIndex, byteCount, chars, charIndex" returntype="System.Int32" />
        <method name="GetCharCount(System.Byte[], System.Int32, System.Int32)" argnames="bytes, index, count" returntype="System.Int32" />
        <method name="GetBytes(System.String, System.Int32, System.Int32, System.Byte[], System.Int32)" argnames="chars, charIndex, charCount, bytes, byteIndex" returntype="System.Int32" />
        <method name="GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)" argnames="chars, charIndex, charCount, bytes, byteIndex" returntype="System.Int32" />
        <method name="GetByteCount(System.Char[], System.Int32, System.Int32)" argnames="chars, index, count" returntype="System.Int32" />
        <method name="GetByteCount(System.String)" argnames="chars" returntype="System.Int32" />
    </class>
    <class name="UnicodeEncoding" namespace="System.Text">
        <constructor name="UnicodeEncoding()" argnames="" />
        <constructor name="UnicodeEncoding(System.Boolean, System.Boolean)" argnames="bigEndian, byteOrderMark" />
        <field name="CharSize" />
        <method name="GetMaxCharCount(System.Int32)" argnames="byteCount" returntype="System.Int32" />
        <method name="GetMaxByteCount(System.Int32)" argnames="charCount" returntype="System.Int32" />
        <method name="GetDecoder()" argnames="" returntype="System.Text.Decoder" />
        <method name="GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)" argnames="bytes, byteIndex, byteCount, chars, charIndex" returntype="System.Int32" />
        <method name="GetCharCount(System.Byte[], System.Int32, System.Int32)" argnames="bytes, index, count" returntype="System.Int32" />
        <method name="GetBytes(System.String, System.Int32, System.Int32, System.Byte[], System.Int32)" argnames="s, charIndex, charCount, bytes, byteIndex" returntype="System.Int32" />
        <method name="GetBytes(System.String)" argnames="s" returntype="System.Byte[]" />
        <method name="GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)" argnames="chars, charIndex, charCount, bytes, byteIndex" returntype="System.Int32" />
        <method name="GetByteCount(System.Char[], System.Int32, System.Int32)" argnames="chars, index, count" returntype="System.Int32" />
        <method name="GetByteCount(System.String)" argnames="s" returntype="System.Int32" />
        <method name="GetPreamble()" argnames="" returntype="System.Byte[]" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="value" returntype="System.Boolean" />
    </class>
    <class name="UTF7Encoding" namespace="System.Text">
        <constructor name="UTF7Encoding()" argnames="" />
        <constructor name="UTF7Encoding(System.Boolean)" argnames="allowOptionals" />
        <method name="GetMaxCharCount(System.Int32)" argnames="byteCount" returntype="System.Int32" />
        <method name="GetMaxByteCount(System.Int32)" argnames="charCount" returntype="System.Int32" />
        <method name="GetEncoder()" argnames="" returntype="System.Text.Encoder" />
        <method name="GetDecoder()" argnames="" returntype="System.Text.Decoder" />
        <method name="GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)" argnames="bytes, byteIndex, byteCount, chars, charIndex" returntype="System.Int32" />
        <method name="GetCharCount(System.Byte[], System.Int32, System.Int32)" argnames="bytes, index, count" returntype="System.Int32" />
        <method name="GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)" argnames="chars, charIndex, charCount, bytes, byteIndex" returntype="System.Int32" />
        <method name="GetByteCount(System.Char[], System.Int32, System.Int32)" argnames="chars, index, count" returntype="System.Int32" />
    </class>
    <class name="UTF8Encoding" namespace="System.Text">
        <constructor name="UTF8Encoding()" argnames="" />
        <constructor name="UTF8Encoding(System.Boolean)" argnames="encoderShouldEmitUTF8Identifier" />
        <constructor name="UTF8Encoding(System.Boolean, System.Boolean)" argnames="encoderShouldEmitUTF8Identifier, throwOnInvalidBytes" />
        <method name="GetMaxCharCount(System.Int32)" argnames="byteCount" returntype="System.Int32" />
        <method name="GetMaxByteCount(System.Int32)" argnames="charCount" returntype="System.Int32" />
        <method name="GetEncoder()" argnames="" returntype="System.Text.Encoder" />
        <method name="GetDecoder()" argnames="" returntype="System.Text.Decoder" />
        <method name="GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)" argnames="bytes, byteIndex, byteCount, chars, charIndex" returntype="System.Int32" />
        <method name="GetCharCount(System.Byte[], System.Int32, System.Int32)" argnames="bytes, index, count" returntype="System.Int32" />
        <method name="GetBytes(System.String, System.Int32, System.Int32, System.Byte[], System.Int32)" argnames="s, charIndex, charCount, bytes, byteIndex" returntype="System.Int32" />
        <method name="GetBytes(System.String)" argnames="s" returntype="System.Byte[]" />
        <method name="GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)" argnames="chars, charIndex, charCount, bytes, byteIndex" returntype="System.Int32" />
        <method name="GetByteCount(System.Char[], System.Int32, System.Int32)" argnames="chars, index, count" returntype="System.Int32" />
        <method name="GetByteCount(System.String)" argnames="chars" returntype="System.Int32" />
        <method name="GetPreamble()" argnames="" returntype="System.Byte[]" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="value" returntype="System.Boolean" />
    </class>
    <class name="Formatter" namespace="System.Runtime.Serialization">
        <constructor name="Formatter()" argnames="" />
        <field name="m_idGenerator" />
        <field name="m_objectQueue" />
        <property name="SurrogateSelector" propertytype="System.Runtime.Serialization.ISurrogateSelector" />
        <property name="Binder" propertytype="System.Runtime.Serialization.SerializationBinder" />
        <property name="Context" propertytype="System.Runtime.Serialization.StreamingContext" />
        <method name="Serialize(System.IO.Stream, System.Object)" argnames="serializationStream, graph" returntype="System.Void" />
        <method name="Deserialize(System.IO.Stream)" argnames="serializationStream" returntype="System.Object" />
        <method name="WriteValueType(System.Object, System.String, System.Type)" argnames="obj, name, memberType" returntype="System.Void" />
        <method name="WriteUInt64(System.UInt64, System.String)" argnames="val, name" returntype="System.Void" />
        <method name="WriteUInt32(System.UInt32, System.String)" argnames="val, name" returntype="System.Void" />
        <method name="WriteUInt16(System.UInt16, System.String)" argnames="val, name" returntype="System.Void" />
        <method name="WriteTimeSpan(System.TimeSpan, System.String)" argnames="val, name" returntype="System.Void" />
        <method name="WriteSingle(System.Single, System.String)" argnames="val, name" returntype="System.Void" />
        <method name="WriteSByte(System.SByte, System.String)" argnames="val, name" returntype="System.Void" />
        <method name="WriteMember(System.String, System.Object)" argnames="memberName, data" returntype="System.Void" />
        <method name="WriteObjectRef(System.Object, System.String, System.Type)" argnames="obj, name, memberType" returntype="System.Void" />
        <method name="WriteInt64(System.Int64, System.String)" argnames="val, name" returntype="System.Void" />
        <method name="WriteInt32(System.Int32, System.String)" argnames="val, name" returntype="System.Void" />
        <method name="WriteInt16(System.Int16, System.String)" argnames="val, name" returntype="System.Void" />
        <method name="WriteDouble(System.Double, System.String)" argnames="val, name" returntype="System.Void" />
        <method name="WriteDecimal(System.Decimal, System.String)" argnames="val, name" returntype="System.Void" />
        <method name="WriteDateTime(System.DateTime, System.String)" argnames="val, name" returntype="System.Void" />
        <method name="WriteChar(System.Char, System.String)" argnames="val, name" returntype="System.Void" />
        <method name="WriteByte(System.Byte, System.String)" argnames="val, name" returntype="System.Void" />
        <method name="WriteBoolean(System.Boolean, System.String)" argnames="val, name" returntype="System.Void" />
        <method name="WriteArray(System.Object, System.String, System.Type)" argnames="obj, name, memberType" returntype="System.Void" />
        <method name="Schedule(System.Object)" argnames="obj" returntype="System.Int64" />
        <method name="GetNext(System.Int64&amp;)" argnames="objID" returntype="System.Object" />
    </class>
    <class name="FormatterConverter" namespace="System.Runtime.Serialization">
        <constructor name="FormatterConverter()" argnames="" />
        <method name="ToString(System.Object)" argnames="value" returntype="System.String" />
        <method name="ToDateTime(System.Object)" argnames="value" returntype="System.DateTime" />
        <method name="ToDecimal(System.Object)" argnames="value" returntype="System.Decimal" />
        <method name="ToDouble(System.Object)" argnames="value" returntype="System.Double" />
        <method name="ToSingle(System.Object)" argnames="value" returntype="System.Single" />
        <method name="ToUInt64(System.Object)" argnames="value" returntype="System.UInt64" />
        <method name="ToInt64(System.Object)" argnames="value" returntype="System.Int64" />
        <method name="ToUInt32(System.Object)" argnames="value" returntype="System.UInt32" />
        <method name="ToInt32(System.Object)" argnames="value" returntype="System.Int32" />
        <method name="ToUInt16(System.Object)" argnames="value" returntype="System.UInt16" />
        <method name="ToInt16(System.Object)" argnames="value" returntype="System.Int16" />
        <method name="ToByte(System.Object)" argnames="value" returntype="System.Byte" />
        <method name="ToSByte(System.Object)" argnames="value" returntype="System.SByte" />
        <method name="ToChar(System.Object)" argnames="value" returntype="System.Char" />
        <method name="ToBoolean(System.Object)" argnames="value" returntype="System.Boolean" />
        <method name="Convert(System.Object, System.TypeCode)" argnames="value, typeCode" returntype="System.Object" />
        <method name="Convert(System.Object, System.Type)" argnames="value, type" returntype="System.Object" />
    </class>
    <class name="FormatterServices" namespace="System.Runtime.Serialization">
        <method name="GetSerializableMembers(System.Type)" argnames="type" returntype="System.Reflection.MemberInfo[]" />
        <method name="GetSerializableMembers(System.Type, System.Runtime.Serialization.StreamingContext)" argnames="type, context" returntype="System.Reflection.MemberInfo[]" />
        <method name="GetUninitializedObject(System.Type)" argnames="type" returntype="System.Object" />
        <method name="PopulateObjectMembers(System.Object, System.Reflection.MemberInfo[], System.Object[])" argnames="obj, members, data" returntype="System.Object" />
        <method name="GetObjectData(System.Object, System.Reflection.MemberInfo[])" argnames="obj, members" returntype="System.Object[]" />
        <method name="GetTypeFromAssembly(System.Reflection.Assembly, System.String)" argnames="assem, name" returntype="System.Type" />
    </class>
    <class name="ObjectIDGenerator" namespace="System.Runtime.Serialization">
        <constructor name="ObjectIDGenerator()" argnames="" />
        <method name="HasId(System.Object, System.Boolean&amp;)" argnames="obj, firstTime" returntype="System.Int64" />
        <method name="GetId(System.Object, System.Boolean&amp;)" argnames="obj, firstTime" returntype="System.Int64" />
    </class>
    <class name="ObjectManager" namespace="System.Runtime.Serialization">
        <constructor name="ObjectManager(System.Runtime.Serialization.ISurrogateSelector, System.Runtime.Serialization.StreamingContext)" argnames="selector, context" />
        <property name="SpecialFixupObjects" propertytype="System.Runtime.Serialization.ObjectHolderList" />
        <method name="RaiseDeserializationEvent()" argnames="" returntype="System.Void" />
        <method name="RecordArrayElementFixup(System.Int64, System.Int32[], System.Int64)" argnames="arrayToBeFixed, indices, objectRequired" returntype="System.Void" />
        <method name="RecordArrayElementFixup(System.Int64, System.Int32, System.Int64)" argnames="arrayToBeFixed, index, objectRequired" returntype="System.Void" />
        <method name="RecordDelayedFixup(System.Int64, System.String, System.Int64)" argnames="objectToBeFixed, memberName, objectRequired" returntype="System.Void" />
        <method name="RecordFixup(System.Int64, System.Reflection.MemberInfo, System.Int64)" argnames="objectToBeFixed, member, objectRequired" returntype="System.Void" />
        <method name="DoFixups()" argnames="" returntype="System.Void" />
        <method name="RegisterObject(System.Object, System.Int64)" argnames="obj, objectID" returntype="System.Void" />
        <method name="GetObject(System.Int64)" argnames="objectID" returntype="System.Object" />
        <method name="RegisterObject(System.Object, System.Int64, System.Runtime.Serialization.SerializationInfo)" argnames="obj, objectID, info" returntype="System.Void" />
        <method name="RegisterObject(System.Object, System.Int64, System.Runtime.Serialization.SerializationInfo, System.Int64, System.Reflection.MemberInfo)" argnames="obj, objectID, info, idOfContainingObj, member" returntype="System.Void" />
        <method name="RegisterObject(System.Object, System.Int64, System.Runtime.Serialization.SerializationInfo, System.Int64, System.Reflection.MemberInfo, System.Int32[])" argnames="obj, objectID, info, idOfContainingObj, member, arrayIndex" returntype="System.Void" />
    </class>
    <class name="SerializationBinder" namespace="System.Runtime.Serialization">
        <constructor name="SerializationBinder()" argnames="" />
        <method name="BindToType(System.String, System.String)" argnames="assemblyName, typeName" returntype="System.Type" />
    </class>
    <class name="SerializationInfo" namespace="System.Runtime.Serialization">
        <constructor name="SerializationInfo(System.Type, System.Runtime.Serialization.IFormatterConverter)" argnames="type, converter" />
        <property name="FullTypeName" propertytype="System.String" />
        <property name="AssemblyName" propertytype="System.String" />
        <property name="MemberCount" propertytype="System.Int32" />
        <method name="SetType(System.Type)" argnames="type" returntype="System.Void" />
        <method name="GetEnumerator()" argnames="" returntype="System.Runtime.Serialization.SerializationInfoEnumerator" />
        <method name="AddValue(System.String, System.Object, System.Type)" argnames="name, value, type" returntype="System.Void" />
        <method name="AddValue(System.String, System.Object)" argnames="name, value" returntype="System.Void" />
        <method name="AddValue(System.String, System.Boolean)" argnames="name, value" returntype="System.Void" />
        <method name="AddValue(System.String, System.Char)" argnames="name, value" returntype="System.Void" />
        <method name="AddValue(System.String, System.SByte)" argnames="name, value" returntype="System.Void" />
        <method name="AddValue(System.String, System.Byte)" argnames="name, value" returntype="System.Void" />
        <method name="AddValue(System.String, System.Int16)" argnames="name, value" returntype="System.Void" />
        <method name="AddValue(System.String, System.UInt16)" argnames="name, value" returntype="System.Void" />
        <method name="AddValue(System.String, System.Int32)" argnames="name, value" returntype="System.Void" />
        <method name="AddValue(System.String, System.UInt32)" argnames="name, value" returntype="System.Void" />
        <method name="AddValue(System.String, System.Int64)" argnames="name, value" returntype="System.Void" />
        <method name="AddValue(System.String, System.UInt64)" argnames="name, value" returntype="System.Void" />
        <method name="AddValue(System.String, System.Single)" argnames="name, value" returntype="System.Void" />
        <method name="AddValue(System.String, System.Double)" argnames="name, value" returntype="System.Void" />
        <method name="AddValue(System.String, System.Decimal)" argnames="name, value" returntype="System.Void" />
        <method name="AddValue(System.String, System.DateTime)" argnames="name, value" returntype="System.Void" />
        <method name="GetValue(System.String, System.Type)" argnames="name, type" returntype="System.Object" />
        <method name="GetBoolean(System.String)" argnames="name" returntype="System.Boolean" />
        <method name="GetChar(System.String)" argnames="name" returntype="System.Char" />
        <method name="GetSByte(System.String)" argnames="name" returntype="System.SByte" />
        <method name="GetByte(System.String)" argnames="name" returntype="System.Byte" />
        <method name="GetInt16(System.String)" argnames="name" returntype="System.Int16" />
        <method name="GetUInt16(System.String)" argnames="name" returntype="System.UInt16" />
        <method name="GetInt32(System.String)" argnames="name" returntype="System.Int32" />
        <method name="GetUInt32(System.String)" argnames="name" returntype="System.UInt32" />
        <method name="GetInt64(System.String)" argnames="name" returntype="System.Int64" />
        <method name="GetUInt64(System.String)" argnames="name" returntype="System.UInt64" />
        <method name="GetSingle(System.String)" argnames="name" returntype="System.Single" />
        <method name="GetDouble(System.String)" argnames="name" returntype="System.Double" />
        <method name="GetDecimal(System.String)" argnames="name" returntype="System.Decimal" />
        <method name="GetDateTime(System.String)" argnames="name" returntype="System.DateTime" />
        <method name="GetString(System.String)" argnames="name" returntype="System.String" />
    </class>
    <class name="SerializationInfoEnumerator" namespace="System.Runtime.Serialization">
        <property name="Current" propertytype="System.Runtime.Serialization.SerializationEntry" />
        <property name="Name" propertytype="System.String" />
        <property name="Value" propertytype="System.Object" />
        <property name="ObjectType" propertytype="System.Type" />
        <method name="Reset()" argnames="" returntype="System.Void" />
        <method name="MoveNext()" argnames="" returntype="System.Boolean" />
    </class>
    <class name="SerializationException" namespace="System.Runtime.Serialization">
        <constructor name="SerializationException()" argnames="" />
        <constructor name="SerializationException(System.String)" argnames="message" />
        <constructor name="SerializationException(System.String, System.Exception)" argnames="message, innerException" />
        <constructor name="SerializationException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="SurrogateSelector" namespace="System.Runtime.Serialization">
        <constructor name="SurrogateSelector()" argnames="" />
        <method name="GetNextSelector()" argnames="" returntype="System.Runtime.Serialization.ISurrogateSelector" />
        <method name="GetSurrogate(System.Type, System.Runtime.Serialization.StreamingContext, System.Runtime.Serialization.ISurrogateSelector&amp;)" argnames="type, context, selector" returntype="System.Runtime.Serialization.ISerializationSurrogate" />
        <method name="ChainSelector(System.Runtime.Serialization.ISurrogateSelector)" argnames="selector" returntype="System.Void" />
        <method name="RemoveSurrogate(System.Type, System.Runtime.Serialization.StreamingContext)" argnames="type, context" returntype="System.Void" />
        <method name="AddSurrogate(System.Type, System.Runtime.Serialization.StreamingContext, System.Runtime.Serialization.ISerializationSurrogate)" argnames="type, context, surrogate" returntype="System.Void" />
    </class>
    <interface name="ISerializable" namespace="System.Runtime.Serialization">
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
    </interface>
    <interface name="IObjectReference" namespace="System.Runtime.Serialization">
        <method name="GetRealObject(System.Runtime.Serialization.StreamingContext)" argnames="context" returntype="System.Object" />
    </interface>
    <interface name="IDeserializationCallback" namespace="System.Runtime.Serialization">
        <method name="OnDeserialization(System.Object)" argnames="sender" returntype="System.Void" />
    </interface>
    <interface name="IFormatter" namespace="System.Runtime.Serialization">
        <property name="SurrogateSelector" propertytype="System.Runtime.Serialization.ISurrogateSelector" />
        <property name="Binder" propertytype="System.Runtime.Serialization.SerializationBinder" />
        <property name="Context" propertytype="System.Runtime.Serialization.StreamingContext" />
        <method name="Serialize(System.IO.Stream, System.Object)" argnames="serializationStream, graph" returntype="System.Void" />
        <method name="Deserialize(System.IO.Stream)" argnames="serializationStream" returntype="System.Object" />
    </interface>
    <interface name="IFormatterConverter" namespace="System.Runtime.Serialization">
        <method name="ToString(System.Object)" argnames="value" returntype="System.String" />
        <method name="ToDateTime(System.Object)" argnames="value" returntype="System.DateTime" />
        <method name="ToDecimal(System.Object)" argnames="value" returntype="System.Decimal" />
        <method name="ToDouble(System.Object)" argnames="value" returntype="System.Double" />
        <method name="ToSingle(System.Object)" argnames="value" returntype="System.Single" />
        <method name="ToUInt64(System.Object)" argnames="value" returntype="System.UInt64" />
        <method name="ToInt64(System.Object)" argnames="value" returntype="System.Int64" />
        <method name="ToUInt32(System.Object)" argnames="value" returntype="System.UInt32" />
        <method name="ToInt32(System.Object)" argnames="value" returntype="System.Int32" />
        <method name="ToUInt16(System.Object)" argnames="value" returntype="System.UInt16" />
        <method name="ToInt16(System.Object)" argnames="value" returntype="System.Int16" />
        <method name="ToByte(System.Object)" argnames="value" returntype="System.Byte" />
        <method name="ToSByte(System.Object)" argnames="value" returntype="System.SByte" />
        <method name="ToChar(System.Object)" argnames="value" returntype="System.Char" />
        <method name="ToBoolean(System.Object)" argnames="value" returntype="System.Boolean" />
        <method name="Convert(System.Object, System.TypeCode)" argnames="value, typeCode" returntype="System.Object" />
        <method name="Convert(System.Object, System.Type)" argnames="value, type" returntype="System.Object" />
    </interface>
    <interface name="ISerializationSurrogate" namespace="System.Runtime.Serialization">
        <method name="SetObjectData(System.Object, System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext, System.Runtime.Serialization.ISurrogateSelector)" argnames="obj, info, context, selector" returntype="System.Object" />
        <method name="GetObjectData(System.Object, System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="obj, info, context" returntype="System.Void" />
    </interface>
    <interface name="ISurrogateSelector" namespace="System.Runtime.Serialization">
        <method name="GetNextSelector()" argnames="" returntype="System.Runtime.Serialization.ISurrogateSelector" />
        <method name="GetSurrogate(System.Type, System.Runtime.Serialization.StreamingContext, System.Runtime.Serialization.ISurrogateSelector&amp;)" argnames="type, context, selector" returntype="System.Runtime.Serialization.ISerializationSurrogate" />
        <method name="ChainSelector(System.Runtime.Serialization.ISurrogateSelector)" argnames="selector" returntype="System.Void" />
    </interface>
    <struct name="SerializationEntry" namespace="System.Runtime.Serialization">
        <property name="Value" propertytype="System.Object" />
        <property name="Name" propertytype="System.String" />
        <property name="ObjectType" propertytype="System.Type" />
    </struct>
    <struct name="StreamingContext" namespace="System.Runtime.Serialization">
        <constructor name="StreamingContext(System.Runtime.Serialization.StreamingContextStates)" argnames="state" />
        <constructor name="StreamingContext(System.Runtime.Serialization.StreamingContextStates, System.Object)" argnames="state, additional" />
        <property name="Context" propertytype="System.Object" />
        <property name="State" propertytype="System.Runtime.Serialization.StreamingContextStates" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
    </struct>
    <enum name="StreamingContextStates" namespace="System.Runtime.Serialization">
        <field name="CrossProcess" />
        <field name="CrossMachine" />
        <field name="File" />
        <field name="Persistence" />
        <field name="Remoting" />
        <field name="Other" />
        <field name="Clone" />
        <field name="CrossAppDomain" />
        <field name="All" />
    </enum>
    <class name="PermissionSet" namespace="System.Security">
        <constructor name="PermissionSet(System.Security.Permissions.PermissionState)" argnames="state" />
        <constructor name="PermissionSet(System.Security.PermissionSet)" argnames="permSet" />
        <property name="SyncRoot" propertytype="System.Object" />
        <property name="IsSynchronized" propertytype="System.Boolean" />
        <property name="IsReadOnly" propertytype="System.Boolean" />
        <property name="Count" propertytype="System.Int32" />
        <method name="PermitOnly()" argnames="" returntype="System.Void" />
        <method name="Deny()" argnames="" returntype="System.Void" />
        <method name="Demand()" argnames="" returntype="System.Void" />
        <method name="Assert()" argnames="" returntype="System.Void" />
        <method name="GetEnumerator()" argnames="" returntype="System.Collections.IEnumerator" />
        <method name="CopyTo(System.Array, System.Int32)" argnames="array, index" returntype="System.Void" />
        <method name="FromXml(System.Security.SecurityElement)" argnames="et" returntype="System.Void" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
        <method name="Copy()" argnames="" returntype="System.Security.PermissionSet" />
        <method name="Union(System.Security.PermissionSet)" argnames="other" returntype="System.Security.PermissionSet" />
        <method name="Intersect(System.Security.PermissionSet)" argnames="other" returntype="System.Security.PermissionSet" />
        <method name="IsSubsetOf(System.Security.PermissionSet)" argnames="target" returntype="System.Boolean" />
        <method name="IsUnrestricted()" argnames="" returntype="System.Boolean" />
        <method name="RemovePermission(System.Type)" argnames="permClass" returntype="System.Security.IPermission" />
        <method name="AddPermission(System.Security.IPermission)" argnames="perm" returntype="System.Security.IPermission" />
        <method name="SetPermission(System.Security.IPermission)" argnames="perm" returntype="System.Security.IPermission" />
        <method name="GetPermission(System.Type)" argnames="permClass" returntype="System.Security.IPermission" />
        <method name="IsEmpty()" argnames="" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="ConvertPermissionSet(System.String, System.Byte[], System.String)" argnames="inFormat, inData, outFormat" returntype="System.Byte[]" />
        <method name="ContainsNonCodeAccessPermissions()" argnames="" returntype="System.Boolean" />
    </class>
    <class name="NamedPermissionSet" namespace="System.Security">
        <constructor name="NamedPermissionSet(System.String)" argnames="name" />
        <constructor name="NamedPermissionSet(System.String, System.Security.Permissions.PermissionState)" argnames="name, state" />
        <constructor name="NamedPermissionSet(System.String, System.Security.PermissionSet)" argnames="name, permSet" />
        <constructor name="NamedPermissionSet(System.Security.NamedPermissionSet)" argnames="permSet" />
        <property name="Name" propertytype="System.String" />
        <property name="Description" propertytype="System.String" />
        <method name="FromXml(System.Security.SecurityElement)" argnames="et" returntype="System.Void" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
        <method name="Copy()" argnames="" returntype="System.Security.PermissionSet" />
        <method name="Copy(System.String)" argnames="name" returntype="System.Security.NamedPermissionSet" />
    </class>
    <class name="SecurityElement" namespace="System.Security">
        <constructor name="SecurityElement(System.String)" argnames="tag" />
        <constructor name="SecurityElement(System.String, System.String)" argnames="tag, text" />
        <property name="Tag" propertytype="System.String" />
        <property name="Attributes" propertytype="System.Collections.Hashtable" />
        <property name="Text" propertytype="System.String" />
        <property name="Children" propertytype="System.Collections.ArrayList" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="AddAttribute(System.String, System.String)" argnames="name, value" returntype="System.Void" />
        <method name="AddChild(System.Security.SecurityElement)" argnames="child" returntype="System.Void" />
        <method name="Equal(System.Security.SecurityElement)" argnames="other" returntype="System.Boolean" />
        <method name="IsValidTag(System.String)" argnames="tag" returntype="System.Boolean" />
        <method name="IsValidText(System.String)" argnames="text" returntype="System.Boolean" />
        <method name="IsValidAttributeName(System.String)" argnames="name" returntype="System.Boolean" />
        <method name="IsValidAttributeValue(System.String)" argnames="value" returntype="System.Boolean" />
        <method name="Escape(System.String)" argnames="str" returntype="System.String" />
        <method name="Attribute(System.String)" argnames="name" returntype="System.String" />
        <method name="SearchForChildByTag(System.String)" argnames="tag" returntype="System.Security.SecurityElement" />
        <method name="SearchForTextOfTag(System.String)" argnames="tag" returntype="System.String" />
    </class>
    <class name="XmlSyntaxException" namespace="System.Security">
        <constructor name="XmlSyntaxException()" argnames="" />
        <constructor name="XmlSyntaxException(System.String)" argnames="message" />
        <constructor name="XmlSyntaxException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="XmlSyntaxException(System.Int32)" argnames="lineNumber" />
        <constructor name="XmlSyntaxException(System.Int32, System.String)" argnames="lineNumber, message" />
    </class>
    <class name="CodeAccessPermission" namespace="System.Security">
        <constructor name="CodeAccessPermission()" argnames="" />
        <method name="PermitOnly()" argnames="" returntype="System.Void" />
        <method name="Deny()" argnames="" returntype="System.Void" />
        <method name="Assert()" argnames="" returntype="System.Void" />
        <method name="FromXml(System.Security.SecurityElement)" argnames="elem" returntype="System.Void" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
        <method name="Demand()" argnames="" returntype="System.Void" />
        <method name="IsSubsetOf(System.Security.IPermission)" argnames="target" returntype="System.Boolean" />
        <method name="Union(System.Security.IPermission)" argnames="other" returntype="System.Security.IPermission" />
        <method name="Intersect(System.Security.IPermission)" argnames="target" returntype="System.Security.IPermission" />
        <method name="Copy()" argnames="" returntype="System.Security.IPermission" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="RevertAssert()" argnames="" returntype="System.Void" />
        <method name="RevertDeny()" argnames="" returntype="System.Void" />
        <method name="RevertPermitOnly()" argnames="" returntype="System.Void" />
        <method name="RevertAll()" argnames="" returntype="System.Void" />
    </class>
    <class name="SuppressUnmanagedCodeSecurityAttribute" namespace="System.Security">
        <constructor name="SuppressUnmanagedCodeSecurityAttribute()" argnames="" />
    </class>
    <class name="UnverifiableCodeAttribute" namespace="System.Security">
        <constructor name="UnverifiableCodeAttribute()" argnames="" />
    </class>
    <class name="AllowPartiallyTrustedCallersAttribute" namespace="System.Security">
        <constructor name="AllowPartiallyTrustedCallersAttribute()" argnames="" />
    </class>
    <class name="SecurityException" namespace="System.Security">
        <constructor name="SecurityException()" argnames="" />
        <constructor name="SecurityException(System.String)" argnames="message" />
        <constructor name="SecurityException(System.String, System.Type)" argnames="message, type" />
        <constructor name="SecurityException(System.String, System.Type, System.String)" argnames="message, type, state" />
        <constructor name="SecurityException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="SecurityException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
        <property name="PermissionType" propertytype="System.Type" />
        <property name="PermissionState" propertytype="System.String" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </class>
    <class name="SecurityManager" namespace="System.Security">
        <property name="CheckExecutionRights" propertytype="System.Boolean" />
        <property name="SecurityEnabled" propertytype="System.Boolean" />
        <method name="IsGranted(System.Security.IPermission)" argnames="perm" returntype="System.Boolean" />
        <method name="LoadPolicyLevelFromFile(System.String, System.Security.PolicyLevelType)" argnames="path, type" returntype="System.Security.Policy.PolicyLevel" />
        <method name="LoadPolicyLevelFromString(System.String, System.Security.PolicyLevelType)" argnames="str, type" returntype="System.Security.Policy.PolicyLevel" />
        <method name="SavePolicyLevel(System.Security.Policy.PolicyLevel)" argnames="level" returntype="System.Void" />
        <method name="ResolvePolicy(System.Security.Policy.Evidence, System.Security.PermissionSet, System.Security.PermissionSet, System.Security.PermissionSet, System.Security.PermissionSet&amp;)" argnames="evidence, reqdPset, optPset, denyPset, denied" returntype="System.Security.PermissionSet" />
        <method name="ResolvePolicy(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Security.PermissionSet" />
        <method name="ResolvePolicyGroups(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Collections.IEnumerator" />
        <method name="PolicyHierarchy()" argnames="" returntype="System.Collections.IEnumerator" />
        <method name="SavePolicy()" argnames="" returntype="System.Void" />
    </class>
    <class name="VerificationException" namespace="System.Security">
        <constructor name="VerificationException()" argnames="" />
        <constructor name="VerificationException(System.String)" argnames="message" />
        <constructor name="VerificationException(System.String, System.Exception)" argnames="message, innerException" />
        <constructor name="VerificationException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <interface name="IEvidenceFactory" namespace="System.Security">
        <property name="Evidence" propertytype="System.Security.Policy.Evidence" />
    </interface>
    <interface name="ISecurityEncodable" namespace="System.Security">
        <method name="FromXml(System.Security.SecurityElement)" argnames="e" returntype="System.Void" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
    </interface>
    <interface name="ISecurityPolicyEncodable" namespace="System.Security">
        <method name="FromXml(System.Security.SecurityElement, System.Security.Policy.PolicyLevel)" argnames="e, level" returntype="System.Void" />
        <method name="ToXml(System.Security.Policy.PolicyLevel)" argnames="level" returntype="System.Security.SecurityElement" />
    </interface>
    <interface name="IStackWalk" namespace="System.Security">
        <method name="PermitOnly()" argnames="" returntype="System.Void" />
        <method name="Deny()" argnames="" returntype="System.Void" />
        <method name="Demand()" argnames="" returntype="System.Void" />
        <method name="Assert()" argnames="" returntype="System.Void" />
    </interface>
    <interface name="IPermission" namespace="System.Security">
        <method name="Demand()" argnames="" returntype="System.Void" />
        <method name="IsSubsetOf(System.Security.IPermission)" argnames="target" returntype="System.Boolean" />
        <method name="Union(System.Security.IPermission)" argnames="target" returntype="System.Security.IPermission" />
        <method name="Intersect(System.Security.IPermission)" argnames="target" returntype="System.Security.IPermission" />
        <method name="Copy()" argnames="" returntype="System.Security.IPermission" />
    </interface>
    <enum name="PolicyLevelType" namespace="System.Security">
        <field name="User" />
        <field name="Machine" />
        <field name="Enterprise" />
        <field name="AppDomain" />
    </enum>
    <enum name="SecurityZone" namespace="System.Security">
        <field name="MyComputer" />
        <field name="Intranet" />
        <field name="Trusted" />
        <field name="Internet" />
        <field name="Untrusted" />
        <field name="NoZone" />
    </enum>
    <class name="Binder" namespace="System.Reflection">
        <constructor name="Binder()" argnames="" />
        <method name="ReorderArgumentArray(System.Object[]&amp;, System.Object)" argnames="args, state" returntype="System.Void" />
        <method name="ChangeType(System.Object, System.Type, System.Globalization.CultureInfo)" argnames="value, type, culture" returntype="System.Object" />
        <method name="SelectProperty(System.Reflection.BindingFlags, System.Reflection.PropertyInfo[], System.Type, System.Type[], System.Reflection.ParameterModifier[])" argnames="bindingAttr, match, returnType, indexes, modifiers" returntype="System.Reflection.PropertyInfo" />
        <method name="SelectMethod(System.Reflection.BindingFlags, System.Reflection.MethodBase[], System.Type[], System.Reflection.ParameterModifier[])" argnames="bindingAttr, match, types, modifiers" returntype="System.Reflection.MethodBase" />
        <method name="BindToField(System.Reflection.BindingFlags, System.Reflection.FieldInfo[], System.Object, System.Globalization.CultureInfo)" argnames="bindingAttr, match, value, culture" returntype="System.Reflection.FieldInfo" />
        <method name="BindToMethod(System.Reflection.BindingFlags, System.Reflection.MethodBase[], System.Object[]&amp;, System.Reflection.ParameterModifier[], System.Globalization.CultureInfo, System.String[], System.Object&amp;)" argnames="bindingAttr, match, args, modifiers, culture, names, state" returntype="System.Reflection.MethodBase" />
    </class>
    <class name="MemberInfo" namespace="System.Reflection">
        <constructor name="MemberInfo()" argnames="" />
        <property name="Cache" propertytype="System.Reflection.Cache.InternalCache" />
        <property name="MemberType" propertytype="System.Reflection.MemberTypes" />
        <property name="Name" propertytype="System.String" />
        <property name="DeclaringType" propertytype="System.Type" />
        <property name="ReflectedType" propertytype="System.Type" />
        <method name="IsDefined(System.Type, System.Boolean)" argnames="attributeType, inherit" returntype="System.Boolean" />
        <method name="GetCustomAttributes(System.Boolean)" argnames="inherit" returntype="System.Object[]" />
        <method name="GetCustomAttributes(System.Type, System.Boolean)" argnames="attributeType, inherit" returntype="System.Object[]" />
    </class>
    <class name="AmbiguousMatchException" namespace="System.Reflection">
        <constructor name="AmbiguousMatchException()" argnames="" />
        <constructor name="AmbiguousMatchException(System.String)" argnames="message" />
        <constructor name="AmbiguousMatchException(System.String, System.Exception)" argnames="message, inner" />
    </class>
    <class name="Assembly" namespace="System.Reflection">
        <property name="CodeBase" propertytype="System.String" />
        <property name="EscapedCodeBase" propertytype="System.String" />
        <property name="FullName" propertytype="System.String" />
        <property name="EntryPoint" propertytype="System.Reflection.MethodInfo" />
        <property name="Evidence" propertytype="System.Security.Policy.Evidence" />
        <property name="Location" propertytype="System.String" />
        <property name="GlobalAssemblyCache" propertytype="System.Boolean" />
        <property name="Cache" propertytype="System.Reflection.Cache.InternalCache" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
        <method name="IsDefined(System.Type, System.Boolean)" argnames="attributeType, inherit" returntype="System.Boolean" />
        <method name="GetCustomAttributes(System.Boolean)" argnames="inherit" returntype="System.Object[]" />
        <method name="GetCustomAttributes(System.Type, System.Boolean)" argnames="attributeType, inherit" returntype="System.Object[]" />
        <method name="GetManifestResourceInfo(System.String)" argnames="resourceName" returntype="System.Reflection.ManifestResourceInfo" />
        <method name="GetManifestResourceNames()" argnames="" returntype="System.String[]" />
        <method name="GetFiles(System.Boolean)" argnames="getResourceModules" returntype="System.IO.FileStream[]" />
        <method name="GetFiles()" argnames="" returntype="System.IO.FileStream[]" />
        <method name="GetFile(System.String)" argnames="name" returntype="System.IO.FileStream" />
        <method name="GetManifestResourceStream(System.String)" argnames="name" returntype="System.IO.Stream" />
        <method name="GetManifestResourceStream(System.Type, System.String)" argnames="type, name" returntype="System.IO.Stream" />
        <method name="GetTypes()" argnames="" returntype="System.Type[]" />
        <method name="GetExportedTypes()" argnames="" returntype="System.Type[]" />
        <method name="GetType(System.String, System.Boolean)" argnames="name, throwOnError" returntype="System.Type" />
        <method name="GetType(System.String)" argnames="name" returntype="System.Type" />
        <method name="GetName(System.Boolean)" argnames="copiedName" returntype="System.Reflection.AssemblyName" />
        <method name="GetName()" argnames="" returntype="System.Reflection.AssemblyName" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="CreateQualifiedName(System.String, System.String)" argnames="assemblyName, typeName" returntype="System.String" />
        <method name="GetAssembly(System.Type)" argnames="type" returntype="System.Reflection.Assembly" />
        <method name="GetType(System.String, System.Boolean, System.Boolean)" argnames="name, throwOnError, ignoreCase" returntype="System.Type" />
        <method name="GetSatelliteAssembly(System.Globalization.CultureInfo)" argnames="culture" returntype="System.Reflection.Assembly" />
        <method name="GetSatelliteAssembly(System.Globalization.CultureInfo, System.Version)" argnames="culture, version" returntype="System.Reflection.Assembly" />
        <method name="LoadFrom(System.String)" argnames="assemblyFile" returntype="System.Reflection.Assembly" />
        <method name="LoadFrom(System.String, System.Security.Policy.Evidence)" argnames="assemblyFile, securityEvidence" returntype="System.Reflection.Assembly" />
        <method name="Load(System.String)" argnames="assemblyString" returntype="System.Reflection.Assembly" />
        <method name="Load(System.String, System.Security.Policy.Evidence)" argnames="assemblyString, assemblySecurity" returntype="System.Reflection.Assembly" />
        <method name="Load(System.Reflection.AssemblyName)" argnames="assemblyRef" returntype="System.Reflection.Assembly" />
        <method name="Load(System.Reflection.AssemblyName, System.Security.Policy.Evidence)" argnames="assemblyRef, assemblySecurity" returntype="System.Reflection.Assembly" />
        <method name="LoadWithPartialName(System.String)" argnames="partialName" returntype="System.Reflection.Assembly" />
        <method name="LoadWithPartialName(System.String, System.Security.Policy.Evidence)" argnames="partialName, securityEvidence" returntype="System.Reflection.Assembly" />
        <method name="Load(System.Byte[])" argnames="rawAssembly" returntype="System.Reflection.Assembly" />
        <method name="Load(System.Byte[], System.Byte[])" argnames="rawAssembly, rawSymbolStore" returntype="System.Reflection.Assembly" />
        <method name="Load(System.Byte[], System.Byte[], System.Security.Policy.Evidence)" argnames="rawAssembly, rawSymbolStore, securityEvidence" returntype="System.Reflection.Assembly" />
        <method name="LoadModule(System.String, System.Byte[])" argnames="moduleName, rawModule" returntype="System.Reflection.Module" />
        <method name="LoadModule(System.String, System.Byte[], System.Byte[])" argnames="moduleName, rawModule, rawSymbolStore" returntype="System.Reflection.Module" />
        <method name="CreateInstance(System.String)" argnames="typeName" returntype="System.Object" />
        <method name="CreateInstance(System.String, System.Boolean)" argnames="typeName, ignoreCase" returntype="System.Object" />
        <method name="CreateInstance(System.String, System.Boolean, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo, System.Object[])" argnames="typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes" returntype="System.Object" />
        <method name="GetLoadedModules()" argnames="" returntype="System.Reflection.Module[]" />
        <method name="GetLoadedModules(System.Boolean)" argnames="getResourceModules" returntype="System.Reflection.Module[]" />
        <method name="GetModules()" argnames="" returntype="System.Reflection.Module[]" />
        <method name="GetModules(System.Boolean)" argnames="getResourceModules" returntype="System.Reflection.Module[]" />
        <method name="GetModule(System.String)" argnames="name" returntype="System.Reflection.Module" />
        <method name="GetExecutingAssembly()" argnames="" returntype="System.Reflection.Assembly" />
        <method name="GetCallingAssembly()" argnames="" returntype="System.Reflection.Assembly" />
        <method name="GetEntryAssembly()" argnames="" returntype="System.Reflection.Assembly" />
        <method name="GetReferencedAssemblies()" argnames="" returntype="System.Reflection.AssemblyName[]" />
        <event name="ModuleResolve" />
    </class>
    <class name="AssemblyCultureAttribute" namespace="System.Reflection">
        <constructor name="AssemblyCultureAttribute(System.String)" argnames="culture" />
        <property name="Culture" propertytype="System.String" />
    </class>
    <class name="AssemblyVersionAttribute" namespace="System.Reflection">
        <constructor name="AssemblyVersionAttribute(System.String)" argnames="version" />
        <property name="Version" propertytype="System.String" />
    </class>
    <class name="AssemblyKeyFileAttribute" namespace="System.Reflection">
        <constructor name="AssemblyKeyFileAttribute(System.String)" argnames="keyFile" />
        <property name="KeyFile" propertytype="System.String" />
    </class>
    <class name="AssemblyKeyNameAttribute" namespace="System.Reflection">
        <constructor name="AssemblyKeyNameAttribute(System.String)" argnames="keyName" />
        <property name="KeyName" propertytype="System.String" />
    </class>
    <class name="AssemblyDelaySignAttribute" namespace="System.Reflection">
        <constructor name="AssemblyDelaySignAttribute(System.Boolean)" argnames="delaySign" />
        <property name="DelaySign" propertytype="System.Boolean" />
    </class>
    <class name="AssemblyAlgorithmIdAttribute" namespace="System.Reflection">
        <constructor name="AssemblyAlgorithmIdAttribute(System.Configuration.Assemblies.AssemblyHashAlgorithm)" argnames="algorithmId" />
        <constructor name="AssemblyAlgorithmIdAttribute(System.UInt32)" argnames="algorithmId" />
        <property name="AlgorithmId" propertytype="System.UInt32" />
    </class>
    <class name="AssemblyFlagsAttribute" namespace="System.Reflection">
        <constructor name="AssemblyFlagsAttribute(System.UInt32)" argnames="flags" />
        <property name="Flags" propertytype="System.UInt32" />
    </class>
    <class name="AssemblyFileVersionAttribute" namespace="System.Reflection">
        <constructor name="AssemblyFileVersionAttribute(System.String)" argnames="version" />
        <property name="Version" propertytype="System.String" />
    </class>
    <class name="AssemblyName" namespace="System.Reflection">
        <constructor name="AssemblyName()" argnames="" />
        <property name="Name" propertytype="System.String" />
        <property name="Version" propertytype="System.Version" />
        <property name="CultureInfo" propertytype="System.Globalization.CultureInfo" />
        <property name="CodeBase" propertytype="System.String" />
        <property name="EscapedCodeBase" propertytype="System.String" />
        <property name="Flags" propertytype="System.Reflection.AssemblyNameFlags" />
        <property name="HashAlgorithm" propertytype="System.Configuration.Assemblies.AssemblyHashAlgorithm" />
        <property name="VersionCompatibility" propertytype="System.Configuration.Assemblies.AssemblyVersionCompatibility" />
        <property name="KeyPair" propertytype="System.Reflection.StrongNameKeyPair" />
        <property name="FullName" propertytype="System.String" />
        <method name="OnDeserialization(System.Object)" argnames="sender" returntype="System.Void" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
        <method name="Clone()" argnames="" returntype="System.Object" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="GetAssemblyName(System.String)" argnames="assemblyFile" returntype="System.Reflection.AssemblyName" />
        <method name="GetPublicKey()" argnames="" returntype="System.Byte[]" />
        <method name="SetPublicKey(System.Byte[])" argnames="publicKey" returntype="System.Void" />
        <method name="GetPublicKeyToken()" argnames="" returntype="System.Byte[]" />
        <method name="SetPublicKeyToken(System.Byte[])" argnames="publicKeyToken" returntype="System.Void" />
    </class>
    <class name="AssemblyNameProxy" namespace="System.Reflection">
        <constructor name="AssemblyNameProxy()" argnames="" />
        <method name="GetAssemblyName(System.String)" argnames="assemblyFile" returntype="System.Reflection.AssemblyName" />
    </class>
    <class name="AssemblyCopyrightAttribute" namespace="System.Reflection">
        <constructor name="AssemblyCopyrightAttribute(System.String)" argnames="copyright" />
        <property name="Copyright" propertytype="System.String" />
    </class>
    <class name="AssemblyTrademarkAttribute" namespace="System.Reflection">
        <constructor name="AssemblyTrademarkAttribute(System.String)" argnames="trademark" />
        <property name="Trademark" propertytype="System.String" />
    </class>
    <class name="AssemblyProductAttribute" namespace="System.Reflection">
        <constructor name="AssemblyProductAttribute(System.String)" argnames="product" />
        <property name="Product" propertytype="System.String" />
    </class>
    <class name="AssemblyCompanyAttribute" namespace="System.Reflection">
        <constructor name="AssemblyCompanyAttribute(System.String)" argnames="company" />
        <property name="Company" propertytype="System.String" />
    </class>
    <class name="AssemblyDescriptionAttribute" namespace="System.Reflection">
        <constructor name="AssemblyDescriptionAttribute(System.String)" argnames="description" />
        <property name="Description" propertytype="System.String" />
    </class>
    <class name="AssemblyTitleAttribute" namespace="System.Reflection">
        <constructor name="AssemblyTitleAttribute(System.String)" argnames="title" />
        <property name="Title" propertytype="System.String" />
    </class>
    <class name="AssemblyConfigurationAttribute" namespace="System.Reflection">
        <constructor name="AssemblyConfigurationAttribute(System.String)" argnames="configuration" />
        <property name="Configuration" propertytype="System.String" />
    </class>
    <class name="AssemblyDefaultAliasAttribute" namespace="System.Reflection">
        <constructor name="AssemblyDefaultAliasAttribute(System.String)" argnames="defaultAlias" />
        <property name="DefaultAlias" propertytype="System.String" />
    </class>
    <class name="AssemblyInformationalVersionAttribute" namespace="System.Reflection">
        <constructor name="AssemblyInformationalVersionAttribute(System.String)" argnames="informationalVersion" />
        <property name="InformationalVersion" propertytype="System.String" />
    </class>
    <class name="CustomAttributeFormatException" namespace="System.Reflection">
        <constructor name="CustomAttributeFormatException()" argnames="" />
        <constructor name="CustomAttributeFormatException(System.String)" argnames="message" />
        <constructor name="CustomAttributeFormatException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="CustomAttributeFormatException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="MethodBase" namespace="System.Reflection">
        <constructor name="MethodBase()" argnames="" />
        <property name="MethodHandle" propertytype="System.RuntimeMethodHandle" />
        <property name="Attributes" propertytype="System.Reflection.MethodAttributes" />
        <property name="IsPublic" propertytype="System.Boolean" />
        <property name="IsPrivate" propertytype="System.Boolean" />
        <property name="IsFamily" propertytype="System.Boolean" />
        <property name="IsAssembly" propertytype="System.Boolean" />
        <property name="IsFamilyAndAssembly" propertytype="System.Boolean" />
        <property name="IsFamilyOrAssembly" propertytype="System.Boolean" />
        <property name="IsStatic" propertytype="System.Boolean" />
        <property name="IsFinal" propertytype="System.Boolean" />
        <property name="IsVirtual" propertytype="System.Boolean" />
        <property name="IsHideBySig" propertytype="System.Boolean" />
        <property name="IsAbstract" propertytype="System.Boolean" />
        <property name="IsSpecialName" propertytype="System.Boolean" />
        <property name="IsConstructor" propertytype="System.Boolean" />
        <property name="CallingConvention" propertytype="System.Reflection.CallingConventions" />
        <property name="IsOverloaded" propertytype="System.Boolean" />
        <method name="Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)" argnames="obj, invokeAttr, binder, parameters, culture" returntype="System.Object" />
        <method name="GetMethodImplementationFlags()" argnames="" returntype="System.Reflection.MethodImplAttributes" />
        <method name="GetParameters()" argnames="" returntype="System.Reflection.ParameterInfo[]" />
        <method name="GetMethodFromHandle(System.RuntimeMethodHandle)" argnames="handle" returntype="System.Reflection.MethodBase" />
        <method name="GetCurrentMethod()" argnames="" returntype="System.Reflection.MethodBase" />
        <method name="Invoke(System.Object, System.Object[])" argnames="obj, parameters" returntype="System.Object" />
    </class>
    <class name="ConstructorInfo" namespace="System.Reflection">
        <constructor name="ConstructorInfo()" argnames="" />
        <field name="ConstructorName" />
        <field name="TypeConstructorName" />
        <property name="MemberType" propertytype="System.Reflection.MemberTypes" />
        <method name="Invoke(System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)" argnames="invokeAttr, binder, parameters, culture" returntype="System.Object" />
        <method name="Invoke(System.Object[])" argnames="parameters" returntype="System.Object" />
    </class>
    <class name="DefaultMemberAttribute" namespace="System.Reflection">
        <constructor name="DefaultMemberAttribute(System.String)" argnames="memberName" />
        <property name="MemberName" propertytype="System.String" />
    </class>
    <class name="EventInfo" namespace="System.Reflection">
        <constructor name="EventInfo()" argnames="" />
        <property name="MemberType" propertytype="System.Reflection.MemberTypes" />
        <property name="EventHandlerType" propertytype="System.Type" />
        <property name="Attributes" propertytype="System.Reflection.EventAttributes" />
        <property name="IsSpecialName" propertytype="System.Boolean" />
        <property name="IsMulticast" propertytype="System.Boolean" />
        <method name="GetRaiseMethod(System.Boolean)" argnames="nonPublic" returntype="System.Reflection.MethodInfo" />
        <method name="GetRemoveMethod(System.Boolean)" argnames="nonPublic" returntype="System.Reflection.MethodInfo" />
        <method name="GetAddMethod(System.Boolean)" argnames="nonPublic" returntype="System.Reflection.MethodInfo" />
        <method name="GetAddMethod()" argnames="" returntype="System.Reflection.MethodInfo" />
        <method name="GetRemoveMethod()" argnames="" returntype="System.Reflection.MethodInfo" />
        <method name="GetRaiseMethod()" argnames="" returntype="System.Reflection.MethodInfo" />
        <method name="AddEventHandler(System.Object, System.Delegate)" argnames="target, handler" returntype="System.Void" />
        <method name="RemoveEventHandler(System.Object, System.Delegate)" argnames="target, handler" returntype="System.Void" />
    </class>
    <class name="FieldInfo" namespace="System.Reflection">
        <constructor name="FieldInfo()" argnames="" />
        <property name="MemberType" propertytype="System.Reflection.MemberTypes" />
        <property name="FieldType" propertytype="System.Type" />
        <property name="FieldHandle" propertytype="System.RuntimeFieldHandle" />
        <property name="Attributes" propertytype="System.Reflection.FieldAttributes" />
        <property name="IsPublic" propertytype="System.Boolean" />
        <property name="IsPrivate" propertytype="System.Boolean" />
        <property name="IsFamily" propertytype="System.Boolean" />
        <property name="IsAssembly" propertytype="System.Boolean" />
        <property name="IsFamilyAndAssembly" propertytype="System.Boolean" />
        <property name="IsFamilyOrAssembly" propertytype="System.Boolean" />
        <property name="IsStatic" propertytype="System.Boolean" />
        <property name="IsInitOnly" propertytype="System.Boolean" />
        <property name="IsLiteral" propertytype="System.Boolean" />
        <property name="IsNotSerialized" propertytype="System.Boolean" />
        <property name="IsSpecialName" propertytype="System.Boolean" />
        <property name="IsPinvokeImpl" propertytype="System.Boolean" />
        <method name="SetValueDirect(System.TypedReference, System.Object)" argnames="obj, value" returntype="System.Void" />
        <method name="SetValue(System.Object, System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Globalization.CultureInfo)" argnames="obj, value, invokeAttr, binder, culture" returntype="System.Void" />
        <method name="GetValueDirect(System.TypedReference)" argnames="obj" returntype="System.Object" />
        <method name="GetValue(System.Object)" argnames="obj" returntype="System.Object" />
        <method name="SetValue(System.Object, System.Object)" argnames="obj, value" returntype="System.Void" />
        <method name="GetFieldFromHandle(System.RuntimeFieldHandle)" argnames="handle" returntype="System.Reflection.FieldInfo" />
    </class>
    <class name="InvalidFilterCriteriaException" namespace="System.Reflection">
        <constructor name="InvalidFilterCriteriaException()" argnames="" />
        <constructor name="InvalidFilterCriteriaException(System.String)" argnames="message" />
        <constructor name="InvalidFilterCriteriaException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="InvalidFilterCriteriaException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="ManifestResourceInfo" namespace="System.Reflection">
        <property name="ReferencedAssembly" propertytype="System.Reflection.Assembly" />
        <property name="FileName" propertytype="System.String" />
        <property name="ResourceLocation" propertytype="System.Reflection.ResourceLocation" />
    </class>
    <class name="MethodInfo" namespace="System.Reflection">
        <constructor name="MethodInfo()" argnames="" />
        <property name="MemberType" propertytype="System.Reflection.MemberTypes" />
        <property name="ReturnType" propertytype="System.Type" />
        <property name="ReturnTypeCustomAttributes" propertytype="System.Reflection.ICustomAttributeProvider" />
        <method name="GetBaseDefinition()" argnames="" returntype="System.Reflection.MethodInfo" />
    </class>
    <class name="Missing" namespace="System.Reflection">
        <field name="Value" />
    </class>
    <class name="Module" namespace="System.Reflection">
        <field name="FilterTypeName" />
        <field name="FilterTypeNameIgnoreCase" />
        <property name="ScopeName" propertytype="System.String" />
        <property name="FullyQualifiedName" propertytype="System.String" />
        <property name="Name" propertytype="System.String" />
        <property name="Assembly" propertytype="System.Reflection.Assembly" />
        <method name="IsDefined(System.Type, System.Boolean)" argnames="attributeType, inherit" returntype="System.Boolean" />
        <method name="GetCustomAttributes(System.Boolean)" argnames="inherit" returntype="System.Object[]" />
        <method name="GetCustomAttributes(System.Type, System.Boolean)" argnames="attributeType, inherit" returntype="System.Object[]" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
        <method name="GetMethodImpl(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])" argnames="name, bindingAttr, binder, callConvention, types, modifiers" returntype="System.Reflection.MethodInfo" />
        <method name="GetTypes()" argnames="" returntype="System.Type[]" />
        <method name="FindTypes(System.Reflection.TypeFilter, System.Object)" argnames="filter, filterCriteria" returntype="System.Type[]" />
        <method name="GetType(System.String, System.Boolean, System.Boolean)" argnames="className, throwOnError, ignoreCase" returntype="System.Type" />
        <method name="GetType(System.String)" argnames="className" returntype="System.Type" />
        <method name="GetType(System.String, System.Boolean)" argnames="className, ignoreCase" returntype="System.Type" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="GetSignerCertificate()" argnames="" returntype="System.Security.Cryptography.X509Certificates.X509Certificate" />
        <method name="GetMethods()" argnames="" returntype="System.Reflection.MethodInfo[]" />
        <method name="GetMethod(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])" argnames="name, bindingAttr, binder, callConvention, types, modifiers" returntype="System.Reflection.MethodInfo" />
        <method name="GetMethod(System.String, System.Type[])" argnames="name, types" returntype="System.Reflection.MethodInfo" />
        <method name="GetMethod(System.String)" argnames="name" returntype="System.Reflection.MethodInfo" />
        <method name="GetFields()" argnames="" returntype="System.Reflection.FieldInfo[]" />
        <method name="GetField(System.String)" argnames="name" returntype="System.Reflection.FieldInfo" />
        <method name="GetField(System.String, System.Reflection.BindingFlags)" argnames="name, bindingAttr" returntype="System.Reflection.FieldInfo" />
        <method name="IsResource()" argnames="" returntype="System.Boolean" />
    </class>
    <class name="ParameterInfo" namespace="System.Reflection">
        <constructor name="ParameterInfo()" argnames="" />
        <field name="NameImpl" />
        <field name="ClassImpl" />
        <field name="PositionImpl" />
        <field name="AttrsImpl" />
        <field name="DefaultValueImpl" />
        <field name="MemberImpl" />
        <property name="ParameterType" propertytype="System.Type" />
        <property name="Name" propertytype="System.String" />
        <property name="Position" propertytype="System.Int32" />
        <property name="Attributes" propertytype="System.Reflection.ParameterAttributes" />
        <property name="IsIn" propertytype="System.Boolean" />
        <property name="IsOut" propertytype="System.Boolean" />
        <property name="IsLcid" propertytype="System.Boolean" />
        <property name="IsRetval" propertytype="System.Boolean" />
        <property name="IsOptional" propertytype="System.Boolean" />
        <property name="DefaultValue" propertytype="System.Object" />
        <property name="Member" propertytype="System.Reflection.MemberInfo" />
        <property name="Cache" propertytype="System.Reflection.Cache.InternalCache" />
        <method name="IsDefined(System.Type, System.Boolean)" argnames="attributeType, inherit" returntype="System.Boolean" />
        <method name="GetCustomAttributes(System.Boolean)" argnames="inherit" returntype="System.Object[]" />
        <method name="GetCustomAttributes(System.Type, System.Boolean)" argnames="attributeType, inherit" returntype="System.Object[]" />
    </class>
    <class name="Pointer" namespace="System.Reflection">
        <method name="Box(System.Void*, System.Type)" argnames="ptr, type" returntype="System.Object" />
        <method name="Unbox(System.Object)" argnames="ptr" returntype="System.Void*" />
    </class>
    <class name="PropertyInfo" namespace="System.Reflection">
        <constructor name="PropertyInfo()" argnames="" />
        <property name="MemberType" propertytype="System.Reflection.MemberTypes" />
        <property name="PropertyType" propertytype="System.Type" />
        <property name="Attributes" propertytype="System.Reflection.PropertyAttributes" />
        <property name="IsSpecialName" propertytype="System.Boolean" />
        <property name="CanRead" propertytype="System.Boolean" />
        <property name="CanWrite" propertytype="System.Boolean" />
        <method name="GetIndexParameters()" argnames="" returntype="System.Reflection.ParameterInfo[]" />
        <method name="GetSetMethod(System.Boolean)" argnames="nonPublic" returntype="System.Reflection.MethodInfo" />
        <method name="GetGetMethod(System.Boolean)" argnames="nonPublic" returntype="System.Reflection.MethodInfo" />
        <method name="GetAccessors(System.Boolean)" argnames="nonPublic" returntype="System.Reflection.MethodInfo[]" />
        <method name="SetValue(System.Object, System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)" argnames="obj, value, invokeAttr, binder, index, culture" returntype="System.Void" />
        <method name="SetValue(System.Object, System.Object, System.Object[])" argnames="obj, value, index" returntype="System.Void" />
        <method name="GetValue(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)" argnames="obj, invokeAttr, binder, index, culture" returntype="System.Object" />
        <method name="GetValue(System.Object, System.Object[])" argnames="obj, index" returntype="System.Object" />
        <method name="GetAccessors()" argnames="" returntype="System.Reflection.MethodInfo[]" />
        <method name="GetGetMethod()" argnames="" returntype="System.Reflection.MethodInfo" />
        <method name="GetSetMethod()" argnames="" returntype="System.Reflection.MethodInfo" />
    </class>
    <class name="ReflectionTypeLoadException" namespace="System.Reflection">
        <constructor name="ReflectionTypeLoadException(System.Type[], System.Exception[])" argnames="classes, exceptions" />
        <constructor name="ReflectionTypeLoadException(System.Type[], System.Exception[], System.String)" argnames="classes, exceptions, message" />
        <property name="Types" propertytype="System.Type[]" />
        <property name="LoaderExceptions" propertytype="System.Exception[]" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
    </class>
    <class name="StrongNameKeyPair" namespace="System.Reflection">
        <constructor name="StrongNameKeyPair(System.IO.FileStream)" argnames="keyPairFile" />
        <constructor name="StrongNameKeyPair(System.Byte[])" argnames="keyPairArray" />
        <constructor name="StrongNameKeyPair(System.String)" argnames="keyPairContainer" />
        <property name="PublicKey" propertytype="System.Byte[]" />
    </class>
    <class name="TargetException" namespace="System.Reflection">
        <constructor name="TargetException()" argnames="" />
        <constructor name="TargetException(System.String)" argnames="message" />
        <constructor name="TargetException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="TargetException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="TargetInvocationException" namespace="System.Reflection">
        <constructor name="TargetInvocationException(System.Exception)" argnames="inner" />
        <constructor name="TargetInvocationException(System.String, System.Exception)" argnames="message, inner" />
    </class>
    <class name="TargetParameterCountException" namespace="System.Reflection">
        <constructor name="TargetParameterCountException()" argnames="" />
        <constructor name="TargetParameterCountException(System.String)" argnames="message" />
        <constructor name="TargetParameterCountException(System.String, System.Exception)" argnames="message, inner" />
    </class>
    <class name="TypeDelegator" namespace="System.Reflection">
        <constructor name="TypeDelegator()" argnames="" />
        <constructor name="TypeDelegator(System.Type)" argnames="delegatingType" />
        <field name="typeImpl" />
        <property name="GUID" propertytype="System.Guid" />
        <property name="Module" propertytype="System.Reflection.Module" />
        <property name="Assembly" propertytype="System.Reflection.Assembly" />
        <property name="TypeHandle" propertytype="System.RuntimeTypeHandle" />
        <property name="Name" propertytype="System.String" />
        <property name="FullName" propertytype="System.String" />
        <property name="Namespace" propertytype="System.String" />
        <property name="AssemblyQualifiedName" propertytype="System.String" />
        <property name="BaseType" propertytype="System.Type" />
        <property name="UnderlyingSystemType" propertytype="System.Type" />
        <method name="InvokeMember(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object, System.Object[], System.Reflection.ParameterModifier[], System.Globalization.CultureInfo, System.String[])" argnames="name, invokeAttr, binder, target, args, modifiers, culture, namedParameters" returntype="System.Object" />
        <method name="GetMembers(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Reflection.MemberInfo[]" />
        <method name="GetProperties(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Reflection.PropertyInfo[]" />
        <method name="GetFields(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Reflection.FieldInfo[]" />
        <method name="GetField(System.String, System.Reflection.BindingFlags)" argnames="name, bindingAttr" returntype="System.Reflection.FieldInfo" />
        <method name="GetMethods(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Reflection.MethodInfo[]" />
        <method name="GetInterfaceMap(System.Type)" argnames="interfaceType" returntype="System.Reflection.InterfaceMapping" />
        <method name="HasElementTypeImpl()" argnames="" returntype="System.Boolean" />
        <method name="GetElementType()" argnames="" returntype="System.Type" />
        <method name="IsCOMObjectImpl()" argnames="" returntype="System.Boolean" />
        <method name="IsPrimitiveImpl()" argnames="" returntype="System.Boolean" />
        <method name="IsPointerImpl()" argnames="" returntype="System.Boolean" />
        <method name="IsByRefImpl()" argnames="" returntype="System.Boolean" />
        <method name="IsArrayImpl()" argnames="" returntype="System.Boolean" />
        <method name="GetAttributeFlagsImpl()" argnames="" returntype="System.Reflection.TypeAttributes" />
        <method name="IsValueTypeImpl()" argnames="" returntype="System.Boolean" />
        <method name="GetMember(System.String, System.Reflection.MemberTypes, System.Reflection.BindingFlags)" argnames="name, type, bindingAttr" returntype="System.Reflection.MemberInfo[]" />
        <method name="GetNestedType(System.String, System.Reflection.BindingFlags)" argnames="name, bindingAttr" returntype="System.Type" />
        <method name="GetNestedTypes(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Type[]" />
        <method name="GetPropertyImpl(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Type, System.Type[], System.Reflection.ParameterModifier[])" argnames="name, bindingAttr, binder, returnType, types, modifiers" returntype="System.Reflection.PropertyInfo" />
        <method name="GetEvents(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Reflection.EventInfo[]" />
        <method name="GetEvents()" argnames="" returntype="System.Reflection.EventInfo[]" />
        <method name="GetEvent(System.String, System.Reflection.BindingFlags)" argnames="name, bindingAttr" returntype="System.Reflection.EventInfo" />
        <method name="GetInterfaces()" argnames="" returntype="System.Type[]" />
        <method name="GetInterface(System.String, System.Boolean)" argnames="name, ignoreCase" returntype="System.Type" />
        <method name="GetMethodImpl(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])" argnames="name, bindingAttr, binder, callConvention, types, modifiers" returntype="System.Reflection.MethodInfo" />
        <method name="GetConstructors(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Reflection.ConstructorInfo[]" />
        <method name="GetConstructorImpl(System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])" argnames="bindingAttr, binder, callConvention, types, modifiers" returntype="System.Reflection.ConstructorInfo" />
        <method name="IsDefined(System.Type, System.Boolean)" argnames="attributeType, inherit" returntype="System.Boolean" />
        <method name="GetCustomAttributes(System.Boolean)" argnames="inherit" returntype="System.Object[]" />
        <method name="GetCustomAttributes(System.Type, System.Boolean)" argnames="attributeType, inherit" returntype="System.Object[]" />
    </class>
    <interface name="ICustomAttributeProvider" namespace="System.Reflection">
        <method name="IsDefined(System.Type, System.Boolean)" argnames="attributeType, inherit" returntype="System.Boolean" />
        <method name="GetCustomAttributes(System.Boolean)" argnames="inherit" returntype="System.Object[]" />
        <method name="GetCustomAttributes(System.Type, System.Boolean)" argnames="attributeType, inherit" returntype="System.Object[]" />
    </interface>
    <interface name="IReflect" namespace="System.Reflection">
        <property name="UnderlyingSystemType" propertytype="System.Type" />
        <method name="InvokeMember(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object, System.Object[], System.Reflection.ParameterModifier[], System.Globalization.CultureInfo, System.String[])" argnames="name, invokeAttr, binder, target, args, modifiers, culture, namedParameters" returntype="System.Object" />
        <method name="GetMembers(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Reflection.MemberInfo[]" />
        <method name="GetMember(System.String, System.Reflection.BindingFlags)" argnames="name, bindingAttr" returntype="System.Reflection.MemberInfo[]" />
        <method name="GetProperties(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Reflection.PropertyInfo[]" />
        <method name="GetProperty(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Type, System.Type[], System.Reflection.ParameterModifier[])" argnames="name, bindingAttr, binder, returnType, types, modifiers" returntype="System.Reflection.PropertyInfo" />
        <method name="GetProperty(System.String, System.Reflection.BindingFlags)" argnames="name, bindingAttr" returntype="System.Reflection.PropertyInfo" />
        <method name="GetFields(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Reflection.FieldInfo[]" />
        <method name="GetField(System.String, System.Reflection.BindingFlags)" argnames="name, bindingAttr" returntype="System.Reflection.FieldInfo" />
        <method name="GetMethods(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Reflection.MethodInfo[]" />
        <method name="GetMethod(System.String, System.Reflection.BindingFlags)" argnames="name, bindingAttr" returntype="System.Reflection.MethodInfo" />
        <method name="GetMethod(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Type[], System.Reflection.ParameterModifier[])" argnames="name, bindingAttr, binder, types, modifiers" returntype="System.Reflection.MethodInfo" />
    </interface>
    <struct name="InterfaceMapping" namespace="System.Reflection">
        <field name="TargetType" />
        <field name="InterfaceType" />
        <field name="TargetMethods" />
        <field name="InterfaceMethods" />
    </struct>
    <struct name="ParameterModifier" namespace="System.Reflection">
        <constructor name="ParameterModifier(System.Int32)" argnames="paramaterCount" />
        <property name="Item" propertytype="System.Boolean" />
    </struct>
    <delegate name="ModuleResolveEventHandler" namespace="System.Reflection">
        <constructor name="ModuleResolveEventHandler(System.Object, System.IntPtr)" argnames="object, method" />
        <method name="EndInvoke(System.IAsyncResult)" argnames="result" returntype="System.Reflection.Module" />
        <method name="BeginInvoke(System.Object, System.ResolveEventArgs, System.AsyncCallback, System.Object)" argnames="sender, e, callback, object" returntype="System.IAsyncResult" />
        <method name="Invoke(System.Object, System.ResolveEventArgs)" argnames="sender, e" returntype="System.Reflection.Module" />
    </delegate>
    <delegate name="MemberFilter" namespace="System.Reflection">
        <constructor name="MemberFilter(System.Object, System.IntPtr)" argnames="object, method" />
        <method name="EndInvoke(System.IAsyncResult)" argnames="result" returntype="System.Boolean" />
        <method name="BeginInvoke(System.Reflection.MemberInfo, System.Object, System.AsyncCallback, System.Object)" argnames="m, filterCriteria, callback, object" returntype="System.IAsyncResult" />
        <method name="Invoke(System.Reflection.MemberInfo, System.Object)" argnames="m, filterCriteria" returntype="System.Boolean" />
    </delegate>
    <delegate name="TypeFilter" namespace="System.Reflection">
        <constructor name="TypeFilter(System.Object, System.IntPtr)" argnames="object, method" />
        <method name="EndInvoke(System.IAsyncResult)" argnames="result" returntype="System.Boolean" />
        <method name="BeginInvoke(System.Type, System.Object, System.AsyncCallback, System.Object)" argnames="m, filterCriteria, callback, object" returntype="System.IAsyncResult" />
        <method name="Invoke(System.Type, System.Object)" argnames="m, filterCriteria" returntype="System.Boolean" />
    </delegate>
    <enum name="AssemblyNameFlags" namespace="System.Reflection">
        <field name="None" />
        <field name="PublicKey" />
    </enum>
    <enum name="BindingFlags" namespace="System.Reflection">
        <field name="Default" />
        <field name="IgnoreCase" />
        <field name="DeclaredOnly" />
        <field name="Instance" />
        <field name="Static" />
        <field name="Public" />
        <field name="NonPublic" />
        <field name="FlattenHierarchy" />
        <field name="InvokeMethod" />
        <field name="CreateInstance" />
        <field name="GetField" />
        <field name="SetField" />
        <field name="GetProperty" />
        <field name="SetProperty" />
        <field name="PutDispProperty" />
        <field name="PutRefDispProperty" />
        <field name="ExactBinding" />
        <field name="SuppressChangeType" />
        <field name="OptionalParamBinding" />
        <field name="IgnoreReturn" />
    </enum>
    <enum name="CallingConventions" namespace="System.Reflection">
        <field name="Standard" />
        <field name="VarArgs" />
        <field name="Any" />
        <field name="HasThis" />
        <field name="ExplicitThis" />
    </enum>
    <enum name="EventAttributes" namespace="System.Reflection">
        <field name="None" />
        <field name="SpecialName" />
        <field name="ReservedMask" />
        <field name="RTSpecialName" />
    </enum>
    <enum name="FieldAttributes" namespace="System.Reflection">
        <field name="FieldAccessMask" />
        <field name="PrivateScope" />
        <field name="Private" />
        <field name="FamANDAssem" />
        <field name="Assembly" />
        <field name="Family" />
        <field name="FamORAssem" />
        <field name="Public" />
        <field name="Static" />
        <field name="InitOnly" />
        <field name="Literal" />
        <field name="NotSerialized" />
        <field name="SpecialName" />
        <field name="PinvokeImpl" />
        <field name="ReservedMask" />
        <field name="RTSpecialName" />
        <field name="HasFieldMarshal" />
        <field name="HasDefault" />
        <field name="HasFieldRVA" />
    </enum>
    <enum name="ResourceLocation" namespace="System.Reflection">
        <field name="Embedded" />
        <field name="ContainedInAnotherAssembly" />
        <field name="ContainedInManifestFile" />
    </enum>
    <enum name="MemberTypes" namespace="System.Reflection">
        <field name="Constructor" />
        <field name="Event" />
        <field name="Field" />
        <field name="Method" />
        <field name="Property" />
        <field name="TypeInfo" />
        <field name="Custom" />
        <field name="NestedType" />
        <field name="All" />
    </enum>
    <enum name="MethodAttributes" namespace="System.Reflection">
        <field name="MemberAccessMask" />
        <field name="PrivateScope" />
        <field name="Private" />
        <field name="FamANDAssem" />
        <field name="Assembly" />
        <field name="Family" />
        <field name="FamORAssem" />
        <field name="Public" />
        <field name="Static" />
        <field name="Final" />
        <field name="Virtual" />
        <field name="HideBySig" />
        <field name="VtableLayoutMask" />
        <field name="ReuseSlot" />
        <field name="NewSlot" />
        <field name="Abstract" />
        <field name="SpecialName" />
        <field name="PinvokeImpl" />
        <field name="UnmanagedExport" />
        <field name="RTSpecialName" />
        <field name="ReservedMask" />
        <field name="HasSecurity" />
        <field name="RequireSecObject" />
    </enum>
    <enum name="MethodImplAttributes" namespace="System.Reflection">
        <field name="CodeTypeMask" />
        <field name="IL" />
        <field name="Native" />
        <field name="OPTIL" />
        <field name="Runtime" />
        <field name="ManagedMask" />
        <field name="Unmanaged" />
        <field name="Managed" />
        <field name="ForwardRef" />
        <field name="PreserveSig" />
        <field name="InternalCall" />
        <field name="Synchronized" />
        <field name="NoInlining" />
        <field name="MaxMethodImplVal" />
    </enum>
    <enum name="ParameterAttributes" namespace="System.Reflection">
        <field name="None" />
        <field name="In" />
        <field name="Out" />
        <field name="Lcid" />
        <field name="Retval" />
        <field name="Optional" />
        <field name="ReservedMask" />
        <field name="HasDefault" />
        <field name="HasFieldMarshal" />
        <field name="Reserved3" />
        <field name="Reserved4" />
    </enum>
    <enum name="PropertyAttributes" namespace="System.Reflection">
        <field name="None" />
        <field name="SpecialName" />
        <field name="ReservedMask" />
        <field name="RTSpecialName" />
        <field name="HasDefault" />
        <field name="Reserved2" />
        <field name="Reserved3" />
        <field name="Reserved4" />
    </enum>
    <enum name="ResourceAttributes" namespace="System.Reflection">
        <field name="Public" />
        <field name="Private" />
    </enum>
    <enum name="TypeAttributes" namespace="System.Reflection">
        <field name="VisibilityMask" />
        <field name="NotPublic" />
        <field name="Public" />
        <field name="NestedPublic" />
        <field name="NestedPrivate" />
        <field name="NestedFamily" />
        <field name="NestedAssembly" />
        <field name="NestedFamANDAssem" />
        <field name="NestedFamORAssem" />
        <field name="LayoutMask" />
        <field name="AutoLayout" />
        <field name="SequentialLayout" />
        <field name="ExplicitLayout" />
        <field name="ClassSemanticsMask" />
        <field name="Class" />
        <field name="Interface" />
        <field name="Abstract" />
        <field name="Sealed" />
        <field name="SpecialName" />
        <field name="Import" />
        <field name="Serializable" />
        <field name="StringFormatMask" />
        <field name="AnsiClass" />
        <field name="UnicodeClass" />
        <field name="AutoClass" />
        <field name="BeforeFieldInit" />
        <field name="ReservedMask" />
        <field name="RTSpecialName" />
        <field name="HasSecurity" />
    </enum>
    <class name="WaitHandle" namespace="System.Threading">
        <constructor name="WaitHandle()" argnames="" />
        <field name="InvalidHandle" />
        <field name="WaitTimeout" />
        <property name="Handle" propertytype="System.IntPtr" />
        <method name="Dispose(System.Boolean)" argnames="explicitDisposing" returntype="System.Void" />
        <method name="Close()" argnames="" returntype="System.Void" />
        <method name="WaitOne()" argnames="" returntype="System.Boolean" />
        <method name="WaitOne(System.TimeSpan, System.Boolean)" argnames="timeout, exitContext" returntype="System.Boolean" />
        <method name="WaitOne(System.Int32, System.Boolean)" argnames="millisecondsTimeout, exitContext" returntype="System.Boolean" />
        <method name="Finalize()" argnames="" returntype="System.Void" />
        <method name="WaitAll(System.Threading.WaitHandle[], System.Int32, System.Boolean)" argnames="waitHandles, millisecondsTimeout, exitContext" returntype="System.Boolean" />
        <method name="WaitAll(System.Threading.WaitHandle[], System.TimeSpan, System.Boolean)" argnames="waitHandles, timeout, exitContext" returntype="System.Boolean" />
        <method name="WaitAll(System.Threading.WaitHandle[])" argnames="waitHandles" returntype="System.Boolean" />
        <method name="WaitAny(System.Threading.WaitHandle[], System.Int32, System.Boolean)" argnames="waitHandles, millisecondsTimeout, exitContext" returntype="System.Int32" />
        <method name="WaitAny(System.Threading.WaitHandle[], System.TimeSpan, System.Boolean)" argnames="waitHandles, timeout, exitContext" returntype="System.Int32" />
        <method name="WaitAny(System.Threading.WaitHandle[])" argnames="waitHandles" returntype="System.Int32" />
    </class>
    <class name="AutoResetEvent" namespace="System.Threading">
        <constructor name="AutoResetEvent(System.Boolean)" argnames="initialState" />
        <method name="Reset()" argnames="" returntype="System.Boolean" />
        <method name="Set()" argnames="" returntype="System.Boolean" />
    </class>
    <class name="CompressedStack" namespace="System.Threading">
        <property name="UnmanagedCompressedStack" propertytype="System.IntPtr" />
        <method name="Finalize()" argnames="" returntype="System.Void" />
    </class>
    <class name="Interlocked" namespace="System.Threading">
        <method name="Increment(System.Int32&amp;)" argnames="location" returntype="System.Int32" />
        <method name="Decrement(System.Int32&amp;)" argnames="location" returntype="System.Int32" />
        <method name="Increment(System.Int64&amp;)" argnames="location" returntype="System.Int64" />
        <method name="Decrement(System.Int64&amp;)" argnames="location" returntype="System.Int64" />
        <method name="Exchange(System.Int32&amp;, System.Int32)" argnames="location1, value" returntype="System.Int32" />
        <method name="CompareExchange(System.Int32&amp;, System.Int32, System.Int32)" argnames="location1, value, comparand" returntype="System.Int32" />
        <method name="Exchange(System.Single&amp;, System.Single)" argnames="location1, value" returntype="System.Single" />
        <method name="CompareExchange(System.Single&amp;, System.Single, System.Single)" argnames="location1, value, comparand" returntype="System.Single" />
        <method name="Exchange(System.Object&amp;, System.Object)" argnames="location1, value" returntype="System.Object" />
        <method name="CompareExchange(System.Object&amp;, System.Object, System.Object)" argnames="location1, value, comparand" returntype="System.Object" />
    </class>
    <class name="ManualResetEvent" namespace="System.Threading">
        <constructor name="ManualResetEvent(System.Boolean)" argnames="initialState" />
        <method name="Reset()" argnames="" returntype="System.Boolean" />
        <method name="Set()" argnames="" returntype="System.Boolean" />
    </class>
    <class name="Monitor" namespace="System.Threading">
        <method name="Enter(System.Object)" argnames="obj" returntype="System.Void" />
        <method name="Exit(System.Object)" argnames="obj" returntype="System.Void" />
        <method name="TryEnter(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="TryEnter(System.Object, System.Int32)" argnames="obj, millisecondsTimeout" returntype="System.Boolean" />
        <method name="TryEnter(System.Object, System.TimeSpan)" argnames="obj, timeout" returntype="System.Boolean" />
        <method name="Wait(System.Object, System.Int32, System.Boolean)" argnames="obj, millisecondsTimeout, exitContext" returntype="System.Boolean" />
        <method name="Wait(System.Object, System.TimeSpan, System.Boolean)" argnames="obj, timeout, exitContext" returntype="System.Boolean" />
        <method name="Wait(System.Object, System.Int32)" argnames="obj, millisecondsTimeout" returntype="System.Boolean" />
        <method name="Wait(System.Object, System.TimeSpan)" argnames="obj, timeout" returntype="System.Boolean" />
        <method name="Wait(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="Pulse(System.Object)" argnames="obj" returntype="System.Void" />
        <method name="PulseAll(System.Object)" argnames="obj" returntype="System.Void" />
    </class>
    <class name="Mutex" namespace="System.Threading">
        <constructor name="Mutex(System.Boolean, System.String, System.Boolean&amp;)" argnames="initiallyOwned, name, createdNew" />
        <constructor name="Mutex(System.Boolean, System.String)" argnames="initiallyOwned, name" />
        <constructor name="Mutex(System.Boolean)" argnames="initiallyOwned" />
        <constructor name="Mutex()" argnames="" />
        <method name="ReleaseMutex()" argnames="" returntype="System.Void" />
    </class>
    <class name="Overlapped" namespace="System.Threading">
        <constructor name="Overlapped()" argnames="" />
        <constructor name="Overlapped(System.Int32, System.Int32, System.Int32, System.IAsyncResult)" argnames="offsetLo, offsetHi, hEvent, ar" />
        <property name="AsyncResult" propertytype="System.IAsyncResult" />
        <property name="OffsetLow" propertytype="System.Int32" />
        <property name="OffsetHigh" propertytype="System.Int32" />
        <property name="EventHandle" propertytype="System.Int32" />
        <method name="Pack(System.Threading.IOCompletionCallback)" argnames="iocb" returntype="System.Threading.NativeOverlapped*" />
        <method name="UnsafePack(System.Threading.IOCompletionCallback)" argnames="iocb" returntype="System.Threading.NativeOverlapped*" />
        <method name="Unpack(System.Threading.NativeOverlapped*)" argnames="nativeOverlappedPtr" returntype="System.Threading.Overlapped" />
        <method name="Free(System.Threading.NativeOverlapped*)" argnames="nativeOverlappedPtr" returntype="System.Void" />
    </class>
    <class name="ReaderWriterLock" namespace="System.Threading">
        <constructor name="ReaderWriterLock()" argnames="" />
        <property name="IsReaderLockHeld" propertytype="System.Boolean" />
        <property name="IsWriterLockHeld" propertytype="System.Boolean" />
        <property name="WriterSeqNum" propertytype="System.Int32" />
        <method name="AcquireReaderLock(System.Int32)" argnames="millisecondsTimeout" returntype="System.Void" />
        <method name="AcquireReaderLock(System.TimeSpan)" argnames="timeout" returntype="System.Void" />
        <method name="AcquireWriterLock(System.Int32)" argnames="millisecondsTimeout" returntype="System.Void" />
        <method name="AcquireWriterLock(System.TimeSpan)" argnames="timeout" returntype="System.Void" />
        <method name="ReleaseReaderLock()" argnames="" returntype="System.Void" />
        <method name="ReleaseWriterLock()" argnames="" returntype="System.Void" />
        <method name="UpgradeToWriterLock(System.Int32)" argnames="millisecondsTimeout" returntype="System.Threading.LockCookie" />
        <method name="UpgradeToWriterLock(System.TimeSpan)" argnames="timeout" returntype="System.Threading.LockCookie" />
        <method name="DowngradeFromWriterLock(System.Threading.LockCookie&amp;)" argnames="lockCookie" returntype="System.Void" />
        <method name="ReleaseLock()" argnames="" returntype="System.Threading.LockCookie" />
        <method name="RestoreLock(System.Threading.LockCookie&amp;)" argnames="lockCookie" returntype="System.Void" />
        <method name="AnyWritersSince(System.Int32)" argnames="seqNum" returntype="System.Boolean" />
    </class>
    <class name="SynchronizationLockException" namespace="System.Threading">
        <constructor name="SynchronizationLockException()" argnames="" />
        <constructor name="SynchronizationLockException(System.String)" argnames="message" />
        <constructor name="SynchronizationLockException(System.String, System.Exception)" argnames="message, innerException" />
        <constructor name="SynchronizationLockException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="Thread" namespace="System.Threading">
        <constructor name="Thread(System.Threading.ThreadStart)" argnames="start" />
        <property name="Priority" propertytype="System.Threading.ThreadPriority" />
        <property name="IsAlive" propertytype="System.Boolean" />
        <property name="IsThreadPoolThread" propertytype="System.Boolean" />
        <property name="CurrentThread" propertytype="System.Threading.Thread" />
        <property name="IsBackground" propertytype="System.Boolean" />
        <property name="ThreadState" propertytype="System.Threading.ThreadState" />
        <property name="ApartmentState" propertytype="System.Threading.ApartmentState" />
        <property name="CurrentUICulture" propertytype="System.Globalization.CultureInfo" />
        <property name="CurrentCulture" propertytype="System.Globalization.CultureInfo" />
        <property name="CurrentContext" propertytype="System.Runtime.Remoting.Contexts.Context" />
        <property name="CurrentPrincipal" propertytype="System.Security.Principal.IPrincipal" />
        <property name="Name" propertytype="System.String" />
        <property name="ExceptionState" propertytype="System.Object" />
        <method name="Finalize()" argnames="" returntype="System.Void" />
        <method name="Start()" argnames="" returntype="System.Void" />
        <method name="Abort(System.Object)" argnames="stateInfo" returntype="System.Void" />
        <method name="Abort()" argnames="" returntype="System.Void" />
        <method name="ResetAbort()" argnames="" returntype="System.Void" />
        <method name="Suspend()" argnames="" returntype="System.Void" />
        <method name="Resume()" argnames="" returntype="System.Void" />
        <method name="Interrupt()" argnames="" returntype="System.Void" />
        <method name="Join()" argnames="" returntype="System.Void" />
        <method name="Join(System.Int32)" argnames="millisecondsTimeout" returntype="System.Boolean" />
        <method name="Join(System.TimeSpan)" argnames="timeout" returntype="System.Boolean" />
        <method name="Sleep(System.Int32)" argnames="millisecondsTimeout" returntype="System.Void" />
        <method name="Sleep(System.TimeSpan)" argnames="timeout" returntype="System.Void" />
        <method name="SpinWait(System.Int32)" argnames="iterations" returntype="System.Void" />
        <method name="AllocateDataSlot()" argnames="" returntype="System.LocalDataStoreSlot" />
        <method name="AllocateNamedDataSlot(System.String)" argnames="name" returntype="System.LocalDataStoreSlot" />
        <method name="GetNamedDataSlot(System.String)" argnames="name" returntype="System.LocalDataStoreSlot" />
        <method name="FreeNamedDataSlot(System.String)" argnames="name" returntype="System.Void" />
        <method name="GetData(System.LocalDataStoreSlot)" argnames="slot" returntype="System.Object" />
        <method name="SetData(System.LocalDataStoreSlot, System.Object)" argnames="slot, data" returntype="System.Void" />
        <method name="GetDomain()" argnames="" returntype="System.AppDomain" />
        <method name="GetDomainID()" argnames="" returntype="System.Int32" />
    </class>
    <class name="ThreadAbortException" namespace="System.Threading">
        <property name="ExceptionState" propertytype="System.Object" />
    </class>
    <class name="ThreadInterruptedException" namespace="System.Threading">
        <constructor name="ThreadInterruptedException()" argnames="" />
        <constructor name="ThreadInterruptedException(System.String)" argnames="message" />
        <constructor name="ThreadInterruptedException(System.String, System.Exception)" argnames="message, innerException" />
        <constructor name="ThreadInterruptedException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="RegisteredWaitHandle" namespace="System.Threading">
        <method name="Finalize()" argnames="" returntype="System.Void" />
        <method name="Unregister(System.Threading.WaitHandle)" argnames="waitObject" returntype="System.Boolean" />
    </class>
    <class name="ThreadPool" namespace="System.Threading">
        <method name="GetMaxThreads(System.Int32&amp;, System.Int32&amp;)" argnames="workerThreads, completionPortThreads" returntype="System.Void" />
        <method name="GetAvailableThreads(System.Int32&amp;, System.Int32&amp;)" argnames="workerThreads, completionPortThreads" returntype="System.Void" />
        <method name="RegisterWaitForSingleObject(System.Threading.WaitHandle, System.Threading.WaitOrTimerCallback, System.Object, System.UInt32, System.Boolean)" argnames="waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce" returntype="System.Threading.RegisteredWaitHandle" />
        <method name="UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle, System.Threading.WaitOrTimerCallback, System.Object, System.UInt32, System.Boolean)" argnames="waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce" returntype="System.Threading.RegisteredWaitHandle" />
        <method name="RegisterWaitForSingleObject(System.Threading.WaitHandle, System.Threading.WaitOrTimerCallback, System.Object, System.Int32, System.Boolean)" argnames="waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce" returntype="System.Threading.RegisteredWaitHandle" />
        <method name="UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle, System.Threading.WaitOrTimerCallback, System.Object, System.Int32, System.Boolean)" argnames="waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce" returntype="System.Threading.RegisteredWaitHandle" />
        <method name="RegisterWaitForSingleObject(System.Threading.WaitHandle, System.Threading.WaitOrTimerCallback, System.Object, System.Int64, System.Boolean)" argnames="waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce" returntype="System.Threading.RegisteredWaitHandle" />
        <method name="UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle, System.Threading.WaitOrTimerCallback, System.Object, System.Int64, System.Boolean)" argnames="waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce" returntype="System.Threading.RegisteredWaitHandle" />
        <method name="RegisterWaitForSingleObject(System.Threading.WaitHandle, System.Threading.WaitOrTimerCallback, System.Object, System.TimeSpan, System.Boolean)" argnames="waitObject, callBack, state, timeout, executeOnlyOnce" returntype="System.Threading.RegisteredWaitHandle" />
        <method name="UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle, System.Threading.WaitOrTimerCallback, System.Object, System.TimeSpan, System.Boolean)" argnames="waitObject, callBack, state, timeout, executeOnlyOnce" returntype="System.Threading.RegisteredWaitHandle" />
        <method name="QueueUserWorkItem(System.Threading.WaitCallback, System.Object)" argnames="callBack, state" returntype="System.Boolean" />
        <method name="QueueUserWorkItem(System.Threading.WaitCallback)" argnames="callBack" returntype="System.Boolean" />
        <method name="UnsafeQueueUserWorkItem(System.Threading.WaitCallback, System.Object)" argnames="callBack, state" returntype="System.Boolean" />
        <method name="BindHandle(System.IntPtr)" argnames="osHandle" returntype="System.Boolean" />
    </class>
    <class name="ThreadStateException" namespace="System.Threading">
        <constructor name="ThreadStateException()" argnames="" />
        <constructor name="ThreadStateException(System.String)" argnames="message" />
        <constructor name="ThreadStateException(System.String, System.Exception)" argnames="message, innerException" />
        <constructor name="ThreadStateException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="Timeout" namespace="System.Threading">
        <field name="Infinite" />
    </class>
    <class name="Timer" namespace="System.Threading">
        <constructor name="Timer(System.Threading.TimerCallback, System.Object, System.Int32, System.Int32)" argnames="callback, state, dueTime, period" />
        <constructor name="Timer(System.Threading.TimerCallback, System.Object, System.TimeSpan, System.TimeSpan)" argnames="callback, state, dueTime, period" />
        <constructor name="Timer(System.Threading.TimerCallback, System.Object, System.UInt32, System.UInt32)" argnames="callback, state, dueTime, period" />
        <constructor name="Timer(System.Threading.TimerCallback, System.Object, System.Int64, System.Int64)" argnames="callback, state, dueTime, period" />
        <method name="Dispose()" argnames="" returntype="System.Void" />
        <method name="Finalize()" argnames="" returntype="System.Void" />
        <method name="Change(System.Int32, System.Int32)" argnames="dueTime, period" returntype="System.Boolean" />
        <method name="Change(System.TimeSpan, System.TimeSpan)" argnames="dueTime, period" returntype="System.Boolean" />
        <method name="Change(System.UInt32, System.UInt32)" argnames="dueTime, period" returntype="System.Boolean" />
        <method name="Change(System.Int64, System.Int64)" argnames="dueTime, period" returntype="System.Boolean" />
        <method name="Dispose(System.Threading.WaitHandle)" argnames="notifyObject" returntype="System.Boolean" />
    </class>
    <struct name="LockCookie" namespace="System.Threading" />
    <struct name="NativeOverlapped" namespace="System.Threading">
        <field name="InternalLow" />
        <field name="InternalHigh" />
        <field name="OffsetLow" />
        <field name="OffsetHigh" />
        <field name="EventHandle" />
    </struct>
    <delegate name="WaitCallback" namespace="System.Threading">
        <constructor name="WaitCallback(System.Object, System.IntPtr)" argnames="object, method" />
        <method name="EndInvoke(System.IAsyncResult)" argnames="result" returntype="System.Void" />
        <method name="BeginInvoke(System.Object, System.AsyncCallback, System.Object)" argnames="state, callback, object" returntype="System.IAsyncResult" />
        <method name="Invoke(System.Object)" argnames="state" returntype="System.Void" />
    </delegate>
    <delegate name="WaitOrTimerCallback" namespace="System.Threading">
        <constructor name="WaitOrTimerCallback(System.Object, System.IntPtr)" argnames="object, method" />
        <method name="EndInvoke(System.IAsyncResult)" argnames="result" returntype="System.Void" />
        <method name="BeginInvoke(System.Object, System.Boolean, System.AsyncCallback, System.Object)" argnames="state, timedOut, callback, object" returntype="System.IAsyncResult" />
        <method name="Invoke(System.Object, System.Boolean)" argnames="state, timedOut" returntype="System.Void" />
    </delegate>
    <delegate name="IOCompletionCallback" namespace="System.Threading">
        <constructor name="IOCompletionCallback(System.Object, System.IntPtr)" argnames="object, method" />
        <method name="EndInvoke(System.IAsyncResult)" argnames="result" returntype="System.Void" />
        <method name="BeginInvoke(System.UInt32, System.UInt32, System.Threading.NativeOverlapped*, System.AsyncCallback, System.Object)" argnames="errorCode, numBytes, pOVERLAP, callback, object" returntype="System.IAsyncResult" />
        <method name="Invoke(System.UInt32, System.UInt32, System.Threading.NativeOverlapped*)" argnames="errorCode, numBytes, pOVERLAP" returntype="System.Void" />
    </delegate>
    <delegate name="ThreadStart" namespace="System.Threading">
        <constructor name="ThreadStart(System.Object, System.IntPtr)" argnames="object, method" />
        <method name="EndInvoke(System.IAsyncResult)" argnames="result" returntype="System.Void" />
        <method name="BeginInvoke(System.AsyncCallback, System.Object)" argnames="callback, object" returntype="System.IAsyncResult" />
        <method name="Invoke()" argnames="" returntype="System.Void" />
    </delegate>
    <delegate name="TimerCallback" namespace="System.Threading">
        <constructor name="TimerCallback(System.Object, System.IntPtr)" argnames="object, method" />
        <method name="EndInvoke(System.IAsyncResult)" argnames="result" returntype="System.Void" />
        <method name="BeginInvoke(System.Object, System.AsyncCallback, System.Object)" argnames="state, callback, object" returntype="System.IAsyncResult" />
        <method name="Invoke(System.Object)" argnames="state" returntype="System.Void" />
    </delegate>
    <enum name="ApartmentState" namespace="System.Threading">
        <field name="STA" />
        <field name="MTA" />
        <field name="Unknown" />
    </enum>
    <enum name="ThreadPriority" namespace="System.Threading">
        <field name="Lowest" />
        <field name="BelowNormal" />
        <field name="Normal" />
        <field name="AboveNormal" />
        <field name="Highest" />
    </enum>
    <enum name="ThreadState" namespace="System.Threading">
        <field name="Running" />
        <field name="StopRequested" />
        <field name="SuspendRequested" />
        <field name="Background" />
        <field name="Unstarted" />
        <field name="Stopped" />
        <field name="WaitSleepJoin" />
        <field name="Suspended" />
        <field name="AbortRequested" />
        <field name="Aborted" />
    </enum>
    <class name="ObjectHandle" namespace="System.Runtime.Remoting">
        <constructor name="ObjectHandle(System.Object)" argnames="o" />
        <method name="Unwrap()" argnames="" returntype="System.Object" />
        <method name="InitializeLifetimeService()" argnames="" returntype="System.Object" />
    </class>
    <class name="ObjRef" namespace="System.Runtime.Remoting">
        <constructor name="ObjRef(System.MarshalByRefObject, System.Type)" argnames="o, requestedType" />
        <constructor name="ObjRef(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
        <constructor name="ObjRef()" argnames="" />
        <property name="URI" propertytype="System.String" />
        <property name="TypeInfo" propertytype="System.Runtime.Remoting.IRemotingTypeInfo" />
        <property name="EnvoyInfo" propertytype="System.Runtime.Remoting.IEnvoyInfo" />
        <property name="ChannelInfo" propertytype="System.Runtime.Remoting.IChannelInfo" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
        <method name="GetRealObject(System.Runtime.Serialization.StreamingContext)" argnames="context" returntype="System.Object" />
        <method name="IsFromThisProcess()" argnames="" returntype="System.Boolean" />
        <method name="IsFromThisAppDomain()" argnames="" returntype="System.Boolean" />
    </class>
    <class name="RemotingConfiguration" namespace="System.Runtime.Remoting">
        <property name="ApplicationName" propertytype="System.String" />
        <property name="ApplicationId" propertytype="System.String" />
        <property name="ProcessId" propertytype="System.String" />
        <method name="Configure(System.String)" argnames="filename" returntype="System.Void" />
        <method name="RegisterActivatedServiceType(System.Type)" argnames="type" returntype="System.Void" />
        <method name="RegisterActivatedServiceType(System.Runtime.Remoting.ActivatedServiceTypeEntry)" argnames="entry" returntype="System.Void" />
        <method name="RegisterWellKnownServiceType(System.Type, System.String, System.Runtime.Remoting.WellKnownObjectMode)" argnames="type, objectUri, mode" returntype="System.Void" />
        <method name="RegisterWellKnownServiceType(System.Runtime.Remoting.WellKnownServiceTypeEntry)" argnames="entry" returntype="System.Void" />
        <method name="RegisterActivatedClientType(System.Type, System.String)" argnames="type, appUrl" returntype="System.Void" />
        <method name="RegisterActivatedClientType(System.Runtime.Remoting.ActivatedClientTypeEntry)" argnames="entry" returntype="System.Void" />
        <method name="RegisterWellKnownClientType(System.Type, System.String)" argnames="type, objectUrl" returntype="System.Void" />
        <method name="RegisterWellKnownClientType(System.Runtime.Remoting.WellKnownClientTypeEntry)" argnames="entry" returntype="System.Void" />
        <method name="GetRegisteredActivatedServiceTypes()" argnames="" returntype="System.Runtime.Remoting.ActivatedServiceTypeEntry[]" />
        <method name="GetRegisteredWellKnownServiceTypes()" argnames="" returntype="System.Runtime.Remoting.WellKnownServiceTypeEntry[]" />
        <method name="GetRegisteredActivatedClientTypes()" argnames="" returntype="System.Runtime.Remoting.ActivatedClientTypeEntry[]" />
        <method name="GetRegisteredWellKnownClientTypes()" argnames="" returntype="System.Runtime.Remoting.WellKnownClientTypeEntry[]" />
        <method name="IsRemotelyActivatedClientType(System.Type)" argnames="svrType" returntype="System.Runtime.Remoting.ActivatedClientTypeEntry" />
        <method name="IsRemotelyActivatedClientType(System.String, System.String)" argnames="typeName, assemblyName" returntype="System.Runtime.Remoting.ActivatedClientTypeEntry" />
        <method name="IsWellKnownClientType(System.Type)" argnames="svrType" returntype="System.Runtime.Remoting.WellKnownClientTypeEntry" />
        <method name="IsWellKnownClientType(System.String, System.String)" argnames="typeName, assemblyName" returntype="System.Runtime.Remoting.WellKnownClientTypeEntry" />
        <method name="IsActivationAllowed(System.Type)" argnames="svrType" returntype="System.Boolean" />
    </class>
    <class name="TypeEntry" namespace="System.Runtime.Remoting">
        <constructor name="TypeEntry()" argnames="" />
        <property name="TypeName" propertytype="System.String" />
        <property name="AssemblyName" propertytype="System.String" />
    </class>
    <class name="ActivatedClientTypeEntry" namespace="System.Runtime.Remoting">
        <constructor name="ActivatedClientTypeEntry(System.String, System.String, System.String)" argnames="typeName, assemblyName, appUrl" />
        <constructor name="ActivatedClientTypeEntry(System.Type, System.String)" argnames="type, appUrl" />
        <property name="ApplicationUrl" propertytype="System.String" />
        <property name="ObjectType" propertytype="System.Type" />
        <property name="ContextAttributes" propertytype="System.Runtime.Remoting.Contexts.IContextAttribute[]" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </class>
    <class name="ActivatedServiceTypeEntry" namespace="System.Runtime.Remoting">
        <constructor name="ActivatedServiceTypeEntry(System.String, System.String)" argnames="typeName, assemblyName" />
        <constructor name="ActivatedServiceTypeEntry(System.Type)" argnames="type" />
        <property name="ObjectType" propertytype="System.Type" />
        <property name="ContextAttributes" propertytype="System.Runtime.Remoting.Contexts.IContextAttribute[]" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </class>
    <class name="WellKnownClientTypeEntry" namespace="System.Runtime.Remoting">
        <constructor name="WellKnownClientTypeEntry(System.String, System.String, System.String)" argnames="typeName, assemblyName, objectUrl" />
        <constructor name="WellKnownClientTypeEntry(System.Type, System.String)" argnames="type, objectUrl" />
        <property name="ObjectUrl" propertytype="System.String" />
        <property name="ObjectType" propertytype="System.Type" />
        <property name="ApplicationUrl" propertytype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </class>
    <class name="WellKnownServiceTypeEntry" namespace="System.Runtime.Remoting">
        <constructor name="WellKnownServiceTypeEntry(System.String, System.String, System.String, System.Runtime.Remoting.WellKnownObjectMode)" argnames="typeName, assemblyName, objectUri, mode" />
        <constructor name="WellKnownServiceTypeEntry(System.Type, System.String, System.Runtime.Remoting.WellKnownObjectMode)" argnames="type, objectUri, mode" />
        <property name="ObjectUri" propertytype="System.String" />
        <property name="Mode" propertytype="System.Runtime.Remoting.WellKnownObjectMode" />
        <property name="ObjectType" propertytype="System.Type" />
        <property name="ContextAttributes" propertytype="System.Runtime.Remoting.Contexts.IContextAttribute[]" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </class>
    <class name="RemotingException" namespace="System.Runtime.Remoting">
        <constructor name="RemotingException()" argnames="" />
        <constructor name="RemotingException(System.String)" argnames="message" />
        <constructor name="RemotingException(System.String, System.Exception)" argnames="message, InnerException" />
        <constructor name="RemotingException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="ServerException" namespace="System.Runtime.Remoting">
        <constructor name="ServerException()" argnames="" />
        <constructor name="ServerException(System.String)" argnames="message" />
        <constructor name="ServerException(System.String, System.Exception)" argnames="message, InnerException" />
    </class>
    <class name="RemotingTimeoutException" namespace="System.Runtime.Remoting">
        <constructor name="RemotingTimeoutException()" argnames="" />
        <constructor name="RemotingTimeoutException(System.String)" argnames="message" />
        <constructor name="RemotingTimeoutException(System.String, System.Exception)" argnames="message, InnerException" />
    </class>
    <class name="RemotingServices" namespace="System.Runtime.Remoting">
        <method name="IsTransparentProxy(System.Object)" argnames="proxy" returntype="System.Boolean" />
        <method name="IsObjectOutOfContext(System.Object)" argnames="tp" returntype="System.Boolean" />
        <method name="IsObjectOutOfAppDomain(System.Object)" argnames="tp" returntype="System.Boolean" />
        <method name="GetRealProxy(System.Object)" argnames="proxy" returntype="System.Runtime.Remoting.Proxies.RealProxy" />
        <method name="GetSessionIdForMethodMessage(System.Runtime.Remoting.Messaging.IMethodMessage)" argnames="msg" returntype="System.String" />
        <method name="GetLifetimeService(System.MarshalByRefObject)" argnames="obj" returntype="System.Object" />
        <method name="GetObjectUri(System.MarshalByRefObject)" argnames="obj" returntype="System.String" />
        <method name="SetObjectUriForMarshal(System.MarshalByRefObject, System.String)" argnames="obj, uri" returntype="System.Void" />
        <method name="Marshal(System.MarshalByRefObject)" argnames="Obj" returntype="System.Runtime.Remoting.ObjRef" />
        <method name="Marshal(System.MarshalByRefObject, System.String)" argnames="Obj, URI" returntype="System.Runtime.Remoting.ObjRef" />
        <method name="Marshal(System.MarshalByRefObject, System.String, System.Type)" argnames="Obj, ObjURI, RequestedType" returntype="System.Runtime.Remoting.ObjRef" />
        <method name="GetObjectData(System.Object, System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="obj, info, context" returntype="System.Void" />
        <method name="Unmarshal(System.Runtime.Remoting.ObjRef)" argnames="objectRef" returntype="System.Object" />
        <method name="Unmarshal(System.Runtime.Remoting.ObjRef, System.Boolean)" argnames="objectRef, fRefine" returntype="System.Object" />
        <method name="Connect(System.Type, System.String)" argnames="classToProxy, url" returntype="System.Object" />
        <method name="Connect(System.Type, System.String, System.Object)" argnames="classToProxy, url, data" returntype="System.Object" />
        <method name="Disconnect(System.MarshalByRefObject)" argnames="obj" returntype="System.Boolean" />
        <method name="GetEnvoyChainForProxy(System.MarshalByRefObject)" argnames="obj" returntype="System.Runtime.Remoting.Messaging.IMessageSink" />
        <method name="GetObjRefForProxy(System.MarshalByRefObject)" argnames="obj" returntype="System.Runtime.Remoting.ObjRef" />
        <method name="GetMethodBaseFromMethodMessage(System.Runtime.Remoting.Messaging.IMethodMessage)" argnames="msg" returntype="System.Reflection.MethodBase" />
        <method name="IsMethodOverloaded(System.Runtime.Remoting.Messaging.IMethodMessage)" argnames="msg" returntype="System.Boolean" />
        <method name="IsOneWay(System.Reflection.MethodBase)" argnames="method" returntype="System.Boolean" />
        <method name="GetServerTypeForUri(System.String)" argnames="URI" returntype="System.Type" />
        <method name="ExecuteMessage(System.MarshalByRefObject, System.Runtime.Remoting.Messaging.IMethodCallMessage)" argnames="target, reqMsg" returntype="System.Runtime.Remoting.Messaging.IMethodReturnMessage" />
        <method name="LogRemotingStage(System.Int32)" argnames="stage" returntype="System.Void" />
    </class>
    <class name="InternalRemotingServices" namespace="System.Runtime.Remoting">
        <constructor name="InternalRemotingServices()" argnames="" />
        <method name="DebugOutChnl(System.String)" argnames="s" returntype="System.Void" />
        <method name="RemotingTrace(System.Object[])" argnames="messages" returntype="System.Void" />
        <method name="RemotingAssert(System.Boolean, System.String)" argnames="condition, message" returntype="System.Void" />
        <method name="SetServerIdentity(System.Runtime.Remoting.Messaging.MethodCall, System.Object)" argnames="m, srvID" returntype="System.Void" />
        <method name="GetCachedSoapAttribute(System.Object)" argnames="reflectionObject" returntype="System.Runtime.Remoting.Metadata.SoapAttribute" />
    </class>
    <class name="SoapServices" namespace="System.Runtime.Remoting">
        <property name="XmlNsForClrType" propertytype="System.String" />
        <property name="XmlNsForClrTypeWithAssembly" propertytype="System.String" />
        <property name="XmlNsForClrTypeWithNs" propertytype="System.String" />
        <property name="XmlNsForClrTypeWithNsAndAssembly" propertytype="System.String" />
        <method name="RegisterInteropXmlElement(System.String, System.String, System.Type)" argnames="xmlElement, xmlNamespace, type" returntype="System.Void" />
        <method name="RegisterInteropXmlType(System.String, System.String, System.Type)" argnames="xmlType, xmlTypeNamespace, type" returntype="System.Void" />
        <method name="PreLoad(System.Type)" argnames="type" returntype="System.Void" />
        <method name="PreLoad(System.Reflection.Assembly)" argnames="assembly" returntype="System.Void" />
        <method name="GetInteropTypeFromXmlElement(System.String, System.String)" argnames="xmlElement, xmlNamespace" returntype="System.Type" />
        <method name="GetInteropTypeFromXmlType(System.String, System.String)" argnames="xmlType, xmlTypeNamespace" returntype="System.Type" />
        <method name="GetInteropFieldTypeAndNameFromXmlElement(System.Type, System.String, System.String, System.Type&amp;, System.String&amp;)" argnames="containingType, xmlElement, xmlNamespace, type, name" returntype="System.Void" />
        <method name="GetInteropFieldTypeAndNameFromXmlAttribute(System.Type, System.String, System.String, System.Type&amp;, System.String&amp;)" argnames="containingType, xmlAttribute, xmlNamespace, type, name" returntype="System.Void" />
        <method name="GetXmlElementForInteropType(System.Type, System.String&amp;, System.String&amp;)" argnames="type, xmlElement, xmlNamespace" returntype="System.Boolean" />
        <method name="GetXmlTypeForInteropType(System.Type, System.String&amp;, System.String&amp;)" argnames="type, xmlType, xmlTypeNamespace" returntype="System.Boolean" />
        <method name="GetXmlNamespaceForMethodCall(System.Reflection.MethodBase)" argnames="mb" returntype="System.String" />
        <method name="GetXmlNamespaceForMethodResponse(System.Reflection.MethodBase)" argnames="mb" returntype="System.String" />
        <method name="RegisterSoapActionForMethodBase(System.Reflection.MethodBase)" argnames="mb" returntype="System.Void" />
        <method name="RegisterSoapActionForMethodBase(System.Reflection.MethodBase, System.String)" argnames="mb, soapAction" returntype="System.Void" />
        <method name="GetSoapActionFromMethodBase(System.Reflection.MethodBase)" argnames="mb" returntype="System.String" />
        <method name="IsSoapActionValidForMethodBase(System.String, System.Reflection.MethodBase)" argnames="soapAction, mb" returntype="System.Boolean" />
        <method name="GetTypeAndMethodNameFromSoapAction(System.String, System.String&amp;, System.String&amp;)" argnames="soapAction, typeName, methodName" returntype="System.Boolean" />
        <method name="IsClrTypeNamespace(System.String)" argnames="namespaceString" returntype="System.Boolean" />
        <method name="CodeXmlNamespaceForClrTypeNamespace(System.String, System.String)" argnames="typeNamespace, assemblyName" returntype="System.String" />
        <method name="DecodeXmlNamespaceForClrTypeNamespace(System.String, System.String&amp;, System.String&amp;)" argnames="inNamespace, typeNamespace, assemblyName" returntype="System.Boolean" />
    </class>
    <interface name="IObjectHandle" namespace="System.Runtime.Remoting">
        <method name="Unwrap()" argnames="" returntype="System.Object" />
    </interface>
    <interface name="IRemotingTypeInfo" namespace="System.Runtime.Remoting">
        <property name="TypeName" propertytype="System.String" />
        <method name="CanCastTo(System.Type, System.Object)" argnames="fromType, o" returntype="System.Boolean" />
    </interface>
    <interface name="IChannelInfo" namespace="System.Runtime.Remoting">
        <property name="ChannelData" propertytype="System.Object[]" />
    </interface>
    <interface name="IEnvoyInfo" namespace="System.Runtime.Remoting">
        <property name="EnvoySinks" propertytype="System.Runtime.Remoting.Messaging.IMessageSink" />
    </interface>
    <enum name="WellKnownObjectMode" namespace="System.Runtime.Remoting">
        <field name="Singleton" />
        <field name="SingleCall" />
    </enum>
    <class name="ConditionalAttribute" namespace="System.Diagnostics">
        <constructor name="ConditionalAttribute(System.String)" argnames="conditionString" />
        <property name="ConditionString" propertytype="System.String" />
    </class>
    <class name="Debugger" namespace="System.Diagnostics">
        <constructor name="Debugger()" argnames="" />
        <field name="DefaultCategory" />
        <property name="IsAttached" propertytype="System.Boolean" />
        <method name="Break()" argnames="" returntype="System.Void" />
        <method name="Launch()" argnames="" returntype="System.Boolean" />
        <method name="Log(System.Int32, System.String, System.String)" argnames="level, category, message" returntype="System.Void" />
        <method name="IsLogging()" argnames="" returntype="System.Boolean" />
    </class>
    <class name="DebuggerStepThroughAttribute" namespace="System.Diagnostics">
        <constructor name="DebuggerStepThroughAttribute()" argnames="" />
    </class>
    <class name="DebuggerHiddenAttribute" namespace="System.Diagnostics">
        <constructor name="DebuggerHiddenAttribute()" argnames="" />
    </class>
    <class name="DebuggableAttribute" namespace="System.Diagnostics">
        <constructor name="DebuggableAttribute(System.Boolean, System.Boolean)" argnames="isJITTrackingEnabled, isJITOptimizerDisabled" />
        <property name="IsJITTrackingEnabled" propertytype="System.Boolean" />
        <property name="IsJITOptimizerDisabled" propertytype="System.Boolean" />
    </class>
    <class name="StackTrace" namespace="System.Diagnostics">
        <constructor name="StackTrace()" argnames="" />
        <constructor name="StackTrace(System.Boolean)" argnames="fNeedFileInfo" />
        <constructor name="StackTrace(System.Int32)" argnames="skipFrames" />
        <constructor name="StackTrace(System.Int32, System.Boolean)" argnames="skipFrames, fNeedFileInfo" />
        <constructor name="StackTrace(System.Exception)" argnames="e" />
        <constructor name="StackTrace(System.Exception, System.Boolean)" argnames="e, fNeedFileInfo" />
        <constructor name="StackTrace(System.Exception, System.Int32)" argnames="e, skipFrames" />
        <constructor name="StackTrace(System.Exception, System.Int32, System.Boolean)" argnames="e, skipFrames, fNeedFileInfo" />
        <constructor name="StackTrace(System.Diagnostics.StackFrame)" argnames="frame" />
        <constructor name="StackTrace(System.Threading.Thread, System.Boolean)" argnames="targetThread, needFileInfo" />
        <field name="METHODS_TO_SKIP" />
        <property name="FrameCount" propertytype="System.Int32" />
        <method name="GetFrame(System.Int32)" argnames="index" returntype="System.Diagnostics.StackFrame" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </class>
    <class name="StackFrame" namespace="System.Diagnostics">
        <constructor name="StackFrame()" argnames="" />
        <constructor name="StackFrame(System.Boolean)" argnames="fNeedFileInfo" />
        <constructor name="StackFrame(System.Int32)" argnames="skipFrames" />
        <constructor name="StackFrame(System.Int32, System.Boolean)" argnames="skipFrames, fNeedFileInfo" />
        <constructor name="StackFrame(System.String, System.Int32)" argnames="fileName, lineNumber" />
        <constructor name="StackFrame(System.String, System.Int32, System.Int32)" argnames="fileName, lineNumber, colNumber" />
        <field name="OFFSET_UNKNOWN" />
        <method name="GetFileColumnNumber()" argnames="" returntype="System.Int32" />
        <method name="GetFileLineNumber()" argnames="" returntype="System.Int32" />
        <method name="GetFileName()" argnames="" returntype="System.String" />
        <method name="GetILOffset()" argnames="" returntype="System.Int32" />
        <method name="GetNativeOffset()" argnames="" returntype="System.Int32" />
        <method name="GetMethod()" argnames="" returntype="System.Reflection.MethodBase" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </class>
    <class name="SymDocumentType" namespace="System.Diagnostics.SymbolStore">
        <constructor name="SymDocumentType()" argnames="" />
        <field name="Text" />
    </class>
    <class name="SymLanguageType" namespace="System.Diagnostics.SymbolStore">
        <constructor name="SymLanguageType()" argnames="" />
        <field name="C" />
        <field name="CPlusPlus" />
        <field name="CSharp" />
        <field name="Basic" />
        <field name="Java" />
        <field name="Cobol" />
        <field name="Pascal" />
        <field name="ILAssembly" />
        <field name="JScript" />
        <field name="SMC" />
        <field name="MCPlusPlus" />
    </class>
    <class name="SymLanguageVendor" namespace="System.Diagnostics.SymbolStore">
        <constructor name="SymLanguageVendor()" argnames="" />
        <field name="Microsoft" />
    </class>
    <interface name="ISymbolBinder" namespace="System.Diagnostics.SymbolStore">
        <method name="GetReader(System.Int32, System.String, System.String)" argnames="importer, filename, searchPath" returntype="System.Diagnostics.SymbolStore.ISymbolReader" />
    </interface>
    <interface name="ISymbolDocument" namespace="System.Diagnostics.SymbolStore">
        <property name="URL" propertytype="System.String" />
        <property name="DocumentType" propertytype="System.Guid" />
        <property name="Language" propertytype="System.Guid" />
        <property name="LanguageVendor" propertytype="System.Guid" />
        <property name="CheckSumAlgorithmId" propertytype="System.Guid" />
        <property name="HasEmbeddedSource" propertytype="System.Boolean" />
        <property name="SourceLength" propertytype="System.Int32" />
        <method name="GetSourceRange(System.Int32, System.Int32, System.Int32, System.Int32)" argnames="startLine, startColumn, endLine, endColumn" returntype="System.Byte[]" />
        <method name="FindClosestLine(System.Int32)" argnames="line" returntype="System.Int32" />
        <method name="GetCheckSum()" argnames="" returntype="System.Byte[]" />
    </interface>
    <interface name="ISymbolDocumentWriter" namespace="System.Diagnostics.SymbolStore">
        <method name="SetCheckSum(System.Guid, System.Byte[])" argnames="algorithmId, checkSum" returntype="System.Void" />
        <method name="SetSource(System.Byte[])" argnames="source" returntype="System.Void" />
    </interface>
    <interface name="ISymbolMethod" namespace="System.Diagnostics.SymbolStore">
        <property name="Token" propertytype="System.Diagnostics.SymbolStore.SymbolToken" />
        <property name="SequencePointCount" propertytype="System.Int32" />
        <property name="RootScope" propertytype="System.Diagnostics.SymbolStore.ISymbolScope" />
        <method name="GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[], System.Int32[], System.Int32[])" argnames="docs, lines, columns" returntype="System.Boolean" />
        <method name="GetNamespace()" argnames="" returntype="System.Diagnostics.SymbolStore.ISymbolNamespace" />
        <method name="GetParameters()" argnames="" returntype="System.Diagnostics.SymbolStore.ISymbolVariable[]" />
        <method name="GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument, System.Int32, System.Int32)" argnames="document, line, column" returntype="System.Int32[]" />
        <method name="GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument, System.Int32, System.Int32)" argnames="document, line, column" returntype="System.Int32" />
        <method name="GetScope(System.Int32)" argnames="offset" returntype="System.Diagnostics.SymbolStore.ISymbolScope" />
        <method name="GetSequencePoints(System.Int32[], System.Diagnostics.SymbolStore.ISymbolDocument[], System.Int32[], System.Int32[], System.Int32[], System.Int32[])" argnames="offsets, documents, lines, columns, endLines, endColumns" returntype="System.Void" />
    </interface>
    <interface name="ISymbolNamespace" namespace="System.Diagnostics.SymbolStore">
        <property name="Name" propertytype="System.String" />
        <method name="GetVariables()" argnames="" returntype="System.Diagnostics.SymbolStore.ISymbolVariable[]" />
        <method name="GetNamespaces()" argnames="" returntype="System.Diagnostics.SymbolStore.ISymbolNamespace[]" />
    </interface>
    <interface name="ISymbolReader" namespace="System.Diagnostics.SymbolStore">
        <property name="UserEntryPoint" propertytype="System.Diagnostics.SymbolStore.SymbolToken" />
        <method name="GetNamespaces()" argnames="" returntype="System.Diagnostics.SymbolStore.ISymbolNamespace[]" />
        <method name="GetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken, System.String)" argnames="parent, name" returntype="System.Byte[]" />
        <method name="GetMethodFromDocumentPosition(System.Diagnostics.SymbolStore.ISymbolDocument, System.Int32, System.Int32)" argnames="document, line, column" returntype="System.Diagnostics.SymbolStore.ISymbolMethod" />
        <method name="GetGlobalVariables()" argnames="" returntype="System.Diagnostics.SymbolStore.ISymbolVariable[]" />
        <method name="GetVariables(System.Diagnostics.SymbolStore.SymbolToken)" argnames="parent" returntype="System.Diagnostics.SymbolStore.ISymbolVariable[]" />
        <method name="GetMethod(System.Diagnostics.SymbolStore.SymbolToken, System.Int32)" argnames="method, version" returntype="System.Diagnostics.SymbolStore.ISymbolMethod" />
        <method name="GetMethod(System.Diagnostics.SymbolStore.SymbolToken)" argnames="method" returntype="System.Diagnostics.SymbolStore.ISymbolMethod" />
        <method name="GetDocuments()" argnames="" returntype="System.Diagnostics.SymbolStore.ISymbolDocument[]" />
        <method name="GetDocument(System.String, System.Guid, System.Guid, System.Guid)" argnames="url, language, languageVendor, documentType" returntype="System.Diagnostics.SymbolStore.ISymbolDocument" />
    </interface>
    <interface name="ISymbolScope" namespace="System.Diagnostics.SymbolStore">
        <property name="Method" propertytype="System.Diagnostics.SymbolStore.ISymbolMethod" />
        <property name="Parent" propertytype="System.Diagnostics.SymbolStore.ISymbolScope" />
        <property name="StartOffset" propertytype="System.Int32" />
        <property name="EndOffset" propertytype="System.Int32" />
        <method name="GetNamespaces()" argnames="" returntype="System.Diagnostics.SymbolStore.ISymbolNamespace[]" />
        <method name="GetLocals()" argnames="" returntype="System.Diagnostics.SymbolStore.ISymbolVariable[]" />
        <method name="GetChildren()" argnames="" returntype="System.Diagnostics.SymbolStore.ISymbolScope[]" />
    </interface>
    <interface name="ISymbolVariable" namespace="System.Diagnostics.SymbolStore">
        <property name="Name" propertytype="System.String" />
        <property name="Attributes" propertytype="System.Object" />
        <property name="AddressKind" propertytype="System.Diagnostics.SymbolStore.SymAddressKind" />
        <property name="AddressField1" propertytype="System.Int32" />
        <property name="AddressField2" propertytype="System.Int32" />
        <property name="AddressField3" propertytype="System.Int32" />
        <property name="StartOffset" propertytype="System.Int32" />
        <property name="EndOffset" propertytype="System.Int32" />
        <method name="GetSignature()" argnames="" returntype="System.Byte[]" />
    </interface>
    <interface name="ISymbolWriter" namespace="System.Diagnostics.SymbolStore">
        <method name="SetUnderlyingWriter(System.IntPtr)" argnames="underlyingWriter" returntype="System.Void" />
        <method name="SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter, System.Int32, System.Int32, System.Diagnostics.SymbolStore.ISymbolDocumentWriter, System.Int32, System.Int32)" argnames="startDoc, startLine, startColumn, endDoc, endLine, endColumn" returntype="System.Void" />
        <method name="UsingNamespace(System.String)" argnames="fullName" returntype="System.Void" />
        <method name="CloseNamespace()" argnames="" returntype="System.Void" />
        <method name="OpenNamespace(System.String)" argnames="name" returntype="System.Void" />
        <method name="SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken, System.String, System.Byte[])" argnames="parent, name, data" returntype="System.Void" />
        <method name="Close()" argnames="" returntype="System.Void" />
        <method name="DefineGlobalVariable(System.String, System.Reflection.FieldAttributes, System.Byte[], System.Diagnostics.SymbolStore.SymAddressKind, System.Int32, System.Int32, System.Int32)" argnames="name, attributes, signature, addrKind, addr1, addr2, addr3" returntype="System.Void" />
        <method name="DefineField(System.Diagnostics.SymbolStore.SymbolToken, System.String, System.Reflection.FieldAttributes, System.Byte[], System.Diagnostics.SymbolStore.SymAddressKind, System.Int32, System.Int32, System.Int32)" argnames="parent, name, attributes, signature, addrKind, addr1, addr2, addr3" returntype="System.Void" />
        <method name="DefineParameter(System.String, System.Reflection.ParameterAttributes, System.Int32, System.Diagnostics.SymbolStore.SymAddressKind, System.Int32, System.Int32, System.Int32)" argnames="name, attributes, sequence, addrKind, addr1, addr2, addr3" returntype="System.Void" />
        <method name="DefineLocalVariable(System.String, System.Reflection.FieldAttributes, System.Byte[], System.Diagnostics.SymbolStore.SymAddressKind, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" argnames="name, attributes, signature, addrKind, addr1, addr2, addr3, startOffset, endOffset" returntype="System.Void" />
        <method name="SetScopeRange(System.Int32, System.Int32, System.Int32)" argnames="scopeID, startOffset, endOffset" returntype="System.Void" />
        <method name="CloseScope(System.Int32)" argnames="endOffset" returntype="System.Void" />
        <method name="OpenScope(System.Int32)" argnames="startOffset" returntype="System.Int32" />
        <method name="DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter, System.Int32[], System.Int32[], System.Int32[], System.Int32[], System.Int32[])" argnames="document, offsets, lines, columns, endLines, endColumns" returntype="System.Void" />
        <method name="CloseMethod()" argnames="" returntype="System.Void" />
        <method name="OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)" argnames="method" returntype="System.Void" />
        <method name="SetUserEntryPoint(System.Diagnostics.SymbolStore.SymbolToken)" argnames="entryMethod" returntype="System.Void" />
        <method name="DefineDocument(System.String, System.Guid, System.Guid, System.Guid)" argnames="url, language, languageVendor, documentType" returntype="System.Diagnostics.SymbolStore.ISymbolDocumentWriter" />
        <method name="Initialize(System.IntPtr, System.String, System.Boolean)" argnames="emitter, filename, fFullBuild" returntype="System.Void" />
    </interface>
    <struct name="SymbolToken" namespace="System.Diagnostics.SymbolStore">
        <constructor name="SymbolToken(System.Int32)" argnames="val" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="GetToken()" argnames="" returntype="System.Int32" />
    </struct>
    <enum name="SymAddressKind" namespace="System.Diagnostics.SymbolStore">
        <field name="ILOffset" />
        <field name="NativeRVA" />
        <field name="NativeRegister" />
        <field name="NativeRegisterRelative" />
        <field name="NativeOffset" />
        <field name="NativeRegisterRegister" />
        <field name="NativeRegisterStack" />
        <field name="NativeStackRegister" />
        <field name="BitField" />
    </enum>
    <class name="UnmanagedMarshal" namespace="System.Reflection.Emit">
        <property name="GetUnmanagedType" propertytype="System.Runtime.InteropServices.UnmanagedType" />
        <property name="IIDGuid" propertytype="System.Guid" />
        <property name="ElementCount" propertytype="System.Int32" />
        <property name="BaseType" propertytype="System.Runtime.InteropServices.UnmanagedType" />
        <method name="DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)" argnames="unmanagedType" returntype="System.Reflection.Emit.UnmanagedMarshal" />
        <method name="DefineByValTStr(System.Int32)" argnames="elemCount" returntype="System.Reflection.Emit.UnmanagedMarshal" />
        <method name="DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)" argnames="elemType" returntype="System.Reflection.Emit.UnmanagedMarshal" />
        <method name="DefineByValArray(System.Int32)" argnames="elemCount" returntype="System.Reflection.Emit.UnmanagedMarshal" />
        <method name="DefineLPArray(System.Runtime.InteropServices.UnmanagedType)" argnames="elemType" returntype="System.Reflection.Emit.UnmanagedMarshal" />
    </class>
    <class name="AssemblyBuilder" namespace="System.Reflection.Emit">
        <property name="Location" propertytype="System.String" />
        <property name="CodeBase" propertytype="System.String" />
        <property name="EntryPoint" propertytype="System.Reflection.MethodInfo" />
        <method name="GetManifestResourceInfo(System.String)" argnames="resourceName" returntype="System.Reflection.ManifestResourceInfo" />
        <method name="GetManifestResourceNames()" argnames="" returntype="System.String[]" />
        <method name="GetFiles(System.Boolean)" argnames="getResourceModules" returntype="System.IO.FileStream[]" />
        <method name="GetFile(System.String)" argnames="name" returntype="System.IO.FileStream" />
        <method name="GetManifestResourceStream(System.String)" argnames="name" returntype="System.IO.Stream" />
        <method name="GetManifestResourceStream(System.Type, System.String)" argnames="type, name" returntype="System.IO.Stream" />
        <method name="GetExportedTypes()" argnames="" returntype="System.Type[]" />
        <method name="DefineDynamicModule(System.String)" argnames="name" returntype="System.Reflection.Emit.ModuleBuilder" />
        <method name="DefineDynamicModule(System.String, System.Boolean)" argnames="name, emitSymbolInfo" returntype="System.Reflection.Emit.ModuleBuilder" />
        <method name="DefineDynamicModule(System.String, System.String)" argnames="name, fileName" returntype="System.Reflection.Emit.ModuleBuilder" />
        <method name="DefineDynamicModule(System.String, System.String, System.Boolean)" argnames="name, fileName, emitSymbolInfo" returntype="System.Reflection.Emit.ModuleBuilder" />
        <method name="DefineResource(System.String, System.String, System.String)" argnames="name, description, fileName" returntype="System.Resources.IResourceWriter" />
        <method name="DefineResource(System.String, System.String, System.String, System.Reflection.ResourceAttributes)" argnames="name, description, fileName, attribute" returntype="System.Resources.IResourceWriter" />
        <method name="AddResourceFile(System.String, System.String)" argnames="name, fileName" returntype="System.Void" />
        <method name="AddResourceFile(System.String, System.String, System.Reflection.ResourceAttributes)" argnames="name, fileName, attribute" returntype="System.Void" />
        <method name="DefineVersionInfoResource(System.String, System.String, System.String, System.String, System.String)" argnames="product, productVersion, company, copyright, trademark" returntype="System.Void" />
        <method name="DefineVersionInfoResource()" argnames="" returntype="System.Void" />
        <method name="DefineUnmanagedResource(System.Byte[])" argnames="resource" returntype="System.Void" />
        <method name="DefineUnmanagedResource(System.String)" argnames="resourceFileName" returntype="System.Void" />
        <method name="GetDynamicModule(System.String)" argnames="name" returntype="System.Reflection.Emit.ModuleBuilder" />
        <method name="SetEntryPoint(System.Reflection.MethodInfo)" argnames="entryMethod" returntype="System.Void" />
        <method name="SetEntryPoint(System.Reflection.MethodInfo, System.Reflection.Emit.PEFileKinds)" argnames="entryMethod, fileKind" returntype="System.Void" />
        <method name="SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])" argnames="con, binaryAttribute" returntype="System.Void" />
        <method name="SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" argnames="customBuilder" returntype="System.Void" />
        <method name="Save(System.String)" argnames="assemblyFileName" returntype="System.Void" />
        <event name="ModuleResolve" inherited="System.Reflection.Assembly" />
    </class>
    <class name="ConstructorBuilder" namespace="System.Reflection.Emit">
        <property name="ReturnType" propertytype="System.Type" />
        <property name="Signature" propertytype="System.String" />
        <property name="Attributes" propertytype="System.Reflection.MethodAttributes" />
        <property name="ReflectedType" propertytype="System.Type" />
        <property name="DeclaringType" propertytype="System.Type" />
        <property name="InitLocals" propertytype="System.Boolean" />
        <property name="Name" propertytype="System.String" />
        <property name="MethodHandle" propertytype="System.RuntimeMethodHandle" />
        <method name="Invoke(System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)" argnames="invokeAttr, binder, parameters, culture" returntype="System.Object" />
        <method name="Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)" argnames="obj, invokeAttr, binder, parameters, culture" returntype="System.Object" />
        <method name="GetMethodImplementationFlags()" argnames="" returntype="System.Reflection.MethodImplAttributes" />
        <method name="GetParameters()" argnames="" returntype="System.Reflection.ParameterInfo[]" />
        <method name="IsDefined(System.Type, System.Boolean)" argnames="attributeType, inherit" returntype="System.Boolean" />
        <method name="GetCustomAttributes(System.Boolean)" argnames="inherit" returntype="System.Object[]" />
        <method name="GetCustomAttributes(System.Type, System.Boolean)" argnames="attributeType, inherit" returntype="System.Object[]" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="GetToken()" argnames="" returntype="System.Reflection.Emit.MethodToken" />
        <method name="DefineParameter(System.Int32, System.Reflection.ParameterAttributes, System.String)" argnames="iSequence, attributes, strParamName" returntype="System.Reflection.Emit.ParameterBuilder" />
        <method name="SetSymCustomAttribute(System.String, System.Byte[])" argnames="name, data" returntype="System.Void" />
        <method name="GetILGenerator()" argnames="" returntype="System.Reflection.Emit.ILGenerator" />
        <method name="AddDeclarativeSecurity(System.Security.Permissions.SecurityAction, System.Security.PermissionSet)" argnames="action, pset" returntype="System.Void" />
        <method name="GetModule()" argnames="" returntype="System.Reflection.Module" />
        <method name="SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])" argnames="con, binaryAttribute" returntype="System.Void" />
        <method name="SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" argnames="customBuilder" returntype="System.Void" />
        <method name="SetImplementationFlags(System.Reflection.MethodImplAttributes)" argnames="attributes" returntype="System.Void" />
    </class>
    <class name="EventBuilder" namespace="System.Reflection.Emit">
        <method name="GetEventToken()" argnames="" returntype="System.Reflection.Emit.EventToken" />
        <method name="SetAddOnMethod(System.Reflection.Emit.MethodBuilder)" argnames="mdBuilder" returntype="System.Void" />
        <method name="SetRemoveOnMethod(System.Reflection.Emit.MethodBuilder)" argnames="mdBuilder" returntype="System.Void" />
        <method name="SetRaiseMethod(System.Reflection.Emit.MethodBuilder)" argnames="mdBuilder" returntype="System.Void" />
        <method name="AddOtherMethod(System.Reflection.Emit.MethodBuilder)" argnames="mdBuilder" returntype="System.Void" />
        <method name="SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])" argnames="con, binaryAttribute" returntype="System.Void" />
        <method name="SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" argnames="customBuilder" returntype="System.Void" />
    </class>
    <class name="FieldBuilder" namespace="System.Reflection.Emit">
        <property name="FieldType" propertytype="System.Type" />
        <property name="Name" propertytype="System.String" />
        <property name="DeclaringType" propertytype="System.Type" />
        <property name="ReflectedType" propertytype="System.Type" />
        <property name="FieldHandle" propertytype="System.RuntimeFieldHandle" />
        <property name="Attributes" propertytype="System.Reflection.FieldAttributes" />
        <method name="SetValue(System.Object, System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Globalization.CultureInfo)" argnames="obj, val, invokeAttr, binder, culture" returntype="System.Void" />
        <method name="GetValue(System.Object)" argnames="obj" returntype="System.Object" />
        <method name="IsDefined(System.Type, System.Boolean)" argnames="attributeType, inherit" returntype="System.Boolean" />
        <method name="GetCustomAttributes(System.Boolean)" argnames="inherit" returntype="System.Object[]" />
        <method name="GetCustomAttributes(System.Type, System.Boolean)" argnames="attributeType, inherit" returntype="System.Object[]" />
        <method name="GetToken()" argnames="" returntype="System.Reflection.Emit.FieldToken" />
        <method name="SetOffset(System.Int32)" argnames="iOffset" returntype="System.Void" />
        <method name="SetMarshal(System.Reflection.Emit.UnmanagedMarshal)" argnames="unmanagedMarshal" returntype="System.Void" />
        <method name="SetConstant(System.Object)" argnames="defaultValue" returntype="System.Void" />
        <method name="SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])" argnames="con, binaryAttribute" returntype="System.Void" />
        <method name="SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" argnames="customBuilder" returntype="System.Void" />
    </class>
    <class name="ILGenerator" namespace="System.Reflection.Emit">
        <method name="EndScope()" argnames="" returntype="System.Void" />
        <method name="BeginScope()" argnames="" returntype="System.Void" />
        <method name="MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter, System.Int32, System.Int32, System.Int32, System.Int32)" argnames="document, startLine, startColumn, endLine, endColumn" returntype="System.Void" />
        <method name="EmitWriteLine(System.Reflection.FieldInfo)" argnames="fld" returntype="System.Void" />
        <method name="EmitWriteLine(System.Reflection.Emit.LocalBuilder)" argnames="localBuilder" returntype="System.Void" />
        <method name="EmitWriteLine(System.String)" argnames="value" returntype="System.Void" />
        <method name="ThrowException(System.Type)" argnames="excType" returntype="System.Void" />
        <method name="MarkLabel(System.Reflection.Emit.Label)" argnames="loc" returntype="System.Void" />
        <method name="DefineLabel()" argnames="" returntype="System.Reflection.Emit.Label" />
        <method name="BeginFinallyBlock()" argnames="" returntype="System.Void" />
        <method name="BeginFaultBlock()" argnames="" returntype="System.Void" />
        <method name="BeginCatchBlock(System.Type)" argnames="exceptionType" returntype="System.Void" />
        <method name="BeginExceptFilterBlock()" argnames="" returntype="System.Void" />
        <method name="EndExceptionBlock()" argnames="" returntype="System.Void" />
        <method name="BeginExceptionBlock()" argnames="" returntype="System.Reflection.Emit.Label" />
        <method name="Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.LocalBuilder)" argnames="opcode, local" returntype="System.Void" />
        <method name="Emit(System.Reflection.Emit.OpCode, System.String)" argnames="opcode, str" returntype="System.Void" />
        <method name="Emit(System.Reflection.Emit.OpCode, System.Reflection.FieldInfo)" argnames="opcode, field" returntype="System.Void" />
        <method name="Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.Label[])" argnames="opcode, labels" returntype="System.Void" />
        <method name="Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.Label)" argnames="opcode, label" returntype="System.Void" />
        <method name="Emit(System.Reflection.Emit.OpCode, System.Double)" argnames="opcode, arg" returntype="System.Void" />
        <method name="Emit(System.Reflection.Emit.OpCode, System.Single)" argnames="opcode, arg" returntype="System.Void" />
        <method name="Emit(System.Reflection.Emit.OpCode, System.Int64)" argnames="opcode, arg" returntype="System.Void" />
        <method name="Emit(System.Reflection.Emit.OpCode, System.Type)" argnames="opcode, cls" returntype="System.Void" />
        <method name="Emit(System.Reflection.Emit.OpCode, System.Reflection.ConstructorInfo)" argnames="opcode, con" returntype="System.Void" />
        <method name="Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.SignatureHelper)" argnames="opcode, signature" returntype="System.Void" />
        <method name="Emit(System.Reflection.Emit.OpCode, System.Reflection.MethodInfo)" argnames="opcode, meth" returntype="System.Void" />
        <method name="Emit(System.Reflection.Emit.OpCode, System.Int32)" argnames="opcode, arg" returntype="System.Void" />
        <method name="Emit(System.Reflection.Emit.OpCode, System.Int16)" argnames="opcode, arg" returntype="System.Void" />
        <method name="Emit(System.Reflection.Emit.OpCode, System.Byte)" argnames="opcode, arg" returntype="System.Void" />
        <method name="Emit(System.Reflection.Emit.OpCode)" argnames="opcode" returntype="System.Void" />
        <method name="Emit(System.Reflection.Emit.OpCode, System.SByte)" argnames="opcode, arg" returntype="System.Void" />
        <method name="EmitCalli(System.Reflection.Emit.OpCode, System.Reflection.CallingConventions, System.Type, System.Type[], System.Type[])" argnames="opcode, callingConvention, returnType, parameterTypes, optionalParameterTypes" returntype="System.Void" />
        <method name="EmitCalli(System.Reflection.Emit.OpCode, System.Runtime.InteropServices.CallingConvention, System.Type, System.Type[])" argnames="opcode, unmanagedCallConv, returnType, parameterTypes" returntype="System.Void" />
        <method name="EmitCall(System.Reflection.Emit.OpCode, System.Reflection.MethodInfo, System.Type[])" argnames="opcode, methodInfo, optionalParameterTypes" returntype="System.Void" />
        <method name="DeclareLocal(System.Type)" argnames="localType" returntype="System.Reflection.Emit.LocalBuilder" />
        <method name="UsingNamespace(System.String)" argnames="usingNamespace" returntype="System.Void" />
    </class>
    <class name="LocalBuilder" namespace="System.Reflection.Emit">
        <property name="LocalType" propertytype="System.Type" />
        <method name="SetLocalSymInfo(System.String)" argnames="name" returntype="System.Void" />
        <method name="SetLocalSymInfo(System.String, System.Int32, System.Int32)" argnames="name, startOffset, endOffset" returntype="System.Void" />
    </class>
    <class name="MethodBuilder" namespace="System.Reflection.Emit">
        <property name="InitLocals" propertytype="System.Boolean" />
        <property name="DeclaringType" propertytype="System.Type" />
        <property name="ReturnType" propertytype="System.Type" />
        <property name="ReturnTypeCustomAttributes" propertytype="System.Reflection.ICustomAttributeProvider" />
        <property name="Signature" propertytype="System.String" />
        <property name="Attributes" propertytype="System.Reflection.MethodAttributes" />
        <property name="CallingConvention" propertytype="System.Reflection.CallingConventions" />
        <property name="ReflectedType" propertytype="System.Type" />
        <property name="MethodHandle" propertytype="System.RuntimeMethodHandle" />
        <property name="Name" propertytype="System.String" />
        <method name="GetBaseDefinition()" argnames="" returntype="System.Reflection.MethodInfo" />
        <method name="Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)" argnames="obj, invokeAttr, binder, parameters, culture" returntype="System.Object" />
        <method name="GetMethodImplementationFlags()" argnames="" returntype="System.Reflection.MethodImplAttributes" />
        <method name="GetParameters()" argnames="" returntype="System.Reflection.ParameterInfo[]" />
        <method name="IsDefined(System.Type, System.Boolean)" argnames="attributeType, inherit" returntype="System.Boolean" />
        <method name="GetCustomAttributes(System.Boolean)" argnames="inherit" returntype="System.Object[]" />
        <method name="GetCustomAttributes(System.Type, System.Boolean)" argnames="attributeType, inherit" returntype="System.Object[]" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="GetToken()" argnames="" returntype="System.Reflection.Emit.MethodToken" />
        <method name="DefineParameter(System.Int32, System.Reflection.ParameterAttributes, System.String)" argnames="position, attributes, strParamName" returntype="System.Reflection.Emit.ParameterBuilder" />
        <method name="SetMarshal(System.Reflection.Emit.UnmanagedMarshal)" argnames="unmanagedMarshal" returntype="System.Void" />
        <method name="SetSymCustomAttribute(System.String, System.Byte[])" argnames="name, data" returntype="System.Void" />
        <method name="AddDeclarativeSecurity(System.Security.Permissions.SecurityAction, System.Security.PermissionSet)" argnames="action, pset" returntype="System.Void" />
        <method name="CreateMethodBody(System.Byte[], System.Int32)" argnames="il, count" returntype="System.Void" />
        <method name="SetImplementationFlags(System.Reflection.MethodImplAttributes)" argnames="attributes" returntype="System.Void" />
        <method name="GetILGenerator()" argnames="" returntype="System.Reflection.Emit.ILGenerator" />
        <method name="GetILGenerator(System.Int32)" argnames="size" returntype="System.Reflection.Emit.ILGenerator" />
        <method name="GetModule()" argnames="" returntype="System.Reflection.Module" />
        <method name="SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])" argnames="con, binaryAttribute" returntype="System.Void" />
        <method name="SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" argnames="customBuilder" returntype="System.Void" />
    </class>
    <class name="CustomAttributeBuilder" namespace="System.Reflection.Emit">
        <constructor name="CustomAttributeBuilder(System.Reflection.ConstructorInfo, System.Object[])" argnames="con, constructorArgs" />
        <constructor name="CustomAttributeBuilder(System.Reflection.ConstructorInfo, System.Object[], System.Reflection.PropertyInfo[], System.Object[])" argnames="con, constructorArgs, namedProperties, propertyValues" />
        <constructor name="CustomAttributeBuilder(System.Reflection.ConstructorInfo, System.Object[], System.Reflection.FieldInfo[], System.Object[])" argnames="con, constructorArgs, namedFields, fieldValues" />
        <constructor name="CustomAttributeBuilder(System.Reflection.ConstructorInfo, System.Object[], System.Reflection.PropertyInfo[], System.Object[], System.Reflection.FieldInfo[], System.Object[])" argnames="con, constructorArgs, namedProperties, propertyValues, namedFields, fieldValues" />
    </class>
    <class name="MethodRental" namespace="System.Reflection.Emit">
        <field name="JitOnDemand" />
        <field name="JitImmediate" />
        <method name="SwapMethodBody(System.Type, System.Int32, System.IntPtr, System.Int32, System.Int32)" argnames="cls, methodtoken, rgIL, methodSize, flags" returntype="System.Void" />
    </class>
    <class name="ModuleBuilder" namespace="System.Reflection.Emit">
        <property name="FullyQualifiedName" propertytype="System.String" />
        <method name="GetTypes()" argnames="" returntype="System.Type[]" />
        <method name="GetType(System.String, System.Boolean, System.Boolean)" argnames="className, throwOnError, ignoreCase" returntype="System.Type" />
        <method name="GetType(System.String)" argnames="className" returntype="System.Type" />
        <method name="GetType(System.String, System.Boolean)" argnames="className, ignoreCase" returntype="System.Type" />
        <method name="DefineType(System.String)" argnames="name" returntype="System.Reflection.Emit.TypeBuilder" />
        <method name="DefineType(System.String, System.Reflection.TypeAttributes, System.Type, System.Type[])" argnames="name, attr, parent, interfaces" returntype="System.Reflection.Emit.TypeBuilder" />
        <method name="DefineType(System.String, System.Reflection.TypeAttributes, System.Type)" argnames="name, attr, parent" returntype="System.Reflection.Emit.TypeBuilder" />
        <method name="DefineType(System.String, System.Reflection.TypeAttributes)" argnames="name, attr" returntype="System.Reflection.Emit.TypeBuilder" />
        <method name="DefineType(System.String, System.Reflection.TypeAttributes, System.Type, System.Reflection.Emit.PackingSize, System.Int32)" argnames="name, attr, parent, packingSize, typesize" returntype="System.Reflection.Emit.TypeBuilder" />
        <method name="DefineType(System.String, System.Reflection.TypeAttributes, System.Type, System.Int32)" argnames="name, attr, parent, typesize" returntype="System.Reflection.Emit.TypeBuilder" />
        <method name="DefineType(System.String, System.Reflection.TypeAttributes, System.Type, System.Reflection.Emit.PackingSize)" argnames="name, attr, parent, packsize" returntype="System.Reflection.Emit.TypeBuilder" />
        <method name="DefineEnum(System.String, System.Reflection.TypeAttributes, System.Type)" argnames="name, visibility, underlyingType" returntype="System.Reflection.Emit.EnumBuilder" />
        <method name="DefineResource(System.String, System.String)" argnames="name, description" returntype="System.Resources.IResourceWriter" />
        <method name="DefineResource(System.String, System.String, System.Reflection.ResourceAttributes)" argnames="name, description, attribute" returntype="System.Resources.IResourceWriter" />
        <method name="DefineGlobalMethod(System.String, System.Reflection.MethodAttributes, System.Type, System.Type[])" argnames="name, attributes, returnType, parameterTypes" returntype="System.Reflection.Emit.MethodBuilder" />
        <method name="DefineGlobalMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[])" argnames="name, attributes, callingConvention, returnType, parameterTypes" returntype="System.Reflection.Emit.MethodBuilder" />
        <method name="DefineInitializedData(System.String, System.Byte[], System.Reflection.FieldAttributes)" argnames="name, data, attributes" returntype="System.Reflection.Emit.FieldBuilder" />
        <method name="DefineUninitializedData(System.String, System.Int32, System.Reflection.FieldAttributes)" argnames="name, size, attributes" returntype="System.Reflection.Emit.FieldBuilder" />
        <method name="GetTypeToken(System.Type)" argnames="type" returntype="System.Reflection.Emit.TypeToken" />
        <method name="GetTypeToken(System.String)" argnames="name" returntype="System.Reflection.Emit.TypeToken" />
        <method name="GetMethodToken(System.Reflection.MethodInfo)" argnames="method" returntype="System.Reflection.Emit.MethodToken" />
        <method name="GetArrayMethodToken(System.Type, System.String, System.Reflection.CallingConventions, System.Type, System.Type[])" argnames="arrayClass, methodName, callingConvention, returnType, parameterTypes" returntype="System.Reflection.Emit.MethodToken" />
        <method name="GetArrayMethod(System.Type, System.String, System.Reflection.CallingConventions, System.Type, System.Type[])" argnames="arrayClass, methodName, callingConvention, returnType, parameterTypes" returntype="System.Reflection.MethodInfo" />
        <method name="GetFieldToken(System.Reflection.FieldInfo)" argnames="field" returntype="System.Reflection.Emit.FieldToken" />
        <method name="GetStringConstant(System.String)" argnames="str" returntype="System.Reflection.Emit.StringToken" />
        <method name="SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])" argnames="con, binaryAttribute" returntype="System.Void" />
        <method name="SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" argnames="customBuilder" returntype="System.Void" />
        <method name="GetSignatureToken(System.Reflection.Emit.SignatureHelper)" argnames="sigHelper" returntype="System.Reflection.Emit.SignatureToken" />
        <method name="GetSignatureToken(System.Byte[], System.Int32)" argnames="sigBytes, sigLength" returntype="System.Reflection.Emit.SignatureToken" />
        <method name="GetConstructorToken(System.Reflection.ConstructorInfo)" argnames="con" returntype="System.Reflection.Emit.MethodToken" />
        <method name="GetSymWriter()" argnames="" returntype="System.Diagnostics.SymbolStore.ISymbolWriter" />
        <method name="SetUserEntryPoint(System.Reflection.MethodInfo)" argnames="entryPoint" returntype="System.Void" />
        <method name="DefineDocument(System.String, System.Guid, System.Guid, System.Guid)" argnames="url, language, languageVendor, documentType" returntype="System.Diagnostics.SymbolStore.ISymbolDocumentWriter" />
        <method name="SetSymCustomAttribute(System.String, System.Byte[])" argnames="name, data" returntype="System.Void" />
        <method name="DefinePInvokeMethod(System.String, System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[], System.Runtime.InteropServices.CallingConvention, System.Runtime.InteropServices.CharSet)" argnames="name, dllName, attributes, callingConvention, returnType, parameterTypes, nativeCallConv, nativeCharSet" returntype="System.Reflection.Emit.MethodBuilder" />
        <method name="DefinePInvokeMethod(System.String, System.String, System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[], System.Runtime.InteropServices.CallingConvention, System.Runtime.InteropServices.CharSet)" argnames="name, dllName, entryName, attributes, callingConvention, returnType, parameterTypes, nativeCallConv, nativeCharSet" returntype="System.Reflection.Emit.MethodBuilder" />
        <method name="CreateGlobalFunctions()" argnames="" returntype="System.Void" />
        <method name="IsTransient()" argnames="" returntype="System.Boolean" />
        <method name="DefineUnmanagedResource(System.Byte[])" argnames="resource" returntype="System.Void" />
        <method name="DefineUnmanagedResource(System.String)" argnames="resourceFileName" returntype="System.Void" />
    </class>
    <class name="OpCodes" namespace="System.Reflection.Emit">
        <field name="Nop" />
        <field name="Break" />
        <field name="Ldarg_0" />
        <field name="Ldarg_1" />
        <field name="Ldarg_2" />
        <field name="Ldarg_3" />
        <field name="Ldloc_0" />
        <field name="Ldloc_1" />
        <field name="Ldloc_2" />
        <field name="Ldloc_3" />
        <field name="Stloc_0" />
        <field name="Stloc_1" />
        <field name="Stloc_2" />
        <field name="Stloc_3" />
        <field name="Ldarg_S" />
        <field name="Ldarga_S" />
        <field name="Starg_S" />
        <field name="Ldloc_S" />
        <field name="Ldloca_S" />
        <field name="Stloc_S" />
        <field name="Ldnull" />
        <field name="Ldc_I4_M1" />
        <field name="Ldc_I4_0" />
        <field name="Ldc_I4_1" />
        <field name="Ldc_I4_2" />
        <field name="Ldc_I4_3" />
        <field name="Ldc_I4_4" />
        <field name="Ldc_I4_5" />
        <field name="Ldc_I4_6" />
        <field name="Ldc_I4_7" />
        <field name="Ldc_I4_8" />
        <field name="Ldc_I4_S" />
        <field name="Ldc_I4" />
        <field name="Ldc_I8" />
        <field name="Ldc_R4" />
        <field name="Ldc_R8" />
        <field name="Dup" />
        <field name="Pop" />
        <field name="Jmp" />
        <field name="Call" />
        <field name="Calli" />
        <field name="Ret" />
        <field name="Br_S" />
        <field name="Brfalse_S" />
        <field name="Brtrue_S" />
        <field name="Beq_S" />
        <field name="Bge_S" />
        <field name="Bgt_S" />
        <field name="Ble_S" />
        <field name="Blt_S" />
        <field name="Bne_Un_S" />
        <field name="Bge_Un_S" />
        <field name="Bgt_Un_S" />
        <field name="Ble_Un_S" />
        <field name="Blt_Un_S" />
        <field name="Br" />
        <field name="Brfalse" />
        <field name="Brtrue" />
        <field name="Beq" />
        <field name="Bge" />
        <field name="Bgt" />
        <field name="Ble" />
        <field name="Blt" />
        <field name="Bne_Un" />
        <field name="Bge_Un" />
        <field name="Bgt_Un" />
        <field name="Ble_Un" />
        <field name="Blt_Un" />
        <field name="Switch" />
        <field name="Ldind_I1" />
        <field name="Ldind_U1" />
        <field name="Ldind_I2" />
        <field name="Ldind_U2" />
        <field name="Ldind_I4" />
        <field name="Ldind_U4" />
        <field name="Ldind_I8" />
        <field name="Ldind_I" />
        <field name="Ldind_R4" />
        <field name="Ldind_R8" />
        <field name="Ldind_Ref" />
        <field name="Stind_Ref" />
        <field name="Stind_I1" />
        <field name="Stind_I2" />
        <field name="Stind_I4" />
        <field name="Stind_I8" />
        <field name="Stind_R4" />
        <field name="Stind_R8" />
        <field name="Add" />
        <field name="Sub" />
        <field name="Mul" />
        <field name="Div" />
        <field name="Div_Un" />
        <field name="Rem" />
        <field name="Rem_Un" />
        <field name="And" />
        <field name="Or" />
        <field name="Xor" />
        <field name="Shl" />
        <field name="Shr" />
        <field name="Shr_Un" />
        <field name="Neg" />
        <field name="Not" />
        <field name="Conv_I1" />
        <field name="Conv_I2" />
        <field name="Conv_I4" />
        <field name="Conv_I8" />
        <field name="Conv_R4" />
        <field name="Conv_R8" />
        <field name="Conv_U4" />
        <field name="Conv_U8" />
        <field name="Callvirt" />
        <field name="Cpobj" />
        <field name="Ldobj" />
        <field name="Ldstr" />
        <field name="Newobj" />
        <field name="Castclass" />
        <field name="Isinst" />
        <field name="Conv_R_Un" />
        <field name="Unbox" />
        <field name="Throw" />
        <field name="Ldfld" />
        <field name="Ldflda" />
        <field name="Stfld" />
        <field name="Ldsfld" />
        <field name="Ldsflda" />
        <field name="Stsfld" />
        <field name="Stobj" />
        <field name="Conv_Ovf_I1_Un" />
        <field name="Conv_Ovf_I2_Un" />
        <field name="Conv_Ovf_I4_Un" />
        <field name="Conv_Ovf_I8_Un" />
        <field name="Conv_Ovf_U1_Un" />
        <field name="Conv_Ovf_U2_Un" />
        <field name="Conv_Ovf_U4_Un" />
        <field name="Conv_Ovf_U8_Un" />
        <field name="Conv_Ovf_I_Un" />
        <field name="Conv_Ovf_U_Un" />
        <field name="Box" />
        <field name="Newarr" />
        <field name="Ldlen" />
        <field name="Ldelema" />
        <field name="Ldelem_I1" />
        <field name="Ldelem_U1" />
        <field name="Ldelem_I2" />
        <field name="Ldelem_U2" />
        <field name="Ldelem_I4" />
        <field name="Ldelem_U4" />
        <field name="Ldelem_I8" />
        <field name="Ldelem_I" />
        <field name="Ldelem_R4" />
        <field name="Ldelem_R8" />
        <field name="Ldelem_Ref" />
        <field name="Stelem_I" />
        <field name="Stelem_I1" />
        <field name="Stelem_I2" />
        <field name="Stelem_I4" />
        <field name="Stelem_I8" />
        <field name="Stelem_R4" />
        <field name="Stelem_R8" />
        <field name="Stelem_Ref" />
        <field name="Conv_Ovf_I1" />
        <field name="Conv_Ovf_U1" />
        <field name="Conv_Ovf_I2" />
        <field name="Conv_Ovf_U2" />
        <field name="Conv_Ovf_I4" />
        <field name="Conv_Ovf_U4" />
        <field name="Conv_Ovf_I8" />
        <field name="Conv_Ovf_U8" />
        <field name="Refanyval" />
        <field name="Ckfinite" />
        <field name="Mkrefany" />
        <field name="Ldtoken" />
        <field name="Conv_U2" />
        <field name="Conv_U1" />
        <field name="Conv_I" />
        <field name="Conv_Ovf_I" />
        <field name="Conv_Ovf_U" />
        <field name="Add_Ovf" />
        <field name="Add_Ovf_Un" />
        <field name="Mul_Ovf" />
        <field name="Mul_Ovf_Un" />
        <field name="Sub_Ovf" />
        <field name="Sub_Ovf_Un" />
        <field name="Endfinally" />
        <field name="Leave" />
        <field name="Leave_S" />
        <field name="Stind_I" />
        <field name="Conv_U" />
        <field name="Prefix7" />
        <field name="Prefix6" />
        <field name="Prefix5" />
        <field name="Prefix4" />
        <field name="Prefix3" />
        <field name="Prefix2" />
        <field name="Prefix1" />
        <field name="Prefixref" />
        <field name="Arglist" />
        <field name="Ceq" />
        <field name="Cgt" />
        <field name="Cgt_Un" />
        <field name="Clt" />
        <field name="Clt_Un" />
        <field name="Ldftn" />
        <field name="Ldvirtftn" />
        <field name="Ldarg" />
        <field name="Ldarga" />
        <field name="Starg" />
        <field name="Ldloc" />
        <field name="Ldloca" />
        <field name="Stloc" />
        <field name="Localloc" />
        <field name="Endfilter" />
        <field name="Unaligned" />
        <field name="Volatile" />
        <field name="Tailcall" />
        <field name="Initobj" />
        <field name="Cpblk" />
        <field name="Initblk" />
        <field name="Rethrow" />
        <field name="Sizeof" />
        <field name="Refanytype" />
        <method name="TakesSingleByteArgument(System.Reflection.Emit.OpCode)" argnames="inst" returntype="System.Boolean" />
    </class>
    <class name="ParameterBuilder" namespace="System.Reflection.Emit">
        <property name="Name" propertytype="System.String" />
        <property name="Position" propertytype="System.Int32" />
        <property name="Attributes" propertytype="System.Int32" />
        <property name="IsIn" propertytype="System.Boolean" />
        <property name="IsOut" propertytype="System.Boolean" />
        <property name="IsOptional" propertytype="System.Boolean" />
        <method name="GetToken()" argnames="" returntype="System.Reflection.Emit.ParameterToken" />
        <method name="SetConstant(System.Object)" argnames="defaultValue" returntype="System.Void" />
        <method name="SetMarshal(System.Reflection.Emit.UnmanagedMarshal)" argnames="unmanagedMarshal" returntype="System.Void" />
        <method name="SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])" argnames="con, binaryAttribute" returntype="System.Void" />
        <method name="SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" argnames="customBuilder" returntype="System.Void" />
    </class>
    <class name="PropertyBuilder" namespace="System.Reflection.Emit">
        <property name="PropertyToken" propertytype="System.Reflection.Emit.PropertyToken" />
        <property name="PropertyType" propertytype="System.Type" />
        <property name="Attributes" propertytype="System.Reflection.PropertyAttributes" />
        <property name="CanRead" propertytype="System.Boolean" />
        <property name="CanWrite" propertytype="System.Boolean" />
        <property name="Name" propertytype="System.String" />
        <property name="DeclaringType" propertytype="System.Type" />
        <property name="ReflectedType" propertytype="System.Type" />
        <method name="GetIndexParameters()" argnames="" returntype="System.Reflection.ParameterInfo[]" />
        <method name="GetSetMethod(System.Boolean)" argnames="nonPublic" returntype="System.Reflection.MethodInfo" />
        <method name="GetGetMethod(System.Boolean)" argnames="nonPublic" returntype="System.Reflection.MethodInfo" />
        <method name="GetAccessors(System.Boolean)" argnames="nonPublic" returntype="System.Reflection.MethodInfo[]" />
        <method name="SetValue(System.Object, System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)" argnames="obj, value, invokeAttr, binder, index, culture" returntype="System.Void" />
        <method name="SetValue(System.Object, System.Object, System.Object[])" argnames="obj, value, index" returntype="System.Void" />
        <method name="GetValue(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)" argnames="obj, invokeAttr, binder, index, culture" returntype="System.Object" />
        <method name="GetValue(System.Object, System.Object[])" argnames="obj, index" returntype="System.Object" />
        <method name="IsDefined(System.Type, System.Boolean)" argnames="attributeType, inherit" returntype="System.Boolean" />
        <method name="GetCustomAttributes(System.Boolean)" argnames="inherit" returntype="System.Object[]" />
        <method name="GetCustomAttributes(System.Type, System.Boolean)" argnames="attributeType, inherit" returntype="System.Object[]" />
        <method name="SetConstant(System.Object)" argnames="defaultValue" returntype="System.Void" />
        <method name="SetGetMethod(System.Reflection.Emit.MethodBuilder)" argnames="mdBuilder" returntype="System.Void" />
        <method name="SetSetMethod(System.Reflection.Emit.MethodBuilder)" argnames="mdBuilder" returntype="System.Void" />
        <method name="AddOtherMethod(System.Reflection.Emit.MethodBuilder)" argnames="mdBuilder" returntype="System.Void" />
        <method name="SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])" argnames="con, binaryAttribute" returntype="System.Void" />
        <method name="SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" argnames="customBuilder" returntype="System.Void" />
    </class>
    <class name="SignatureHelper" namespace="System.Reflection.Emit">
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="GetMethodSigHelper(System.Reflection.Module, System.Runtime.InteropServices.CallingConvention, System.Type)" argnames="mod, unmanagedCallConv, returnType" returntype="System.Reflection.Emit.SignatureHelper" />
        <method name="GetLocalVarSigHelper(System.Reflection.Module)" argnames="mod" returntype="System.Reflection.Emit.SignatureHelper" />
        <method name="GetFieldSigHelper(System.Reflection.Module)" argnames="mod" returntype="System.Reflection.Emit.SignatureHelper" />
        <method name="GetMethodSigHelper(System.Reflection.Module, System.Reflection.CallingConventions, System.Type)" argnames="mod, callingConvention, returnType" returntype="System.Reflection.Emit.SignatureHelper" />
        <method name="GetMethodSigHelper(System.Reflection.Module, System.Type, System.Type[])" argnames="mod, returnType, parameterTypes" returntype="System.Reflection.Emit.SignatureHelper" />
        <method name="GetPropertySigHelper(System.Reflection.Module, System.Type, System.Type[])" argnames="mod, returnType, parameterTypes" returntype="System.Reflection.Emit.SignatureHelper" />
        <method name="AddArgument(System.Type)" argnames="clsArgument" returntype="System.Void" />
        <method name="AddSentinel()" argnames="" returntype="System.Void" />
        <method name="GetSignature()" argnames="" returntype="System.Byte[]" />
    </class>
    <class name="TypeBuilder" namespace="System.Reflection.Emit">
        <field name="UnspecifiedTypeSize" />
        <property name="Size" propertytype="System.Int32" />
        <property name="PackingSize" propertytype="System.Reflection.Emit.PackingSize" />
        <property name="DeclaringType" propertytype="System.Type" />
        <property name="ReflectedType" propertytype="System.Type" />
        <property name="TypeToken" propertytype="System.Reflection.Emit.TypeToken" />
        <property name="Name" propertytype="System.String" />
        <property name="GUID" propertytype="System.Guid" />
        <property name="Module" propertytype="System.Reflection.Module" />
        <property name="Assembly" propertytype="System.Reflection.Assembly" />
        <property name="TypeHandle" propertytype="System.RuntimeTypeHandle" />
        <property name="FullName" propertytype="System.String" />
        <property name="Namespace" propertytype="System.String" />
        <property name="AssemblyQualifiedName" propertytype="System.String" />
        <property name="BaseType" propertytype="System.Type" />
        <property name="UnderlyingSystemType" propertytype="System.Type" />
        <method name="InvokeMember(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object, System.Object[], System.Reflection.ParameterModifier[], System.Globalization.CultureInfo, System.String[])" argnames="name, invokeAttr, binder, target, args, modifiers, culture, namedParameters" returntype="System.Object" />
        <method name="GetMembers(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Reflection.MemberInfo[]" />
        <method name="GetProperties(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Reflection.PropertyInfo[]" />
        <method name="GetFields(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Reflection.FieldInfo[]" />
        <method name="GetField(System.String, System.Reflection.BindingFlags)" argnames="name, bindingAttr" returntype="System.Reflection.FieldInfo" />
        <method name="GetMethods(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Reflection.MethodInfo[]" />
        <method name="GetInterfaceMap(System.Type)" argnames="interfaceType" returntype="System.Reflection.InterfaceMapping" />
        <method name="IsAssignableFrom(System.Type)" argnames="c" returntype="System.Boolean" />
        <method name="IsSubclassOf(System.Type)" argnames="c" returntype="System.Boolean" />
        <method name="HasElementTypeImpl()" argnames="" returntype="System.Boolean" />
        <method name="GetElementType()" argnames="" returntype="System.Type" />
        <method name="IsCOMObjectImpl()" argnames="" returntype="System.Boolean" />
        <method name="IsPrimitiveImpl()" argnames="" returntype="System.Boolean" />
        <method name="IsPointerImpl()" argnames="" returntype="System.Boolean" />
        <method name="IsByRefImpl()" argnames="" returntype="System.Boolean" />
        <method name="IsArrayImpl()" argnames="" returntype="System.Boolean" />
        <method name="GetAttributeFlagsImpl()" argnames="" returntype="System.Reflection.TypeAttributes" />
        <method name="GetMember(System.String, System.Reflection.MemberTypes, System.Reflection.BindingFlags)" argnames="name, type, bindingAttr" returntype="System.Reflection.MemberInfo[]" />
        <method name="GetNestedType(System.String, System.Reflection.BindingFlags)" argnames="name, bindingAttr" returntype="System.Type" />
        <method name="GetNestedTypes(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Type[]" />
        <method name="GetPropertyImpl(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Type, System.Type[], System.Reflection.ParameterModifier[])" argnames="name, bindingAttr, binder, returnType, types, modifiers" returntype="System.Reflection.PropertyInfo" />
        <method name="GetEvents(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Reflection.EventInfo[]" />
        <method name="GetEvents()" argnames="" returntype="System.Reflection.EventInfo[]" />
        <method name="GetEvent(System.String, System.Reflection.BindingFlags)" argnames="name, bindingAttr" returntype="System.Reflection.EventInfo" />
        <method name="GetInterfaces()" argnames="" returntype="System.Type[]" />
        <method name="GetInterface(System.String, System.Boolean)" argnames="name, ignoreCase" returntype="System.Type" />
        <method name="GetMethodImpl(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])" argnames="name, bindingAttr, binder, callConvention, types, modifiers" returntype="System.Reflection.MethodInfo" />
        <method name="GetConstructors(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Reflection.ConstructorInfo[]" />
        <method name="GetConstructorImpl(System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])" argnames="bindingAttr, binder, callConvention, types, modifiers" returntype="System.Reflection.ConstructorInfo" />
        <method name="IsDefined(System.Type, System.Boolean)" argnames="attributeType, inherit" returntype="System.Boolean" />
        <method name="GetCustomAttributes(System.Boolean)" argnames="inherit" returntype="System.Object[]" />
        <method name="GetCustomAttributes(System.Type, System.Boolean)" argnames="attributeType, inherit" returntype="System.Object[]" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="SetParent(System.Type)" argnames="parent" returntype="System.Void" />
        <method name="AddInterfaceImplementation(System.Type)" argnames="interfaceType" returntype="System.Void" />
        <method name="DefineMethod(System.String, System.Reflection.MethodAttributes, System.Type, System.Type[])" argnames="name, attributes, returnType, parameterTypes" returntype="System.Reflection.Emit.MethodBuilder" />
        <method name="DefineMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[])" argnames="name, attributes, callingConvention, returnType, parameterTypes" returntype="System.Reflection.Emit.MethodBuilder" />
        <method name="DefineProperty(System.String, System.Reflection.PropertyAttributes, System.Type, System.Type[])" argnames="name, attributes, returnType, parameterTypes" returntype="System.Reflection.Emit.PropertyBuilder" />
        <method name="DefineEvent(System.String, System.Reflection.EventAttributes, System.Type)" argnames="name, attributes, eventtype" returntype="System.Reflection.Emit.EventBuilder" />
        <method name="DefinePInvokeMethod(System.String, System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[], System.Runtime.InteropServices.CallingConvention, System.Runtime.InteropServices.CharSet)" argnames="name, dllName, attributes, callingConvention, returnType, parameterTypes, nativeCallConv, nativeCharSet" returntype="System.Reflection.Emit.MethodBuilder" />
        <method name="DefinePInvokeMethod(System.String, System.String, System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[], System.Runtime.InteropServices.CallingConvention, System.Runtime.InteropServices.CharSet)" argnames="name, dllName, entryName, attributes, callingConvention, returnType, parameterTypes, nativeCallConv, nativeCharSet" returntype="System.Reflection.Emit.MethodBuilder" />
        <method name="DefineTypeInitializer()" argnames="" returntype="System.Reflection.Emit.ConstructorBuilder" />
        <method name="DefineConstructor(System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type[])" argnames="attributes, callingConvention, parameterTypes" returntype="System.Reflection.Emit.ConstructorBuilder" />
        <method name="DefineDefaultConstructor(System.Reflection.MethodAttributes)" argnames="attributes" returntype="System.Reflection.Emit.ConstructorBuilder" />
        <method name="CreateType()" argnames="" returntype="System.Type" />
        <method name="DefineMethodOverride(System.Reflection.MethodInfo, System.Reflection.MethodInfo)" argnames="methodInfoBody, methodInfoDeclaration" returntype="System.Void" />
        <method name="DefineField(System.String, System.Type, System.Reflection.FieldAttributes)" argnames="fieldName, type, attributes" returntype="System.Reflection.Emit.FieldBuilder" />
        <method name="DefineInitializedData(System.String, System.Byte[], System.Reflection.FieldAttributes)" argnames="name, data, attributes" returntype="System.Reflection.Emit.FieldBuilder" />
        <method name="DefineUninitializedData(System.String, System.Int32, System.Reflection.FieldAttributes)" argnames="name, size, attributes" returntype="System.Reflection.Emit.FieldBuilder" />
        <method name="DefineNestedType(System.String)" argnames="name" returntype="System.Reflection.Emit.TypeBuilder" />
        <method name="DefineNestedType(System.String, System.Reflection.TypeAttributes, System.Type, System.Type[])" argnames="name, attr, parent, interfaces" returntype="System.Reflection.Emit.TypeBuilder" />
        <method name="DefineNestedType(System.String, System.Reflection.TypeAttributes, System.Type)" argnames="name, attr, parent" returntype="System.Reflection.Emit.TypeBuilder" />
        <method name="DefineNestedType(System.String, System.Reflection.TypeAttributes)" argnames="name, attr" returntype="System.Reflection.Emit.TypeBuilder" />
        <method name="DefineNestedType(System.String, System.Reflection.TypeAttributes, System.Type, System.Int32)" argnames="name, attr, parent, typeSize" returntype="System.Reflection.Emit.TypeBuilder" />
        <method name="DefineNestedType(System.String, System.Reflection.TypeAttributes, System.Type, System.Reflection.Emit.PackingSize)" argnames="name, attr, parent, packSize" returntype="System.Reflection.Emit.TypeBuilder" />
        <method name="AddDeclarativeSecurity(System.Security.Permissions.SecurityAction, System.Security.PermissionSet)" argnames="action, pset" returntype="System.Void" />
        <method name="SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])" argnames="con, binaryAttribute" returntype="System.Void" />
        <method name="SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" argnames="customBuilder" returntype="System.Void" />
    </class>
    <class name="EnumBuilder" namespace="System.Reflection.Emit">
        <property name="TypeToken" propertytype="System.Reflection.Emit.TypeToken" />
        <property name="UnderlyingField" propertytype="System.Reflection.Emit.FieldBuilder" />
        <property name="Name" propertytype="System.String" />
        <property name="GUID" propertytype="System.Guid" />
        <property name="Module" propertytype="System.Reflection.Module" />
        <property name="Assembly" propertytype="System.Reflection.Assembly" />
        <property name="TypeHandle" propertytype="System.RuntimeTypeHandle" />
        <property name="FullName" propertytype="System.String" />
        <property name="AssemblyQualifiedName" propertytype="System.String" />
        <property name="Namespace" propertytype="System.String" />
        <property name="BaseType" propertytype="System.Type" />
        <property name="UnderlyingSystemType" propertytype="System.Type" />
        <property name="DeclaringType" propertytype="System.Type" />
        <property name="ReflectedType" propertytype="System.Type" />
        <method name="InvokeMember(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object, System.Object[], System.Reflection.ParameterModifier[], System.Globalization.CultureInfo, System.String[])" argnames="name, invokeAttr, binder, target, args, modifiers, culture, namedParameters" returntype="System.Object" />
        <method name="GetMembers(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Reflection.MemberInfo[]" />
        <method name="GetProperties(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Reflection.PropertyInfo[]" />
        <method name="GetFields(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Reflection.FieldInfo[]" />
        <method name="GetField(System.String, System.Reflection.BindingFlags)" argnames="name, bindingAttr" returntype="System.Reflection.FieldInfo" />
        <method name="GetMethods(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Reflection.MethodInfo[]" />
        <method name="GetInterfaceMap(System.Type)" argnames="interfaceType" returntype="System.Reflection.InterfaceMapping" />
        <method name="HasElementTypeImpl()" argnames="" returntype="System.Boolean" />
        <method name="GetElementType()" argnames="" returntype="System.Type" />
        <method name="IsCOMObjectImpl()" argnames="" returntype="System.Boolean" />
        <method name="IsPrimitiveImpl()" argnames="" returntype="System.Boolean" />
        <method name="IsPointerImpl()" argnames="" returntype="System.Boolean" />
        <method name="IsByRefImpl()" argnames="" returntype="System.Boolean" />
        <method name="IsArrayImpl()" argnames="" returntype="System.Boolean" />
        <method name="GetAttributeFlagsImpl()" argnames="" returntype="System.Reflection.TypeAttributes" />
        <method name="IsValueTypeImpl()" argnames="" returntype="System.Boolean" />
        <method name="GetMember(System.String, System.Reflection.MemberTypes, System.Reflection.BindingFlags)" argnames="name, type, bindingAttr" returntype="System.Reflection.MemberInfo[]" />
        <method name="GetNestedType(System.String, System.Reflection.BindingFlags)" argnames="name, bindingAttr" returntype="System.Type" />
        <method name="GetNestedTypes(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Type[]" />
        <method name="GetPropertyImpl(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Type, System.Type[], System.Reflection.ParameterModifier[])" argnames="name, bindingAttr, binder, returnType, types, modifiers" returntype="System.Reflection.PropertyInfo" />
        <method name="GetEvents(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Reflection.EventInfo[]" />
        <method name="GetEvents()" argnames="" returntype="System.Reflection.EventInfo[]" />
        <method name="GetEvent(System.String, System.Reflection.BindingFlags)" argnames="name, bindingAttr" returntype="System.Reflection.EventInfo" />
        <method name="GetInterfaces()" argnames="" returntype="System.Type[]" />
        <method name="GetInterface(System.String, System.Boolean)" argnames="name, ignoreCase" returntype="System.Type" />
        <method name="GetMethodImpl(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])" argnames="name, bindingAttr, binder, callConvention, types, modifiers" returntype="System.Reflection.MethodInfo" />
        <method name="GetConstructors(System.Reflection.BindingFlags)" argnames="bindingAttr" returntype="System.Reflection.ConstructorInfo[]" />
        <method name="GetConstructorImpl(System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])" argnames="bindingAttr, binder, callConvention, types, modifiers" returntype="System.Reflection.ConstructorInfo" />
        <method name="IsDefined(System.Type, System.Boolean)" argnames="attributeType, inherit" returntype="System.Boolean" />
        <method name="GetCustomAttributes(System.Boolean)" argnames="inherit" returntype="System.Object[]" />
        <method name="GetCustomAttributes(System.Type, System.Boolean)" argnames="attributeType, inherit" returntype="System.Object[]" />
        <method name="DefineLiteral(System.String, System.Object)" argnames="literalName, literalValue" returntype="System.Reflection.Emit.FieldBuilder" />
        <method name="CreateType()" argnames="" returntype="System.Type" />
        <method name="SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])" argnames="con, binaryAttribute" returntype="System.Void" />
        <method name="SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" argnames="customBuilder" returntype="System.Void" />
    </class>
    <struct name="EventToken" namespace="System.Reflection.Emit">
        <field name="Empty" />
        <property name="Token" propertytype="System.Int32" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
    </struct>
    <struct name="FieldToken" namespace="System.Reflection.Emit">
        <field name="Empty" />
        <property name="Token" propertytype="System.Int32" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
    </struct>
    <struct name="Label" namespace="System.Reflection.Emit">
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
    </struct>
    <struct name="MethodToken" namespace="System.Reflection.Emit">
        <field name="Empty" />
        <property name="Token" propertytype="System.Int32" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
    </struct>
    <struct name="OpCode" namespace="System.Reflection.Emit">
        <property name="OperandType" propertytype="System.Reflection.Emit.OperandType" />
        <property name="FlowControl" propertytype="System.Reflection.Emit.FlowControl" />
        <property name="OpCodeType" propertytype="System.Reflection.Emit.OpCodeType" />
        <property name="StackBehaviourPop" propertytype="System.Reflection.Emit.StackBehaviour" />
        <property name="StackBehaviourPush" propertytype="System.Reflection.Emit.StackBehaviour" />
        <property name="Size" propertytype="System.Int32" />
        <property name="Value" propertytype="System.Int16" />
        <property name="Name" propertytype="System.String" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </struct>
    <struct name="ParameterToken" namespace="System.Reflection.Emit">
        <field name="Empty" />
        <property name="Token" propertytype="System.Int32" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
    </struct>
    <struct name="PropertyToken" namespace="System.Reflection.Emit">
        <field name="Empty" />
        <property name="Token" propertytype="System.Int32" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
    </struct>
    <struct name="SignatureToken" namespace="System.Reflection.Emit">
        <field name="Empty" />
        <property name="Token" propertytype="System.Int32" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
    </struct>
    <struct name="StringToken" namespace="System.Reflection.Emit">
        <property name="Token" propertytype="System.Int32" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
    </struct>
    <struct name="TypeToken" namespace="System.Reflection.Emit">
        <field name="Empty" />
        <property name="Token" propertytype="System.Int32" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
    </struct>
    <enum name="AssemblyBuilderAccess" namespace="System.Reflection.Emit">
        <field name="Run" />
        <field name="Save" />
        <field name="RunAndSave" />
    </enum>
    <enum name="PEFileKinds" namespace="System.Reflection.Emit">
        <field name="Dll" />
        <field name="ConsoleApplication" />
        <field name="WindowApplication" />
    </enum>
    <enum name="OpCodeType" namespace="System.Reflection.Emit">
        <field name="Annotation" />
        <field name="Macro" />
        <field name="Nternal" />
        <field name="Objmodel" />
        <field name="Prefix" />
        <field name="Primitive" />
    </enum>
    <enum name="StackBehaviour" namespace="System.Reflection.Emit">
        <field name="Pop0" />
        <field name="Pop1" />
        <field name="Pop1_pop1" />
        <field name="Popi" />
        <field name="Popi_pop1" />
        <field name="Popi_popi" />
        <field name="Popi_popi8" />
        <field name="Popi_popi_popi" />
        <field name="Popi_popr4" />
        <field name="Popi_popr8" />
        <field name="Popref" />
        <field name="Popref_pop1" />
        <field name="Popref_popi" />
        <field name="Popref_popi_popi" />
        <field name="Popref_popi_popi8" />
        <field name="Popref_popi_popr4" />
        <field name="Popref_popi_popr8" />
        <field name="Popref_popi_popref" />
        <field name="Push0" />
        <field name="Push1" />
        <field name="Push1_push1" />
        <field name="Pushi" />
        <field name="Pushi8" />
        <field name="Pushr4" />
        <field name="Pushr8" />
        <field name="Pushref" />
        <field name="Varpop" />
        <field name="Varpush" />
    </enum>
    <enum name="OperandType" namespace="System.Reflection.Emit">
        <field name="InlineBrTarget" />
        <field name="InlineField" />
        <field name="InlineI" />
        <field name="InlineI8" />
        <field name="InlineMethod" />
        <field name="InlineNone" />
        <field name="InlinePhi" />
        <field name="InlineR" />
        <field name="InlineSig" />
        <field name="InlineString" />
        <field name="InlineSwitch" />
        <field name="InlineTok" />
        <field name="InlineType" />
        <field name="InlineVar" />
        <field name="ShortInlineBrTarget" />
        <field name="ShortInlineI" />
        <field name="ShortInlineR" />
        <field name="ShortInlineVar" />
    </enum>
    <enum name="FlowControl" namespace="System.Reflection.Emit">
        <field name="Branch" />
        <field name="Break" />
        <field name="Call" />
        <field name="Cond_Branch" />
        <field name="Meta" />
        <field name="Next" />
        <field name="Phi" />
        <field name="Return" />
        <field name="Throw" />
    </enum>
    <enum name="PackingSize" namespace="System.Reflection.Emit">
        <field name="Unspecified" />
        <field name="Size1" />
        <field name="Size2" />
        <field name="Size4" />
        <field name="Size8" />
        <field name="Size16" />
    </enum>
    <class name="Calendar" namespace="System.Globalization">
        <constructor name="Calendar()" argnames="" />
        <field name="CurrentEra" />
        <property name="ID" propertytype="System.Int32" />
        <property name="CurrentEraValue" propertytype="System.Int32" />
        <property name="Eras" propertytype="System.Int32[]" />
        <property name="TwoDigitYearMax" propertytype="System.Int32" />
        <method name="ToFourDigitYear(System.Int32)" argnames="year" returntype="System.Int32" />
        <method name="ToDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" argnames="year, month, day, hour, minute, second, millisecond, era" returntype="System.DateTime" />
        <method name="ToDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" argnames="year, month, day, hour, minute, second, millisecond" returntype="System.DateTime" />
        <method name="IsLeapYear(System.Int32, System.Int32)" argnames="year, era" returntype="System.Boolean" />
        <method name="IsLeapYear(System.Int32)" argnames="year" returntype="System.Boolean" />
        <method name="IsLeapMonth(System.Int32, System.Int32, System.Int32)" argnames="year, month, era" returntype="System.Boolean" />
        <method name="IsLeapMonth(System.Int32, System.Int32)" argnames="year, month" returntype="System.Boolean" />
        <method name="IsLeapDay(System.Int32, System.Int32, System.Int32, System.Int32)" argnames="year, month, day, era" returntype="System.Boolean" />
        <method name="IsLeapDay(System.Int32, System.Int32, System.Int32)" argnames="year, month, day" returntype="System.Boolean" />
        <method name="GetYear(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetWeekOfYear(System.DateTime, System.Globalization.CalendarWeekRule, System.DayOfWeek)" argnames="time, rule, firstDayOfWeek" returntype="System.Int32" />
        <method name="GetSecond(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetMonthsInYear(System.Int32, System.Int32)" argnames="year, era" returntype="System.Int32" />
        <method name="GetMonthsInYear(System.Int32)" argnames="year" returntype="System.Int32" />
        <method name="GetMonth(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetMinute(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetMilliseconds(System.DateTime)" argnames="time" returntype="System.Double" />
        <method name="GetHour(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetEra(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetDaysInYear(System.Int32, System.Int32)" argnames="year, era" returntype="System.Int32" />
        <method name="GetDaysInYear(System.Int32)" argnames="year" returntype="System.Int32" />
        <method name="GetDaysInMonth(System.Int32, System.Int32, System.Int32)" argnames="year, month, era" returntype="System.Int32" />
        <method name="GetDaysInMonth(System.Int32, System.Int32)" argnames="year, month" returntype="System.Int32" />
        <method name="GetDayOfYear(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetDayOfWeek(System.DateTime)" argnames="time" returntype="System.DayOfWeek" />
        <method name="GetDayOfMonth(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="AddYears(System.DateTime, System.Int32)" argnames="time, years" returntype="System.DateTime" />
        <method name="AddWeeks(System.DateTime, System.Int32)" argnames="time, weeks" returntype="System.DateTime" />
        <method name="AddSeconds(System.DateTime, System.Int32)" argnames="time, seconds" returntype="System.DateTime" />
        <method name="AddMonths(System.DateTime, System.Int32)" argnames="time, months" returntype="System.DateTime" />
        <method name="AddMinutes(System.DateTime, System.Int32)" argnames="time, minutes" returntype="System.DateTime" />
        <method name="AddMilliseconds(System.DateTime, System.Double)" argnames="time, milliseconds" returntype="System.DateTime" />
        <method name="AddHours(System.DateTime, System.Int32)" argnames="time, hours" returntype="System.DateTime" />
        <method name="AddDays(System.DateTime, System.Int32)" argnames="time, days" returntype="System.DateTime" />
    </class>
    <class name="CompareInfo" namespace="System.Globalization">
        <property name="LCID" propertytype="System.Int32" />
        <method name="GetSortKey(System.String)" argnames="source" returntype="System.Globalization.SortKey" />
        <method name="GetSortKey(System.String, System.Globalization.CompareOptions)" argnames="source, options" returntype="System.Globalization.SortKey" />
        <method name="LastIndexOf(System.String, System.String, System.Int32, System.Int32, System.Globalization.CompareOptions)" argnames="source, value, startIndex, count, options" returntype="System.Int32" />
        <method name="LastIndexOf(System.String, System.Char, System.Int32, System.Int32, System.Globalization.CompareOptions)" argnames="source, value, startIndex, count, options" returntype="System.Int32" />
        <method name="LastIndexOf(System.String, System.String, System.Int32, System.Int32)" argnames="source, value, startIndex, count" returntype="System.Int32" />
        <method name="LastIndexOf(System.String, System.String, System.Int32, System.Globalization.CompareOptions)" argnames="source, value, startIndex, options" returntype="System.Int32" />
        <method name="LastIndexOf(System.String, System.String, System.Int32)" argnames="source, value, startIndex" returntype="System.Int32" />
        <method name="LastIndexOf(System.String, System.Char, System.Int32, System.Int32)" argnames="source, value, startIndex, count" returntype="System.Int32" />
        <method name="LastIndexOf(System.String, System.Char, System.Int32, System.Globalization.CompareOptions)" argnames="source, value, startIndex, options" returntype="System.Int32" />
        <method name="LastIndexOf(System.String, System.Char, System.Int32)" argnames="source, value, startIndex" returntype="System.Int32" />
        <method name="LastIndexOf(System.String, System.String, System.Globalization.CompareOptions)" argnames="source, value, options" returntype="System.Int32" />
        <method name="LastIndexOf(System.String, System.Char, System.Globalization.CompareOptions)" argnames="source, value, options" returntype="System.Int32" />
        <method name="LastIndexOf(System.String, System.String)" argnames="source, value" returntype="System.Int32" />
        <method name="LastIndexOf(System.String, System.Char)" argnames="source, value" returntype="System.Int32" />
        <method name="IndexOf(System.String, System.String, System.Int32, System.Int32, System.Globalization.CompareOptions)" argnames="source, value, startIndex, count, options" returntype="System.Int32" />
        <method name="IndexOf(System.String, System.Char, System.Int32, System.Int32, System.Globalization.CompareOptions)" argnames="source, value, startIndex, count, options" returntype="System.Int32" />
        <method name="IndexOf(System.String, System.String, System.Int32, System.Int32)" argnames="source, value, startIndex, count" returntype="System.Int32" />
        <method name="IndexOf(System.String, System.String, System.Int32, System.Globalization.CompareOptions)" argnames="source, value, startIndex, options" returntype="System.Int32" />
        <method name="IndexOf(System.String, System.String, System.Int32)" argnames="source, value, startIndex" returntype="System.Int32" />
        <method name="IndexOf(System.String, System.Char, System.Int32, System.Int32)" argnames="source, value, startIndex, count" returntype="System.Int32" />
        <method name="IndexOf(System.String, System.Char, System.Int32, System.Globalization.CompareOptions)" argnames="source, value, startIndex, options" returntype="System.Int32" />
        <method name="IndexOf(System.String, System.Char, System.Int32)" argnames="source, value, startIndex" returntype="System.Int32" />
        <method name="IndexOf(System.String, System.String, System.Globalization.CompareOptions)" argnames="source, value, options" returntype="System.Int32" />
        <method name="IndexOf(System.String, System.Char, System.Globalization.CompareOptions)" argnames="source, value, options" returntype="System.Int32" />
        <method name="IndexOf(System.String, System.String)" argnames="source, value" returntype="System.Int32" />
        <method name="IndexOf(System.String, System.Char)" argnames="source, value" returntype="System.Int32" />
        <method name="IsSuffix(System.String, System.String)" argnames="source, suffix" returntype="System.Boolean" />
        <method name="IsSuffix(System.String, System.String, System.Globalization.CompareOptions)" argnames="source, suffix, options" returntype="System.Boolean" />
        <method name="IsPrefix(System.String, System.String)" argnames="source, prefix" returntype="System.Boolean" />
        <method name="IsPrefix(System.String, System.String, System.Globalization.CompareOptions)" argnames="source, prefix, options" returntype="System.Boolean" />
        <method name="Compare(System.String, System.Int32, System.Int32, System.String, System.Int32, System.Int32, System.Globalization.CompareOptions)" argnames="string1, offset1, length1, string2, offset2, length2, options" returntype="System.Int32" />
        <method name="Compare(System.String, System.Int32, System.String, System.Int32)" argnames="string1, offset1, string2, offset2" returntype="System.Int32" />
        <method name="Compare(System.String, System.Int32, System.String, System.Int32, System.Globalization.CompareOptions)" argnames="string1, offset1, string2, offset2, options" returntype="System.Int32" />
        <method name="Compare(System.String, System.Int32, System.Int32, System.String, System.Int32, System.Int32)" argnames="string1, offset1, length1, string2, offset2, length2" returntype="System.Int32" />
        <method name="Compare(System.String, System.String, System.Globalization.CompareOptions)" argnames="string1, string2, options" returntype="System.Int32" />
        <method name="Compare(System.String, System.String)" argnames="string1, string2" returntype="System.Int32" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="value" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="GetCompareInfo(System.Int32, System.Reflection.Assembly)" argnames="culture, assembly" returntype="System.Globalization.CompareInfo" />
        <method name="GetCompareInfo(System.String, System.Reflection.Assembly)" argnames="name, assembly" returntype="System.Globalization.CompareInfo" />
        <method name="GetCompareInfo(System.Int32)" argnames="culture" returntype="System.Globalization.CompareInfo" />
        <method name="GetCompareInfo(System.String)" argnames="name" returntype="System.Globalization.CompareInfo" />
    </class>
    <class name="CultureInfo" namespace="System.Globalization">
        <constructor name="CultureInfo(System.String)" argnames="name" />
        <constructor name="CultureInfo(System.String, System.Boolean)" argnames="name, useUserOverride" />
        <constructor name="CultureInfo(System.Int32)" argnames="culture" />
        <constructor name="CultureInfo(System.Int32, System.Boolean)" argnames="culture, useUserOverride" />
        <property name="CurrentCulture" propertytype="System.Globalization.CultureInfo" />
        <property name="UserDefaultCulture" propertytype="System.Globalization.CultureInfo" />
        <property name="UserDefaultUICulture" propertytype="System.Globalization.CultureInfo" />
        <property name="CurrentUICulture" propertytype="System.Globalization.CultureInfo" />
        <property name="InstalledUICulture" propertytype="System.Globalization.CultureInfo" />
        <property name="InvariantCulture" propertytype="System.Globalization.CultureInfo" />
        <property name="Parent" propertytype="System.Globalization.CultureInfo" />
        <property name="LCID" propertytype="System.Int32" />
        <property name="Name" propertytype="System.String" />
        <property name="DisplayName" propertytype="System.String" />
        <property name="NativeName" propertytype="System.String" />
        <property name="EnglishName" propertytype="System.String" />
        <property name="TwoLetterISOLanguageName" propertytype="System.String" />
        <property name="ThreeLetterISOLanguageName" propertytype="System.String" />
        <property name="ThreeLetterWindowsLanguageName" propertytype="System.String" />
        <property name="CompareInfo" propertytype="System.Globalization.CompareInfo" />
        <property name="TextInfo" propertytype="System.Globalization.TextInfo" />
        <property name="IsNeutralCulture" propertytype="System.Boolean" />
        <property name="NumberFormat" propertytype="System.Globalization.NumberFormatInfo" />
        <property name="DateTimeFormat" propertytype="System.Globalization.DateTimeFormatInfo" />
        <property name="Calendar" propertytype="System.Globalization.Calendar" />
        <property name="OptionalCalendars" propertytype="System.Globalization.Calendar[]" />
        <property name="UseUserOverride" propertytype="System.Boolean" />
        <property name="IsReadOnly" propertytype="System.Boolean" />
        <method name="GetFormat(System.Type)" argnames="formatType" returntype="System.Object" />
        <method name="Clone()" argnames="" returntype="System.Object" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="value" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="CreateSpecificCulture(System.String)" argnames="name" returntype="System.Globalization.CultureInfo" />
        <method name="GetCultures(System.Globalization.CultureTypes)" argnames="types" returntype="System.Globalization.CultureInfo[]" />
        <method name="ClearCachedData()" argnames="" returntype="System.Void" />
        <method name="ReadOnly(System.Globalization.CultureInfo)" argnames="ci" returntype="System.Globalization.CultureInfo" />
    </class>
    <class name="DateTimeFormatInfo" namespace="System.Globalization">
        <constructor name="DateTimeFormatInfo()" argnames="" />
        <property name="InvariantInfo" propertytype="System.Globalization.DateTimeFormatInfo" />
        <property name="CurrentInfo" propertytype="System.Globalization.DateTimeFormatInfo" />
        <property name="AMDesignator" propertytype="System.String" />
        <property name="Calendar" propertytype="System.Globalization.Calendar" />
        <property name="OptionalCalendars" propertytype="System.Int32[]" />
        <property name="EraNames" propertytype="System.String[]" />
        <property name="AbbreviatedEraNames" propertytype="System.String[]" />
        <property name="AbbreviatedEnglishEraNames" propertytype="System.String[]" />
        <property name="DateSeparator" propertytype="System.String" />
        <property name="FirstDayOfWeek" propertytype="System.DayOfWeek" />
        <property name="CalendarWeekRule" propertytype="System.Globalization.CalendarWeekRule" />
        <property name="FullDateTimePattern" propertytype="System.String" />
        <property name="LongDatePattern" propertytype="System.String" />
        <property name="LongTimePattern" propertytype="System.String" />
        <property name="MonthDayPattern" propertytype="System.String" />
        <property name="PMDesignator" propertytype="System.String" />
        <property name="RFC1123Pattern" propertytype="System.String" />
        <property name="ShortDatePattern" propertytype="System.String" />
        <property name="ShortTimePattern" propertytype="System.String" />
        <property name="SortableDateTimePattern" propertytype="System.String" />
        <property name="GeneralShortTimePattern" propertytype="System.String" />
        <property name="GeneralLongTimePattern" propertytype="System.String" />
        <property name="TimeSeparator" propertytype="System.String" />
        <property name="UniversalSortableDateTimePattern" propertytype="System.String" />
        <property name="YearMonthPattern" propertytype="System.String" />
        <property name="AbbreviatedDayNames" propertytype="System.String[]" />
        <property name="DayNames" propertytype="System.String[]" />
        <property name="AbbreviatedMonthNames" propertytype="System.String[]" />
        <property name="MonthNames" propertytype="System.String[]" />
        <property name="AllShortDatePatterns" propertytype="System.String[]" />
        <property name="AllLongDatePatterns" propertytype="System.String[]" />
        <property name="AllShortTimePatterns" propertytype="System.String[]" />
        <property name="AllLongTimePatterns" propertytype="System.String[]" />
        <property name="DateWords" propertytype="System.String[]" />
        <property name="IsReadOnly" propertytype="System.Boolean" />
        <method name="GetFormat(System.Type)" argnames="formatType" returntype="System.Object" />
        <method name="Clone()" argnames="" returntype="System.Object" />
        <method name="GetInstance(System.IFormatProvider)" argnames="provider" returntype="System.Globalization.DateTimeFormatInfo" />
        <method name="GetEra(System.String)" argnames="eraName" returntype="System.Int32" />
        <method name="GetEraName(System.Int32)" argnames="era" returntype="System.String" />
        <method name="GetAbbreviatedEraName(System.Int32)" argnames="era" returntype="System.String" />
        <method name="GetAbbreviatedDayName(System.DayOfWeek)" argnames="dayofweek" returntype="System.String" />
        <method name="GetAllDateTimePatterns()" argnames="" returntype="System.String[]" />
        <method name="GetAllDateTimePatterns(System.Char)" argnames="format" returntype="System.String[]" />
        <method name="GetDayName(System.DayOfWeek)" argnames="dayofweek" returntype="System.String" />
        <method name="GetAbbreviatedMonthName(System.Int32)" argnames="month" returntype="System.String" />
        <method name="GetMonthName(System.Int32)" argnames="month" returntype="System.String" />
        <method name="ReadOnly(System.Globalization.DateTimeFormatInfo)" argnames="dtfi" returntype="System.Globalization.DateTimeFormatInfo" />
    </class>
    <class name="DaylightTime" namespace="System.Globalization">
        <constructor name="DaylightTime(System.DateTime, System.DateTime, System.TimeSpan)" argnames="start, end, delta" />
        <property name="Start" propertytype="System.DateTime" />
        <property name="End" propertytype="System.DateTime" />
        <property name="Delta" propertytype="System.TimeSpan" />
    </class>
    <class name="GregorianCalendar" namespace="System.Globalization">
        <constructor name="GregorianCalendar()" argnames="" />
        <constructor name="GregorianCalendar(System.Globalization.GregorianCalendarTypes)" argnames="type" />
        <field name="ADEra" />
        <property name="CalendarType" propertytype="System.Globalization.GregorianCalendarTypes" />
        <property name="ID" propertytype="System.Int32" />
        <property name="Eras" propertytype="System.Int32[]" />
        <property name="TwoDigitYearMax" propertytype="System.Int32" />
        <method name="ToFourDigitYear(System.Int32)" argnames="year" returntype="System.Int32" />
        <method name="ToDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" argnames="year, month, day, hour, minute, second, millisecond, era" returntype="System.DateTime" />
        <method name="IsLeapYear(System.Int32, System.Int32)" argnames="year, era" returntype="System.Boolean" />
        <method name="IsLeapMonth(System.Int32, System.Int32, System.Int32)" argnames="year, month, era" returntype="System.Boolean" />
        <method name="IsLeapDay(System.Int32, System.Int32, System.Int32, System.Int32)" argnames="year, month, day, era" returntype="System.Boolean" />
        <method name="GetYear(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetMonthsInYear(System.Int32, System.Int32)" argnames="year, era" returntype="System.Int32" />
        <method name="GetMonth(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetEra(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetDaysInYear(System.Int32, System.Int32)" argnames="year, era" returntype="System.Int32" />
        <method name="GetDaysInMonth(System.Int32, System.Int32, System.Int32)" argnames="year, month, era" returntype="System.Int32" />
        <method name="GetDayOfYear(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetDayOfWeek(System.DateTime)" argnames="time" returntype="System.DayOfWeek" />
        <method name="GetDayOfMonth(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="AddYears(System.DateTime, System.Int32)" argnames="time, years" returntype="System.DateTime" />
        <method name="AddWeeks(System.DateTime, System.Int32)" argnames="time, weeks" returntype="System.DateTime" />
        <method name="AddMonths(System.DateTime, System.Int32)" argnames="time, months" returntype="System.DateTime" />
    </class>
    <class name="HebrewCalendar" namespace="System.Globalization">
        <constructor name="HebrewCalendar()" argnames="" />
        <field name="HebrewEra" />
        <property name="ID" propertytype="System.Int32" />
        <property name="Eras" propertytype="System.Int32[]" />
        <property name="TwoDigitYearMax" propertytype="System.Int32" />
        <method name="ToFourDigitYear(System.Int32)" argnames="year" returntype="System.Int32" />
        <method name="ToDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" argnames="year, month, day, hour, minute, second, millisecond, era" returntype="System.DateTime" />
        <method name="IsLeapYear(System.Int32, System.Int32)" argnames="year, era" returntype="System.Boolean" />
        <method name="IsLeapMonth(System.Int32, System.Int32, System.Int32)" argnames="year, month, era" returntype="System.Boolean" />
        <method name="IsLeapDay(System.Int32, System.Int32, System.Int32, System.Int32)" argnames="year, month, day, era" returntype="System.Boolean" />
        <method name="GetYear(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetMonthsInYear(System.Int32, System.Int32)" argnames="year, era" returntype="System.Int32" />
        <method name="GetMonth(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetEra(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetDaysInYear(System.Int32, System.Int32)" argnames="year, era" returntype="System.Int32" />
        <method name="GetDaysInMonth(System.Int32, System.Int32, System.Int32)" argnames="year, month, era" returntype="System.Int32" />
        <method name="GetDayOfYear(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetDayOfWeek(System.DateTime)" argnames="time" returntype="System.DayOfWeek" />
        <method name="GetDayOfMonth(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="AddYears(System.DateTime, System.Int32)" argnames="time, years" returntype="System.DateTime" />
        <method name="AddMonths(System.DateTime, System.Int32)" argnames="time, months" returntype="System.DateTime" />
    </class>
    <class name="HijriCalendar" namespace="System.Globalization">
        <constructor name="HijriCalendar()" argnames="" />
        <field name="HijriEra" />
        <property name="ID" propertytype="System.Int32" />
        <property name="Eras" propertytype="System.Int32[]" />
        <property name="TwoDigitYearMax" propertytype="System.Int32" />
        <method name="ToFourDigitYear(System.Int32)" argnames="year" returntype="System.Int32" />
        <method name="ToDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" argnames="year, month, day, hour, minute, second, millisecond, era" returntype="System.DateTime" />
        <method name="IsLeapYear(System.Int32, System.Int32)" argnames="year, era" returntype="System.Boolean" />
        <method name="IsLeapMonth(System.Int32, System.Int32, System.Int32)" argnames="year, month, era" returntype="System.Boolean" />
        <method name="IsLeapDay(System.Int32, System.Int32, System.Int32, System.Int32)" argnames="year, month, day, era" returntype="System.Boolean" />
        <method name="GetYear(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetMonthsInYear(System.Int32, System.Int32)" argnames="year, era" returntype="System.Int32" />
        <method name="GetMonth(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetEra(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetDaysInYear(System.Int32, System.Int32)" argnames="year, era" returntype="System.Int32" />
        <method name="GetDaysInMonth(System.Int32, System.Int32, System.Int32)" argnames="year, month, era" returntype="System.Int32" />
        <method name="GetDayOfYear(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetDayOfWeek(System.DateTime)" argnames="time" returntype="System.DayOfWeek" />
        <method name="GetDayOfMonth(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="AddYears(System.DateTime, System.Int32)" argnames="time, years" returntype="System.DateTime" />
        <method name="AddMonths(System.DateTime, System.Int32)" argnames="time, months" returntype="System.DateTime" />
    </class>
    <class name="JapaneseCalendar" namespace="System.Globalization">
        <constructor name="JapaneseCalendar()" argnames="" />
        <property name="ID" propertytype="System.Int32" />
        <property name="Eras" propertytype="System.Int32[]" />
        <property name="TwoDigitYearMax" propertytype="System.Int32" />
        <method name="ToFourDigitYear(System.Int32)" argnames="year" returntype="System.Int32" />
        <method name="ToDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" argnames="year, month, day, hour, minute, second, millisecond, era" returntype="System.DateTime" />
        <method name="IsLeapYear(System.Int32, System.Int32)" argnames="year, era" returntype="System.Boolean" />
        <method name="IsLeapMonth(System.Int32, System.Int32, System.Int32)" argnames="year, month, era" returntype="System.Boolean" />
        <method name="IsLeapDay(System.Int32, System.Int32, System.Int32, System.Int32)" argnames="year, month, day, era" returntype="System.Boolean" />
        <method name="GetYear(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetMonthsInYear(System.Int32, System.Int32)" argnames="year, era" returntype="System.Int32" />
        <method name="GetMonth(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetEra(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetDaysInYear(System.Int32, System.Int32)" argnames="year, era" returntype="System.Int32" />
        <method name="GetDaysInMonth(System.Int32, System.Int32, System.Int32)" argnames="year, month, era" returntype="System.Int32" />
        <method name="GetDayOfYear(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetDayOfWeek(System.DateTime)" argnames="time" returntype="System.DayOfWeek" />
        <method name="GetDayOfMonth(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="AddYears(System.DateTime, System.Int32)" argnames="time, years" returntype="System.DateTime" />
        <method name="AddMonths(System.DateTime, System.Int32)" argnames="time, months" returntype="System.DateTime" />
    </class>
    <class name="JulianCalendar" namespace="System.Globalization">
        <constructor name="JulianCalendar()" argnames="" />
        <field name="JulianEra" />
        <property name="ID" propertytype="System.Int32" />
        <property name="Eras" propertytype="System.Int32[]" />
        <property name="TwoDigitYearMax" propertytype="System.Int32" />
        <method name="ToFourDigitYear(System.Int32)" argnames="year" returntype="System.Int32" />
        <method name="ToDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" argnames="year, month, day, hour, minute, second, millisecond, era" returntype="System.DateTime" />
        <method name="IsLeapYear(System.Int32, System.Int32)" argnames="year, era" returntype="System.Boolean" />
        <method name="IsLeapMonth(System.Int32, System.Int32, System.Int32)" argnames="year, month, era" returntype="System.Boolean" />
        <method name="IsLeapDay(System.Int32, System.Int32, System.Int32, System.Int32)" argnames="year, month, day, era" returntype="System.Boolean" />
        <method name="GetYear(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetMonthsInYear(System.Int32, System.Int32)" argnames="year, era" returntype="System.Int32" />
        <method name="GetMonth(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetEra(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetDaysInYear(System.Int32, System.Int32)" argnames="year, era" returntype="System.Int32" />
        <method name="GetDaysInMonth(System.Int32, System.Int32, System.Int32)" argnames="year, month, era" returntype="System.Int32" />
        <method name="GetDayOfYear(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetDayOfWeek(System.DateTime)" argnames="time" returntype="System.DayOfWeek" />
        <method name="GetDayOfMonth(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="AddYears(System.DateTime, System.Int32)" argnames="time, years" returntype="System.DateTime" />
        <method name="AddMonths(System.DateTime, System.Int32)" argnames="time, months" returntype="System.DateTime" />
    </class>
    <class name="KoreanCalendar" namespace="System.Globalization">
        <constructor name="KoreanCalendar()" argnames="" />
        <field name="KoreanEra" />
        <property name="ID" propertytype="System.Int32" />
        <property name="Eras" propertytype="System.Int32[]" />
        <property name="TwoDigitYearMax" propertytype="System.Int32" />
        <method name="ToFourDigitYear(System.Int32)" argnames="year" returntype="System.Int32" />
        <method name="ToDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" argnames="year, month, day, hour, minute, second, millisecond, era" returntype="System.DateTime" />
        <method name="IsLeapYear(System.Int32, System.Int32)" argnames="year, era" returntype="System.Boolean" />
        <method name="IsLeapMonth(System.Int32, System.Int32, System.Int32)" argnames="year, month, era" returntype="System.Boolean" />
        <method name="IsLeapDay(System.Int32, System.Int32, System.Int32, System.Int32)" argnames="year, month, day, era" returntype="System.Boolean" />
        <method name="GetYear(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetMonthsInYear(System.Int32, System.Int32)" argnames="year, era" returntype="System.Int32" />
        <method name="GetMonth(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetEra(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetDaysInYear(System.Int32, System.Int32)" argnames="year, era" returntype="System.Int32" />
        <method name="GetDaysInMonth(System.Int32, System.Int32, System.Int32)" argnames="year, month, era" returntype="System.Int32" />
        <method name="GetDayOfYear(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetDayOfWeek(System.DateTime)" argnames="time" returntype="System.DayOfWeek" />
        <method name="GetDayOfMonth(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="AddYears(System.DateTime, System.Int32)" argnames="time, years" returntype="System.DateTime" />
        <method name="AddMonths(System.DateTime, System.Int32)" argnames="time, months" returntype="System.DateTime" />
    </class>
    <class name="RegionInfo" namespace="System.Globalization">
        <constructor name="RegionInfo(System.String)" argnames="name" />
        <constructor name="RegionInfo(System.Int32)" argnames="culture" />
        <property name="CurrentRegion" propertytype="System.Globalization.RegionInfo" />
        <property name="Name" propertytype="System.String" />
        <property name="EnglishName" propertytype="System.String" />
        <property name="DisplayName" propertytype="System.String" />
        <property name="TwoLetterISORegionName" propertytype="System.String" />
        <property name="ThreeLetterISORegionName" propertytype="System.String" />
        <property name="IsMetric" propertytype="System.Boolean" />
        <property name="ThreeLetterWindowsRegionName" propertytype="System.String" />
        <property name="CurrencySymbol" propertytype="System.String" />
        <property name="ISOCurrencySymbol" propertytype="System.String" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="value" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </class>
    <class name="SortKey" namespace="System.Globalization">
        <property name="OriginalString" propertytype="System.String" />
        <property name="KeyData" propertytype="System.Byte[]" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="value" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Compare(System.Globalization.SortKey, System.Globalization.SortKey)" argnames="sortkey1, sortkey2" returntype="System.Int32" />
    </class>
    <class name="StringInfo" namespace="System.Globalization">
        <constructor name="StringInfo()" argnames="" />
        <method name="GetNextTextElement(System.String)" argnames="str" returntype="System.String" />
        <method name="GetNextTextElement(System.String, System.Int32)" argnames="str, index" returntype="System.String" />
        <method name="GetTextElementEnumerator(System.String)" argnames="str" returntype="System.Globalization.TextElementEnumerator" />
        <method name="GetTextElementEnumerator(System.String, System.Int32)" argnames="str, index" returntype="System.Globalization.TextElementEnumerator" />
        <method name="ParseCombiningCharacters(System.String)" argnames="str" returntype="System.Int32[]" />
    </class>
    <class name="TaiwanCalendar" namespace="System.Globalization">
        <constructor name="TaiwanCalendar()" argnames="" />
        <property name="ID" propertytype="System.Int32" />
        <property name="Eras" propertytype="System.Int32[]" />
        <property name="TwoDigitYearMax" propertytype="System.Int32" />
        <method name="ToFourDigitYear(System.Int32)" argnames="year" returntype="System.Int32" />
        <method name="ToDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" argnames="year, month, day, hour, minute, second, millisecond, era" returntype="System.DateTime" />
        <method name="IsLeapYear(System.Int32, System.Int32)" argnames="year, era" returntype="System.Boolean" />
        <method name="IsLeapMonth(System.Int32, System.Int32, System.Int32)" argnames="year, month, era" returntype="System.Boolean" />
        <method name="IsLeapDay(System.Int32, System.Int32, System.Int32, System.Int32)" argnames="year, month, day, era" returntype="System.Boolean" />
        <method name="GetYear(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetMonthsInYear(System.Int32, System.Int32)" argnames="year, era" returntype="System.Int32" />
        <method name="GetMonth(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetEra(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetDaysInYear(System.Int32, System.Int32)" argnames="year, era" returntype="System.Int32" />
        <method name="GetDaysInMonth(System.Int32, System.Int32, System.Int32)" argnames="year, month, era" returntype="System.Int32" />
        <method name="GetDayOfYear(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetDayOfWeek(System.DateTime)" argnames="time" returntype="System.DayOfWeek" />
        <method name="GetDayOfMonth(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="AddYears(System.DateTime, System.Int32)" argnames="time, years" returntype="System.DateTime" />
        <method name="AddMonths(System.DateTime, System.Int32)" argnames="time, months" returntype="System.DateTime" />
    </class>
    <class name="TextElementEnumerator" namespace="System.Globalization">
        <property name="Current" propertytype="System.Object" />
        <property name="ElementIndex" propertytype="System.Int32" />
        <method name="Reset()" argnames="" returntype="System.Void" />
        <method name="MoveNext()" argnames="" returntype="System.Boolean" />
        <method name="GetTextElement()" argnames="" returntype="System.String" />
    </class>
    <class name="TextInfo" namespace="System.Globalization">
        <property name="ANSICodePage" propertytype="System.Int32" />
        <property name="OEMCodePage" propertytype="System.Int32" />
        <property name="MacCodePage" propertytype="System.Int32" />
        <property name="EBCDICCodePage" propertytype="System.Int32" />
        <property name="ListSeparator" propertytype="System.String" />
        <method name="ToUpper(System.String)" argnames="str" returntype="System.String" />
        <method name="ToUpper(System.Char)" argnames="c" returntype="System.Char" />
        <method name="ToLower(System.String)" argnames="str" returntype="System.String" />
        <method name="ToLower(System.Char)" argnames="c" returntype="System.Char" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="ToTitleCase(System.String)" argnames="str" returntype="System.String" />
    </class>
    <class name="ThaiBuddhistCalendar" namespace="System.Globalization">
        <constructor name="ThaiBuddhistCalendar()" argnames="" />
        <field name="ThaiBuddhistEra" />
        <property name="ID" propertytype="System.Int32" />
        <property name="Eras" propertytype="System.Int32[]" />
        <property name="TwoDigitYearMax" propertytype="System.Int32" />
        <method name="ToFourDigitYear(System.Int32)" argnames="year" returntype="System.Int32" />
        <method name="ToDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" argnames="year, month, day, hour, minute, second, millisecond, era" returntype="System.DateTime" />
        <method name="IsLeapYear(System.Int32, System.Int32)" argnames="year, era" returntype="System.Boolean" />
        <method name="IsLeapMonth(System.Int32, System.Int32, System.Int32)" argnames="year, month, era" returntype="System.Boolean" />
        <method name="IsLeapDay(System.Int32, System.Int32, System.Int32, System.Int32)" argnames="year, month, day, era" returntype="System.Boolean" />
        <method name="GetYear(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetMonthsInYear(System.Int32, System.Int32)" argnames="year, era" returntype="System.Int32" />
        <method name="GetMonth(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetEra(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetDaysInYear(System.Int32, System.Int32)" argnames="year, era" returntype="System.Int32" />
        <method name="GetDaysInMonth(System.Int32, System.Int32, System.Int32)" argnames="year, month, era" returntype="System.Int32" />
        <method name="GetDayOfYear(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="GetDayOfWeek(System.DateTime)" argnames="time" returntype="System.DayOfWeek" />
        <method name="GetDayOfMonth(System.DateTime)" argnames="time" returntype="System.Int32" />
        <method name="AddYears(System.DateTime, System.Int32)" argnames="time, years" returntype="System.DateTime" />
        <method name="AddMonths(System.DateTime, System.Int32)" argnames="time, months" returntype="System.DateTime" />
    </class>
    <class name="NumberFormatInfo" namespace="System.Globalization">
        <constructor name="NumberFormatInfo()" argnames="" />
        <property name="InvariantInfo" propertytype="System.Globalization.NumberFormatInfo" />
        <property name="CurrencyDecimalDigits" propertytype="System.Int32" />
        <property name="CurrencyDecimalSeparator" propertytype="System.String" />
        <property name="IsReadOnly" propertytype="System.Boolean" />
        <property name="CurrencyGroupSizes" propertytype="System.Int32[]" />
        <property name="NumberGroupSizes" propertytype="System.Int32[]" />
        <property name="PercentGroupSizes" propertytype="System.Int32[]" />
        <property name="CurrencyGroupSeparator" propertytype="System.String" />
        <property name="CurrencySymbol" propertytype="System.String" />
        <property name="CurrentInfo" propertytype="System.Globalization.NumberFormatInfo" />
        <property name="NaNSymbol" propertytype="System.String" />
        <property name="CurrencyNegativePattern" propertytype="System.Int32" />
        <property name="NumberNegativePattern" propertytype="System.Int32" />
        <property name="PercentPositivePattern" propertytype="System.Int32" />
        <property name="PercentNegativePattern" propertytype="System.Int32" />
        <property name="NegativeInfinitySymbol" propertytype="System.String" />
        <property name="NegativeSign" propertytype="System.String" />
        <property name="NumberDecimalDigits" propertytype="System.Int32" />
        <property name="NumberDecimalSeparator" propertytype="System.String" />
        <property name="NumberGroupSeparator" propertytype="System.String" />
        <property name="CurrencyPositivePattern" propertytype="System.Int32" />
        <property name="PositiveInfinitySymbol" propertytype="System.String" />
        <property name="PositiveSign" propertytype="System.String" />
        <property name="PercentDecimalDigits" propertytype="System.Int32" />
        <property name="PercentDecimalSeparator" propertytype="System.String" />
        <property name="PercentGroupSeparator" propertytype="System.String" />
        <property name="PercentSymbol" propertytype="System.String" />
        <property name="PerMilleSymbol" propertytype="System.String" />
        <property name="AnsiCurrencySymbol" propertytype="System.String" />
        <method name="GetFormat(System.Type)" argnames="formatType" returntype="System.Object" />
        <method name="Clone()" argnames="" returntype="System.Object" />
        <method name="GetInstance(System.IFormatProvider)" argnames="formatProvider" returntype="System.Globalization.NumberFormatInfo" />
        <method name="ReadOnly(System.Globalization.NumberFormatInfo)" argnames="nfi" returntype="System.Globalization.NumberFormatInfo" />
    </class>
    <enum name="CalendarWeekRule" namespace="System.Globalization">
        <field name="FirstDay" />
        <field name="FirstFullWeek" />
        <field name="FirstFourDayWeek" />
    </enum>
    <enum name="CompareOptions" namespace="System.Globalization">
        <field name="None" />
        <field name="IgnoreCase" />
        <field name="IgnoreNonSpace" />
        <field name="IgnoreSymbols" />
        <field name="IgnoreKanaType" />
        <field name="IgnoreWidth" />
        <field name="StringSort" />
        <field name="Ordinal" />
    </enum>
    <enum name="CultureTypes" namespace="System.Globalization">
        <field name="NeutralCultures" />
        <field name="SpecificCultures" />
        <field name="InstalledWin32Cultures" />
        <field name="AllCultures" />
    </enum>
    <enum name="DateTimeStyles" namespace="System.Globalization">
        <field name="None" />
        <field name="AllowLeadingWhite" />
        <field name="AllowTrailingWhite" />
        <field name="AllowInnerWhite" />
        <field name="AllowWhiteSpaces" />
        <field name="NoCurrentDateDefault" />
        <field name="AdjustToUniversal" />
    </enum>
    <enum name="GregorianCalendarTypes" namespace="System.Globalization">
        <field name="Localized" />
        <field name="USEnglish" />
        <field name="MiddleEastFrench" />
        <field name="Arabic" />
        <field name="TransliteratedEnglish" />
        <field name="TransliteratedFrench" />
    </enum>
    <enum name="NumberStyles" namespace="System.Globalization">
        <field name="None" />
        <field name="AllowLeadingWhite" />
        <field name="AllowTrailingWhite" />
        <field name="AllowLeadingSign" />
        <field name="AllowTrailingSign" />
        <field name="AllowParentheses" />
        <field name="AllowDecimalPoint" />
        <field name="AllowThousands" />
        <field name="AllowExponent" />
        <field name="AllowCurrencySymbol" />
        <field name="AllowHexSpecifier" />
        <field name="Integer" />
        <field name="HexNumber" />
        <field name="Number" />
        <field name="Float" />
        <field name="Currency" />
        <field name="Any" />
    </enum>
    <enum name="UnicodeCategory" namespace="System.Globalization">
        <field name="UppercaseLetter" />
        <field name="LowercaseLetter" />
        <field name="TitlecaseLetter" />
        <field name="ModifierLetter" />
        <field name="OtherLetter" />
        <field name="NonSpacingMark" />
        <field name="SpacingCombiningMark" />
        <field name="EnclosingMark" />
        <field name="DecimalDigitNumber" />
        <field name="LetterNumber" />
        <field name="OtherNumber" />
        <field name="SpaceSeparator" />
        <field name="LineSeparator" />
        <field name="ParagraphSeparator" />
        <field name="Control" />
        <field name="Format" />
        <field name="Surrogate" />
        <field name="PrivateUse" />
        <field name="ConnectorPunctuation" />
        <field name="DashPunctuation" />
        <field name="OpenPunctuation" />
        <field name="ClosePunctuation" />
        <field name="InitialQuotePunctuation" />
        <field name="FinalQuotePunctuation" />
        <field name="OtherPunctuation" />
        <field name="MathSymbol" />
        <field name="CurrencySymbol" />
        <field name="ModifierSymbol" />
        <field name="OtherSymbol" />
        <field name="OtherNotAssigned" />
    </enum>
    <class name="MissingManifestResourceException" namespace="System.Resources">
        <constructor name="MissingManifestResourceException()" argnames="" />
        <constructor name="MissingManifestResourceException(System.String)" argnames="message" />
        <constructor name="MissingManifestResourceException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="MissingManifestResourceException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="NeutralResourcesLanguageAttribute" namespace="System.Resources">
        <constructor name="NeutralResourcesLanguageAttribute(System.String)" argnames="cultureName" />
        <property name="CultureName" propertytype="System.String" />
    </class>
    <class name="ResourceManager" namespace="System.Resources">
        <constructor name="ResourceManager()" argnames="" />
        <constructor name="ResourceManager(System.String, System.Reflection.Assembly)" argnames="baseName, assembly" />
        <constructor name="ResourceManager(System.String, System.Reflection.Assembly, System.Type)" argnames="baseName, assembly, usingResourceSet" />
        <constructor name="ResourceManager(System.Type)" argnames="resourceSource" />
        <field name="BaseNameField" />
        <field name="ResourceSets" />
        <field name="MainAssembly" />
        <field name="MagicNumber" />
        <field name="HeaderVersionNumber" />
        <property name="BaseName" propertytype="System.String" />
        <property name="IgnoreCase" propertytype="System.Boolean" />
        <property name="ResourceSetType" propertytype="System.Type" />
        <method name="GetObject(System.String, System.Globalization.CultureInfo)" argnames="name, culture" returntype="System.Object" />
        <method name="GetObject(System.String)" argnames="name" returntype="System.Object" />
        <method name="GetString(System.String, System.Globalization.CultureInfo)" argnames="name, culture" returntype="System.String" />
        <method name="GetString(System.String)" argnames="name" returntype="System.String" />
        <method name="InternalGetResourceSet(System.Globalization.CultureInfo, System.Boolean, System.Boolean)" argnames="culture, createIfNotExists, tryParents" returntype="System.Resources.ResourceSet" />
        <method name="GetResourceSet(System.Globalization.CultureInfo, System.Boolean, System.Boolean)" argnames="culture, createIfNotExists, tryParents" returntype="System.Resources.ResourceSet" />
        <method name="GetResourceFileName(System.Globalization.CultureInfo)" argnames="culture" returntype="System.String" />
        <method name="ReleaseAllResources()" argnames="" returntype="System.Void" />
        <method name="CreateFileBasedResourceManager(System.String, System.String, System.Type)" argnames="baseName, resourceDir, usingResourceSet" returntype="System.Resources.ResourceManager" />
        <method name="GetSatelliteContractVersion(System.Reflection.Assembly)" argnames="a" returntype="System.Version" />
        <method name="GetNeutralResourcesLanguage(System.Reflection.Assembly)" argnames="a" returntype="System.Globalization.CultureInfo" />
    </class>
    <class name="ResourceReader" namespace="System.Resources">
        <constructor name="ResourceReader(System.String)" argnames="fileName" />
        <constructor name="ResourceReader(System.IO.Stream)" argnames="stream" />
        <method name="GetEnumerator()" argnames="" returntype="System.Collections.IDictionaryEnumerator" />
        <method name="Close()" argnames="" returntype="System.Void" />
    </class>
    <class name="ResourceSet" namespace="System.Resources">
        <constructor name="ResourceSet()" argnames="" />
        <constructor name="ResourceSet(System.String)" argnames="fileName" />
        <constructor name="ResourceSet(System.IO.Stream)" argnames="stream" />
        <constructor name="ResourceSet(System.Resources.IResourceReader)" argnames="reader" />
        <field name="Reader" />
        <field name="Table" />
        <method name="Dispose()" argnames="" returntype="System.Void" />
        <method name="ReadResources()" argnames="" returntype="System.Void" />
        <method name="GetObject(System.String, System.Boolean)" argnames="name, ignoreCase" returntype="System.Object" />
        <method name="GetObject(System.String)" argnames="name" returntype="System.Object" />
        <method name="GetString(System.String, System.Boolean)" argnames="name, ignoreCase" returntype="System.String" />
        <method name="GetString(System.String)" argnames="name" returntype="System.String" />
        <method name="GetDefaultWriter()" argnames="" returntype="System.Type" />
        <method name="GetDefaultReader()" argnames="" returntype="System.Type" />
        <method name="Dispose(System.Boolean)" argnames="disposing" returntype="System.Void" />
        <method name="Close()" argnames="" returntype="System.Void" />
    </class>
    <class name="ResourceWriter" namespace="System.Resources">
        <constructor name="ResourceWriter(System.String)" argnames="fileName" />
        <constructor name="ResourceWriter(System.IO.Stream)" argnames="stream" />
        <method name="Dispose()" argnames="" returntype="System.Void" />
        <method name="Generate()" argnames="" returntype="System.Void" />
        <method name="Close()" argnames="" returntype="System.Void" />
        <method name="AddResource(System.String, System.Byte[])" argnames="name, value" returntype="System.Void" />
        <method name="AddResource(System.String, System.Object)" argnames="name, value" returntype="System.Void" />
        <method name="AddResource(System.String, System.String)" argnames="name, value" returntype="System.Void" />
    </class>
    <class name="SatelliteContractVersionAttribute" namespace="System.Resources">
        <constructor name="SatelliteContractVersionAttribute(System.String)" argnames="version" />
        <property name="Version" propertytype="System.String" />
    </class>
    <interface name="IResourceReader" namespace="System.Resources">
        <method name="GetEnumerator()" argnames="" returntype="System.Collections.IDictionaryEnumerator" />
        <method name="Close()" argnames="" returntype="System.Void" />
    </interface>
    <interface name="IResourceWriter" namespace="System.Resources">
        <method name="Generate()" argnames="" returntype="System.Void" />
        <method name="Close()" argnames="" returntype="System.Void" />
        <method name="AddResource(System.String, System.Byte[])" argnames="name, value" returntype="System.Void" />
        <method name="AddResource(System.String, System.Object)" argnames="name, value" returntype="System.Void" />
        <method name="AddResource(System.String, System.String)" argnames="name, value" returntype="System.Void" />
    </interface>
    <class name="Registry" namespace="Microsoft.Win32">
        <field name="CurrentUser" />
        <field name="LocalMachine" />
        <field name="ClassesRoot" />
        <field name="Users" />
        <field name="PerformanceData" />
        <field name="CurrentConfig" />
        <field name="DynData" />
    </class>
    <class name="RegistryKey" namespace="Microsoft.Win32">
        <property name="SubKeyCount" propertytype="System.Int32" />
        <property name="ValueCount" propertytype="System.Int32" />
        <property name="Name" propertytype="System.String" />
        <method name="Finalize()" argnames="" returntype="System.Void" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Close()" argnames="" returntype="System.Void" />
        <method name="Flush()" argnames="" returntype="System.Void" />
        <method name="CreateSubKey(System.String)" argnames="subkey" returntype="Microsoft.Win32.RegistryKey" />
        <method name="DeleteSubKey(System.String)" argnames="subkey" returntype="System.Void" />
        <method name="DeleteSubKey(System.String, System.Boolean)" argnames="subkey, throwOnMissingSubKey" returntype="System.Void" />
        <method name="DeleteSubKeyTree(System.String)" argnames="subkey" returntype="System.Void" />
        <method name="DeleteValue(System.String)" argnames="name" returntype="System.Void" />
        <method name="DeleteValue(System.String, System.Boolean)" argnames="name, throwOnMissingValue" returntype="System.Void" />
        <method name="OpenRemoteBaseKey(Microsoft.Win32.RegistryHive, System.String)" argnames="hKey, machineName" returntype="Microsoft.Win32.RegistryKey" />
        <method name="OpenSubKey(System.String, System.Boolean)" argnames="name, writable" returntype="Microsoft.Win32.RegistryKey" />
        <method name="OpenSubKey(System.String)" argnames="name" returntype="Microsoft.Win32.RegistryKey" />
        <method name="GetSubKeyNames()" argnames="" returntype="System.String[]" />
        <method name="GetValueNames()" argnames="" returntype="System.String[]" />
        <method name="GetValue(System.String, System.Object)" argnames="name, defaultValue" returntype="System.Object" />
        <method name="GetValue(System.String)" argnames="name" returntype="System.Object" />
        <method name="SetValue(System.String, System.Object)" argnames="name, value" returntype="System.Void" />
    </class>
    <enum name="RegistryHive" namespace="Microsoft.Win32">
        <field name="ClassesRoot" />
        <field name="CurrentUser" />
        <field name="LocalMachine" />
        <field name="Users" />
        <field name="PerformanceData" />
        <field name="CurrentConfig" />
        <field name="DynData" />
    </enum>
    <class name="X509Certificate" namespace="System.Security.Cryptography.X509Certificates">
        <constructor name="X509Certificate(System.Byte[])" argnames="data" />
        <constructor name="X509Certificate(System.IntPtr)" argnames="handle" />
        <constructor name="X509Certificate(System.Security.Cryptography.X509Certificates.X509Certificate)" argnames="cert" />
        <method name="ToString(System.Boolean)" argnames="fVerbose" returntype="System.String" />
        <method name="Equals(System.Security.Cryptography.X509Certificates.X509Certificate)" argnames="other" returntype="System.Boolean" />
        <method name="GetExpirationDateString()" argnames="" returntype="System.String" />
        <method name="GetEffectiveDateString()" argnames="" returntype="System.String" />
        <method name="GetCertHashString()" argnames="" returntype="System.String" />
        <method name="GetCertHash()" argnames="" returntype="System.Byte[]" />
        <method name="GetRawCertDataString()" argnames="" returntype="System.String" />
        <method name="GetRawCertData()" argnames="" returntype="System.Byte[]" />
        <method name="GetPublicKeyString()" argnames="" returntype="System.String" />
        <method name="GetPublicKey()" argnames="" returntype="System.Byte[]" />
        <method name="GetKeyAlgorithmParametersString()" argnames="" returntype="System.String" />
        <method name="GetKeyAlgorithmParameters()" argnames="" returntype="System.Byte[]" />
        <method name="GetKeyAlgorithm()" argnames="" returntype="System.String" />
        <method name="GetSerialNumberString()" argnames="" returntype="System.String" />
        <method name="GetSerialNumber()" argnames="" returntype="System.Byte[]" />
        <method name="GetIssuerName()" argnames="" returntype="System.String" />
        <method name="GetFormat()" argnames="" returntype="System.String" />
        <method name="GetName()" argnames="" returntype="System.String" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="CreateFromCertFile(System.String)" argnames="filename" returntype="System.Security.Cryptography.X509Certificates.X509Certificate" />
        <method name="CreateFromSignedFile(System.String)" argnames="filename" returntype="System.Security.Cryptography.X509Certificates.X509Certificate" />
    </class>
    <class name="AsymmetricAlgorithm" namespace="System.Security.Cryptography">
        <constructor name="AsymmetricAlgorithm()" argnames="" />
        <field name="KeySizeValue" />
        <field name="LegalKeySizesValue" />
        <property name="KeySize" propertytype="System.Int32" />
        <property name="LegalKeySizes" propertytype="System.Security.Cryptography.KeySizes[]" />
        <property name="SignatureAlgorithm" propertytype="System.String" />
        <property name="KeyExchangeAlgorithm" propertytype="System.String" />
        <method name="ToXmlString(System.Boolean)" argnames="includePrivateParameters" returntype="System.String" />
        <method name="FromXmlString(System.String)" argnames="xmlString" returntype="System.Void" />
        <method name="Dispose(System.Boolean)" argnames="disposing" returntype="System.Void" />
        <method name="Clear()" argnames="" returntype="System.Void" />
        <method name="Create()" argnames="" returntype="System.Security.Cryptography.AsymmetricAlgorithm" />
        <method name="Create(System.String)" argnames="algName" returntype="System.Security.Cryptography.AsymmetricAlgorithm" />
    </class>
    <class name="AsymmetricKeyExchangeDeformatter" namespace="System.Security.Cryptography">
        <constructor name="AsymmetricKeyExchangeDeformatter()" argnames="" />
        <property name="Parameters" propertytype="System.String" />
        <method name="DecryptKeyExchange(System.Byte[])" argnames="rgb" returntype="System.Byte[]" />
        <method name="SetKey(System.Security.Cryptography.AsymmetricAlgorithm)" argnames="key" returntype="System.Void" />
    </class>
    <class name="AsymmetricKeyExchangeFormatter" namespace="System.Security.Cryptography">
        <constructor name="AsymmetricKeyExchangeFormatter()" argnames="" />
        <property name="Parameters" propertytype="System.String" />
        <method name="CreateKeyExchange(System.Byte[], System.Type)" argnames="data, symAlgType" returntype="System.Byte[]" />
        <method name="CreateKeyExchange(System.Byte[])" argnames="data" returntype="System.Byte[]" />
        <method name="SetKey(System.Security.Cryptography.AsymmetricAlgorithm)" argnames="key" returntype="System.Void" />
    </class>
    <class name="AsymmetricSignatureDeformatter" namespace="System.Security.Cryptography">
        <constructor name="AsymmetricSignatureDeformatter()" argnames="" />
        <method name="VerifySignature(System.Byte[], System.Byte[])" argnames="rgbHash, rgbSignature" returntype="System.Boolean" />
        <method name="VerifySignature(System.Security.Cryptography.HashAlgorithm, System.Byte[])" argnames="hash, rgbSignature" returntype="System.Boolean" />
        <method name="SetHashAlgorithm(System.String)" argnames="strName" returntype="System.Void" />
        <method name="SetKey(System.Security.Cryptography.AsymmetricAlgorithm)" argnames="key" returntype="System.Void" />
    </class>
    <class name="AsymmetricSignatureFormatter" namespace="System.Security.Cryptography">
        <constructor name="AsymmetricSignatureFormatter()" argnames="" />
        <method name="CreateSignature(System.Byte[])" argnames="rgbHash" returntype="System.Byte[]" />
        <method name="CreateSignature(System.Security.Cryptography.HashAlgorithm)" argnames="hash" returntype="System.Byte[]" />
        <method name="SetHashAlgorithm(System.String)" argnames="strName" returntype="System.Void" />
        <method name="SetKey(System.Security.Cryptography.AsymmetricAlgorithm)" argnames="key" returntype="System.Void" />
    </class>
    <class name="ToBase64Transform" namespace="System.Security.Cryptography">
        <constructor name="ToBase64Transform()" argnames="" />
        <property name="InputBlockSize" propertytype="System.Int32" />
        <property name="OutputBlockSize" propertytype="System.Int32" />
        <property name="CanTransformMultipleBlocks" propertytype="System.Boolean" />
        <property name="CanReuseTransform" propertytype="System.Boolean" />
        <method name="TransformFinalBlock(System.Byte[], System.Int32, System.Int32)" argnames="inputBuffer, inputOffset, inputCount" returntype="System.Byte[]" />
        <method name="TransformBlock(System.Byte[], System.Int32, System.Int32, System.Byte[], System.Int32)" argnames="inputBuffer, inputOffset, inputCount, outputBuffer, outputOffset" returntype="System.Int32" />
        <method name="Dispose(System.Boolean)" argnames="disposing" returntype="System.Void" />
        <method name="Finalize()" argnames="" returntype="System.Void" />
        <method name="Clear()" argnames="" returntype="System.Void" />
    </class>
    <class name="FromBase64Transform" namespace="System.Security.Cryptography">
        <constructor name="FromBase64Transform()" argnames="" />
        <constructor name="FromBase64Transform(System.Security.Cryptography.FromBase64TransformMode)" argnames="whitespaces" />
        <property name="InputBlockSize" propertytype="System.Int32" />
        <property name="OutputBlockSize" propertytype="System.Int32" />
        <property name="CanTransformMultipleBlocks" propertytype="System.Boolean" />
        <property name="CanReuseTransform" propertytype="System.Boolean" />
        <method name="TransformFinalBlock(System.Byte[], System.Int32, System.Int32)" argnames="inputBuffer, inputOffset, inputCount" returntype="System.Byte[]" />
        <method name="TransformBlock(System.Byte[], System.Int32, System.Int32, System.Byte[], System.Int32)" argnames="inputBuffer, inputOffset, inputCount, outputBuffer, outputOffset" returntype="System.Int32" />
        <method name="Dispose(System.Boolean)" argnames="disposing" returntype="System.Void" />
        <method name="Finalize()" argnames="" returntype="System.Void" />
        <method name="Clear()" argnames="" returntype="System.Void" />
    </class>
    <class name="KeySizes" namespace="System.Security.Cryptography">
        <constructor name="KeySizes(System.Int32, System.Int32, System.Int32)" argnames="minSize, maxSize, skipSize" />
        <property name="MinSize" propertytype="System.Int32" />
        <property name="MaxSize" propertytype="System.Int32" />
        <property name="SkipSize" propertytype="System.Int32" />
    </class>
    <class name="CryptographicException" namespace="System.Security.Cryptography">
        <constructor name="CryptographicException()" argnames="" />
        <constructor name="CryptographicException(System.String)" argnames="message" />
        <constructor name="CryptographicException(System.String, System.String)" argnames="format, insert" />
        <constructor name="CryptographicException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="CryptographicException(System.Int32)" argnames="hr" />
        <constructor name="CryptographicException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="CryptographicUnexpectedOperationException" namespace="System.Security.Cryptography">
        <constructor name="CryptographicUnexpectedOperationException()" argnames="" />
        <constructor name="CryptographicUnexpectedOperationException(System.String)" argnames="message" />
        <constructor name="CryptographicUnexpectedOperationException(System.String, System.String)" argnames="format, insert" />
        <constructor name="CryptographicUnexpectedOperationException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="CryptographicUnexpectedOperationException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="CryptoAPITransform" namespace="System.Security.Cryptography">
        <property name="KeyHandle" propertytype="System.IntPtr" />
        <property name="InputBlockSize" propertytype="System.Int32" />
        <property name="OutputBlockSize" propertytype="System.Int32" />
        <property name="CanTransformMultipleBlocks" propertytype="System.Boolean" />
        <property name="CanReuseTransform" propertytype="System.Boolean" />
        <method name="TransformFinalBlock(System.Byte[], System.Int32, System.Int32)" argnames="inputBuffer, inputOffset, inputCount" returntype="System.Byte[]" />
        <method name="TransformBlock(System.Byte[], System.Int32, System.Int32, System.Byte[], System.Int32)" argnames="inputBuffer, inputOffset, inputCount, outputBuffer, outputOffset" returntype="System.Int32" />
        <method name="Finalize()" argnames="" returntype="System.Void" />
        <method name="Clear()" argnames="" returntype="System.Void" />
    </class>
    <class name="CspParameters" namespace="System.Security.Cryptography">
        <constructor name="CspParameters()" argnames="" />
        <constructor name="CspParameters(System.Int32)" argnames="dwTypeIn" />
        <constructor name="CspParameters(System.Int32, System.String)" argnames="dwTypeIn, strProviderNameIn" />
        <constructor name="CspParameters(System.Int32, System.String, System.String)" argnames="dwTypeIn, strProviderNameIn, strContainerNameIn" />
        <field name="ProviderType" />
        <field name="ProviderName" />
        <field name="KeyContainerName" />
        <field name="KeyNumber" />
        <property name="Flags" propertytype="System.Security.Cryptography.CspProviderFlags" />
    </class>
    <class name="CryptoConfig" namespace="System.Security.Cryptography">
        <constructor name="CryptoConfig()" argnames="" />
        <method name="CreateFromName(System.String, System.Object[])" argnames="name, args" returntype="System.Object" />
        <method name="CreateFromName(System.String)" argnames="name" returntype="System.Object" />
        <method name="MapNameToOID(System.String)" argnames="name" returntype="System.String" />
        <method name="EncodeOID(System.String)" argnames="str" returntype="System.Byte[]" />
    </class>
    <class name="CryptoStream" namespace="System.Security.Cryptography">
        <constructor name="CryptoStream(System.IO.Stream, System.Security.Cryptography.ICryptoTransform, System.Security.Cryptography.CryptoStreamMode)" argnames="stream, transform, mode" />
        <property name="CanRead" propertytype="System.Boolean" />
        <property name="CanSeek" propertytype="System.Boolean" />
        <property name="CanWrite" propertytype="System.Boolean" />
        <property name="Length" propertytype="System.Int64" />
        <property name="Position" propertytype="System.Int64" />
        <method name="Dispose(System.Boolean)" argnames="disposing" returntype="System.Void" />
        <method name="Write(System.Byte[], System.Int32, System.Int32)" argnames="buffer, offset, count" returntype="System.Void" />
        <method name="Read(System.Byte[], System.Int32, System.Int32)" argnames="buffer, offset, count" returntype="System.Int32" />
        <method name="SetLength(System.Int64)" argnames="value" returntype="System.Void" />
        <method name="Seek(System.Int64, System.IO.SeekOrigin)" argnames="offset, origin" returntype="System.Int64" />
        <method name="Flush()" argnames="" returntype="System.Void" />
        <method name="Close()" argnames="" returntype="System.Void" />
        <method name="Finalize()" argnames="" returntype="System.Void" />
        <method name="FlushFinalBlock()" argnames="" returntype="System.Void" />
        <method name="Clear()" argnames="" returntype="System.Void" />
    </class>
    <class name="SymmetricAlgorithm" namespace="System.Security.Cryptography">
        <constructor name="SymmetricAlgorithm()" argnames="" />
        <field name="BlockSizeValue" />
        <field name="FeedbackSizeValue" />
        <field name="IVValue" />
        <field name="KeyValue" />
        <field name="LegalBlockSizesValue" />
        <field name="LegalKeySizesValue" />
        <field name="KeySizeValue" />
        <field name="ModeValue" />
        <field name="PaddingValue" />
        <property name="BlockSize" propertytype="System.Int32" />
        <property name="FeedbackSize" propertytype="System.Int32" />
        <property name="IV" propertytype="System.Byte[]" />
        <property name="Key" propertytype="System.Byte[]" />
        <property name="LegalBlockSizes" propertytype="System.Security.Cryptography.KeySizes[]" />
        <property name="LegalKeySizes" propertytype="System.Security.Cryptography.KeySizes[]" />
        <property name="KeySize" propertytype="System.Int32" />
        <property name="Mode" propertytype="System.Security.Cryptography.CipherMode" />
        <property name="Padding" propertytype="System.Security.Cryptography.PaddingMode" />
        <method name="GenerateIV()" argnames="" returntype="System.Void" />
        <method name="GenerateKey()" argnames="" returntype="System.Void" />
        <method name="CreateDecryptor(System.Byte[], System.Byte[])" argnames="rgbKey, rgbIV" returntype="System.Security.Cryptography.ICryptoTransform" />
        <method name="CreateDecryptor()" argnames="" returntype="System.Security.Cryptography.ICryptoTransform" />
        <method name="CreateEncryptor(System.Byte[], System.Byte[])" argnames="rgbKey, rgbIV" returntype="System.Security.Cryptography.ICryptoTransform" />
        <method name="CreateEncryptor()" argnames="" returntype="System.Security.Cryptography.ICryptoTransform" />
        <method name="Dispose(System.Boolean)" argnames="disposing" returntype="System.Void" />
        <method name="Finalize()" argnames="" returntype="System.Void" />
        <method name="Clear()" argnames="" returntype="System.Void" />
        <method name="ValidKeySize(System.Int32)" argnames="bitLength" returntype="System.Boolean" />
        <method name="Create()" argnames="" returntype="System.Security.Cryptography.SymmetricAlgorithm" />
        <method name="Create(System.String)" argnames="algName" returntype="System.Security.Cryptography.SymmetricAlgorithm" />
    </class>
    <class name="DES" namespace="System.Security.Cryptography">
        <constructor name="DES()" argnames="" />
        <property name="Key" propertytype="System.Byte[]" />
        <method name="Create()" argnames="" returntype="System.Security.Cryptography.DES" />
        <method name="Create(System.String)" argnames="algName" returntype="System.Security.Cryptography.DES" />
        <method name="IsWeakKey(System.Byte[])" argnames="rgbKey" returntype="System.Boolean" />
        <method name="IsSemiWeakKey(System.Byte[])" argnames="rgbKey" returntype="System.Boolean" />
    </class>
    <class name="DESCryptoServiceProvider" namespace="System.Security.Cryptography">
        <constructor name="DESCryptoServiceProvider()" argnames="" />
        <property name="RNG" propertytype="System.Security.Cryptography.RNGCryptoServiceProvider" />
        <method name="GenerateIV()" argnames="" returntype="System.Void" />
        <method name="GenerateKey()" argnames="" returntype="System.Void" />
        <method name="CreateDecryptor(System.Byte[], System.Byte[])" argnames="rgbKey, rgbIV" returntype="System.Security.Cryptography.ICryptoTransform" />
        <method name="CreateEncryptor(System.Byte[], System.Byte[])" argnames="rgbKey, rgbIV" returntype="System.Security.Cryptography.ICryptoTransform" />
    </class>
    <class name="DeriveBytes" namespace="System.Security.Cryptography">
        <constructor name="DeriveBytes()" argnames="" />
        <method name="Reset()" argnames="" returntype="System.Void" />
        <method name="GetBytes(System.Int32)" argnames="cb" returntype="System.Byte[]" />
    </class>
    <class name="DSA" namespace="System.Security.Cryptography">
        <method name="ImportParameters(System.Security.Cryptography.DSAParameters)" argnames="parameters" returntype="System.Void" />
        <method name="ExportParameters(System.Boolean)" argnames="includePrivateParameters" returntype="System.Security.Cryptography.DSAParameters" />
        <method name="VerifySignature(System.Byte[], System.Byte[])" argnames="rgbHash, rgbSignature" returntype="System.Boolean" />
        <method name="CreateSignature(System.Byte[])" argnames="rgbHash" returntype="System.Byte[]" />
        <method name="ToXmlString(System.Boolean)" argnames="includePrivateParameters" returntype="System.String" />
        <method name="FromXmlString(System.String)" argnames="xmlString" returntype="System.Void" />
        <method name="Create()" argnames="" returntype="System.Security.Cryptography.DSA" />
        <method name="Create(System.String)" argnames="algName" returntype="System.Security.Cryptography.DSA" />
    </class>
    <class name="DSACryptoServiceProvider" namespace="System.Security.Cryptography">
        <constructor name="DSACryptoServiceProvider()" argnames="" />
        <constructor name="DSACryptoServiceProvider(System.Int32)" argnames="dwKeySize" />
        <constructor name="DSACryptoServiceProvider(System.Security.Cryptography.CspParameters)" argnames="parameters" />
        <constructor name="DSACryptoServiceProvider(System.Int32, System.Security.Cryptography.CspParameters)" argnames="dwKeySize, parameters" />
        <property name="KeyExchangeAlgorithm" propertytype="System.String" />
        <property name="KeySize" propertytype="System.Int32" />
        <property name="LegalKeySizes" propertytype="System.Security.Cryptography.KeySizes[]" />
        <property name="SignatureAlgorithm" propertytype="System.String" />
        <property name="PersistKeyInCsp" propertytype="System.Boolean" />
        <property name="hKey" propertytype="System.IntPtr" />
        <method name="ImportParameters(System.Security.Cryptography.DSAParameters)" argnames="parameters" returntype="System.Void" />
        <method name="ExportParameters(System.Boolean)" argnames="includePrivateParameters" returntype="System.Security.Cryptography.DSAParameters" />
        <method name="VerifySignature(System.Byte[], System.Byte[])" argnames="rgbHash, rgbSignature" returntype="System.Boolean" />
        <method name="CreateSignature(System.Byte[])" argnames="rgbHash" returntype="System.Byte[]" />
        <method name="Dispose(System.Boolean)" argnames="disposing" returntype="System.Void" />
        <method name="Finalize()" argnames="" returntype="System.Void" />
        <method name="SignData(System.IO.Stream)" argnames="inputStream" returntype="System.Byte[]" />
        <method name="SignData(System.Byte[])" argnames="buffer" returntype="System.Byte[]" />
        <method name="SignData(System.Byte[], System.Int32, System.Int32)" argnames="buffer, offset, count" returntype="System.Byte[]" />
        <method name="VerifyData(System.Byte[], System.Byte[])" argnames="rgbData, rgbSignature" returntype="System.Boolean" />
        <method name="SignHash(System.Byte[], System.String)" argnames="rgbHash, str" returntype="System.Byte[]" />
        <method name="VerifyHash(System.Byte[], System.String, System.Byte[])" argnames="rgbHash, str, rgbSignature" returntype="System.Boolean" />
    </class>
    <class name="DSASignatureDeformatter" namespace="System.Security.Cryptography">
        <constructor name="DSASignatureDeformatter()" argnames="" />
        <constructor name="DSASignatureDeformatter(System.Security.Cryptography.AsymmetricAlgorithm)" argnames="key" />
        <method name="VerifySignature(System.Byte[], System.Byte[])" argnames="rgbHash, rgbSignature" returntype="System.Boolean" />
        <method name="SetHashAlgorithm(System.String)" argnames="strName" returntype="System.Void" />
        <method name="SetKey(System.Security.Cryptography.AsymmetricAlgorithm)" argnames="key" returntype="System.Void" />
    </class>
    <class name="DSASignatureFormatter" namespace="System.Security.Cryptography">
        <constructor name="DSASignatureFormatter()" argnames="" />
        <constructor name="DSASignatureFormatter(System.Security.Cryptography.AsymmetricAlgorithm)" argnames="key" />
        <method name="CreateSignature(System.Byte[])" argnames="rgbHash" returntype="System.Byte[]" />
        <method name="SetHashAlgorithm(System.String)" argnames="strName" returntype="System.Void" />
        <method name="SetKey(System.Security.Cryptography.AsymmetricAlgorithm)" argnames="key" returntype="System.Void" />
    </class>
    <class name="HashAlgorithm" namespace="System.Security.Cryptography">
        <constructor name="HashAlgorithm()" argnames="" />
        <field name="HashSizeValue" />
        <field name="HashValue" />
        <field name="State" />
        <property name="HashSize" propertytype="System.Int32" />
        <property name="Hash" propertytype="System.Byte[]" />
        <property name="InputBlockSize" propertytype="System.Int32" />
        <property name="OutputBlockSize" propertytype="System.Int32" />
        <property name="CanTransformMultipleBlocks" propertytype="System.Boolean" />
        <property name="CanReuseTransform" propertytype="System.Boolean" />
        <method name="TransformFinalBlock(System.Byte[], System.Int32, System.Int32)" argnames="inputBuffer, inputOffset, inputCount" returntype="System.Byte[]" />
        <method name="TransformBlock(System.Byte[], System.Int32, System.Int32, System.Byte[], System.Int32)" argnames="inputBuffer, inputOffset, inputCount, outputBuffer, outputOffset" returntype="System.Int32" />
        <method name="HashFinal()" argnames="" returntype="System.Byte[]" />
        <method name="HashCore(System.Byte[], System.Int32, System.Int32)" argnames="array, ibStart, cbSize" returntype="System.Void" />
        <method name="Initialize()" argnames="" returntype="System.Void" />
        <method name="Dispose(System.Boolean)" argnames="disposing" returntype="System.Void" />
        <method name="Create()" argnames="" returntype="System.Security.Cryptography.HashAlgorithm" />
        <method name="Create(System.String)" argnames="hashName" returntype="System.Security.Cryptography.HashAlgorithm" />
        <method name="ComputeHash(System.IO.Stream)" argnames="inputStream" returntype="System.Byte[]" />
        <method name="ComputeHash(System.Byte[])" argnames="buffer" returntype="System.Byte[]" />
        <method name="ComputeHash(System.Byte[], System.Int32, System.Int32)" argnames="buffer, offset, count" returntype="System.Byte[]" />
        <method name="Clear()" argnames="" returntype="System.Void" />
    </class>
    <class name="KeyedHashAlgorithm" namespace="System.Security.Cryptography">
        <constructor name="KeyedHashAlgorithm()" argnames="" />
        <field name="KeyValue" />
        <property name="Key" propertytype="System.Byte[]" />
        <method name="Dispose(System.Boolean)" argnames="disposing" returntype="System.Void" />
        <method name="Finalize()" argnames="" returntype="System.Void" />
        <method name="Create()" argnames="" returntype="System.Security.Cryptography.KeyedHashAlgorithm" />
        <method name="Create(System.String)" argnames="algName" returntype="System.Security.Cryptography.KeyedHashAlgorithm" />
    </class>
    <class name="HMACSHA1" namespace="System.Security.Cryptography">
        <constructor name="HMACSHA1()" argnames="" />
        <constructor name="HMACSHA1(System.Byte[])" argnames="rgbKey" />
        <property name="Key" propertytype="System.Byte[]" />
        <property name="HashName" propertytype="System.String" />
        <method name="HashFinal()" argnames="" returntype="System.Byte[]" />
        <method name="HashCore(System.Byte[], System.Int32, System.Int32)" argnames="rgb, ib, cb" returntype="System.Void" />
        <method name="Initialize()" argnames="" returntype="System.Void" />
        <method name="Dispose(System.Boolean)" argnames="disposing" returntype="System.Void" />
        <method name="Finalize()" argnames="" returntype="System.Void" />
    </class>
    <class name="MACTripleDES" namespace="System.Security.Cryptography">
        <constructor name="MACTripleDES()" argnames="" />
        <constructor name="MACTripleDES(System.Byte[])" argnames="rgbKey" />
        <constructor name="MACTripleDES(System.String, System.Byte[])" argnames="strTripleDES, rgbKey" />
        <method name="HashFinal()" argnames="" returntype="System.Byte[]" />
        <method name="HashCore(System.Byte[], System.Int32, System.Int32)" argnames="rgbData, ibStart, cbSize" returntype="System.Void" />
        <method name="Initialize()" argnames="" returntype="System.Void" />
        <method name="Dispose(System.Boolean)" argnames="disposing" returntype="System.Void" />
        <method name="Finalize()" argnames="" returntype="System.Void" />
    </class>
    <class name="MD5" namespace="System.Security.Cryptography">
        <constructor name="MD5()" argnames="" />
        <method name="Create()" argnames="" returntype="System.Security.Cryptography.MD5" />
        <method name="Create(System.String)" argnames="algName" returntype="System.Security.Cryptography.MD5" />
    </class>
    <class name="MD5CryptoServiceProvider" namespace="System.Security.Cryptography">
        <constructor name="MD5CryptoServiceProvider()" argnames="" />
        <method name="HashFinal()" argnames="" returntype="System.Byte[]" />
        <method name="HashCore(System.Byte[], System.Int32, System.Int32)" argnames="rgb, ibStart, cbSize" returntype="System.Void" />
        <method name="Initialize()" argnames="" returntype="System.Void" />
        <method name="Dispose(System.Boolean)" argnames="disposing" returntype="System.Void" />
        <method name="Finalize()" argnames="" returntype="System.Void" />
    </class>
    <class name="MaskGenerationMethod" namespace="System.Security.Cryptography">
        <constructor name="MaskGenerationMethod()" argnames="" />
        <method name="GenerateMask(System.Byte[], System.Int32)" argnames="rgbSeed, cbReturn" returntype="System.Byte[]" />
    </class>
    <class name="PasswordDeriveBytes" namespace="System.Security.Cryptography">
        <constructor name="PasswordDeriveBytes(System.String, System.Byte[])" argnames="strPassword, rgbSalt" />
        <constructor name="PasswordDeriveBytes(System.String, System.Byte[], System.String, System.Int32)" argnames="strPassword, rgbSalt, strHashName, iterations" />
        <constructor name="PasswordDeriveBytes(System.String, System.Byte[], System.Security.Cryptography.CspParameters)" argnames="strPassword, rgbSalt, cspParams" />
        <constructor name="PasswordDeriveBytes(System.String, System.Byte[], System.String, System.Int32, System.Security.Cryptography.CspParameters)" argnames="strPassword, rgbSalt, strHashName, iterations, cspParams" />
        <property name="HashName" propertytype="System.String" />
        <property name="IterationCount" propertytype="System.Int32" />
        <property name="Salt" propertytype="System.Byte[]" />
        <method name="Reset()" argnames="" returntype="System.Void" />
        <method name="GetBytes(System.Int32)" argnames="cb" returntype="System.Byte[]" />
        <method name="Finalize()" argnames="" returntype="System.Void" />
        <method name="CryptDeriveKey(System.String, System.String, System.Int32, System.Byte[])" argnames="algname, alghashname, keySize, rgbIV" returntype="System.Byte[]" />
    </class>
    <class name="PKCS1MaskGenerationMethod" namespace="System.Security.Cryptography">
        <constructor name="PKCS1MaskGenerationMethod()" argnames="" />
        <property name="HashName" propertytype="System.String" />
        <method name="GenerateMask(System.Byte[], System.Int32)" argnames="rgbSeed, cbReturn" returntype="System.Byte[]" />
    </class>
    <class name="RC2" namespace="System.Security.Cryptography">
        <constructor name="RC2()" argnames="" />
        <field name="EffectiveKeySizeValue" />
        <property name="EffectiveKeySize" propertytype="System.Int32" />
        <property name="KeySize" propertytype="System.Int32" />
        <method name="Create()" argnames="" returntype="System.Security.Cryptography.RC2" />
        <method name="Create(System.String)" argnames="AlgName" returntype="System.Security.Cryptography.RC2" />
    </class>
    <class name="RC2CryptoServiceProvider" namespace="System.Security.Cryptography">
        <constructor name="RC2CryptoServiceProvider()" argnames="" />
        <property name="EffectiveKeySize" propertytype="System.Int32" />
        <property name="RNG" propertytype="System.Security.Cryptography.RNGCryptoServiceProvider" />
        <method name="GenerateIV()" argnames="" returntype="System.Void" />
        <method name="GenerateKey()" argnames="" returntype="System.Void" />
        <method name="CreateDecryptor(System.Byte[], System.Byte[])" argnames="rgbKey, rgbIV" returntype="System.Security.Cryptography.ICryptoTransform" />
        <method name="CreateEncryptor(System.Byte[], System.Byte[])" argnames="rgbKey, rgbIV" returntype="System.Security.Cryptography.ICryptoTransform" />
    </class>
    <class name="RandomNumberGenerator" namespace="System.Security.Cryptography">
        <constructor name="RandomNumberGenerator()" argnames="" />
        <method name="GetNonZeroBytes(System.Byte[])" argnames="data" returntype="System.Void" />
        <method name="GetBytes(System.Byte[])" argnames="data" returntype="System.Void" />
        <method name="Create()" argnames="" returntype="System.Security.Cryptography.RandomNumberGenerator" />
        <method name="Create(System.String)" argnames="rngName" returntype="System.Security.Cryptography.RandomNumberGenerator" />
    </class>
    <class name="RNGCryptoServiceProvider" namespace="System.Security.Cryptography">
        <constructor name="RNGCryptoServiceProvider()" argnames="" />
        <constructor name="RNGCryptoServiceProvider(System.String)" argnames="str" />
        <constructor name="RNGCryptoServiceProvider(System.Byte[])" argnames="rgb" />
        <constructor name="RNGCryptoServiceProvider(System.Security.Cryptography.CspParameters)" argnames="cspParams" />
        <method name="GetNonZeroBytes(System.Byte[])" argnames="data" returntype="System.Void" />
        <method name="GetBytes(System.Byte[])" argnames="data" returntype="System.Void" />
        <method name="Finalize()" argnames="" returntype="System.Void" />
    </class>
    <class name="RSA" namespace="System.Security.Cryptography">
        <constructor name="RSA()" argnames="" />
        <method name="ImportParameters(System.Security.Cryptography.RSAParameters)" argnames="parameters" returntype="System.Void" />
        <method name="ExportParameters(System.Boolean)" argnames="includePrivateParameters" returntype="System.Security.Cryptography.RSAParameters" />
        <method name="EncryptValue(System.Byte[])" argnames="rgb" returntype="System.Byte[]" />
        <method name="DecryptValue(System.Byte[])" argnames="rgb" returntype="System.Byte[]" />
        <method name="ToXmlString(System.Boolean)" argnames="includePrivateParameters" returntype="System.String" />
        <method name="FromXmlString(System.String)" argnames="xmlString" returntype="System.Void" />
        <method name="Create()" argnames="" returntype="System.Security.Cryptography.RSA" />
        <method name="Create(System.String)" argnames="algName" returntype="System.Security.Cryptography.RSA" />
    </class>
    <class name="RSACryptoServiceProvider" namespace="System.Security.Cryptography">
        <constructor name="RSACryptoServiceProvider()" argnames="" />
        <constructor name="RSACryptoServiceProvider(System.Int32)" argnames="dwKeySize" />
        <constructor name="RSACryptoServiceProvider(System.Security.Cryptography.CspParameters)" argnames="parameters" />
        <constructor name="RSACryptoServiceProvider(System.Int32, System.Security.Cryptography.CspParameters)" argnames="dwKeySize, parameters" />
        <property name="KeySize" propertytype="System.Int32" />
        <property name="KeyExchangeAlgorithm" propertytype="System.String" />
        <property name="SignatureAlgorithm" propertytype="System.String" />
        <property name="PersistKeyInCsp" propertytype="System.Boolean" />
        <property name="hKey" propertytype="System.IntPtr" />
        <method name="ImportParameters(System.Security.Cryptography.RSAParameters)" argnames="parameters" returntype="System.Void" />
        <method name="ExportParameters(System.Boolean)" argnames="includePrivateParameters" returntype="System.Security.Cryptography.RSAParameters" />
        <method name="EncryptValue(System.Byte[])" argnames="rgb" returntype="System.Byte[]" />
        <method name="DecryptValue(System.Byte[])" argnames="rgb" returntype="System.Byte[]" />
        <method name="Dispose(System.Boolean)" argnames="disposing" returntype="System.Void" />
        <method name="Finalize()" argnames="" returntype="System.Void" />
        <method name="SignData(System.IO.Stream, System.Object)" argnames="inputStream, halg" returntype="System.Byte[]" />
        <method name="SignData(System.Byte[], System.Object)" argnames="buffer, halg" returntype="System.Byte[]" />
        <method name="SignData(System.Byte[], System.Int32, System.Int32, System.Object)" argnames="buffer, offset, count, halg" returntype="System.Byte[]" />
        <method name="VerifyData(System.Byte[], System.Object, System.Byte[])" argnames="buffer, halg, signature" returntype="System.Boolean" />
        <method name="SignHash(System.Byte[], System.String)" argnames="rgbHash, str" returntype="System.Byte[]" />
        <method name="VerifyHash(System.Byte[], System.String, System.Byte[])" argnames="rgbHash, str, rgbSignature" returntype="System.Boolean" />
        <method name="Encrypt(System.Byte[], System.Boolean)" argnames="rgb, fOAEP" returntype="System.Byte[]" />
        <method name="Decrypt(System.Byte[], System.Boolean)" argnames="rgb, fOAEP" returntype="System.Byte[]" />
    </class>
    <class name="RSAOAEPKeyExchangeDeformatter" namespace="System.Security.Cryptography">
        <constructor name="RSAOAEPKeyExchangeDeformatter()" argnames="" />
        <constructor name="RSAOAEPKeyExchangeDeformatter(System.Security.Cryptography.AsymmetricAlgorithm)" argnames="key" />
        <property name="Parameters" propertytype="System.String" />
        <method name="DecryptKeyExchange(System.Byte[])" argnames="rgbData" returntype="System.Byte[]" />
        <method name="SetKey(System.Security.Cryptography.AsymmetricAlgorithm)" argnames="key" returntype="System.Void" />
    </class>
    <class name="RSAOAEPKeyExchangeFormatter" namespace="System.Security.Cryptography">
        <constructor name="RSAOAEPKeyExchangeFormatter()" argnames="" />
        <constructor name="RSAOAEPKeyExchangeFormatter(System.Security.Cryptography.AsymmetricAlgorithm)" argnames="key" />
        <property name="Parameter" propertytype="System.Byte[]" />
        <property name="Parameters" propertytype="System.String" />
        <property name="Rng" propertytype="System.Security.Cryptography.RandomNumberGenerator" />
        <method name="CreateKeyExchange(System.Byte[], System.Type)" argnames="rgbData, symAlgType" returntype="System.Byte[]" />
        <method name="CreateKeyExchange(System.Byte[])" argnames="rgbData" returntype="System.Byte[]" />
        <method name="SetKey(System.Security.Cryptography.AsymmetricAlgorithm)" argnames="key" returntype="System.Void" />
    </class>
    <class name="RSAPKCS1KeyExchangeDeformatter" namespace="System.Security.Cryptography">
        <constructor name="RSAPKCS1KeyExchangeDeformatter()" argnames="" />
        <constructor name="RSAPKCS1KeyExchangeDeformatter(System.Security.Cryptography.AsymmetricAlgorithm)" argnames="key" />
        <property name="RNG" propertytype="System.Security.Cryptography.RandomNumberGenerator" />
        <property name="Parameters" propertytype="System.String" />
        <method name="DecryptKeyExchange(System.Byte[])" argnames="rgbIn" returntype="System.Byte[]" />
        <method name="SetKey(System.Security.Cryptography.AsymmetricAlgorithm)" argnames="key" returntype="System.Void" />
    </class>
    <class name="RSAPKCS1KeyExchangeFormatter" namespace="System.Security.Cryptography">
        <constructor name="RSAPKCS1KeyExchangeFormatter()" argnames="" />
        <constructor name="RSAPKCS1KeyExchangeFormatter(System.Security.Cryptography.AsymmetricAlgorithm)" argnames="key" />
        <property name="Parameters" propertytype="System.String" />
        <property name="Rng" propertytype="System.Security.Cryptography.RandomNumberGenerator" />
        <method name="CreateKeyExchange(System.Byte[], System.Type)" argnames="rgbData, symAlgType" returntype="System.Byte[]" />
        <method name="CreateKeyExchange(System.Byte[])" argnames="rgbData" returntype="System.Byte[]" />
        <method name="SetKey(System.Security.Cryptography.AsymmetricAlgorithm)" argnames="key" returntype="System.Void" />
    </class>
    <class name="RSAPKCS1SignatureDeformatter" namespace="System.Security.Cryptography">
        <constructor name="RSAPKCS1SignatureDeformatter()" argnames="" />
        <constructor name="RSAPKCS1SignatureDeformatter(System.Security.Cryptography.AsymmetricAlgorithm)" argnames="key" />
        <method name="VerifySignature(System.Byte[], System.Byte[])" argnames="rgbHash, rgbSignature" returntype="System.Boolean" />
        <method name="SetHashAlgorithm(System.String)" argnames="strName" returntype="System.Void" />
        <method name="SetKey(System.Security.Cryptography.AsymmetricAlgorithm)" argnames="key" returntype="System.Void" />
    </class>
    <class name="RSAPKCS1SignatureFormatter" namespace="System.Security.Cryptography">
        <constructor name="RSAPKCS1SignatureFormatter()" argnames="" />
        <constructor name="RSAPKCS1SignatureFormatter(System.Security.Cryptography.AsymmetricAlgorithm)" argnames="key" />
        <method name="CreateSignature(System.Byte[])" argnames="rgbHash" returntype="System.Byte[]" />
        <method name="SetHashAlgorithm(System.String)" argnames="strName" returntype="System.Void" />
        <method name="SetKey(System.Security.Cryptography.AsymmetricAlgorithm)" argnames="key" returntype="System.Void" />
    </class>
    <class name="Rijndael" namespace="System.Security.Cryptography">
        <constructor name="Rijndael()" argnames="" />
        <method name="Create()" argnames="" returntype="System.Security.Cryptography.Rijndael" />
        <method name="Create(System.String)" argnames="algName" returntype="System.Security.Cryptography.Rijndael" />
    </class>
    <class name="RijndaelManaged" namespace="System.Security.Cryptography">
        <constructor name="RijndaelManaged()" argnames="" />
        <property name="RNG" propertytype="System.Security.Cryptography.RNGCryptoServiceProvider" />
        <method name="GenerateIV()" argnames="" returntype="System.Void" />
        <method name="GenerateKey()" argnames="" returntype="System.Void" />
        <method name="CreateDecryptor(System.Byte[], System.Byte[])" argnames="rgbKey, rgbIV" returntype="System.Security.Cryptography.ICryptoTransform" />
        <method name="CreateEncryptor(System.Byte[], System.Byte[])" argnames="rgbKey, rgbIV" returntype="System.Security.Cryptography.ICryptoTransform" />
    </class>
    <class name="SHA1" namespace="System.Security.Cryptography">
        <constructor name="SHA1()" argnames="" />
        <method name="Create()" argnames="" returntype="System.Security.Cryptography.SHA1" />
        <method name="Create(System.String)" argnames="hashName" returntype="System.Security.Cryptography.SHA1" />
    </class>
    <class name="SHA1CryptoServiceProvider" namespace="System.Security.Cryptography">
        <constructor name="SHA1CryptoServiceProvider()" argnames="" />
        <method name="HashFinal()" argnames="" returntype="System.Byte[]" />
        <method name="HashCore(System.Byte[], System.Int32, System.Int32)" argnames="rgb, ibStart, cbSize" returntype="System.Void" />
        <method name="Initialize()" argnames="" returntype="System.Void" />
        <method name="Dispose(System.Boolean)" argnames="disposing" returntype="System.Void" />
        <method name="Finalize()" argnames="" returntype="System.Void" />
    </class>
    <class name="SHA1Managed" namespace="System.Security.Cryptography">
        <constructor name="SHA1Managed()" argnames="" />
        <method name="HashFinal()" argnames="" returntype="System.Byte[]" />
        <method name="HashCore(System.Byte[], System.Int32, System.Int32)" argnames="rgb, ibStart, cbSize" returntype="System.Void" />
        <method name="Initialize()" argnames="" returntype="System.Void" />
    </class>
    <class name="SHA256" namespace="System.Security.Cryptography">
        <constructor name="SHA256()" argnames="" />
        <method name="Create()" argnames="" returntype="System.Security.Cryptography.SHA256" />
        <method name="Create(System.String)" argnames="hashName" returntype="System.Security.Cryptography.SHA256" />
    </class>
    <class name="SHA256Managed" namespace="System.Security.Cryptography">
        <constructor name="SHA256Managed()" argnames="" />
        <method name="HashFinal()" argnames="" returntype="System.Byte[]" />
        <method name="HashCore(System.Byte[], System.Int32, System.Int32)" argnames="rgb, ibStart, cbSize" returntype="System.Void" />
        <method name="Initialize()" argnames="" returntype="System.Void" />
    </class>
    <class name="SHA384" namespace="System.Security.Cryptography">
        <constructor name="SHA384()" argnames="" />
        <method name="Create()" argnames="" returntype="System.Security.Cryptography.SHA384" />
        <method name="Create(System.String)" argnames="hashName" returntype="System.Security.Cryptography.SHA384" />
    </class>
    <class name="SHA384Managed" namespace="System.Security.Cryptography">
        <constructor name="SHA384Managed()" argnames="" />
        <method name="HashFinal()" argnames="" returntype="System.Byte[]" />
        <method name="HashCore(System.Byte[], System.Int32, System.Int32)" argnames="rgb, ibStart, cbSize" returntype="System.Void" />
        <method name="Initialize()" argnames="" returntype="System.Void" />
    </class>
    <class name="SHA512" namespace="System.Security.Cryptography">
        <constructor name="SHA512()" argnames="" />
        <method name="Create()" argnames="" returntype="System.Security.Cryptography.SHA512" />
        <method name="Create(System.String)" argnames="hashName" returntype="System.Security.Cryptography.SHA512" />
    </class>
    <class name="SHA512Managed" namespace="System.Security.Cryptography">
        <constructor name="SHA512Managed()" argnames="" />
        <method name="HashFinal()" argnames="" returntype="System.Byte[]" />
        <method name="HashCore(System.Byte[], System.Int32, System.Int32)" argnames="rgb, ibStart, cbSize" returntype="System.Void" />
        <method name="Initialize()" argnames="" returntype="System.Void" />
    </class>
    <class name="SignatureDescription" namespace="System.Security.Cryptography">
        <constructor name="SignatureDescription()" argnames="" />
        <constructor name="SignatureDescription(System.Security.SecurityElement)" argnames="el" />
        <property name="KeyAlgorithm" propertytype="System.String" />
        <property name="DigestAlgorithm" propertytype="System.String" />
        <property name="FormatterAlgorithm" propertytype="System.String" />
        <property name="DeformatterAlgorithm" propertytype="System.String" />
        <method name="CreateDigest()" argnames="" returntype="System.Security.Cryptography.HashAlgorithm" />
        <method name="CreateFormatter(System.Security.Cryptography.AsymmetricAlgorithm)" argnames="key" returntype="System.Security.Cryptography.AsymmetricSignatureFormatter" />
        <method name="CreateDeformatter(System.Security.Cryptography.AsymmetricAlgorithm)" argnames="key" returntype="System.Security.Cryptography.AsymmetricSignatureDeformatter" />
    </class>
    <class name="TripleDES" namespace="System.Security.Cryptography">
        <constructor name="TripleDES()" argnames="" />
        <property name="Key" propertytype="System.Byte[]" />
        <method name="Create()" argnames="" returntype="System.Security.Cryptography.TripleDES" />
        <method name="Create(System.String)" argnames="str" returntype="System.Security.Cryptography.TripleDES" />
        <method name="IsWeakKey(System.Byte[])" argnames="rgbKey" returntype="System.Boolean" />
    </class>
    <class name="TripleDESCryptoServiceProvider" namespace="System.Security.Cryptography">
        <constructor name="TripleDESCryptoServiceProvider()" argnames="" />
        <property name="RNG" propertytype="System.Security.Cryptography.RNGCryptoServiceProvider" />
        <method name="GenerateIV()" argnames="" returntype="System.Void" />
        <method name="GenerateKey()" argnames="" returntype="System.Void" />
        <method name="CreateDecryptor(System.Byte[], System.Byte[])" argnames="rgbKey, rgbIV" returntype="System.Security.Cryptography.ICryptoTransform" />
        <method name="CreateEncryptor(System.Byte[], System.Byte[])" argnames="rgbKey, rgbIV" returntype="System.Security.Cryptography.ICryptoTransform" />
    </class>
    <interface name="ICryptoTransform" namespace="System.Security.Cryptography">
        <property name="InputBlockSize" propertytype="System.Int32" />
        <property name="OutputBlockSize" propertytype="System.Int32" />
        <property name="CanTransformMultipleBlocks" propertytype="System.Boolean" />
        <property name="CanReuseTransform" propertytype="System.Boolean" />
        <method name="TransformFinalBlock(System.Byte[], System.Int32, System.Int32)" argnames="inputBuffer, inputOffset, inputCount" returntype="System.Byte[]" />
        <method name="TransformBlock(System.Byte[], System.Int32, System.Int32, System.Byte[], System.Int32)" argnames="inputBuffer, inputOffset, inputCount, outputBuffer, outputOffset" returntype="System.Int32" />
    </interface>
    <struct name="DSAParameters" namespace="System.Security.Cryptography">
        <field name="P" />
        <field name="Q" />
        <field name="G" />
        <field name="Y" />
        <field name="J" />
        <field name="X" />
        <field name="Seed" />
        <field name="Counter" />
    </struct>
    <struct name="RSAParameters" namespace="System.Security.Cryptography">
        <field name="Exponent" />
        <field name="Modulus" />
        <field name="P" />
        <field name="Q" />
        <field name="DP" />
        <field name="DQ" />
        <field name="InverseQ" />
        <field name="D" />
    </struct>
    <enum name="FromBase64TransformMode" namespace="System.Security.Cryptography">
        <field name="IgnoreWhiteSpaces" />
        <field name="DoNotIgnoreWhiteSpaces" />
    </enum>
    <enum name="CipherMode" namespace="System.Security.Cryptography">
        <field name="CBC" />
        <field name="ECB" />
        <field name="OFB" />
        <field name="CFB" />
        <field name="CTS" />
    </enum>
    <enum name="PaddingMode" namespace="System.Security.Cryptography">
        <field name="None" />
        <field name="PKCS7" />
        <field name="Zeros" />
    </enum>
    <enum name="CspProviderFlags" namespace="System.Security.Cryptography">
        <field name="UseMachineKeyStore" />
        <field name="UseDefaultKeyContainer" />
    </enum>
    <enum name="CryptoStreamMode" namespace="System.Security.Cryptography">
        <field name="Read" />
        <field name="Write" />
    </enum>
    <class name="Stream" namespace="System.IO">
        <constructor name="Stream()" argnames="" />
        <field name="Null" />
        <property name="CanRead" propertytype="System.Boolean" />
        <property name="CanSeek" propertytype="System.Boolean" />
        <property name="CanWrite" propertytype="System.Boolean" />
        <property name="Length" propertytype="System.Int64" />
        <property name="Position" propertytype="System.Int64" />
        <method name="WriteByte(System.Byte)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Byte[], System.Int32, System.Int32)" argnames="buffer, offset, count" returntype="System.Void" />
        <method name="ReadByte()" argnames="" returntype="System.Int32" />
        <method name="Read(System.Byte[], System.Int32, System.Int32)" argnames="buffer, offset, count" returntype="System.Int32" />
        <method name="SetLength(System.Int64)" argnames="value" returntype="System.Void" />
        <method name="Seek(System.Int64, System.IO.SeekOrigin)" argnames="offset, origin" returntype="System.Int64" />
        <method name="EndWrite(System.IAsyncResult)" argnames="asyncResult" returntype="System.Void" />
        <method name="BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object)" argnames="buffer, offset, count, callback, state" returntype="System.IAsyncResult" />
        <method name="EndRead(System.IAsyncResult)" argnames="asyncResult" returntype="System.Int32" />
        <method name="BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object)" argnames="buffer, offset, count, callback, state" returntype="System.IAsyncResult" />
        <method name="CreateWaitHandle()" argnames="" returntype="System.Threading.WaitHandle" />
        <method name="Flush()" argnames="" returntype="System.Void" />
        <method name="Close()" argnames="" returntype="System.Void" />
    </class>
    <class name="BinaryReader" namespace="System.IO">
        <constructor name="BinaryReader(System.IO.Stream)" argnames="input" />
        <constructor name="BinaryReader(System.IO.Stream, System.Text.Encoding)" argnames="input, encoding" />
        <property name="BaseStream" propertytype="System.IO.Stream" />
        <method name="FillBuffer(System.Int32)" argnames="numBytes" returntype="System.Void" />
        <method name="ReadBytes(System.Int32)" argnames="count" returntype="System.Byte[]" />
        <method name="Read(System.Byte[], System.Int32, System.Int32)" argnames="buffer, index, count" returntype="System.Int32" />
        <method name="ReadChars(System.Int32)" argnames="count" returntype="System.Char[]" />
        <method name="Read(System.Char[], System.Int32, System.Int32)" argnames="buffer, index, count" returntype="System.Int32" />
        <method name="ReadString()" argnames="" returntype="System.String" />
        <method name="ReadDecimal()" argnames="" returntype="System.Decimal" />
        <method name="ReadDouble()" argnames="" returntype="System.Double" />
        <method name="ReadSingle()" argnames="" returntype="System.Single" />
        <method name="ReadUInt64()" argnames="" returntype="System.UInt64" />
        <method name="ReadInt64()" argnames="" returntype="System.Int64" />
        <method name="ReadUInt32()" argnames="" returntype="System.UInt32" />
        <method name="ReadInt32()" argnames="" returntype="System.Int32" />
        <method name="ReadUInt16()" argnames="" returntype="System.UInt16" />
        <method name="ReadInt16()" argnames="" returntype="System.Int16" />
        <method name="ReadChar()" argnames="" returntype="System.Char" />
        <method name="ReadSByte()" argnames="" returntype="System.SByte" />
        <method name="ReadByte()" argnames="" returntype="System.Byte" />
        <method name="ReadBoolean()" argnames="" returntype="System.Boolean" />
        <method name="Read()" argnames="" returntype="System.Int32" />
        <method name="PeekChar()" argnames="" returntype="System.Int32" />
        <method name="Dispose(System.Boolean)" argnames="disposing" returntype="System.Void" />
        <method name="Close()" argnames="" returntype="System.Void" />
        <method name="Read7BitEncodedInt()" argnames="" returntype="System.Int32" />
    </class>
    <class name="BinaryWriter" namespace="System.IO">
        <constructor name="BinaryWriter()" argnames="" />
        <constructor name="BinaryWriter(System.IO.Stream)" argnames="output" />
        <constructor name="BinaryWriter(System.IO.Stream, System.Text.Encoding)" argnames="output, encoding" />
        <field name="OutStream" />
        <field name="Null" />
        <property name="BaseStream" propertytype="System.IO.Stream" />
        <method name="Write(System.String)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Single)" argnames="value" returntype="System.Void" />
        <method name="Write(System.UInt64)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Int64)" argnames="value" returntype="System.Void" />
        <method name="Write(System.UInt32)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Int32)" argnames="value" returntype="System.Void" />
        <method name="Write(System.UInt16)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Int16)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Decimal)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Double)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Char[], System.Int32, System.Int32)" argnames="chars, index, count" returntype="System.Void" />
        <method name="Write(System.Char[])" argnames="chars" returntype="System.Void" />
        <method name="Write(System.Char)" argnames="ch" returntype="System.Void" />
        <method name="Write(System.Byte[], System.Int32, System.Int32)" argnames="buffer, index, count" returntype="System.Void" />
        <method name="Write(System.Byte[])" argnames="buffer" returntype="System.Void" />
        <method name="Write(System.SByte)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Byte)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Boolean)" argnames="value" returntype="System.Void" />
        <method name="Seek(System.Int32, System.IO.SeekOrigin)" argnames="offset, origin" returntype="System.Int64" />
        <method name="Flush()" argnames="" returntype="System.Void" />
        <method name="Dispose(System.Boolean)" argnames="disposing" returntype="System.Void" />
        <method name="Close()" argnames="" returntype="System.Void" />
        <method name="Write7BitEncodedInt(System.Int32)" argnames="value" returntype="System.Void" />
    </class>
    <class name="BufferedStream" namespace="System.IO">
        <constructor name="BufferedStream(System.IO.Stream)" argnames="stream" />
        <constructor name="BufferedStream(System.IO.Stream, System.Int32)" argnames="stream, bufferSize" />
        <property name="CanRead" propertytype="System.Boolean" />
        <property name="CanWrite" propertytype="System.Boolean" />
        <property name="CanSeek" propertytype="System.Boolean" />
        <property name="Length" propertytype="System.Int64" />
        <property name="Position" propertytype="System.Int64" />
        <method name="WriteByte(System.Byte)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Byte[], System.Int32, System.Int32)" argnames="array, offset, count" returntype="System.Void" />
        <method name="ReadByte()" argnames="" returntype="System.Int32" />
        <method name="Read(System.Byte[], System.Int32, System.Int32)" argnames="array, offset, count" returntype="System.Int32" />
        <method name="SetLength(System.Int64)" argnames="value" returntype="System.Void" />
        <method name="Seek(System.Int64, System.IO.SeekOrigin)" argnames="offset, origin" returntype="System.Int64" />
        <method name="Flush()" argnames="" returntype="System.Void" />
        <method name="Close()" argnames="" returntype="System.Void" />
    </class>
    <class name="Directory" namespace="System.IO">
        <method name="GetParent(System.String)" argnames="path" returntype="System.IO.DirectoryInfo" />
        <method name="CreateDirectory(System.String)" argnames="path" returntype="System.IO.DirectoryInfo" />
        <method name="Exists(System.String)" argnames="path" returntype="System.Boolean" />
        <method name="SetCreationTime(System.String, System.DateTime)" argnames="path, creationTime" returntype="System.Void" />
        <method name="GetCreationTime(System.String)" argnames="path" returntype="System.DateTime" />
        <method name="SetLastWriteTime(System.String, System.DateTime)" argnames="path, lastWriteTime" returntype="System.Void" />
        <method name="GetLastWriteTime(System.String)" argnames="path" returntype="System.DateTime" />
        <method name="SetLastAccessTime(System.String, System.DateTime)" argnames="path, lastAccessTime" returntype="System.Void" />
        <method name="GetLastAccessTime(System.String)" argnames="path" returntype="System.DateTime" />
        <method name="GetFiles(System.String)" argnames="path" returntype="System.String[]" />
        <method name="GetFiles(System.String, System.String)" argnames="path, searchPattern" returntype="System.String[]" />
        <method name="GetDirectories(System.String)" argnames="path" returntype="System.String[]" />
        <method name="GetDirectories(System.String, System.String)" argnames="path, searchPattern" returntype="System.String[]" />
        <method name="GetFileSystemEntries(System.String)" argnames="path" returntype="System.String[]" />
        <method name="GetFileSystemEntries(System.String, System.String)" argnames="path, searchPattern" returntype="System.String[]" />
        <method name="GetLogicalDrives()" argnames="" returntype="System.String[]" />
        <method name="GetDirectoryRoot(System.String)" argnames="path" returntype="System.String" />
        <method name="GetCurrentDirectory()" argnames="" returntype="System.String" />
        <method name="SetCurrentDirectory(System.String)" argnames="path" returntype="System.Void" />
        <method name="Move(System.String, System.String)" argnames="sourceDirName, destDirName" returntype="System.Void" />
        <method name="Delete(System.String)" argnames="path" returntype="System.Void" />
        <method name="Delete(System.String, System.Boolean)" argnames="path, recursive" returntype="System.Void" />
    </class>
    <class name="FileSystemInfo" namespace="System.IO">
        <constructor name="FileSystemInfo()" argnames="" />
        <field name="FullPath" />
        <field name="OriginalPath" />
        <property name="FullName" propertytype="System.String" />
        <property name="Extension" propertytype="System.String" />
        <property name="Name" propertytype="System.String" />
        <property name="Exists" propertytype="System.Boolean" />
        <property name="CreationTime" propertytype="System.DateTime" />
        <property name="LastAccessTime" propertytype="System.DateTime" />
        <property name="LastWriteTime" propertytype="System.DateTime" />
        <property name="Attributes" propertytype="System.IO.FileAttributes" />
        <method name="Delete()" argnames="" returntype="System.Void" />
        <method name="Refresh()" argnames="" returntype="System.Void" />
    </class>
    <class name="DirectoryInfo" namespace="System.IO">
        <constructor name="DirectoryInfo(System.String)" argnames="path" />
        <property name="Name" propertytype="System.String" />
        <property name="Parent" propertytype="System.IO.DirectoryInfo" />
        <property name="Exists" propertytype="System.Boolean" />
        <property name="Root" propertytype="System.IO.DirectoryInfo" />
        <method name="Delete()" argnames="" returntype="System.Void" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="CreateSubdirectory(System.String)" argnames="path" returntype="System.IO.DirectoryInfo" />
        <method name="Create()" argnames="" returntype="System.Void" />
        <method name="GetFiles(System.String)" argnames="searchPattern" returntype="System.IO.FileInfo[]" />
        <method name="GetFiles()" argnames="" returntype="System.IO.FileInfo[]" />
        <method name="GetDirectories()" argnames="" returntype="System.IO.DirectoryInfo[]" />
        <method name="GetFileSystemInfos(System.String)" argnames="searchPattern" returntype="System.IO.FileSystemInfo[]" />
        <method name="GetFileSystemInfos()" argnames="" returntype="System.IO.FileSystemInfo[]" />
        <method name="GetDirectories(System.String)" argnames="searchPattern" returntype="System.IO.DirectoryInfo[]" />
        <method name="MoveTo(System.String)" argnames="destDirName" returntype="System.Void" />
        <method name="Delete(System.Boolean)" argnames="recursive" returntype="System.Void" />
    </class>
    <class name="IOException" namespace="System.IO">
        <constructor name="IOException()" argnames="" />
        <constructor name="IOException(System.String)" argnames="message" />
        <constructor name="IOException(System.String, System.Int32)" argnames="message, hresult" />
        <constructor name="IOException(System.String, System.Exception)" argnames="message, innerException" />
        <constructor name="IOException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="DirectoryNotFoundException" namespace="System.IO">
        <constructor name="DirectoryNotFoundException()" argnames="" />
        <constructor name="DirectoryNotFoundException(System.String)" argnames="message" />
        <constructor name="DirectoryNotFoundException(System.String, System.Exception)" argnames="message, innerException" />
        <constructor name="DirectoryNotFoundException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="EndOfStreamException" namespace="System.IO">
        <constructor name="EndOfStreamException()" argnames="" />
        <constructor name="EndOfStreamException(System.String)" argnames="message" />
        <constructor name="EndOfStreamException(System.String, System.Exception)" argnames="message, innerException" />
        <constructor name="EndOfStreamException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="File" namespace="System.IO">
        <method name="OpenText(System.String)" argnames="path" returntype="System.IO.StreamReader" />
        <method name="CreateText(System.String)" argnames="path" returntype="System.IO.StreamWriter" />
        <method name="AppendText(System.String)" argnames="path" returntype="System.IO.StreamWriter" />
        <method name="Copy(System.String, System.String)" argnames="sourceFileName, destFileName" returntype="System.Void" />
        <method name="Copy(System.String, System.String, System.Boolean)" argnames="sourceFileName, destFileName, overwrite" returntype="System.Void" />
        <method name="Create(System.String)" argnames="path" returntype="System.IO.FileStream" />
        <method name="Create(System.String, System.Int32)" argnames="path, bufferSize" returntype="System.IO.FileStream" />
        <method name="Delete(System.String)" argnames="path" returntype="System.Void" />
        <method name="Exists(System.String)" argnames="path" returntype="System.Boolean" />
        <method name="Open(System.String, System.IO.FileMode)" argnames="path, mode" returntype="System.IO.FileStream" />
        <method name="Open(System.String, System.IO.FileMode, System.IO.FileAccess)" argnames="path, mode, access" returntype="System.IO.FileStream" />
        <method name="Open(System.String, System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare)" argnames="path, mode, access, share" returntype="System.IO.FileStream" />
        <method name="SetCreationTime(System.String, System.DateTime)" argnames="path, creationTime" returntype="System.Void" />
        <method name="GetCreationTime(System.String)" argnames="path" returntype="System.DateTime" />
        <method name="SetLastAccessTime(System.String, System.DateTime)" argnames="path, lastAccessTime" returntype="System.Void" />
        <method name="GetLastAccessTime(System.String)" argnames="path" returntype="System.DateTime" />
        <method name="SetLastWriteTime(System.String, System.DateTime)" argnames="path, lastWriteTime" returntype="System.Void" />
        <method name="GetLastWriteTime(System.String)" argnames="path" returntype="System.DateTime" />
        <method name="GetAttributes(System.String)" argnames="path" returntype="System.IO.FileAttributes" />
        <method name="SetAttributes(System.String, System.IO.FileAttributes)" argnames="path, fileAttributes" returntype="System.Void" />
        <method name="OpenRead(System.String)" argnames="path" returntype="System.IO.FileStream" />
        <method name="OpenWrite(System.String)" argnames="path" returntype="System.IO.FileStream" />
        <method name="Move(System.String, System.String)" argnames="sourceFileName, destFileName" returntype="System.Void" />
    </class>
    <class name="FileInfo" namespace="System.IO">
        <constructor name="FileInfo(System.String)" argnames="fileName" />
        <property name="Name" propertytype="System.String" />
        <property name="Length" propertytype="System.Int64" />
        <property name="DirectoryName" propertytype="System.String" />
        <property name="Directory" propertytype="System.IO.DirectoryInfo" />
        <property name="Exists" propertytype="System.Boolean" />
        <method name="Delete()" argnames="" returntype="System.Void" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="OpenText()" argnames="" returntype="System.IO.StreamReader" />
        <method name="CreateText()" argnames="" returntype="System.IO.StreamWriter" />
        <method name="AppendText()" argnames="" returntype="System.IO.StreamWriter" />
        <method name="CopyTo(System.String)" argnames="destFileName" returntype="System.IO.FileInfo" />
        <method name="Create()" argnames="" returntype="System.IO.FileStream" />
        <method name="CopyTo(System.String, System.Boolean)" argnames="destFileName, overwrite" returntype="System.IO.FileInfo" />
        <method name="Open(System.IO.FileMode)" argnames="mode" returntype="System.IO.FileStream" />
        <method name="Open(System.IO.FileMode, System.IO.FileAccess)" argnames="mode, access" returntype="System.IO.FileStream" />
        <method name="Open(System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare)" argnames="mode, access, share" returntype="System.IO.FileStream" />
        <method name="OpenRead()" argnames="" returntype="System.IO.FileStream" />
        <method name="OpenWrite()" argnames="" returntype="System.IO.FileStream" />
        <method name="MoveTo(System.String)" argnames="destFileName" returntype="System.Void" />
    </class>
    <class name="FileLoadException" namespace="System.IO">
        <constructor name="FileLoadException()" argnames="" />
        <constructor name="FileLoadException(System.String)" argnames="message" />
        <constructor name="FileLoadException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="FileLoadException(System.String, System.String)" argnames="message, fileName" />
        <constructor name="FileLoadException(System.String, System.String, System.Exception)" argnames="message, fileName, inner" />
        <constructor name="FileLoadException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
        <property name="Message" propertytype="System.String" />
        <property name="FileName" propertytype="System.String" />
        <property name="FusionLog" propertytype="System.String" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </class>
    <class name="FileNotFoundException" namespace="System.IO">
        <constructor name="FileNotFoundException()" argnames="" />
        <constructor name="FileNotFoundException(System.String)" argnames="message" />
        <constructor name="FileNotFoundException(System.String, System.Exception)" argnames="message, innerException" />
        <constructor name="FileNotFoundException(System.String, System.String)" argnames="message, fileName" />
        <constructor name="FileNotFoundException(System.String, System.String, System.Exception)" argnames="message, fileName, innerException" />
        <constructor name="FileNotFoundException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
        <property name="Message" propertytype="System.String" />
        <property name="FileName" propertytype="System.String" />
        <property name="FusionLog" propertytype="System.String" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </class>
    <class name="FileStream" namespace="System.IO">
        <constructor name="FileStream(System.String, System.IO.FileMode)" argnames="path, mode" />
        <constructor name="FileStream(System.String, System.IO.FileMode, System.IO.FileAccess)" argnames="path, mode, access" />
        <constructor name="FileStream(System.String, System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare)" argnames="path, mode, access, share" />
        <constructor name="FileStream(System.String, System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare, System.Int32)" argnames="path, mode, access, share, bufferSize" />
        <constructor name="FileStream(System.String, System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare, System.Int32, System.Boolean)" argnames="path, mode, access, share, bufferSize, useAsync" />
        <constructor name="FileStream(System.IntPtr, System.IO.FileAccess)" argnames="handle, access" />
        <constructor name="FileStream(System.IntPtr, System.IO.FileAccess, System.Boolean)" argnames="handle, access, ownsHandle" />
        <constructor name="FileStream(System.IntPtr, System.IO.FileAccess, System.Boolean, System.Int32)" argnames="handle, access, ownsHandle, bufferSize" />
        <constructor name="FileStream(System.IntPtr, System.IO.FileAccess, System.Boolean, System.Int32, System.Boolean)" argnames="handle, access, ownsHandle, bufferSize, isAsync" />
        <property name="CanRead" propertytype="System.Boolean" />
        <property name="CanWrite" propertytype="System.Boolean" />
        <property name="CanSeek" propertytype="System.Boolean" />
        <property name="IsAsync" propertytype="System.Boolean" />
        <property name="Length" propertytype="System.Int64" />
        <property name="Name" propertytype="System.String" />
        <property name="NameInternal" propertytype="System.String" />
        <property name="Position" propertytype="System.Int64" />
        <property name="Handle" propertytype="System.IntPtr" />
        <method name="Unlock(System.Int64, System.Int64)" argnames="position, length" returntype="System.Void" />
        <method name="Lock(System.Int64, System.Int64)" argnames="position, length" returntype="System.Void" />
        <method name="Dispose(System.Boolean)" argnames="disposing" returntype="System.Void" />
        <method name="WriteByte(System.Byte)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Byte[], System.Int32, System.Int32)" argnames="array, offset, count" returntype="System.Void" />
        <method name="ReadByte()" argnames="" returntype="System.Int32" />
        <method name="Read(System.Byte[], System.Int32, System.Int32)" argnames="array, offset, count" returntype="System.Int32" />
        <method name="SetLength(System.Int64)" argnames="value" returntype="System.Void" />
        <method name="Seek(System.Int64, System.IO.SeekOrigin)" argnames="offset, origin" returntype="System.Int64" />
        <method name="EndWrite(System.IAsyncResult)" argnames="asyncResult" returntype="System.Void" />
        <method name="BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object)" argnames="array, offset, numBytes, userCallback, stateObject" returntype="System.IAsyncResult" />
        <method name="EndRead(System.IAsyncResult)" argnames="asyncResult" returntype="System.Int32" />
        <method name="BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object)" argnames="array, offset, numBytes, userCallback, stateObject" returntype="System.IAsyncResult" />
        <method name="Flush()" argnames="" returntype="System.Void" />
        <method name="Close()" argnames="" returntype="System.Void" />
        <method name="Finalize()" argnames="" returntype="System.Void" />
    </class>
    <class name="MemoryStream" namespace="System.IO">
        <constructor name="MemoryStream()" argnames="" />
        <constructor name="MemoryStream(System.Int32)" argnames="capacity" />
        <constructor name="MemoryStream(System.Byte[])" argnames="buffer" />
        <constructor name="MemoryStream(System.Byte[], System.Boolean)" argnames="buffer, writable" />
        <constructor name="MemoryStream(System.Byte[], System.Int32, System.Int32)" argnames="buffer, index, count" />
        <constructor name="MemoryStream(System.Byte[], System.Int32, System.Int32, System.Boolean)" argnames="buffer, index, count, writable" />
        <constructor name="MemoryStream(System.Byte[], System.Int32, System.Int32, System.Boolean, System.Boolean)" argnames="buffer, index, count, writable, publiclyVisible" />
        <property name="CanRead" propertytype="System.Boolean" />
        <property name="CanSeek" propertytype="System.Boolean" />
        <property name="CanWrite" propertytype="System.Boolean" />
        <property name="Capacity" propertytype="System.Int32" />
        <property name="Length" propertytype="System.Int64" />
        <property name="Position" propertytype="System.Int64" />
        <method name="WriteTo(System.IO.Stream)" argnames="stream" returntype="System.Void" />
        <method name="ToArray()" argnames="" returntype="System.Byte[]" />
        <method name="GetBuffer()" argnames="" returntype="System.Byte[]" />
        <method name="WriteByte(System.Byte)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Byte[], System.Int32, System.Int32)" argnames="buffer, offset, count" returntype="System.Void" />
        <method name="ReadByte()" argnames="" returntype="System.Int32" />
        <method name="Read(System.Byte[], System.Int32, System.Int32)" argnames="buffer, offset, count" returntype="System.Int32" />
        <method name="SetLength(System.Int64)" argnames="value" returntype="System.Void" />
        <method name="Seek(System.Int64, System.IO.SeekOrigin)" argnames="offset, loc" returntype="System.Int64" />
        <method name="Flush()" argnames="" returntype="System.Void" />
        <method name="Close()" argnames="" returntype="System.Void" />
    </class>
    <class name="Path" namespace="System.IO">
        <field name="DirectorySeparatorChar" />
        <field name="AltDirectorySeparatorChar" />
        <field name="VolumeSeparatorChar" />
        <field name="InvalidPathChars" />
        <field name="PathSeparator" />
        <method name="ChangeExtension(System.String, System.String)" argnames="path, extension" returntype="System.String" />
        <method name="GetDirectoryName(System.String)" argnames="path" returntype="System.String" />
        <method name="GetExtension(System.String)" argnames="path" returntype="System.String" />
        <method name="GetFullPath(System.String)" argnames="path" returntype="System.String" />
        <method name="GetFileName(System.String)" argnames="path" returntype="System.String" />
        <method name="GetFileNameWithoutExtension(System.String)" argnames="path" returntype="System.String" />
        <method name="GetPathRoot(System.String)" argnames="path" returntype="System.String" />
        <method name="GetTempPath()" argnames="" returntype="System.String" />
        <method name="GetTempFileName()" argnames="" returntype="System.String" />
        <method name="HasExtension(System.String)" argnames="path" returntype="System.Boolean" />
        <method name="IsPathRooted(System.String)" argnames="path" returntype="System.Boolean" />
        <method name="Combine(System.String, System.String)" argnames="path1, path2" returntype="System.String" />
    </class>
    <class name="PathTooLongException" namespace="System.IO">
        <constructor name="PathTooLongException()" argnames="" />
        <constructor name="PathTooLongException(System.String)" argnames="message" />
        <constructor name="PathTooLongException(System.String, System.Exception)" argnames="message, innerException" />
        <constructor name="PathTooLongException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="TextReader" namespace="System.IO">
        <constructor name="TextReader()" argnames="" />
        <field name="Null" />
        <method name="ReadLine()" argnames="" returntype="System.String" />
        <method name="ReadBlock(System.Char[], System.Int32, System.Int32)" argnames="buffer, index, count" returntype="System.Int32" />
        <method name="ReadToEnd()" argnames="" returntype="System.String" />
        <method name="Read(System.Char[], System.Int32, System.Int32)" argnames="buffer, index, count" returntype="System.Int32" />
        <method name="Read()" argnames="" returntype="System.Int32" />
        <method name="Peek()" argnames="" returntype="System.Int32" />
        <method name="Dispose(System.Boolean)" argnames="disposing" returntype="System.Void" />
        <method name="Close()" argnames="" returntype="System.Void" />
        <method name="Synchronized(System.IO.TextReader)" argnames="reader" returntype="System.IO.TextReader" />
    </class>
    <class name="StreamReader" namespace="System.IO">
        <constructor name="StreamReader(System.IO.Stream)" argnames="stream" />
        <constructor name="StreamReader(System.IO.Stream, System.Boolean)" argnames="stream, detectEncodingFromByteOrderMarks" />
        <constructor name="StreamReader(System.IO.Stream, System.Text.Encoding)" argnames="stream, encoding" />
        <constructor name="StreamReader(System.IO.Stream, System.Text.Encoding, System.Boolean)" argnames="stream, encoding, detectEncodingFromByteOrderMarks" />
        <constructor name="StreamReader(System.IO.Stream, System.Text.Encoding, System.Boolean, System.Int32)" argnames="stream, encoding, detectEncodingFromByteOrderMarks, bufferSize" />
        <constructor name="StreamReader(System.String)" argnames="path" />
        <constructor name="StreamReader(System.String, System.Boolean)" argnames="path, detectEncodingFromByteOrderMarks" />
        <constructor name="StreamReader(System.String, System.Text.Encoding)" argnames="path, encoding" />
        <constructor name="StreamReader(System.String, System.Text.Encoding, System.Boolean)" argnames="path, encoding, detectEncodingFromByteOrderMarks" />
        <constructor name="StreamReader(System.String, System.Text.Encoding, System.Boolean, System.Int32)" argnames="path, encoding, detectEncodingFromByteOrderMarks, bufferSize" />
        <field name="Null" />
        <property name="CurrentEncoding" propertytype="System.Text.Encoding" />
        <property name="BaseStream" propertytype="System.IO.Stream" />
        <method name="ReadLine()" argnames="" returntype="System.String" />
        <method name="ReadToEnd()" argnames="" returntype="System.String" />
        <method name="Read(System.Char[], System.Int32, System.Int32)" argnames="buffer, index, count" returntype="System.Int32" />
        <method name="Read()" argnames="" returntype="System.Int32" />
        <method name="Peek()" argnames="" returntype="System.Int32" />
        <method name="Dispose(System.Boolean)" argnames="disposing" returntype="System.Void" />
        <method name="Close()" argnames="" returntype="System.Void" />
        <method name="DiscardBufferedData()" argnames="" returntype="System.Void" />
    </class>
    <class name="TextWriter" namespace="System.IO">
        <constructor name="TextWriter()" argnames="" />
        <constructor name="TextWriter(System.IFormatProvider)" argnames="formatProvider" />
        <field name="CoreNewLine" />
        <field name="Null" />
        <property name="FormatProvider" propertytype="System.IFormatProvider" />
        <property name="Encoding" propertytype="System.Text.Encoding" />
        <property name="NewLine" propertytype="System.String" />
        <method name="WriteLine(System.String, System.Object[])" argnames="format, arg" returntype="System.Void" />
        <method name="WriteLine(System.String, System.Object, System.Object, System.Object)" argnames="format, arg0, arg1, arg2" returntype="System.Void" />
        <method name="WriteLine(System.String, System.Object, System.Object)" argnames="format, arg0, arg1" returntype="System.Void" />
        <method name="WriteLine(System.String, System.Object)" argnames="format, arg0" returntype="System.Void" />
        <method name="WriteLine(System.Object)" argnames="value" returntype="System.Void" />
        <method name="WriteLine(System.String)" argnames="value" returntype="System.Void" />
        <method name="WriteLine(System.Decimal)" argnames="value" returntype="System.Void" />
        <method name="WriteLine(System.Double)" argnames="value" returntype="System.Void" />
        <method name="WriteLine(System.Single)" argnames="value" returntype="System.Void" />
        <method name="WriteLine(System.UInt64)" argnames="value" returntype="System.Void" />
        <method name="WriteLine(System.Int64)" argnames="value" returntype="System.Void" />
        <method name="WriteLine(System.UInt32)" argnames="value" returntype="System.Void" />
        <method name="WriteLine(System.Int32)" argnames="value" returntype="System.Void" />
        <method name="WriteLine(System.Boolean)" argnames="value" returntype="System.Void" />
        <method name="WriteLine(System.Char[], System.Int32, System.Int32)" argnames="buffer, index, count" returntype="System.Void" />
        <method name="WriteLine(System.Char[])" argnames="buffer" returntype="System.Void" />
        <method name="WriteLine(System.Char)" argnames="value" returntype="System.Void" />
        <method name="WriteLine()" argnames="" returntype="System.Void" />
        <method name="Write(System.String, System.Object[])" argnames="format, arg" returntype="System.Void" />
        <method name="Write(System.String, System.Object, System.Object, System.Object)" argnames="format, arg0, arg1, arg2" returntype="System.Void" />
        <method name="Write(System.String, System.Object, System.Object)" argnames="format, arg0, arg1" returntype="System.Void" />
        <method name="Write(System.String, System.Object)" argnames="format, arg0" returntype="System.Void" />
        <method name="Write(System.Object)" argnames="value" returntype="System.Void" />
        <method name="Write(System.String)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Decimal)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Double)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Single)" argnames="value" returntype="System.Void" />
        <method name="Write(System.UInt64)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Int64)" argnames="value" returntype="System.Void" />
        <method name="Write(System.UInt32)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Int32)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Boolean)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Char[], System.Int32, System.Int32)" argnames="buffer, index, count" returntype="System.Void" />
        <method name="Write(System.Char[])" argnames="buffer" returntype="System.Void" />
        <method name="Write(System.Char)" argnames="value" returntype="System.Void" />
        <method name="Flush()" argnames="" returntype="System.Void" />
        <method name="Dispose(System.Boolean)" argnames="disposing" returntype="System.Void" />
        <method name="Close()" argnames="" returntype="System.Void" />
        <method name="Synchronized(System.IO.TextWriter)" argnames="writer" returntype="System.IO.TextWriter" />
    </class>
    <class name="StreamWriter" namespace="System.IO">
        <constructor name="StreamWriter(System.IO.Stream)" argnames="stream" />
        <constructor name="StreamWriter(System.IO.Stream, System.Text.Encoding)" argnames="stream, encoding" />
        <constructor name="StreamWriter(System.IO.Stream, System.Text.Encoding, System.Int32)" argnames="stream, encoding, bufferSize" />
        <constructor name="StreamWriter(System.String)" argnames="path" />
        <constructor name="StreamWriter(System.String, System.Boolean)" argnames="path, append" />
        <constructor name="StreamWriter(System.String, System.Boolean, System.Text.Encoding)" argnames="path, append, encoding" />
        <constructor name="StreamWriter(System.String, System.Boolean, System.Text.Encoding, System.Int32)" argnames="path, append, encoding, bufferSize" />
        <field name="Null" />
        <property name="AutoFlush" propertytype="System.Boolean" />
        <property name="BaseStream" propertytype="System.IO.Stream" />
        <property name="Closable" propertytype="System.Boolean" />
        <property name="Encoding" propertytype="System.Text.Encoding" />
        <method name="Write(System.String)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Char[], System.Int32, System.Int32)" argnames="buffer, index, count" returntype="System.Void" />
        <method name="Write(System.Char[])" argnames="buffer" returntype="System.Void" />
        <method name="Write(System.Char)" argnames="value" returntype="System.Void" />
        <method name="Flush()" argnames="" returntype="System.Void" />
        <method name="Dispose(System.Boolean)" argnames="disposing" returntype="System.Void" />
        <method name="Close()" argnames="" returntype="System.Void" />
        <method name="Finalize()" argnames="" returntype="System.Void" />
    </class>
    <class name="StringReader" namespace="System.IO">
        <constructor name="StringReader(System.String)" argnames="s" />
        <method name="ReadLine()" argnames="" returntype="System.String" />
        <method name="ReadToEnd()" argnames="" returntype="System.String" />
        <method name="Read(System.Char[], System.Int32, System.Int32)" argnames="buffer, index, count" returntype="System.Int32" />
        <method name="Read()" argnames="" returntype="System.Int32" />
        <method name="Peek()" argnames="" returntype="System.Int32" />
        <method name="Dispose(System.Boolean)" argnames="disposing" returntype="System.Void" />
        <method name="Close()" argnames="" returntype="System.Void" />
    </class>
    <class name="StringWriter" namespace="System.IO">
        <constructor name="StringWriter()" argnames="" />
        <constructor name="StringWriter(System.IFormatProvider)" argnames="formatProvider" />
        <constructor name="StringWriter(System.Text.StringBuilder)" argnames="sb" />
        <constructor name="StringWriter(System.Text.StringBuilder, System.IFormatProvider)" argnames="sb, formatProvider" />
        <property name="Encoding" propertytype="System.Text.Encoding" />
        <method name="GetStringBuilder()" argnames="" returntype="System.Text.StringBuilder" />
        <method name="Write(System.String)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Char[], System.Int32, System.Int32)" argnames="buffer, index, count" returntype="System.Void" />
        <method name="Write(System.Char)" argnames="value" returntype="System.Void" />
        <method name="Dispose(System.Boolean)" argnames="disposing" returntype="System.Void" />
        <method name="Close()" argnames="" returntype="System.Void" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </class>
    <enum name="FileAccess" namespace="System.IO">
        <field name="Read" />
        <field name="Write" />
        <field name="ReadWrite" />
    </enum>
    <enum name="FileMode" namespace="System.IO">
        <field name="CreateNew" />
        <field name="Create" />
        <field name="Open" />
        <field name="OpenOrCreate" />
        <field name="Truncate" />
        <field name="Append" />
    </enum>
    <enum name="FileShare" namespace="System.IO">
        <field name="None" />
        <field name="Read" />
        <field name="Write" />
        <field name="ReadWrite" />
        <field name="Inheritable" />
    </enum>
    <enum name="FileAttributes" namespace="System.IO">
        <field name="ReadOnly" />
        <field name="Hidden" />
        <field name="System" />
        <field name="Directory" />
        <field name="Archive" />
        <field name="Device" />
        <field name="Normal" />
        <field name="Temporary" />
        <field name="SparseFile" />
        <field name="ReparsePoint" />
        <field name="Compressed" />
        <field name="Offline" />
        <field name="NotContentIndexed" />
        <field name="Encrypted" />
    </enum>
    <enum name="SeekOrigin" namespace="System.IO">
        <field name="Begin" />
        <field name="Current" />
        <field name="End" />
    </enum>
    <class name="AllMembershipCondition" namespace="System.Security.Policy">
        <constructor name="AllMembershipCondition()" argnames="" />
        <method name="FromXml(System.Security.SecurityElement, System.Security.Policy.PolicyLevel)" argnames="e, level" returntype="System.Void" />
        <method name="ToXml(System.Security.Policy.PolicyLevel)" argnames="level" returntype="System.Security.SecurityElement" />
        <method name="FromXml(System.Security.SecurityElement)" argnames="e" returntype="System.Void" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
        <method name="Copy()" argnames="" returntype="System.Security.Policy.IMembershipCondition" />
        <method name="Check(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Boolean" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="o" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </class>
    <class name="ApplicationDirectory" namespace="System.Security.Policy">
        <constructor name="ApplicationDirectory(System.String)" argnames="name" />
        <property name="Directory" propertytype="System.String" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="o" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Copy()" argnames="" returntype="System.Object" />
    </class>
    <class name="ApplicationDirectoryMembershipCondition" namespace="System.Security.Policy">
        <constructor name="ApplicationDirectoryMembershipCondition()" argnames="" />
        <method name="FromXml(System.Security.SecurityElement, System.Security.Policy.PolicyLevel)" argnames="e, level" returntype="System.Void" />
        <method name="ToXml(System.Security.Policy.PolicyLevel)" argnames="level" returntype="System.Security.SecurityElement" />
        <method name="FromXml(System.Security.SecurityElement)" argnames="e" returntype="System.Void" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
        <method name="Copy()" argnames="" returntype="System.Security.Policy.IMembershipCondition" />
        <method name="Check(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Boolean" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="o" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </class>
    <class name="CodeGroup" namespace="System.Security.Policy">
        <constructor name="CodeGroup(System.Security.Policy.IMembershipCondition, System.Security.Policy.PolicyStatement)" argnames="membershipCondition, policy" />
        <property name="Children" propertytype="System.Collections.IList" />
        <property name="MembershipCondition" propertytype="System.Security.Policy.IMembershipCondition" />
        <property name="PolicyStatement" propertytype="System.Security.Policy.PolicyStatement" />
        <property name="Name" propertytype="System.String" />
        <property name="Description" propertytype="System.String" />
        <property name="PermissionSetName" propertytype="System.String" />
        <property name="AttributeString" propertytype="System.String" />
        <property name="MergeLogic" propertytype="System.String" />
        <method name="ParseXml(System.Security.SecurityElement, System.Security.Policy.PolicyLevel)" argnames="e, level" returntype="System.Void" />
        <method name="CreateXml(System.Security.SecurityElement, System.Security.Policy.PolicyLevel)" argnames="element, level" returntype="System.Void" />
        <method name="Copy()" argnames="" returntype="System.Security.Policy.CodeGroup" />
        <method name="ResolveMatchingCodeGroups(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Security.Policy.CodeGroup" />
        <method name="Resolve(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Security.Policy.PolicyStatement" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="o" returntype="System.Boolean" />
        <method name="AddChild(System.Security.Policy.CodeGroup)" argnames="group" returntype="System.Void" />
        <method name="RemoveChild(System.Security.Policy.CodeGroup)" argnames="group" returntype="System.Void" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
        <method name="FromXml(System.Security.SecurityElement)" argnames="e" returntype="System.Void" />
        <method name="ToXml(System.Security.Policy.PolicyLevel)" argnames="level" returntype="System.Security.SecurityElement" />
        <method name="FromXml(System.Security.SecurityElement, System.Security.Policy.PolicyLevel)" argnames="e, level" returntype="System.Void" />
        <method name="Equals(System.Security.Policy.CodeGroup, System.Boolean)" argnames="cg, compareChildren" returntype="System.Boolean" />
    </class>
    <class name="Evidence" namespace="System.Security.Policy">
        <constructor name="Evidence()" argnames="" />
        <constructor name="Evidence(System.Security.Policy.Evidence)" argnames="evidence" />
        <constructor name="Evidence(System.Object[], System.Object[])" argnames="hostEvidence, assemblyEvidence" />
        <property name="Locked" propertytype="System.Boolean" />
        <property name="Count" propertytype="System.Int32" />
        <property name="SyncRoot" propertytype="System.Object" />
        <property name="IsSynchronized" propertytype="System.Boolean" />
        <property name="IsReadOnly" propertytype="System.Boolean" />
        <method name="GetEnumerator()" argnames="" returntype="System.Collections.IEnumerator" />
        <method name="CopyTo(System.Array, System.Int32)" argnames="array, index" returntype="System.Void" />
        <method name="AddHost(System.Object)" argnames="id" returntype="System.Void" />
        <method name="AddAssembly(System.Object)" argnames="id" returntype="System.Void" />
        <method name="Merge(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Void" />
        <method name="GetHostEnumerator()" argnames="" returntype="System.Collections.IEnumerator" />
        <method name="GetAssemblyEnumerator()" argnames="" returntype="System.Collections.IEnumerator" />
    </class>
    <class name="FileCodeGroup" namespace="System.Security.Policy">
        <constructor name="FileCodeGroup(System.Security.Policy.IMembershipCondition, System.Security.Permissions.FileIOPermissionAccess)" argnames="membershipCondition, access" />
        <property name="MergeLogic" propertytype="System.String" />
        <property name="PermissionSetName" propertytype="System.String" />
        <property name="AttributeString" propertytype="System.String" />
        <method name="ParseXml(System.Security.SecurityElement, System.Security.Policy.PolicyLevel)" argnames="e, level" returntype="System.Void" />
        <method name="CreateXml(System.Security.SecurityElement, System.Security.Policy.PolicyLevel)" argnames="element, level" returntype="System.Void" />
        <method name="Copy()" argnames="" returntype="System.Security.Policy.CodeGroup" />
        <method name="ResolveMatchingCodeGroups(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Security.Policy.CodeGroup" />
        <method name="Resolve(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Security.Policy.PolicyStatement" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="o" returntype="System.Boolean" />
    </class>
    <class name="FirstMatchCodeGroup" namespace="System.Security.Policy">
        <constructor name="FirstMatchCodeGroup(System.Security.Policy.IMembershipCondition, System.Security.Policy.PolicyStatement)" argnames="membershipCondition, policy" />
        <property name="MergeLogic" propertytype="System.String" />
        <method name="Copy()" argnames="" returntype="System.Security.Policy.CodeGroup" />
        <method name="ResolveMatchingCodeGroups(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Security.Policy.CodeGroup" />
        <method name="Resolve(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Security.Policy.PolicyStatement" />
    </class>
    <class name="Hash" namespace="System.Security.Policy">
        <constructor name="Hash(System.Reflection.Assembly)" argnames="assembly" />
        <property name="SHA1" propertytype="System.Byte[]" />
        <property name="MD5" propertytype="System.Byte[]" />
        <property name="HasBeenAccessed" propertytype="System.Boolean" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="GenerateHash(System.Security.Cryptography.HashAlgorithm)" argnames="hashAlg" returntype="System.Byte[]" />
    </class>
    <class name="HashMembershipCondition" namespace="System.Security.Policy">
        <constructor name="HashMembershipCondition(System.Security.Cryptography.HashAlgorithm, System.Byte[])" argnames="hashAlg, value" />
        <property name="HashAlgorithm" propertytype="System.Security.Cryptography.HashAlgorithm" />
        <property name="HashValue" propertytype="System.Byte[]" />
        <method name="FromXml(System.Security.SecurityElement, System.Security.Policy.PolicyLevel)" argnames="e, level" returntype="System.Void" />
        <method name="ToXml(System.Security.Policy.PolicyLevel)" argnames="level" returntype="System.Security.SecurityElement" />
        <method name="FromXml(System.Security.SecurityElement)" argnames="e" returntype="System.Void" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
        <method name="Copy()" argnames="" returntype="System.Security.Policy.IMembershipCondition" />
        <method name="Check(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Boolean" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="o" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </class>
    <class name="NetCodeGroup" namespace="System.Security.Policy">
        <constructor name="NetCodeGroup(System.Security.Policy.IMembershipCondition)" argnames="membershipCondition" />
        <property name="MergeLogic" propertytype="System.String" />
        <property name="PermissionSetName" propertytype="System.String" />
        <property name="AttributeString" propertytype="System.String" />
        <method name="Copy()" argnames="" returntype="System.Security.Policy.CodeGroup" />
        <method name="ResolveMatchingCodeGroups(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Security.Policy.CodeGroup" />
        <method name="Resolve(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Security.Policy.PolicyStatement" />
    </class>
    <class name="PermissionRequestEvidence" namespace="System.Security.Policy">
        <constructor name="PermissionRequestEvidence(System.Security.PermissionSet, System.Security.PermissionSet, System.Security.PermissionSet)" argnames="request, optional, denied" />
        <property name="RequestedPermissions" propertytype="System.Security.PermissionSet" />
        <property name="OptionalPermissions" propertytype="System.Security.PermissionSet" />
        <property name="DeniedPermissions" propertytype="System.Security.PermissionSet" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Copy()" argnames="" returntype="System.Security.Policy.PermissionRequestEvidence" />
    </class>
    <class name="PolicyException" namespace="System.Security.Policy">
        <constructor name="PolicyException()" argnames="" />
        <constructor name="PolicyException(System.String)" argnames="message" />
        <constructor name="PolicyException(System.String, System.Exception)" argnames="message, exception" />
        <constructor name="PolicyException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="PolicyLevel" namespace="System.Security.Policy">
        <property name="Label" propertytype="System.String" />
        <property name="ConfigId" propertytype="System.Security.Util.ConfigId" />
        <property name="ThrowOnLoadError" propertytype="System.Boolean" />
        <property name="Loaded" propertytype="System.Boolean" />
        <property name="Encoding" propertytype="System.Text.Encoding" />
        <property name="StoreLocation" propertytype="System.String" />
        <property name="RootCodeGroup" propertytype="System.Security.Policy.CodeGroup" />
        <property name="NamedPermissionSets" propertytype="System.Collections.IList" />
        <property name="FullTrustAssemblies" propertytype="System.Collections.IList" />
        <method name="CreateAppDomainLevel()" argnames="" returntype="System.Security.Policy.PolicyLevel" />
        <method name="AddFullTrustAssembly(System.Security.Policy.StrongName)" argnames="sn" returntype="System.Void" />
        <method name="AddFullTrustAssembly(System.Security.Policy.StrongNameMembershipCondition)" argnames="snMC" returntype="System.Void" />
        <method name="RemoveFullTrustAssembly(System.Security.Policy.StrongName)" argnames="sn" returntype="System.Void" />
        <method name="RemoveFullTrustAssembly(System.Security.Policy.StrongNameMembershipCondition)" argnames="snMC" returntype="System.Void" />
        <method name="Recover()" argnames="" returntype="System.Void" />
        <method name="Reset()" argnames="" returntype="System.Void" />
        <method name="AddNamedPermissionSet(System.Security.NamedPermissionSet)" argnames="permSet" returntype="System.Void" />
        <method name="RemoveNamedPermissionSet(System.Security.NamedPermissionSet)" argnames="permSet" returntype="System.Security.NamedPermissionSet" />
        <method name="RemoveNamedPermissionSet(System.String)" argnames="name" returntype="System.Security.NamedPermissionSet" />
        <method name="ChangeNamedPermissionSet(System.String, System.Security.PermissionSet)" argnames="name, pSet" returntype="System.Security.NamedPermissionSet" />
        <method name="GetNamedPermissionSet(System.String)" argnames="name" returntype="System.Security.NamedPermissionSet" />
        <method name="Resolve(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Security.Policy.PolicyStatement" />
        <method name="ResolveMatchingCodeGroups(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Security.Policy.CodeGroup" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
        <method name="FromXml(System.Security.SecurityElement)" argnames="e" returntype="System.Void" />
    </class>
    <class name="PolicyStatement" namespace="System.Security.Policy">
        <constructor name="PolicyStatement(System.Security.PermissionSet)" argnames="permSet" />
        <constructor name="PolicyStatement(System.Security.PermissionSet, System.Security.Policy.PolicyStatementAttribute)" argnames="permSet, attributes" />
        <property name="PermissionSet" propertytype="System.Security.PermissionSet" />
        <property name="Attributes" propertytype="System.Security.Policy.PolicyStatementAttribute" />
        <property name="AttributeString" propertytype="System.String" />
        <method name="FromXml(System.Security.SecurityElement, System.Security.Policy.PolicyLevel)" argnames="et, level" returntype="System.Void" />
        <method name="ToXml(System.Security.Policy.PolicyLevel)" argnames="level" returntype="System.Security.SecurityElement" />
        <method name="FromXml(System.Security.SecurityElement)" argnames="et" returntype="System.Void" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
        <method name="Copy()" argnames="" returntype="System.Security.Policy.PolicyStatement" />
    </class>
    <class name="Publisher" namespace="System.Security.Policy">
        <constructor name="Publisher(System.Security.Cryptography.X509Certificates.X509Certificate)" argnames="cert" />
        <property name="Certificate" propertytype="System.Security.Cryptography.X509Certificates.X509Certificate" />
        <method name="CreateIdentityPermission(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Security.IPermission" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="o" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Copy()" argnames="" returntype="System.Object" />
    </class>
    <class name="PublisherMembershipCondition" namespace="System.Security.Policy">
        <constructor name="PublisherMembershipCondition(System.Security.Cryptography.X509Certificates.X509Certificate)" argnames="certificate" />
        <property name="Certificate" propertytype="System.Security.Cryptography.X509Certificates.X509Certificate" />
        <method name="FromXml(System.Security.SecurityElement, System.Security.Policy.PolicyLevel)" argnames="e, level" returntype="System.Void" />
        <method name="ToXml(System.Security.Policy.PolicyLevel)" argnames="level" returntype="System.Security.SecurityElement" />
        <method name="FromXml(System.Security.SecurityElement)" argnames="e" returntype="System.Void" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
        <method name="Copy()" argnames="" returntype="System.Security.Policy.IMembershipCondition" />
        <method name="Check(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Boolean" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="o" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </class>
    <class name="Site" namespace="System.Security.Policy">
        <constructor name="Site(System.String)" argnames="name" />
        <property name="Name" propertytype="System.String" />
        <method name="CreateIdentityPermission(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Security.IPermission" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="o" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="CreateFromUrl(System.String)" argnames="url" returntype="System.Security.Policy.Site" />
        <method name="Copy()" argnames="" returntype="System.Object" />
    </class>
    <class name="SiteMembershipCondition" namespace="System.Security.Policy">
        <constructor name="SiteMembershipCondition(System.String)" argnames="site" />
        <property name="Site" propertytype="System.String" />
        <method name="FromXml(System.Security.SecurityElement, System.Security.Policy.PolicyLevel)" argnames="e, level" returntype="System.Void" />
        <method name="ToXml(System.Security.Policy.PolicyLevel)" argnames="level" returntype="System.Security.SecurityElement" />
        <method name="FromXml(System.Security.SecurityElement)" argnames="e" returntype="System.Void" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
        <method name="Copy()" argnames="" returntype="System.Security.Policy.IMembershipCondition" />
        <method name="Check(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Boolean" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="o" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </class>
    <class name="StrongName" namespace="System.Security.Policy">
        <constructor name="StrongName(System.Security.Permissions.StrongNamePublicKeyBlob, System.String, System.Version)" argnames="blob, name, version" />
        <property name="PublicKey" propertytype="System.Security.Permissions.StrongNamePublicKeyBlob" />
        <property name="Name" propertytype="System.String" />
        <property name="Version" propertytype="System.Version" />
        <method name="CreateIdentityPermission(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Security.IPermission" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="o" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Copy()" argnames="" returntype="System.Object" />
    </class>
    <class name="StrongNameMembershipCondition" namespace="System.Security.Policy">
        <constructor name="StrongNameMembershipCondition(System.Security.Permissions.StrongNamePublicKeyBlob, System.String, System.Version)" argnames="blob, name, version" />
        <property name="PublicKey" propertytype="System.Security.Permissions.StrongNamePublicKeyBlob" />
        <property name="Name" propertytype="System.String" />
        <property name="Version" propertytype="System.Version" />
        <method name="FromXml(System.Security.SecurityElement, System.Security.Policy.PolicyLevel)" argnames="e, level" returntype="System.Void" />
        <method name="ToXml(System.Security.Policy.PolicyLevel)" argnames="level" returntype="System.Security.SecurityElement" />
        <method name="FromXml(System.Security.SecurityElement)" argnames="e" returntype="System.Void" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
        <method name="Copy()" argnames="" returntype="System.Security.Policy.IMembershipCondition" />
        <method name="Check(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Boolean" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="o" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </class>
    <class name="UnionCodeGroup" namespace="System.Security.Policy">
        <constructor name="UnionCodeGroup(System.Security.Policy.IMembershipCondition, System.Security.Policy.PolicyStatement)" argnames="membershipCondition, policy" />
        <property name="MergeLogic" propertytype="System.String" />
        <method name="Copy()" argnames="" returntype="System.Security.Policy.CodeGroup" />
        <method name="ResolveMatchingCodeGroups(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Security.Policy.CodeGroup" />
        <method name="Resolve(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Security.Policy.PolicyStatement" />
    </class>
    <class name="Url" namespace="System.Security.Policy">
        <constructor name="Url(System.String)" argnames="name" />
        <property name="Value" propertytype="System.String" />
        <method name="CreateIdentityPermission(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Security.IPermission" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="o" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Copy()" argnames="" returntype="System.Object" />
    </class>
    <class name="UrlMembershipCondition" namespace="System.Security.Policy">
        <constructor name="UrlMembershipCondition(System.String)" argnames="url" />
        <property name="Url" propertytype="System.String" />
        <method name="FromXml(System.Security.SecurityElement, System.Security.Policy.PolicyLevel)" argnames="e, level" returntype="System.Void" />
        <method name="ToXml(System.Security.Policy.PolicyLevel)" argnames="level" returntype="System.Security.SecurityElement" />
        <method name="FromXml(System.Security.SecurityElement)" argnames="e" returntype="System.Void" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
        <method name="Copy()" argnames="" returntype="System.Security.Policy.IMembershipCondition" />
        <method name="Check(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Boolean" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="o" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </class>
    <class name="Zone" namespace="System.Security.Policy">
        <constructor name="Zone(System.Security.SecurityZone)" argnames="zone" />
        <property name="SecurityZone" propertytype="System.Security.SecurityZone" />
        <method name="CreateIdentityPermission(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Security.IPermission" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="o" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="CreateFromUrl(System.String)" argnames="url" returntype="System.Security.Policy.Zone" />
        <method name="Copy()" argnames="" returntype="System.Object" />
    </class>
    <class name="ZoneMembershipCondition" namespace="System.Security.Policy">
        <constructor name="ZoneMembershipCondition(System.Security.SecurityZone)" argnames="zone" />
        <property name="SecurityZone" propertytype="System.Security.SecurityZone" />
        <method name="FromXml(System.Security.SecurityElement, System.Security.Policy.PolicyLevel)" argnames="e, level" returntype="System.Void" />
        <method name="ToXml(System.Security.Policy.PolicyLevel)" argnames="level" returntype="System.Security.SecurityElement" />
        <method name="FromXml(System.Security.SecurityElement)" argnames="e" returntype="System.Void" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
        <method name="Copy()" argnames="" returntype="System.Security.Policy.IMembershipCondition" />
        <method name="Check(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Boolean" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="o" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </class>
    <interface name="IMembershipCondition" namespace="System.Security.Policy">
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Copy()" argnames="" returntype="System.Security.Policy.IMembershipCondition" />
        <method name="Check(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Boolean" />
    </interface>
    <interface name="IIdentityPermissionFactory" namespace="System.Security.Policy">
        <method name="CreateIdentityPermission(System.Security.Policy.Evidence)" argnames="evidence" returntype="System.Security.IPermission" />
    </interface>
    <enum name="PolicyStatementAttribute" namespace="System.Security.Policy">
        <field name="Nothing" />
        <field name="Exclusive" />
        <field name="LevelFinal" />
        <field name="All" />
    </enum>
    <class name="GenericIdentity" namespace="System.Security.Principal">
        <constructor name="GenericIdentity(System.String)" argnames="name" />
        <constructor name="GenericIdentity(System.String, System.String)" argnames="name, type" />
        <property name="Name" propertytype="System.String" />
        <property name="AuthenticationType" propertytype="System.String" />
        <property name="IsAuthenticated" propertytype="System.Boolean" />
    </class>
    <class name="GenericPrincipal" namespace="System.Security.Principal">
        <constructor name="GenericPrincipal(System.Security.Principal.IIdentity, System.String[])" argnames="identity, roles" />
        <property name="Identity" propertytype="System.Security.Principal.IIdentity" />
        <method name="IsInRole(System.String)" argnames="role" returntype="System.Boolean" />
    </class>
    <class name="WindowsIdentity" namespace="System.Security.Principal">
        <constructor name="WindowsIdentity(System.IntPtr)" argnames="userToken" />
        <constructor name="WindowsIdentity(System.IntPtr, System.String)" argnames="userToken, type" />
        <constructor name="WindowsIdentity(System.IntPtr, System.String, System.Security.Principal.WindowsAccountType)" argnames="userToken, type, acctType" />
        <constructor name="WindowsIdentity(System.IntPtr, System.String, System.Security.Principal.WindowsAccountType, System.Boolean)" argnames="userToken, type, acctType, isAuthenticated" />
        <property name="Name" propertytype="System.String" />
        <property name="AuthenticationType" propertytype="System.String" />
        <property name="IsAuthenticated" propertytype="System.Boolean" />
        <property name="Token" propertytype="System.IntPtr" />
        <property name="IsGuest" propertytype="System.Boolean" />
        <property name="IsSystem" propertytype="System.Boolean" />
        <property name="IsAnonymous" propertytype="System.Boolean" />
        <method name="Impersonate()" argnames="" returntype="System.Security.Principal.WindowsImpersonationContext" />
        <method name="Finalize()" argnames="" returntype="System.Void" />
        <method name="GetCurrent()" argnames="" returntype="System.Security.Principal.WindowsIdentity" />
        <method name="GetAnonymous()" argnames="" returntype="System.Security.Principal.WindowsIdentity" />
        <method name="Impersonate(System.IntPtr)" argnames="userToken" returntype="System.Security.Principal.WindowsImpersonationContext" />
    </class>
    <class name="WindowsImpersonationContext" namespace="System.Security.Principal">
        <method name="Finalize()" argnames="" returntype="System.Void" />
        <method name="Undo()" argnames="" returntype="System.Void" />
    </class>
    <class name="WindowsPrincipal" namespace="System.Security.Principal">
        <constructor name="WindowsPrincipal(System.Security.Principal.WindowsIdentity)" argnames="ntIdentity" />
        <property name="Identity" propertytype="System.Security.Principal.IIdentity" />
        <method name="IsInRole(System.String)" argnames="role" returntype="System.Boolean" />
        <method name="IsInRole(System.Security.Principal.WindowsBuiltInRole)" argnames="role" returntype="System.Boolean" />
        <method name="IsInRole(System.Int32)" argnames="rid" returntype="System.Boolean" />
    </class>
    <interface name="IIdentity" namespace="System.Security.Principal">
        <property name="Name" propertytype="System.String" />
        <property name="AuthenticationType" propertytype="System.String" />
        <property name="IsAuthenticated" propertytype="System.Boolean" />
    </interface>
    <interface name="IPrincipal" namespace="System.Security.Principal">
        <property name="Identity" propertytype="System.Security.Principal.IIdentity" />
        <method name="IsInRole(System.String)" argnames="role" returntype="System.Boolean" />
    </interface>
    <enum name="PrincipalPolicy" namespace="System.Security.Principal">
        <field name="UnauthenticatedPrincipal" />
        <field name="NoPrincipal" />
        <field name="WindowsPrincipal" />
    </enum>
    <enum name="WindowsAccountType" namespace="System.Security.Principal">
        <field name="Normal" />
        <field name="Guest" />
        <field name="System" />
        <field name="Anonymous" />
    </enum>
    <enum name="WindowsBuiltInRole" namespace="System.Security.Principal">
        <field name="Administrator" />
        <field name="User" />
        <field name="Guest" />
        <field name="PowerUser" />
        <field name="AccountOperator" />
        <field name="SystemOperator" />
        <field name="PrintOperator" />
        <field name="BackupOperator" />
        <field name="Replicator" />
    </enum>
    <class name="DispIdAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="DispIdAttribute(System.Int32)" argnames="dispId" />
        <property name="Value" propertytype="System.Int32" />
    </class>
    <class name="InterfaceTypeAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="InterfaceTypeAttribute(System.Runtime.InteropServices.ComInterfaceType)" argnames="interfaceType" />
        <constructor name="InterfaceTypeAttribute(System.Int16)" argnames="interfaceType" />
        <property name="Value" propertytype="System.Runtime.InteropServices.ComInterfaceType" />
    </class>
    <class name="ClassInterfaceAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="ClassInterfaceAttribute(System.Runtime.InteropServices.ClassInterfaceType)" argnames="classInterfaceType" />
        <constructor name="ClassInterfaceAttribute(System.Int16)" argnames="classInterfaceType" />
        <property name="Value" propertytype="System.Runtime.InteropServices.ClassInterfaceType" />
    </class>
    <class name="ComVisibleAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="ComVisibleAttribute(System.Boolean)" argnames="visibility" />
        <property name="Value" propertytype="System.Boolean" />
    </class>
    <class name="LCIDConversionAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="LCIDConversionAttribute(System.Int32)" argnames="lcid" />
        <property name="Value" propertytype="System.Int32" />
    </class>
    <class name="ComRegisterFunctionAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="ComRegisterFunctionAttribute()" argnames="" />
    </class>
    <class name="ComUnregisterFunctionAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="ComUnregisterFunctionAttribute()" argnames="" />
    </class>
    <class name="ProgIdAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="ProgIdAttribute(System.String)" argnames="progId" />
        <property name="Value" propertytype="System.String" />
    </class>
    <class name="ImportedFromTypeLibAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="ImportedFromTypeLibAttribute(System.String)" argnames="tlbFile" />
        <property name="Value" propertytype="System.String" />
    </class>
    <class name="IDispatchImplAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="IDispatchImplAttribute(System.Runtime.InteropServices.IDispatchImplType)" argnames="implType" />
        <constructor name="IDispatchImplAttribute(System.Int16)" argnames="implType" />
        <property name="Value" propertytype="System.Runtime.InteropServices.IDispatchImplType" />
    </class>
    <class name="ComSourceInterfacesAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="ComSourceInterfacesAttribute(System.String)" argnames="sourceInterfaces" />
        <constructor name="ComSourceInterfacesAttribute(System.Type)" argnames="sourceInterface" />
        <constructor name="ComSourceInterfacesAttribute(System.Type, System.Type)" argnames="sourceInterface1, sourceInterface2" />
        <constructor name="ComSourceInterfacesAttribute(System.Type, System.Type, System.Type)" argnames="sourceInterface1, sourceInterface2, sourceInterface3" />
        <constructor name="ComSourceInterfacesAttribute(System.Type, System.Type, System.Type, System.Type)" argnames="sourceInterface1, sourceInterface2, sourceInterface3, sourceInterface4" />
        <property name="Value" propertytype="System.String" />
    </class>
    <class name="ComConversionLossAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="ComConversionLossAttribute()" argnames="" />
    </class>
    <class name="TypeLibTypeAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="TypeLibTypeAttribute(System.Runtime.InteropServices.TypeLibTypeFlags)" argnames="flags" />
        <constructor name="TypeLibTypeAttribute(System.Int16)" argnames="flags" />
        <property name="Value" propertytype="System.Runtime.InteropServices.TypeLibTypeFlags" />
    </class>
    <class name="TypeLibFuncAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="TypeLibFuncAttribute(System.Runtime.InteropServices.TypeLibFuncFlags)" argnames="flags" />
        <constructor name="TypeLibFuncAttribute(System.Int16)" argnames="flags" />
        <property name="Value" propertytype="System.Runtime.InteropServices.TypeLibFuncFlags" />
    </class>
    <class name="TypeLibVarAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="TypeLibVarAttribute(System.Runtime.InteropServices.TypeLibVarFlags)" argnames="flags" />
        <constructor name="TypeLibVarAttribute(System.Int16)" argnames="flags" />
        <property name="Value" propertytype="System.Runtime.InteropServices.TypeLibVarFlags" />
    </class>
    <class name="MarshalAsAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType)" argnames="unmanagedType" />
        <constructor name="MarshalAsAttribute(System.Int16)" argnames="unmanagedType" />
        <field name="SafeArraySubType" />
        <field name="SafeArrayUserDefinedSubType" />
        <field name="ArraySubType" />
        <field name="SizeParamIndex" />
        <field name="SizeConst" />
        <field name="MarshalType" />
        <field name="MarshalTypeRef" />
        <field name="MarshalCookie" />
        <property name="Value" propertytype="System.Runtime.InteropServices.UnmanagedType" />
    </class>
    <class name="ComImportAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="ComImportAttribute()" argnames="" />
    </class>
    <class name="GuidAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="GuidAttribute(System.String)" argnames="guid" />
        <property name="Value" propertytype="System.String" />
    </class>
    <class name="PreserveSigAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="PreserveSigAttribute()" argnames="" />
    </class>
    <class name="InAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="InAttribute()" argnames="" />
    </class>
    <class name="OutAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="OutAttribute()" argnames="" />
    </class>
    <class name="OptionalAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="OptionalAttribute()" argnames="" />
    </class>
    <class name="DllImportAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="DllImportAttribute(System.String)" argnames="dllName" />
        <field name="EntryPoint" />
        <field name="CharSet" />
        <field name="SetLastError" />
        <field name="ExactSpelling" />
        <field name="PreserveSig" />
        <field name="CallingConvention" />
        <property name="Value" propertytype="System.String" />
    </class>
    <class name="StructLayoutAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind)" argnames="layoutKind" />
        <constructor name="StructLayoutAttribute(System.Int16)" argnames="layoutKind" />
        <field name="Pack" />
        <field name="Size" />
        <field name="CharSet" />
        <property name="Value" propertytype="System.Runtime.InteropServices.LayoutKind" />
    </class>
    <class name="FieldOffsetAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="FieldOffsetAttribute(System.Int32)" argnames="offset" />
        <property name="Value" propertytype="System.Int32" />
    </class>
    <class name="ComAliasNameAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="ComAliasNameAttribute(System.String)" argnames="alias" />
        <property name="Value" propertytype="System.String" />
    </class>
    <class name="AutomationProxyAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="AutomationProxyAttribute(System.Boolean)" argnames="val" />
        <property name="Value" propertytype="System.Boolean" />
    </class>
    <class name="PrimaryInteropAssemblyAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="PrimaryInteropAssemblyAttribute(System.Int32, System.Int32)" argnames="major, minor" />
        <property name="MajorVersion" propertytype="System.Int32" />
        <property name="MinorVersion" propertytype="System.Int32" />
    </class>
    <class name="CoClassAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="CoClassAttribute(System.Type)" argnames="coClass" />
        <property name="CoClass" propertytype="System.Type" />
    </class>
    <class name="ComEventInterfaceAttribute" namespace="System.Runtime.InteropServices">
        <constructor name="ComEventInterfaceAttribute(System.Type, System.Type)" argnames="SourceInterface, EventProvider" />
        <property name="SourceInterface" propertytype="System.Type" />
        <property name="EventProvider" propertytype="System.Type" />
    </class>
    <class name="ExternalException" namespace="System.Runtime.InteropServices">
        <constructor name="ExternalException()" argnames="" />
        <constructor name="ExternalException(System.String)" argnames="message" />
        <constructor name="ExternalException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="ExternalException(System.String, System.Int32)" argnames="message, errorCode" />
        <constructor name="ExternalException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
        <property name="ErrorCode" propertytype="System.Int32" />
    </class>
    <class name="COMException" namespace="System.Runtime.InteropServices">
        <constructor name="COMException()" argnames="" />
        <constructor name="COMException(System.String)" argnames="message" />
        <constructor name="COMException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="COMException(System.String, System.Int32)" argnames="message, errorCode" />
        <constructor name="COMException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </class>
    <class name="CurrencyWrapper" namespace="System.Runtime.InteropServices">
        <constructor name="CurrencyWrapper(System.Decimal)" argnames="obj" />
        <constructor name="CurrencyWrapper(System.Object)" argnames="obj" />
        <property name="WrappedObject" propertytype="System.Decimal" />
    </class>
    <class name="DispatchWrapper" namespace="System.Runtime.InteropServices">
        <constructor name="DispatchWrapper(System.Object)" argnames="obj" />
        <property name="WrappedObject" propertytype="System.Object" />
    </class>
    <class name="ErrorWrapper" namespace="System.Runtime.InteropServices">
        <constructor name="ErrorWrapper(System.Int32)" argnames="errorCode" />
        <constructor name="ErrorWrapper(System.Object)" argnames="errorCode" />
        <constructor name="ErrorWrapper(System.Exception)" argnames="e" />
        <property name="ErrorCode" propertytype="System.Int32" />
    </class>
    <class name="ExtensibleClassFactory" namespace="System.Runtime.InteropServices">
        <method name="RegisterObjectCreationCallback(System.Runtime.InteropServices.ObjectCreationDelegate)" argnames="callback" returntype="System.Void" />
    </class>
    <class name="InvalidComObjectException" namespace="System.Runtime.InteropServices">
        <constructor name="InvalidComObjectException()" argnames="" />
        <constructor name="InvalidComObjectException(System.String)" argnames="message" />
        <constructor name="InvalidComObjectException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="InvalidComObjectException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="InvalidOleVariantTypeException" namespace="System.Runtime.InteropServices">
        <constructor name="InvalidOleVariantTypeException()" argnames="" />
        <constructor name="InvalidOleVariantTypeException(System.String)" argnames="message" />
        <constructor name="InvalidOleVariantTypeException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="InvalidOleVariantTypeException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="Marshal" namespace="System.Runtime.InteropServices">
        <field name="SystemDefaultCharSize" />
        <field name="SystemMaxDBCSCharSize" />
        <method name="AllocHGlobal(System.IntPtr)" argnames="cb" returntype="System.IntPtr" />
        <method name="AllocHGlobal(System.Int32)" argnames="cb" returntype="System.IntPtr" />
        <method name="ReAllocHGlobal(System.IntPtr, System.IntPtr)" argnames="pv, cb" returntype="System.IntPtr" />
        <method name="FreeHGlobal(System.IntPtr)" argnames="hglobal" returntype="System.Void" />
        <method name="AllocCoTaskMem(System.Int32)" argnames="cb" returntype="System.IntPtr" />
        <method name="ReAllocCoTaskMem(System.IntPtr, System.Int32)" argnames="pv, cb" returntype="System.IntPtr" />
        <method name="FreeCoTaskMem(System.IntPtr)" argnames="ptr" returntype="System.Void" />
        <method name="FreeBSTR(System.IntPtr)" argnames="ptr" returntype="System.Void" />
        <method name="StringToHGlobalAnsi(System.String)" argnames="s" returntype="System.IntPtr" />
        <method name="StringToCoTaskMemAnsi(System.String)" argnames="s" returntype="System.IntPtr" />
        <method name="PtrToStringAnsi(System.IntPtr)" argnames="ptr" returntype="System.String" />
        <method name="PtrToStringAnsi(System.IntPtr, System.Int32)" argnames="ptr, len" returntype="System.String" />
        <method name="PtrToStringUni(System.IntPtr, System.Int32)" argnames="ptr, len" returntype="System.String" />
        <method name="PtrToStringAuto(System.IntPtr, System.Int32)" argnames="ptr, len" returntype="System.String" />
        <method name="StringToHGlobalUni(System.String)" argnames="s" returntype="System.IntPtr" />
        <method name="StringToCoTaskMemUni(System.String)" argnames="s" returntype="System.IntPtr" />
        <method name="PtrToStringUni(System.IntPtr)" argnames="ptr" returntype="System.String" />
        <method name="StringToHGlobalAuto(System.String)" argnames="s" returntype="System.IntPtr" />
        <method name="StringToCoTaskMemAuto(System.String)" argnames="s" returntype="System.IntPtr" />
        <method name="PtrToStringAuto(System.IntPtr)" argnames="ptr" returntype="System.String" />
        <method name="StringToBSTR(System.String)" argnames="s" returntype="System.IntPtr" />
        <method name="PtrToStringBSTR(System.IntPtr)" argnames="ptr" returntype="System.String" />
        <method name="SizeOf(System.Object)" argnames="structure" returntype="System.Int32" />
        <method name="SizeOf(System.Type)" argnames="t" returntype="System.Int32" />
        <method name="OffsetOf(System.Type, System.String)" argnames="t, fieldName" returntype="System.IntPtr" />
        <method name="UnsafeAddrOfPinnedArrayElement(System.Array, System.Int32)" argnames="arr, index" returntype="System.IntPtr" />
        <method name="Copy(System.Int32[], System.Int32, System.IntPtr, System.Int32)" argnames="source, startIndex, destination, length" returntype="System.Void" />
        <method name="Copy(System.Char[], System.Int32, System.IntPtr, System.Int32)" argnames="source, startIndex, destination, length" returntype="System.Void" />
        <method name="Copy(System.Int16[], System.Int32, System.IntPtr, System.Int32)" argnames="source, startIndex, destination, length" returntype="System.Void" />
        <method name="Copy(System.Int64[], System.Int32, System.IntPtr, System.Int32)" argnames="source, startIndex, destination, length" returntype="System.Void" />
        <method name="Copy(System.Single[], System.Int32, System.IntPtr, System.Int32)" argnames="source, startIndex, destination, length" returntype="System.Void" />
        <method name="Copy(System.Double[], System.Int32, System.IntPtr, System.Int32)" argnames="source, startIndex, destination, length" returntype="System.Void" />
        <method name="Copy(System.Byte[], System.Int32, System.IntPtr, System.Int32)" argnames="source, startIndex, destination, length" returntype="System.Void" />
        <method name="Copy(System.IntPtr, System.Int32[], System.Int32, System.Int32)" argnames="source, destination, startIndex, length" returntype="System.Void" />
        <method name="Copy(System.IntPtr, System.Char[], System.Int32, System.Int32)" argnames="source, destination, startIndex, length" returntype="System.Void" />
        <method name="Copy(System.IntPtr, System.Int16[], System.Int32, System.Int32)" argnames="source, destination, startIndex, length" returntype="System.Void" />
        <method name="Copy(System.IntPtr, System.Int64[], System.Int32, System.Int32)" argnames="source, destination, startIndex, length" returntype="System.Void" />
        <method name="Copy(System.IntPtr, System.Single[], System.Int32, System.Int32)" argnames="source, destination, startIndex, length" returntype="System.Void" />
        <method name="Copy(System.IntPtr, System.Double[], System.Int32, System.Int32)" argnames="source, destination, startIndex, length" returntype="System.Void" />
        <method name="Copy(System.IntPtr, System.Byte[], System.Int32, System.Int32)" argnames="source, destination, startIndex, length" returntype="System.Void" />
        <method name="ReadByte(System.Object, System.Int32)" argnames="ptr, ofs" returntype="System.Byte" />
        <method name="ReadByte(System.IntPtr, System.Int32)" argnames="ptr, ofs" returntype="System.Byte" />
        <method name="ReadByte(System.IntPtr)" argnames="ptr" returntype="System.Byte" />
        <method name="ReadInt16(System.Object, System.Int32)" argnames="ptr, ofs" returntype="System.Int16" />
        <method name="ReadInt16(System.IntPtr, System.Int32)" argnames="ptr, ofs" returntype="System.Int16" />
        <method name="ReadInt16(System.IntPtr)" argnames="ptr" returntype="System.Int16" />
        <method name="ReadInt32(System.Object, System.Int32)" argnames="ptr, ofs" returntype="System.Int32" />
        <method name="ReadInt32(System.IntPtr, System.Int32)" argnames="ptr, ofs" returntype="System.Int32" />
        <method name="ReadInt32(System.IntPtr)" argnames="ptr" returntype="System.Int32" />
        <method name="ReadIntPtr(System.Object, System.Int32)" argnames="ptr, ofs" returntype="System.IntPtr" />
        <method name="ReadIntPtr(System.IntPtr, System.Int32)" argnames="ptr, ofs" returntype="System.IntPtr" />
        <method name="ReadIntPtr(System.IntPtr)" argnames="ptr" returntype="System.IntPtr" />
        <method name="ReadInt64(System.Object, System.Int32)" argnames="ptr, ofs" returntype="System.Int64" />
        <method name="ReadInt64(System.IntPtr, System.Int32)" argnames="ptr, ofs" returntype="System.Int64" />
        <method name="ReadInt64(System.IntPtr)" argnames="ptr" returntype="System.Int64" />
        <method name="WriteByte(System.IntPtr, System.Int32, System.Byte)" argnames="ptr, ofs, val" returntype="System.Void" />
        <method name="WriteByte(System.Object, System.Int32, System.Byte)" argnames="ptr, ofs, val" returntype="System.Void" />
        <method name="WriteByte(System.IntPtr, System.Byte)" argnames="ptr, val" returntype="System.Void" />
        <method name="WriteInt16(System.IntPtr, System.Int32, System.Int16)" argnames="ptr, ofs, val" returntype="System.Void" />
        <method name="WriteInt16(System.Object, System.Int32, System.Int16)" argnames="ptr, ofs, val" returntype="System.Void" />
        <method name="WriteInt16(System.IntPtr, System.Int16)" argnames="ptr, val" returntype="System.Void" />
        <method name="WriteInt16(System.IntPtr, System.Int32, System.Char)" argnames="ptr, ofs, val" returntype="System.Void" />
        <method name="WriteInt16(System.Object, System.Int32, System.Char)" argnames="ptr, ofs, val" returntype="System.Void" />
        <method name="WriteInt16(System.IntPtr, System.Char)" argnames="ptr, val" returntype="System.Void" />
        <method name="WriteInt32(System.IntPtr, System.Int32, System.Int32)" argnames="ptr, ofs, val" returntype="System.Void" />
        <method name="WriteInt32(System.Object, System.Int32, System.Int32)" argnames="ptr, ofs, val" returntype="System.Void" />
        <method name="WriteInt32(System.IntPtr, System.Int32)" argnames="ptr, val" returntype="System.Void" />
        <method name="WriteIntPtr(System.IntPtr, System.Int32, System.IntPtr)" argnames="ptr, ofs, val" returntype="System.Void" />
        <method name="WriteIntPtr(System.Object, System.Int32, System.IntPtr)" argnames="ptr, ofs, val" returntype="System.Void" />
        <method name="WriteIntPtr(System.IntPtr, System.IntPtr)" argnames="ptr, val" returntype="System.Void" />
        <method name="WriteInt64(System.IntPtr, System.Int32, System.Int64)" argnames="ptr, ofs, val" returntype="System.Void" />
        <method name="WriteInt64(System.Object, System.Int32, System.Int64)" argnames="ptr, ofs, val" returntype="System.Void" />
        <method name="WriteInt64(System.IntPtr, System.Int64)" argnames="ptr, val" returntype="System.Void" />
        <method name="GetLastWin32Error()" argnames="" returntype="System.Int32" />
        <method name="GetHRForLastWin32Error()" argnames="" returntype="System.Int32" />
        <method name="Prelink(System.Reflection.MethodInfo)" argnames="m" returntype="System.Void" />
        <method name="PrelinkAll(System.Type)" argnames="c" returntype="System.Void" />
        <method name="NumParamBytes(System.Reflection.MethodInfo)" argnames="m" returntype="System.Int32" />
        <method name="GetExceptionPointers()" argnames="" returntype="System.IntPtr" />
        <method name="GetExceptionCode()" argnames="" returntype="System.Int32" />
        <method name="GetTypeLibName(System.Runtime.InteropServices.UCOMITypeLib)" argnames="pTLB" returntype="System.String" />
        <method name="GetTypeLibGuid(System.Runtime.InteropServices.UCOMITypeLib)" argnames="pTLB" returntype="System.Guid" />
        <method name="GetTypeLibLcid(System.Runtime.InteropServices.UCOMITypeLib)" argnames="pTLB" returntype="System.Int32" />
        <method name="GetTypeLibGuidForAssembly(System.Reflection.Assembly)" argnames="asm" returntype="System.Guid" />
        <method name="GetTypeInfoName(System.Runtime.InteropServices.UCOMITypeInfo)" argnames="pTI" returntype="System.String" />
        <method name="GetTypeForITypeInfo(System.IntPtr)" argnames="piTypeInfo" returntype="System.Type" />
        <method name="GetITypeInfoForType(System.Type)" argnames="t" returntype="System.IntPtr" />
        <method name="GetIUnknownForObject(System.Object)" argnames="o" returntype="System.IntPtr" />
        <method name="GetIDispatchForObject(System.Object)" argnames="o" returntype="System.IntPtr" />
        <method name="GetComInterfaceForObject(System.Object, System.Type)" argnames="o, T" returntype="System.IntPtr" />
        <method name="GetObjectForIUnknown(System.IntPtr)" argnames="pUnk" returntype="System.Object" />
        <method name="GetTypedObjectForIUnknown(System.IntPtr, System.Type)" argnames="pUnk, t" returntype="System.Object" />
        <method name="IsComObject(System.Object)" argnames="o" returntype="System.Boolean" />
        <method name="ReleaseComObject(System.Object)" argnames="o" returntype="System.Int32" />
        <method name="GetComObjectData(System.Object, System.Object)" argnames="obj, key" returntype="System.Object" />
        <method name="SetComObjectData(System.Object, System.Object, System.Object)" argnames="obj, key, data" returntype="System.Boolean" />
        <method name="CreateWrapperOfType(System.Object, System.Type)" argnames="o, t" returntype="System.Object" />
        <method name="ReleaseThreadCache()" argnames="" returntype="System.Void" />
        <method name="GetThreadFromFiberCookie(System.Int32)" argnames="cookie" returntype="System.Threading.Thread" />
        <method name="IsTypeVisibleFromCom(System.Type)" argnames="t" returntype="System.Boolean" />
        <method name="QueryInterface(System.IntPtr, System.Guid&amp;, System.IntPtr&amp;)" argnames="pUnk, iid, ppv" returntype="System.Int32" />
        <method name="AddRef(System.IntPtr)" argnames="pUnk" returntype="System.Int32" />
        <method name="Release(System.IntPtr)" argnames="pUnk" returntype="System.Int32" />
        <method name="StructureToPtr(System.Object, System.IntPtr, System.Boolean)" argnames="structure, ptr, fDeleteOld" returntype="System.Void" />
        <method name="PtrToStructure(System.IntPtr, System.Object)" argnames="ptr, structure" returntype="System.Void" />
        <method name="PtrToStructure(System.IntPtr, System.Type)" argnames="ptr, structureType" returntype="System.Object" />
        <method name="DestroyStructure(System.IntPtr, System.Type)" argnames="ptr, structuretype" returntype="System.Void" />
        <method name="GetNativeVariantForObject(System.Object, System.IntPtr)" argnames="obj, pDstNativeVariant" returntype="System.Void" />
        <method name="GetObjectForNativeVariant(System.IntPtr)" argnames="pSrcNativeVariant" returntype="System.Object" />
        <method name="GetObjectsForNativeVariants(System.IntPtr, System.Int32)" argnames="aSrcNativeVariant, cVars" returntype="System.Object[]" />
        <method name="GetStartComSlot(System.Type)" argnames="t" returntype="System.Int32" />
        <method name="GetEndComSlot(System.Type)" argnames="t" returntype="System.Int32" />
        <method name="GetMethodInfoForComSlot(System.Type, System.Int32, System.Runtime.InteropServices.ComMemberType&amp;)" argnames="t, slot, memberType" returntype="System.Reflection.MemberInfo" />
        <method name="GetComSlotForMethodInfo(System.Reflection.MemberInfo)" argnames="m" returntype="System.Int32" />
        <method name="GetHINSTANCE(System.Reflection.Module)" argnames="m" returntype="System.IntPtr" />
        <method name="ThrowExceptionForHR(System.Int32)" argnames="errorCode" returntype="System.Void" />
        <method name="ThrowExceptionForHR(System.Int32, System.IntPtr)" argnames="errorCode, errorInfo" returntype="System.Void" />
        <method name="GetHRForException(System.Exception)" argnames="e" returntype="System.Int32" />
        <method name="GenerateGuidForType(System.Type)" argnames="type" returntype="System.Guid" />
        <method name="GenerateProgIdForType(System.Type)" argnames="type" returntype="System.String" />
        <method name="BindToMoniker(System.String)" argnames="monikerName" returntype="System.Object" />
        <method name="GetActiveObject(System.String)" argnames="progID" returntype="System.Object" />
        <method name="GetUnmanagedThunkForManagedMethodPtr(System.IntPtr, System.IntPtr, System.Int32)" argnames="pfnMethodToWrap, pbSignature, cbSignature" returntype="System.IntPtr" />
        <method name="GetManagedThunkForUnmanagedMethodPtr(System.IntPtr, System.IntPtr, System.Int32)" argnames="pfnMethodToWrap, pbSignature, cbSignature" returntype="System.IntPtr" />
        <method name="ChangeWrapperHandleStrength(System.Object, System.Boolean)" argnames="otp, fIsWeak" returntype="System.Void" />
    </class>
    <class name="MarshalDirectiveException" namespace="System.Runtime.InteropServices">
        <constructor name="MarshalDirectiveException()" argnames="" />
        <constructor name="MarshalDirectiveException(System.String)" argnames="message" />
        <constructor name="MarshalDirectiveException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="MarshalDirectiveException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="RuntimeEnvironment" namespace="System.Runtime.InteropServices">
        <constructor name="RuntimeEnvironment()" argnames="" />
        <property name="SystemConfigurationFile" propertytype="System.String" />
        <method name="FromGlobalAccessCache(System.Reflection.Assembly)" argnames="a" returntype="System.Boolean" />
        <method name="GetSystemVersion()" argnames="" returntype="System.String" />
        <method name="GetRuntimeDirectory()" argnames="" returntype="System.String" />
    </class>
    <class name="RegistrationServices" namespace="System.Runtime.InteropServices">
        <constructor name="RegistrationServices()" argnames="" />
        <method name="TypeRepresentsComType(System.Type)" argnames="type" returntype="System.Boolean" />
        <method name="TypeRequiresRegistration(System.Type)" argnames="type" returntype="System.Boolean" />
        <method name="GetManagedCategoryGuid()" argnames="" returntype="System.Guid" />
        <method name="RegisterTypeForComClients(System.Type, System.Guid&amp;)" argnames="type, g" returntype="System.Void" />
        <method name="GetProgIdForType(System.Type)" argnames="type" returntype="System.String" />
        <method name="GetRegistrableTypesInAssembly(System.Reflection.Assembly)" argnames="assembly" returntype="System.Type[]" />
        <method name="UnregisterAssembly(System.Reflection.Assembly)" argnames="assembly" returntype="System.Boolean" />
        <method name="RegisterAssembly(System.Reflection.Assembly, System.Runtime.InteropServices.AssemblyRegistrationFlags)" argnames="assembly, flags" returntype="System.Boolean" />
    </class>
    <class name="SafeArrayRankMismatchException" namespace="System.Runtime.InteropServices">
        <constructor name="SafeArrayRankMismatchException()" argnames="" />
        <constructor name="SafeArrayRankMismatchException(System.String)" argnames="message" />
        <constructor name="SafeArrayRankMismatchException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="SafeArrayRankMismatchException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="SafeArrayTypeMismatchException" namespace="System.Runtime.InteropServices">
        <constructor name="SafeArrayTypeMismatchException()" argnames="" />
        <constructor name="SafeArrayTypeMismatchException(System.String)" argnames="message" />
        <constructor name="SafeArrayTypeMismatchException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="SafeArrayTypeMismatchException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <class name="SEHException" namespace="System.Runtime.InteropServices">
        <constructor name="SEHException()" argnames="" />
        <constructor name="SEHException(System.String)" argnames="message" />
        <constructor name="SEHException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="SEHException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
        <method name="CanResume()" argnames="" returntype="System.Boolean" />
    </class>
    <class name="TypeLibConverter" namespace="System.Runtime.InteropServices">
        <constructor name="TypeLibConverter()" argnames="" />
        <method name="ConvertTypeLibToAssembly(System.Object, System.String, System.Int32, System.Runtime.InteropServices.ITypeLibImporterNotifySink, System.Byte[], System.Reflection.StrongNameKeyPair, System.Boolean)" argnames="typeLib, asmFileName, flags, notifySink, publicKey, keyPair, unsafeInterfaces" returntype="System.Reflection.Emit.AssemblyBuilder" />
        <method name="GetPrimaryInteropAssembly(System.Guid, System.Int32, System.Int32, System.Int32, System.String&amp;, System.String&amp;)" argnames="g, major, minor, lcid, asmName, asmCodeBase" returntype="System.Boolean" />
        <method name="ConvertAssemblyToTypeLib(System.Reflection.Assembly, System.String, System.Runtime.InteropServices.TypeLibExporterFlags, System.Runtime.InteropServices.ITypeLibExporterNotifySink)" argnames="assembly, strTypeLibName, flags, notifySink" returntype="System.Object" />
        <method name="ConvertTypeLibToAssembly(System.Object, System.String, System.Runtime.InteropServices.TypeLibImporterFlags, System.Runtime.InteropServices.ITypeLibImporterNotifySink, System.Byte[], System.Reflection.StrongNameKeyPair, System.String, System.Version)" argnames="typeLib, asmFileName, flags, notifySink, publicKey, keyPair, asmNamespace, asmVersion" returntype="System.Reflection.Emit.AssemblyBuilder" />
    </class>
    <class name="UnknownWrapper" namespace="System.Runtime.InteropServices">
        <constructor name="UnknownWrapper(System.Object)" argnames="obj" />
        <property name="WrappedObject" propertytype="System.Object" />
    </class>
    <interface name="ICustomAdapter" namespace="System.Runtime.InteropServices">
        <method name="GetUnderlyingObject()" argnames="" returntype="System.Object" />
    </interface>
    <interface name="ICustomMarshaler" namespace="System.Runtime.InteropServices">
        <method name="GetNativeDataSize()" argnames="" returntype="System.Int32" />
        <method name="CleanUpManagedData(System.Object)" argnames="ManagedObj" returntype="System.Void" />
        <method name="CleanUpNativeData(System.IntPtr)" argnames="pNativeData" returntype="System.Void" />
        <method name="MarshalManagedToNative(System.Object)" argnames="ManagedObj" returntype="System.IntPtr" />
        <method name="MarshalNativeToManaged(System.IntPtr)" argnames="pNativeData" returntype="System.Object" />
    </interface>
    <interface name="ICustomFactory" namespace="System.Runtime.InteropServices">
        <method name="CreateInstance(System.Type)" argnames="serverType" returntype="System.MarshalByRefObject" />
    </interface>
    <interface name="IRegistrationServices" namespace="System.Runtime.InteropServices">
        <method name="TypeRepresentsComType(System.Type)" argnames="type" returntype="System.Boolean" />
        <method name="TypeRequiresRegistration(System.Type)" argnames="type" returntype="System.Boolean" />
        <method name="GetManagedCategoryGuid()" argnames="" returntype="System.Guid" />
        <method name="RegisterTypeForComClients(System.Type, System.Guid&amp;)" argnames="type, g" returntype="System.Void" />
        <method name="GetProgIdForType(System.Type)" argnames="type" returntype="System.String" />
        <method name="GetRegistrableTypesInAssembly(System.Reflection.Assembly)" argnames="assembly" returntype="System.Type[]" />
        <method name="UnregisterAssembly(System.Reflection.Assembly)" argnames="assembly" returntype="System.Boolean" />
        <method name="RegisterAssembly(System.Reflection.Assembly, System.Runtime.InteropServices.AssemblyRegistrationFlags)" argnames="assembly, flags" returntype="System.Boolean" />
    </interface>
    <interface name="ITypeLibImporterNotifySink" namespace="System.Runtime.InteropServices">
        <method name="ResolveRef(System.Object)" argnames="typeLib" returntype="System.Reflection.Assembly" />
        <method name="ReportEvent(System.Runtime.InteropServices.ImporterEventKind, System.Int32, System.String)" argnames="eventKind, eventCode, eventMsg" returntype="System.Void" />
    </interface>
    <interface name="ITypeLibExporterNotifySink" namespace="System.Runtime.InteropServices">
        <method name="ResolveRef(System.Reflection.Assembly)" argnames="assembly" returntype="System.Object" />
        <method name="ReportEvent(System.Runtime.InteropServices.ExporterEventKind, System.Int32, System.String)" argnames="eventKind, eventCode, eventMsg" returntype="System.Void" />
    </interface>
    <interface name="ITypeLibConverter" namespace="System.Runtime.InteropServices">
        <method name="ConvertTypeLibToAssembly(System.Object, System.String, System.Int32, System.Runtime.InteropServices.ITypeLibImporterNotifySink, System.Byte[], System.Reflection.StrongNameKeyPair, System.Boolean)" argnames="typeLib, asmFileName, flags, notifySink, publicKey, keyPair, unsafeInterfaces" returntype="System.Reflection.Emit.AssemblyBuilder" />
        <method name="GetPrimaryInteropAssembly(System.Guid, System.Int32, System.Int32, System.Int32, System.String&amp;, System.String&amp;)" argnames="g, major, minor, lcid, asmName, asmCodeBase" returntype="System.Boolean" />
        <method name="ConvertAssemblyToTypeLib(System.Reflection.Assembly, System.String, System.Runtime.InteropServices.TypeLibExporterFlags, System.Runtime.InteropServices.ITypeLibExporterNotifySink)" argnames="assembly, typeLibName, flags, notifySink" returntype="System.Object" />
        <method name="ConvertTypeLibToAssembly(System.Object, System.String, System.Runtime.InteropServices.TypeLibImporterFlags, System.Runtime.InteropServices.ITypeLibImporterNotifySink, System.Byte[], System.Reflection.StrongNameKeyPair, System.String, System.Version)" argnames="typeLib, asmFileName, flags, notifySink, publicKey, keyPair, asmNamespace, asmVersion" returntype="System.Reflection.Emit.AssemblyBuilder" />
    </interface>
    <interface name="ITypeLibExporterNameProvider" namespace="System.Runtime.InteropServices">
        <method name="GetNames()" argnames="" returntype="System.String[]" />
    </interface>
    <interface name="UCOMIBindCtx" namespace="System.Runtime.InteropServices">
        <method name="RevokeObjectParam(System.String)" argnames="pszKey" returntype="System.Void" />
        <method name="EnumObjectParam(System.Runtime.InteropServices.UCOMIEnumString&amp;)" argnames="ppenum" returntype="System.Void" />
        <method name="GetObjectParam(System.String, System.Object&amp;)" argnames="pszKey, ppunk" returntype="System.Void" />
        <method name="RegisterObjectParam(System.String, System.Object)" argnames="pszKey, punk" returntype="System.Void" />
        <method name="GetRunningObjectTable(System.Runtime.InteropServices.UCOMIRunningObjectTable&amp;)" argnames="pprot" returntype="System.Void" />
        <method name="GetBindOptions(System.Runtime.InteropServices.BIND_OPTS&amp;)" argnames="pbindopts" returntype="System.Void" />
        <method name="SetBindOptions(System.Runtime.InteropServices.BIND_OPTS&amp;)" argnames="pbindopts" returntype="System.Void" />
        <method name="ReleaseBoundObjects()" argnames="" returntype="System.Void" />
        <method name="RevokeObjectBound(System.Object)" argnames="punk" returntype="System.Void" />
        <method name="RegisterObjectBound(System.Object)" argnames="punk" returntype="System.Void" />
    </interface>
    <interface name="UCOMIConnectionPointContainer" namespace="System.Runtime.InteropServices">
        <method name="FindConnectionPoint(System.Guid&amp;, System.Runtime.InteropServices.UCOMIConnectionPoint&amp;)" argnames="riid, ppCP" returntype="System.Void" />
        <method name="EnumConnectionPoints(System.Runtime.InteropServices.UCOMIEnumConnectionPoints&amp;)" argnames="ppEnum" returntype="System.Void" />
    </interface>
    <interface name="UCOMIConnectionPoint" namespace="System.Runtime.InteropServices">
        <method name="EnumConnections(System.Runtime.InteropServices.UCOMIEnumConnections&amp;)" argnames="ppEnum" returntype="System.Void" />
        <method name="Unadvise(System.Int32)" argnames="dwCookie" returntype="System.Void" />
        <method name="Advise(System.Object, System.Int32&amp;)" argnames="pUnkSink, pdwCookie" returntype="System.Void" />
        <method name="GetConnectionPointContainer(System.Runtime.InteropServices.UCOMIConnectionPointContainer&amp;)" argnames="ppCPC" returntype="System.Void" />
        <method name="GetConnectionInterface(System.Guid&amp;)" argnames="pIID" returntype="System.Void" />
    </interface>
    <interface name="UCOMIEnumMoniker" namespace="System.Runtime.InteropServices">
        <method name="Clone(System.Runtime.InteropServices.UCOMIEnumMoniker&amp;)" argnames="ppenum" returntype="System.Void" />
        <method name="Reset()" argnames="" returntype="System.Int32" />
        <method name="Skip(System.Int32)" argnames="celt" returntype="System.Int32" />
        <method name="Next(System.Int32, System.Runtime.InteropServices.UCOMIMoniker[], System.Int32&amp;)" argnames="celt, rgelt, pceltFetched" returntype="System.Int32" />
    </interface>
    <interface name="UCOMIEnumConnections" namespace="System.Runtime.InteropServices">
        <method name="Clone(System.Runtime.InteropServices.UCOMIEnumConnections&amp;)" argnames="ppenum" returntype="System.Void" />
        <method name="Reset()" argnames="" returntype="System.Void" />
        <method name="Skip(System.Int32)" argnames="celt" returntype="System.Int32" />
        <method name="Next(System.Int32, System.Runtime.InteropServices.CONNECTDATA[], System.Int32&amp;)" argnames="celt, rgelt, pceltFetched" returntype="System.Int32" />
    </interface>
    <interface name="UCOMIEnumConnectionPoints" namespace="System.Runtime.InteropServices">
        <method name="Clone(System.Runtime.InteropServices.UCOMIEnumConnectionPoints&amp;)" argnames="ppenum" returntype="System.Void" />
        <method name="Reset()" argnames="" returntype="System.Int32" />
        <method name="Skip(System.Int32)" argnames="celt" returntype="System.Int32" />
        <method name="Next(System.Int32, System.Runtime.InteropServices.UCOMIConnectionPoint[], System.Int32&amp;)" argnames="celt, rgelt, pceltFetched" returntype="System.Int32" />
    </interface>
    <interface name="UCOMIEnumString" namespace="System.Runtime.InteropServices">
        <method name="Clone(System.Runtime.InteropServices.UCOMIEnumString&amp;)" argnames="ppenum" returntype="System.Void" />
        <method name="Reset()" argnames="" returntype="System.Int32" />
        <method name="Skip(System.Int32)" argnames="celt" returntype="System.Int32" />
        <method name="Next(System.Int32, System.String[], System.Int32&amp;)" argnames="celt, rgelt, pceltFetched" returntype="System.Int32" />
    </interface>
    <interface name="UCOMIEnumVARIANT" namespace="System.Runtime.InteropServices">
        <method name="Clone(System.Int32)" argnames="ppenum" returntype="System.Void" />
        <method name="Reset()" argnames="" returntype="System.Int32" />
        <method name="Skip(System.Int32)" argnames="celt" returntype="System.Int32" />
        <method name="Next(System.Int32, System.Int32, System.Int32)" argnames="celt, rgvar, pceltFetched" returntype="System.Int32" />
    </interface>
    <interface name="UCOMIMoniker" namespace="System.Runtime.InteropServices">
        <method name="IsSystemMoniker(System.Int32&amp;)" argnames="pdwMksys" returntype="System.Void" />
        <method name="ParseDisplayName(System.Runtime.InteropServices.UCOMIBindCtx, System.Runtime.InteropServices.UCOMIMoniker, System.String, System.Int32&amp;, System.Runtime.InteropServices.UCOMIMoniker&amp;)" argnames="pbc, pmkToLeft, pszDisplayName, pchEaten, ppmkOut" returntype="System.Void" />
        <method name="GetDisplayName(System.Runtime.InteropServices.UCOMIBindCtx, System.Runtime.InteropServices.UCOMIMoniker, System.String&amp;)" argnames="pbc, pmkToLeft, ppszDisplayName" returntype="System.Void" />
        <method name="RelativePathTo(System.Runtime.InteropServices.UCOMIMoniker, System.Runtime.InteropServices.UCOMIMoniker&amp;)" argnames="pmkOther, ppmkRelPath" returntype="System.Void" />
        <method name="CommonPrefixWith(System.Runtime.InteropServices.UCOMIMoniker, System.Runtime.InteropServices.UCOMIMoniker&amp;)" argnames="pmkOther, ppmkPrefix" returntype="System.Void" />
        <method name="Inverse(System.Runtime.InteropServices.UCOMIMoniker&amp;)" argnames="ppmk" returntype="System.Void" />
        <method name="GetTimeOfLastChange(System.Runtime.InteropServices.UCOMIBindCtx, System.Runtime.InteropServices.UCOMIMoniker, System.Runtime.InteropServices.FILETIME&amp;)" argnames="pbc, pmkToLeft, pFileTime" returntype="System.Void" />
        <method name="IsRunning(System.Runtime.InteropServices.UCOMIBindCtx, System.Runtime.InteropServices.UCOMIMoniker, System.Runtime.InteropServices.UCOMIMoniker)" argnames="pbc, pmkToLeft, pmkNewlyRunning" returntype="System.Void" />
        <method name="Hash(System.Int32&amp;)" argnames="pdwHash" returntype="System.Void" />
        <method name="IsEqual(System.Runtime.InteropServices.UCOMIMoniker)" argnames="pmkOtherMoniker" returntype="System.Void" />
        <method name="Enum(System.Boolean, System.Runtime.InteropServices.UCOMIEnumMoniker&amp;)" argnames="fForward, ppenumMoniker" returntype="System.Void" />
        <method name="ComposeWith(System.Runtime.InteropServices.UCOMIMoniker, System.Boolean, System.Runtime.InteropServices.UCOMIMoniker&amp;)" argnames="pmkRight, fOnlyIfNotGeneric, ppmkComposite" returntype="System.Void" />
        <method name="Reduce(System.Runtime.InteropServices.UCOMIBindCtx, System.Int32, System.Runtime.InteropServices.UCOMIMoniker&amp;, System.Runtime.InteropServices.UCOMIMoniker&amp;)" argnames="pbc, dwReduceHowFar, ppmkToLeft, ppmkReduced" returntype="System.Void" />
        <method name="BindToStorage(System.Runtime.InteropServices.UCOMIBindCtx, System.Runtime.InteropServices.UCOMIMoniker, System.Guid&amp;, System.Object&amp;)" argnames="pbc, pmkToLeft, riid, ppvObj" returntype="System.Void" />
        <method name="BindToObject(System.Runtime.InteropServices.UCOMIBindCtx, System.Runtime.InteropServices.UCOMIMoniker, System.Guid&amp;, System.Object&amp;)" argnames="pbc, pmkToLeft, riidResult, ppvResult" returntype="System.Void" />
        <method name="GetSizeMax(System.Int64&amp;)" argnames="pcbSize" returntype="System.Void" />
        <method name="Save(System.Runtime.InteropServices.UCOMIStream, System.Boolean)" argnames="pStm, fClearDirty" returntype="System.Void" />
        <method name="Load(System.Runtime.InteropServices.UCOMIStream)" argnames="pStm" returntype="System.Void" />
        <method name="IsDirty()" argnames="" returntype="System.Int32" />
        <method name="GetClassID(System.Guid&amp;)" argnames="pClassID" returntype="System.Void" />
    </interface>
    <interface name="UCOMIPersistFile" namespace="System.Runtime.InteropServices">
        <method name="GetCurFile(System.String&amp;)" argnames="ppszFileName" returntype="System.Void" />
        <method name="SaveCompleted(System.String)" argnames="pszFileName" returntype="System.Void" />
        <method name="Save(System.String, System.Boolean)" argnames="pszFileName, fRemember" returntype="System.Void" />
        <method name="Load(System.String, System.Int32)" argnames="pszFileName, dwMode" returntype="System.Void" />
        <method name="IsDirty()" argnames="" returntype="System.Int32" />
        <method name="GetClassID(System.Guid&amp;)" argnames="pClassID" returntype="System.Void" />
    </interface>
    <interface name="UCOMIRunningObjectTable" namespace="System.Runtime.InteropServices">
        <method name="EnumRunning(System.Runtime.InteropServices.UCOMIEnumMoniker&amp;)" argnames="ppenumMoniker" returntype="System.Void" />
        <method name="GetTimeOfLastChange(System.Runtime.InteropServices.UCOMIMoniker, System.Runtime.InteropServices.FILETIME&amp;)" argnames="pmkObjectName, pfiletime" returntype="System.Void" />
        <method name="NoteChangeTime(System.Int32, System.Runtime.InteropServices.FILETIME&amp;)" argnames="dwRegister, pfiletime" returntype="System.Void" />
        <method name="GetObject(System.Runtime.InteropServices.UCOMIMoniker, System.Object&amp;)" argnames="pmkObjectName, ppunkObject" returntype="System.Void" />
        <method name="IsRunning(System.Runtime.InteropServices.UCOMIMoniker)" argnames="pmkObjectName" returntype="System.Void" />
        <method name="Revoke(System.Int32)" argnames="dwRegister" returntype="System.Void" />
        <method name="Register(System.Int32, System.Object, System.Runtime.InteropServices.UCOMIMoniker, System.Int32&amp;)" argnames="grfFlags, punkObject, pmkObjectName, pdwRegister" returntype="System.Void" />
    </interface>
    <interface name="UCOMIStream" namespace="System.Runtime.InteropServices">
        <method name="Clone(System.Runtime.InteropServices.UCOMIStream&amp;)" argnames="ppstm" returntype="System.Void" />
        <method name="Stat(System.Runtime.InteropServices.STATSTG&amp;, System.Int32)" argnames="pstatstg, grfStatFlag" returntype="System.Void" />
        <method name="UnlockRegion(System.Int64, System.Int64, System.Int32)" argnames="libOffset, cb, dwLockType" returntype="System.Void" />
        <method name="LockRegion(System.Int64, System.Int64, System.Int32)" argnames="libOffset, cb, dwLockType" returntype="System.Void" />
        <method name="Revert()" argnames="" returntype="System.Void" />
        <method name="Commit(System.Int32)" argnames="grfCommitFlags" returntype="System.Void" />
        <method name="CopyTo(System.Runtime.InteropServices.UCOMIStream, System.Int64, System.IntPtr, System.IntPtr)" argnames="pstm, cb, pcbRead, pcbWritten" returntype="System.Void" />
        <method name="SetSize(System.Int64)" argnames="libNewSize" returntype="System.Void" />
        <method name="Seek(System.Int64, System.Int32, System.IntPtr)" argnames="dlibMove, dwOrigin, plibNewPosition" returntype="System.Void" />
        <method name="Write(System.Byte[], System.Int32, System.IntPtr)" argnames="pv, cb, pcbWritten" returntype="System.Void" />
        <method name="Read(System.Byte[], System.Int32, System.IntPtr)" argnames="pv, cb, pcbRead" returntype="System.Void" />
    </interface>
    <interface name="UCOMITypeComp" namespace="System.Runtime.InteropServices">
        <method name="BindType(System.String, System.Int32, System.Runtime.InteropServices.UCOMITypeInfo&amp;, System.Runtime.InteropServices.UCOMITypeComp&amp;)" argnames="szName, lHashVal, ppTInfo, ppTComp" returntype="System.Void" />
        <method name="Bind(System.String, System.Int32, System.Int16, System.Runtime.InteropServices.UCOMITypeInfo&amp;, System.Runtime.InteropServices.DESCKIND&amp;, System.Runtime.InteropServices.BINDPTR&amp;)" argnames="szName, lHashVal, wFlags, ppTInfo, pDescKind, pBindPtr" returntype="System.Void" />
    </interface>
    <interface name="UCOMITypeInfo" namespace="System.Runtime.InteropServices">
        <method name="ReleaseVarDesc(System.IntPtr)" argnames="pVarDesc" returntype="System.Void" />
        <method name="ReleaseFuncDesc(System.IntPtr)" argnames="pFuncDesc" returntype="System.Void" />
        <method name="ReleaseTypeAttr(System.IntPtr)" argnames="pTypeAttr" returntype="System.Void" />
        <method name="GetContainingTypeLib(System.Runtime.InteropServices.UCOMITypeLib&amp;, System.Int32&amp;)" argnames="ppTLB, pIndex" returntype="System.Void" />
        <method name="GetMops(System.Int32, System.String&amp;)" argnames="memid, pBstrMops" returntype="System.Void" />
        <method name="CreateInstance(System.Object, System.Guid&amp;, System.Object&amp;)" argnames="pUnkOuter, riid, ppvObj" returntype="System.Void" />
        <method name="AddressOfMember(System.Int32, System.Runtime.InteropServices.INVOKEKIND, System.IntPtr&amp;)" argnames="memid, invKind, ppv" returntype="System.Void" />
        <method name="GetRefTypeInfo(System.Int32, System.Runtime.InteropServices.UCOMITypeInfo&amp;)" argnames="hRef, ppTI" returntype="System.Void" />
        <method name="GetDllEntry(System.Int32, System.Runtime.InteropServices.INVOKEKIND, System.String&amp;, System.String&amp;, System.Int16&amp;)" argnames="memid, invKind, pBstrDllName, pBstrName, pwOrdinal" returntype="System.Void" />
        <method name="GetDocumentation(System.Int32, System.String&amp;, System.String&amp;, System.Int32&amp;, System.String&amp;)" argnames="index, strName, strDocString, dwHelpContext, strHelpFile" returntype="System.Void" />
        <method name="Invoke(System.Object, System.Int32, System.Int16, System.Runtime.InteropServices.DISPPARAMS&amp;, System.Object&amp;, System.Runtime.InteropServices.EXCEPINFO&amp;, System.Int32&amp;)" argnames="pvInstance, memid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr" returntype="System.Void" />
        <method name="GetIDsOfNames(System.String[], System.Int32, System.Int32[])" argnames="rgszNames, cNames, pMemId" returntype="System.Void" />
        <method name="GetImplTypeFlags(System.Int32, System.Int32&amp;)" argnames="index, pImplTypeFlags" returntype="System.Void" />
        <method name="GetRefTypeOfImplType(System.Int32, System.Int32&amp;)" argnames="index, href" returntype="System.Void" />
        <method name="GetNames(System.Int32, System.String[], System.Int32, System.Int32&amp;)" argnames="memid, rgBstrNames, cMaxNames, pcNames" returntype="System.Void" />
        <method name="GetVarDesc(System.Int32, System.IntPtr&amp;)" argnames="index, ppVarDesc" returntype="System.Void" />
        <method name="GetFuncDesc(System.Int32, System.IntPtr&amp;)" argnames="index, ppFuncDesc" returntype="System.Void" />
        <method name="GetTypeComp(System.Runtime.InteropServices.UCOMITypeComp&amp;)" argnames="ppTComp" returntype="System.Void" />
        <method name="GetTypeAttr(System.IntPtr&amp;)" argnames="ppTypeAttr" returntype="System.Void" />
    </interface>
    <interface name="UCOMITypeLib" namespace="System.Runtime.InteropServices">
        <method name="ReleaseTLibAttr(System.IntPtr)" argnames="pTLibAttr" returntype="System.Void" />
        <method name="FindName(System.String, System.Int32, System.Runtime.InteropServices.UCOMITypeInfo[], System.Int32[], System.Int16&amp;)" argnames="szNameBuf, lHashVal, ppTInfo, rgMemId, pcFound" returntype="System.Void" />
        <method name="IsName(System.String, System.Int32)" argnames="szNameBuf, lHashVal" returntype="System.Boolean" />
        <method name="GetDocumentation(System.Int32, System.String&amp;, System.String&amp;, System.Int32&amp;, System.String&amp;)" argnames="index, strName, strDocString, dwHelpContext, strHelpFile" returntype="System.Void" />
        <method name="GetTypeComp(System.Runtime.InteropServices.UCOMITypeComp&amp;)" argnames="ppTComp" returntype="System.Void" />
        <method name="GetLibAttr(System.IntPtr&amp;)" argnames="ppTLibAttr" returntype="System.Void" />
        <method name="GetTypeInfoOfGuid(System.Guid&amp;, System.Runtime.InteropServices.UCOMITypeInfo&amp;)" argnames="guid, ppTInfo" returntype="System.Void" />
        <method name="GetTypeInfoType(System.Int32, System.Runtime.InteropServices.TYPEKIND&amp;)" argnames="index, pTKind" returntype="System.Void" />
        <method name="GetTypeInfo(System.Int32, System.Runtime.InteropServices.UCOMITypeInfo&amp;)" argnames="index, ppTI" returntype="System.Void" />
        <method name="GetTypeInfoCount()" argnames="" returntype="System.Int32" />
    </interface>
    <struct name="ArrayWithOffset" namespace="System.Runtime.InteropServices">
        <constructor name="ArrayWithOffset(System.Object, System.Int32)" argnames="array, offset" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="GetArray()" argnames="" returntype="System.Object" />
        <method name="GetOffset()" argnames="" returntype="System.Int32" />
    </struct>
    <struct name="GCHandle" namespace="System.Runtime.InteropServices">
        <property name="Target" propertytype="System.Object" />
        <property name="__InternalTarget" propertytype="System.Object" />
        <property name="IsAllocated" propertytype="System.Boolean" />
        <method name="Alloc(System.Object)" argnames="value" returntype="System.Runtime.InteropServices.GCHandle" />
        <method name="Alloc(System.Object, System.Runtime.InteropServices.GCHandleType)" argnames="value, type" returntype="System.Runtime.InteropServices.GCHandle" />
        <method name="Free()" argnames="" returntype="System.Void" />
        <method name="AddrOfPinnedObject()" argnames="" returntype="System.IntPtr" />
        <operator name="op_Explicit(System.IntPtr)" argnames="value" />
        <operator name="op_Explicit(System.Runtime.InteropServices.GCHandle)" argnames="value" />
    </struct>
    <struct name="HandleRef" namespace="System.Runtime.InteropServices">
        <constructor name="HandleRef(System.Object, System.IntPtr)" argnames="wrapper, handle" />
        <property name="Wrapper" propertytype="System.Object" />
        <property name="Handle" propertytype="System.IntPtr" />
        <operator name="op_Explicit(System.Runtime.InteropServices.HandleRef)" argnames="value" />
    </struct>
    <struct name="BIND_OPTS" namespace="System.Runtime.InteropServices">
        <field name="cbStruct" />
        <field name="grfFlags" />
        <field name="grfMode" />
        <field name="dwTickCountDeadline" />
    </struct>
    <struct name="CONNECTDATA" namespace="System.Runtime.InteropServices">
        <field name="pUnk" />
        <field name="dwCookie" />
    </struct>
    <struct name="FILETIME" namespace="System.Runtime.InteropServices">
        <field name="dwLowDateTime" />
        <field name="dwHighDateTime" />
    </struct>
    <struct name="STATSTG" namespace="System.Runtime.InteropServices">
        <field name="pwcsName" />
        <field name="type" />
        <field name="cbSize" />
        <field name="mtime" />
        <field name="ctime" />
        <field name="atime" />
        <field name="grfMode" />
        <field name="grfLocksSupported" />
        <field name="clsid" />
        <field name="grfStateBits" />
        <field name="reserved" />
    </struct>
    <struct name="BINDPTR" namespace="System.Runtime.InteropServices">
        <field name="lpfuncdesc" />
        <field name="lpvardesc" />
        <field name="lptcomp" />
    </struct>
    <struct name="TYPEATTR" namespace="System.Runtime.InteropServices">
        <field name="guid" />
        <field name="lcid" />
        <field name="dwReserved" />
        <field name="memidConstructor" />
        <field name="memidDestructor" />
        <field name="lpstrSchema" />
        <field name="cbSizeInstance" />
        <field name="typekind" />
        <field name="cFuncs" />
        <field name="cVars" />
        <field name="cImplTypes" />
        <field name="cbSizeVft" />
        <field name="cbAlignment" />
        <field name="wTypeFlags" />
        <field name="wMajorVerNum" />
        <field name="wMinorVerNum" />
        <field name="tdescAlias" />
        <field name="idldescType" />
        <field name="MEMBER_ID_NIL" />
    </struct>
    <struct name="FUNCDESC" namespace="System.Runtime.InteropServices">
        <field name="memid" />
        <field name="lprgscode" />
        <field name="lprgelemdescParam" />
        <field name="funckind" />
        <field name="invkind" />
        <field name="callconv" />
        <field name="cParams" />
        <field name="cParamsOpt" />
        <field name="oVft" />
        <field name="cScodes" />
        <field name="elemdescFunc" />
        <field name="wFuncFlags" />
    </struct>
    <struct name="IDLDESC" namespace="System.Runtime.InteropServices">
        <field name="dwReserved" />
        <field name="wIDLFlags" />
    </struct>
    <struct name="PARAMDESC" namespace="System.Runtime.InteropServices">
        <field name="lpVarValue" />
        <field name="wParamFlags" />
    </struct>
    <struct name="TYPEDESC" namespace="System.Runtime.InteropServices">
        <field name="lpValue" />
        <field name="vt" />
    </struct>
    <struct name="ELEMDESC" namespace="System.Runtime.InteropServices">
        <struct name="DESCUNION" namespace="System.Runtime.InteropServices">
            <field name="idldesc" />
            <field name="paramdesc" />
        </struct>
        <field name="tdesc" />
        <field name="desc" />
    </struct>
    <struct name="DESCUNION" namespace="System.Runtime.InteropServices">
        <field name="idldesc" />
        <field name="paramdesc" />
    </struct>
    <struct name="VARDESC" namespace="System.Runtime.InteropServices">
        <struct name="DESCUNION" namespace="System.Runtime.InteropServices">
            <field name="oInst" />
            <field name="lpvarValue" />
        </struct>
        <field name="memid" />
        <field name="lpstrSchema" />
        <field name="elemdescVar" />
        <field name="wVarFlags" />
        <field name="varkind" />
    </struct>
    <struct name="DESCUNION" namespace="System.Runtime.InteropServices">
        <field name="oInst" />
        <field name="lpvarValue" />
    </struct>
    <struct name="DISPPARAMS" namespace="System.Runtime.InteropServices">
        <field name="rgvarg" />
        <field name="rgdispidNamedArgs" />
        <field name="cArgs" />
        <field name="cNamedArgs" />
    </struct>
    <struct name="EXCEPINFO" namespace="System.Runtime.InteropServices">
        <field name="wCode" />
        <field name="wReserved" />
        <field name="bstrSource" />
        <field name="bstrDescription" />
        <field name="bstrHelpFile" />
        <field name="dwHelpContext" />
        <field name="pvReserved" />
        <field name="pfnDeferredFillIn" />
    </struct>
    <struct name="TYPELIBATTR" namespace="System.Runtime.InteropServices">
        <field name="guid" />
        <field name="lcid" />
        <field name="syskind" />
        <field name="wMajorVerNum" />
        <field name="wMinorVerNum" />
        <field name="wLibFlags" />
    </struct>
    <delegate name="ObjectCreationDelegate" namespace="System.Runtime.InteropServices">
        <constructor name="ObjectCreationDelegate(System.Object, System.IntPtr)" argnames="object, method" />
        <method name="EndInvoke(System.IAsyncResult)" argnames="result" returntype="System.IntPtr" />
        <method name="BeginInvoke(System.IntPtr, System.AsyncCallback, System.Object)" argnames="aggregator, callback, object" returntype="System.IAsyncResult" />
        <method name="Invoke(System.IntPtr)" argnames="aggregator" returntype="System.IntPtr" />
    </delegate>
    <enum name="ComInterfaceType" namespace="System.Runtime.InteropServices">
        <field name="InterfaceIsDual" />
        <field name="InterfaceIsIUnknown" />
        <field name="InterfaceIsIDispatch" />
    </enum>
    <enum name="ClassInterfaceType" namespace="System.Runtime.InteropServices">
        <field name="None" />
        <field name="AutoDispatch" />
        <field name="AutoDual" />
    </enum>
    <enum name="IDispatchImplType" namespace="System.Runtime.InteropServices">
        <field name="SystemDefinedImpl" />
        <field name="InternalImpl" />
        <field name="CompatibleImpl" />
    </enum>
    <enum name="TypeLibTypeFlags" namespace="System.Runtime.InteropServices">
        <field name="FAppObject" />
        <field name="FCanCreate" />
        <field name="FLicensed" />
        <field name="FPreDeclId" />
        <field name="FHidden" />
        <field name="FControl" />
        <field name="FDual" />
        <field name="FNonExtensible" />
        <field name="FOleAutomation" />
        <field name="FRestricted" />
        <field name="FAggregatable" />
        <field name="FReplaceable" />
        <field name="FDispatchable" />
        <field name="FReverseBind" />
    </enum>
    <enum name="TypeLibFuncFlags" namespace="System.Runtime.InteropServices">
        <field name="FRestricted" />
        <field name="FSource" />
        <field name="FBindable" />
        <field name="FRequestEdit" />
        <field name="FDisplayBind" />
        <field name="FDefaultBind" />
        <field name="FHidden" />
        <field name="FUsesGetLastError" />
        <field name="FDefaultCollelem" />
        <field name="FUiDefault" />
        <field name="FNonBrowsable" />
        <field name="FReplaceable" />
        <field name="FImmediateBind" />
    </enum>
    <enum name="TypeLibVarFlags" namespace="System.Runtime.InteropServices">
        <field name="FReadOnly" />
        <field name="FSource" />
        <field name="FBindable" />
        <field name="FRequestEdit" />
        <field name="FDisplayBind" />
        <field name="FDefaultBind" />
        <field name="FHidden" />
        <field name="FRestricted" />
        <field name="FDefaultCollelem" />
        <field name="FUiDefault" />
        <field name="FNonBrowsable" />
        <field name="FReplaceable" />
        <field name="FImmediateBind" />
    </enum>
    <enum name="VarEnum" namespace="System.Runtime.InteropServices">
        <field name="VT_EMPTY" />
        <field name="VT_NULL" />
        <field name="VT_I2" />
        <field name="VT_I4" />
        <field name="VT_R4" />
        <field name="VT_R8" />
        <field name="VT_CY" />
        <field name="VT_DATE" />
        <field name="VT_BSTR" />
        <field name="VT_DISPATCH" />
        <field name="VT_ERROR" />
        <field name="VT_BOOL" />
        <field name="VT_VARIANT" />
        <field name="VT_UNKNOWN" />
        <field name="VT_DECIMAL" />
        <field name="VT_I1" />
        <field name="VT_UI1" />
        <field name="VT_UI2" />
        <field name="VT_UI4" />
        <field name="VT_I8" />
        <field name="VT_UI8" />
        <field name="VT_INT" />
        <field name="VT_UINT" />
        <field name="VT_VOID" />
        <field name="VT_HRESULT" />
        <field name="VT_PTR" />
        <field name="VT_SAFEARRAY" />
        <field name="VT_CARRAY" />
        <field name="VT_USERDEFINED" />
        <field name="VT_LPSTR" />
        <field name="VT_LPWSTR" />
        <field name="VT_RECORD" />
        <field name="VT_FILETIME" />
        <field name="VT_BLOB" />
        <field name="VT_STREAM" />
        <field name="VT_STORAGE" />
        <field name="VT_STREAMED_OBJECT" />
        <field name="VT_STORED_OBJECT" />
        <field name="VT_BLOB_OBJECT" />
        <field name="VT_CF" />
        <field name="VT_CLSID" />
        <field name="VT_VECTOR" />
        <field name="VT_ARRAY" />
        <field name="VT_BYREF" />
    </enum>
    <enum name="UnmanagedType" namespace="System.Runtime.InteropServices">
        <field name="Bool" />
        <field name="I1" />
        <field name="U1" />
        <field name="I2" />
        <field name="U2" />
        <field name="I4" />
        <field name="U4" />
        <field name="I8" />
        <field name="U8" />
        <field name="R4" />
        <field name="R8" />
        <field name="Currency" />
        <field name="BStr" />
        <field name="LPStr" />
        <field name="LPWStr" />
        <field name="LPTStr" />
        <field name="ByValTStr" />
        <field name="IUnknown" />
        <field name="IDispatch" />
        <field name="Struct" />
        <field name="Interface" />
        <field name="SafeArray" />
        <field name="ByValArray" />
        <field name="SysInt" />
        <field name="SysUInt" />
        <field name="VBByRefStr" />
        <field name="AnsiBStr" />
        <field name="TBStr" />
        <field name="VariantBool" />
        <field name="FunctionPtr" />
        <field name="AsAny" />
        <field name="LPArray" />
        <field name="LPStruct" />
        <field name="CustomMarshaler" />
        <field name="Error" />
    </enum>
    <enum name="CallingConvention" namespace="System.Runtime.InteropServices">
        <field name="Winapi" />
        <field name="Cdecl" />
        <field name="StdCall" />
        <field name="ThisCall" />
        <field name="FastCall" />
    </enum>
    <enum name="CharSet" namespace="System.Runtime.InteropServices">
        <field name="None" />
        <field name="Ansi" />
        <field name="Unicode" />
        <field name="Auto" />
    </enum>
    <enum name="ComMemberType" namespace="System.Runtime.InteropServices">
        <field name="Method" />
        <field name="PropGet" />
        <field name="PropSet" />
    </enum>
    <enum name="GCHandleType" namespace="System.Runtime.InteropServices">
        <field name="Weak" />
        <field name="WeakTrackResurrection" />
        <field name="Normal" />
        <field name="Pinned" />
    </enum>
    <enum name="AssemblyRegistrationFlags" namespace="System.Runtime.InteropServices">
        <field name="None" />
        <field name="SetCodeBase" />
    </enum>
    <enum name="TypeLibImporterFlags" namespace="System.Runtime.InteropServices">
        <field name="PrimaryInteropAssembly" />
        <field name="UnsafeInterfaces" />
        <field name="SafeArrayAsSystemArray" />
    </enum>
    <enum name="TypeLibExporterFlags" namespace="System.Runtime.InteropServices">
        <field name="OnlyReferenceRegistered" />
    </enum>
    <enum name="ImporterEventKind" namespace="System.Runtime.InteropServices">
        <field name="NOTIF_TYPECONVERTED" />
        <field name="NOTIF_CONVERTWARNING" />
        <field name="ERROR_REFTOINVALIDTYPELIB" />
    </enum>
    <enum name="ExporterEventKind" namespace="System.Runtime.InteropServices">
        <field name="NOTIF_TYPECONVERTED" />
        <field name="NOTIF_CONVERTWARNING" />
        <field name="ERROR_REFTOINVALIDASSEMBLY" />
    </enum>
    <enum name="LayoutKind" namespace="System.Runtime.InteropServices">
        <field name="Sequential" />
        <field name="Explicit" />
        <field name="Auto" />
    </enum>
    <enum name="DESCKIND" namespace="System.Runtime.InteropServices">
        <field name="DESCKIND_NONE" />
        <field name="DESCKIND_FUNCDESC" />
        <field name="DESCKIND_VARDESC" />
        <field name="DESCKIND_TYPECOMP" />
        <field name="DESCKIND_IMPLICITAPPOBJ" />
        <field name="DESCKIND_MAX" />
    </enum>
    <enum name="TYPEKIND" namespace="System.Runtime.InteropServices">
        <field name="TKIND_ENUM" />
        <field name="TKIND_RECORD" />
        <field name="TKIND_MODULE" />
        <field name="TKIND_INTERFACE" />
        <field name="TKIND_DISPATCH" />
        <field name="TKIND_COCLASS" />
        <field name="TKIND_ALIAS" />
        <field name="TKIND_UNION" />
        <field name="TKIND_MAX" />
    </enum>
    <enum name="TYPEFLAGS" namespace="System.Runtime.InteropServices">
        <field name="TYPEFLAG_FAPPOBJECT" />
        <field name="TYPEFLAG_FCANCREATE" />
        <field name="TYPEFLAG_FLICENSED" />
        <field name="TYPEFLAG_FPREDECLID" />
        <field name="TYPEFLAG_FHIDDEN" />
        <field name="TYPEFLAG_FCONTROL" />
        <field name="TYPEFLAG_FDUAL" />
        <field name="TYPEFLAG_FNONEXTENSIBLE" />
        <field name="TYPEFLAG_FOLEAUTOMATION" />
        <field name="TYPEFLAG_FRESTRICTED" />
        <field name="TYPEFLAG_FAGGREGATABLE" />
        <field name="TYPEFLAG_FREPLACEABLE" />
        <field name="TYPEFLAG_FDISPATCHABLE" />
        <field name="TYPEFLAG_FREVERSEBIND" />
        <field name="TYPEFLAG_FPROXY" />
    </enum>
    <enum name="IMPLTYPEFLAGS" namespace="System.Runtime.InteropServices">
        <field name="IMPLTYPEFLAG_FDEFAULT" />
        <field name="IMPLTYPEFLAG_FSOURCE" />
        <field name="IMPLTYPEFLAG_FRESTRICTED" />
        <field name="IMPLTYPEFLAG_FDEFAULTVTABLE" />
    </enum>
    <enum name="IDLFLAG" namespace="System.Runtime.InteropServices">
        <field name="IDLFLAG_NONE" />
        <field name="IDLFLAG_FIN" />
        <field name="IDLFLAG_FOUT" />
        <field name="IDLFLAG_FLCID" />
        <field name="IDLFLAG_FRETVAL" />
    </enum>
    <enum name="PARAMFLAG" namespace="System.Runtime.InteropServices">
        <field name="PARAMFLAG_NONE" />
        <field name="PARAMFLAG_FIN" />
        <field name="PARAMFLAG_FOUT" />
        <field name="PARAMFLAG_FLCID" />
        <field name="PARAMFLAG_FRETVAL" />
        <field name="PARAMFLAG_FOPT" />
        <field name="PARAMFLAG_FHASDEFAULT" />
        <field name="PARAMFLAG_FHASCUSTDATA" />
    </enum>
    <enum name="FUNCKIND" namespace="System.Runtime.InteropServices">
        <field name="FUNC_VIRTUAL" />
        <field name="FUNC_PUREVIRTUAL" />
        <field name="FUNC_NONVIRTUAL" />
        <field name="FUNC_STATIC" />
        <field name="FUNC_DISPATCH" />
    </enum>
    <enum name="INVOKEKIND" namespace="System.Runtime.InteropServices">
        <field name="INVOKE_FUNC" />
        <field name="INVOKE_PROPERTYGET" />
        <field name="INVOKE_PROPERTYPUT" />
        <field name="INVOKE_PROPERTYPUTREF" />
    </enum>
    <enum name="CALLCONV" namespace="System.Runtime.InteropServices">
        <field name="CC_CDECL" />
        <field name="CC_MSCPASCAL" />
        <field name="CC_PASCAL" />
        <field name="CC_MACPASCAL" />
        <field name="CC_STDCALL" />
        <field name="CC_RESERVED" />
        <field name="CC_SYSCALL" />
        <field name="CC_MPWCDECL" />
        <field name="CC_MPWPASCAL" />
        <field name="CC_MAX" />
    </enum>
    <enum name="FUNCFLAGS" namespace="System.Runtime.InteropServices">
        <field name="FUNCFLAG_FRESTRICTED" />
        <field name="FUNCFLAG_FSOURCE" />
        <field name="FUNCFLAG_FBINDABLE" />
        <field name="FUNCFLAG_FREQUESTEDIT" />
        <field name="FUNCFLAG_FDISPLAYBIND" />
        <field name="FUNCFLAG_FDEFAULTBIND" />
        <field name="FUNCFLAG_FHIDDEN" />
        <field name="FUNCFLAG_FUSESGETLASTERROR" />
        <field name="FUNCFLAG_FDEFAULTCOLLELEM" />
        <field name="FUNCFLAG_FUIDEFAULT" />
        <field name="FUNCFLAG_FNONBROWSABLE" />
        <field name="FUNCFLAG_FREPLACEABLE" />
        <field name="FUNCFLAG_FIMMEDIATEBIND" />
    </enum>
    <enum name="VARFLAGS" namespace="System.Runtime.InteropServices">
        <field name="VARFLAG_FREADONLY" />
        <field name="VARFLAG_FSOURCE" />
        <field name="VARFLAG_FBINDABLE" />
        <field name="VARFLAG_FREQUESTEDIT" />
        <field name="VARFLAG_FDISPLAYBIND" />
        <field name="VARFLAG_FDEFAULTBIND" />
        <field name="VARFLAG_FHIDDEN" />
        <field name="VARFLAG_FRESTRICTED" />
        <field name="VARFLAG_FDEFAULTCOLLELEM" />
        <field name="VARFLAG_FUIDEFAULT" />
        <field name="VARFLAG_FNONBROWSABLE" />
        <field name="VARFLAG_FREPLACEABLE" />
        <field name="VARFLAG_FIMMEDIATEBIND" />
    </enum>
    <enum name="SYSKIND" namespace="System.Runtime.InteropServices">
        <field name="SYS_WIN16" />
        <field name="SYS_WIN32" />
        <field name="SYS_MAC" />
    </enum>
    <enum name="LIBFLAGS" namespace="System.Runtime.InteropServices">
        <field name="LIBFLAG_FRESTRICTED" />
        <field name="LIBFLAG_FCONTROL" />
        <field name="LIBFLAG_FHIDDEN" />
        <field name="LIBFLAG_FHASDISKIMAGE" />
    </enum>
    <interface name="IExpando" namespace="System.Runtime.InteropServices.Expando">
        <method name="RemoveMember(System.Reflection.MemberInfo)" argnames="m" returntype="System.Void" />
        <method name="AddMethod(System.String, System.Delegate)" argnames="name, method" returntype="System.Reflection.MethodInfo" />
        <method name="AddProperty(System.String)" argnames="name" returntype="System.Reflection.PropertyInfo" />
        <method name="AddField(System.String)" argnames="name" returntype="System.Reflection.FieldInfo" />
    </interface>
    <class name="AccessedThroughPropertyAttribute" namespace="System.Runtime.CompilerServices">
        <constructor name="AccessedThroughPropertyAttribute(System.String)" argnames="propertyName" />
        <property name="PropertyName" propertytype="System.String" />
    </class>
    <class name="CallConvCdecl" namespace="System.Runtime.CompilerServices">
        <constructor name="CallConvCdecl()" argnames="" />
    </class>
    <class name="CallConvStdcall" namespace="System.Runtime.CompilerServices">
        <constructor name="CallConvStdcall()" argnames="" />
    </class>
    <class name="CallConvThiscall" namespace="System.Runtime.CompilerServices">
        <constructor name="CallConvThiscall()" argnames="" />
    </class>
    <class name="CallConvFastcall" namespace="System.Runtime.CompilerServices">
        <constructor name="CallConvFastcall()" argnames="" />
    </class>
    <class name="RuntimeHelpers" namespace="System.Runtime.CompilerServices">
        <property name="OffsetToStringData" propertytype="System.Int32" />
        <method name="InitializeArray(System.Array, System.RuntimeFieldHandle)" argnames="array, fldHandle" returntype="System.Void" />
        <method name="GetObjectValue(System.Object)" argnames="obj" returntype="System.Object" />
        <method name="RunClassConstructor(System.RuntimeTypeHandle)" argnames="type" returntype="System.Void" />
    </class>
    <class name="CustomConstantAttribute" namespace="System.Runtime.CompilerServices">
        <constructor name="CustomConstantAttribute()" argnames="" />
        <property name="Value" propertytype="System.Object" />
    </class>
    <class name="DateTimeConstantAttribute" namespace="System.Runtime.CompilerServices">
        <constructor name="DateTimeConstantAttribute(System.Int64)" argnames="ticks" />
        <property name="Value" propertytype="System.Object" />
    </class>
    <class name="DiscardableAttribute" namespace="System.Runtime.CompilerServices">
        <constructor name="DiscardableAttribute()" argnames="" />
    </class>
    <class name="DecimalConstantAttribute" namespace="System.Runtime.CompilerServices">
        <constructor name="DecimalConstantAttribute(System.Byte, System.Byte, System.UInt32, System.UInt32, System.UInt32)" argnames="scale, sign, hi, mid, low" />
        <property name="Value" propertytype="System.Decimal" />
    </class>
    <class name="CompilationRelaxationsAttribute" namespace="System.Runtime.CompilerServices">
        <constructor name="CompilationRelaxationsAttribute(System.Int32)" argnames="relaxations" />
        <property name="CompilationRelaxations" propertytype="System.Int32" />
    </class>
    <class name="CompilerGlobalScopeAttribute" namespace="System.Runtime.CompilerServices">
        <constructor name="CompilerGlobalScopeAttribute()" argnames="" />
    </class>
    <class name="IDispatchConstantAttribute" namespace="System.Runtime.CompilerServices">
        <constructor name="IDispatchConstantAttribute()" argnames="" />
        <property name="Value" propertytype="System.Object" />
    </class>
    <class name="IndexerNameAttribute" namespace="System.Runtime.CompilerServices">
        <constructor name="IndexerNameAttribute(System.String)" argnames="indexerName" />
    </class>
    <class name="IsVolatile" namespace="System.Runtime.CompilerServices" />
    <class name="IUnknownConstantAttribute" namespace="System.Runtime.CompilerServices">
        <constructor name="IUnknownConstantAttribute()" argnames="" />
        <property name="Value" propertytype="System.Object" />
    </class>
    <class name="MethodImplAttribute" namespace="System.Runtime.CompilerServices">
        <constructor name="MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions)" argnames="methodImplOptions" />
        <constructor name="MethodImplAttribute(System.Int16)" argnames="value" />
        <constructor name="MethodImplAttribute()" argnames="" />
        <field name="MethodCodeType" />
        <property name="Value" propertytype="System.Runtime.CompilerServices.MethodImplOptions" />
    </class>
    <class name="RequiredAttributeAttribute" namespace="System.Runtime.CompilerServices">
        <constructor name="RequiredAttributeAttribute(System.Type)" argnames="requiredContract" />
        <property name="RequiredContract" propertytype="System.Type" />
    </class>
    <enum name="MethodImplOptions" namespace="System.Runtime.CompilerServices">
        <field name="Unmanaged" />
        <field name="ForwardRef" />
        <field name="PreserveSig" />
        <field name="InternalCall" />
        <field name="Synchronized" />
        <field name="NoInlining" />
    </enum>
    <enum name="MethodCodeType" namespace="System.Runtime.CompilerServices">
        <field name="IL" />
        <field name="Native" />
        <field name="OPTIL" />
        <field name="Runtime" />
    </enum>
    <class name="EnvironmentPermission" namespace="System.Security.Permissions">
        <constructor name="EnvironmentPermission(System.Security.Permissions.PermissionState)" argnames="state" />
        <constructor name="EnvironmentPermission(System.Security.Permissions.EnvironmentPermissionAccess, System.String)" argnames="flag, pathList" />
        <method name="IsUnrestricted()" argnames="" returntype="System.Boolean" />
        <method name="FromXml(System.Security.SecurityElement)" argnames="esd" returntype="System.Void" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
        <method name="IsSubsetOf(System.Security.IPermission)" argnames="target" returntype="System.Boolean" />
        <method name="Union(System.Security.IPermission)" argnames="other" returntype="System.Security.IPermission" />
        <method name="Intersect(System.Security.IPermission)" argnames="target" returntype="System.Security.IPermission" />
        <method name="Copy()" argnames="" returntype="System.Security.IPermission" />
        <method name="SetPathList(System.Security.Permissions.EnvironmentPermissionAccess, System.String)" argnames="flag, pathList" returntype="System.Void" />
        <method name="AddPathList(System.Security.Permissions.EnvironmentPermissionAccess, System.String)" argnames="flag, pathList" returntype="System.Void" />
        <method name="GetPathList(System.Security.Permissions.EnvironmentPermissionAccess)" argnames="flag" returntype="System.String" />
    </class>
    <class name="FileDialogPermission" namespace="System.Security.Permissions">
        <constructor name="FileDialogPermission(System.Security.Permissions.PermissionState)" argnames="state" />
        <constructor name="FileDialogPermission(System.Security.Permissions.FileDialogPermissionAccess)" argnames="access" />
        <property name="Access" propertytype="System.Security.Permissions.FileDialogPermissionAccess" />
        <method name="IsUnrestricted()" argnames="" returntype="System.Boolean" />
        <method name="FromXml(System.Security.SecurityElement)" argnames="esd" returntype="System.Void" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
        <method name="IsSubsetOf(System.Security.IPermission)" argnames="target" returntype="System.Boolean" />
        <method name="Union(System.Security.IPermission)" argnames="target" returntype="System.Security.IPermission" />
        <method name="Intersect(System.Security.IPermission)" argnames="target" returntype="System.Security.IPermission" />
        <method name="Copy()" argnames="" returntype="System.Security.IPermission" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </class>
    <class name="FileIOPermission" namespace="System.Security.Permissions">
        <constructor name="FileIOPermission(System.Security.Permissions.PermissionState)" argnames="state" />
        <constructor name="FileIOPermission(System.Security.Permissions.FileIOPermissionAccess, System.String)" argnames="access, path" />
        <constructor name="FileIOPermission(System.Security.Permissions.FileIOPermissionAccess, System.String[])" argnames="access, pathList" />
        <property name="AllLocalFiles" propertytype="System.Security.Permissions.FileIOPermissionAccess" />
        <property name="AllFiles" propertytype="System.Security.Permissions.FileIOPermissionAccess" />
        <method name="IsUnrestricted()" argnames="" returntype="System.Boolean" />
        <method name="FromXml(System.Security.SecurityElement)" argnames="esd" returntype="System.Void" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
        <method name="IsSubsetOf(System.Security.IPermission)" argnames="target" returntype="System.Boolean" />
        <method name="Union(System.Security.IPermission)" argnames="other" returntype="System.Security.IPermission" />
        <method name="Intersect(System.Security.IPermission)" argnames="target" returntype="System.Security.IPermission" />
        <method name="Copy()" argnames="" returntype="System.Security.IPermission" />
        <method name="SetPathList(System.Security.Permissions.FileIOPermissionAccess, System.String)" argnames="access, path" returntype="System.Void" />
        <method name="SetPathList(System.Security.Permissions.FileIOPermissionAccess, System.String[])" argnames="access, pathList" returntype="System.Void" />
        <method name="AddPathList(System.Security.Permissions.FileIOPermissionAccess, System.String)" argnames="access, path" returntype="System.Void" />
        <method name="AddPathList(System.Security.Permissions.FileIOPermissionAccess, System.String[])" argnames="access, pathList" returntype="System.Void" />
        <method name="GetPathList(System.Security.Permissions.FileIOPermissionAccess)" argnames="access" returntype="System.String[]" />
    </class>
    <class name="IsolatedStoragePermission" namespace="System.Security.Permissions">
        <constructor name="IsolatedStoragePermission(System.Security.Permissions.PermissionState)" argnames="state" />
        <property name="UserQuota" propertytype="System.Int64" />
        <property name="UsageAllowed" propertytype="System.Security.Permissions.IsolatedStorageContainment" />
        <method name="IsUnrestricted()" argnames="" returntype="System.Boolean" />
        <method name="FromXml(System.Security.SecurityElement)" argnames="esd" returntype="System.Void" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
    </class>
    <class name="IsolatedStorageFilePermission" namespace="System.Security.Permissions">
        <constructor name="IsolatedStorageFilePermission(System.Security.Permissions.PermissionState)" argnames="state" />
        <method name="IsSubsetOf(System.Security.IPermission)" argnames="target" returntype="System.Boolean" />
        <method name="Union(System.Security.IPermission)" argnames="target" returntype="System.Security.IPermission" />
        <method name="Intersect(System.Security.IPermission)" argnames="target" returntype="System.Security.IPermission" />
        <method name="Copy()" argnames="" returntype="System.Security.IPermission" />
    </class>
    <class name="SecurityAttribute" namespace="System.Security.Permissions">
        <constructor name="SecurityAttribute(System.Security.Permissions.SecurityAction)" argnames="action" />
        <property name="Action" propertytype="System.Security.Permissions.SecurityAction" />
        <property name="Unrestricted" propertytype="System.Boolean" />
        <method name="CreatePermission()" argnames="" returntype="System.Security.IPermission" />
    </class>
    <class name="CodeAccessSecurityAttribute" namespace="System.Security.Permissions">
        <constructor name="CodeAccessSecurityAttribute(System.Security.Permissions.SecurityAction)" argnames="action" />
    </class>
    <class name="EnvironmentPermissionAttribute" namespace="System.Security.Permissions">
        <constructor name="EnvironmentPermissionAttribute(System.Security.Permissions.SecurityAction)" argnames="action" />
        <property name="Read" propertytype="System.String" />
        <property name="Write" propertytype="System.String" />
        <property name="All" propertytype="System.String" />
        <method name="CreatePermission()" argnames="" returntype="System.Security.IPermission" />
    </class>
    <class name="FileDialogPermissionAttribute" namespace="System.Security.Permissions">
        <constructor name="FileDialogPermissionAttribute(System.Security.Permissions.SecurityAction)" argnames="action" />
        <property name="Open" propertytype="System.Boolean" />
        <property name="Save" propertytype="System.Boolean" />
        <method name="CreatePermission()" argnames="" returntype="System.Security.IPermission" />
    </class>
    <class name="FileIOPermissionAttribute" namespace="System.Security.Permissions">
        <constructor name="FileIOPermissionAttribute(System.Security.Permissions.SecurityAction)" argnames="action" />
        <property name="Read" propertytype="System.String" />
        <property name="Write" propertytype="System.String" />
        <property name="Append" propertytype="System.String" />
        <property name="PathDiscovery" propertytype="System.String" />
        <property name="All" propertytype="System.String" />
        <method name="CreatePermission()" argnames="" returntype="System.Security.IPermission" />
    </class>
    <class name="PrincipalPermissionAttribute" namespace="System.Security.Permissions">
        <constructor name="PrincipalPermissionAttribute(System.Security.Permissions.SecurityAction)" argnames="action" />
        <property name="Name" propertytype="System.String" />
        <property name="Role" propertytype="System.String" />
        <property name="Authenticated" propertytype="System.Boolean" />
        <method name="CreatePermission()" argnames="" returntype="System.Security.IPermission" />
    </class>
    <class name="ReflectionPermissionAttribute" namespace="System.Security.Permissions">
        <constructor name="ReflectionPermissionAttribute(System.Security.Permissions.SecurityAction)" argnames="action" />
        <property name="Flags" propertytype="System.Security.Permissions.ReflectionPermissionFlag" />
        <property name="TypeInformation" propertytype="System.Boolean" />
        <property name="MemberAccess" propertytype="System.Boolean" />
        <property name="ReflectionEmit" propertytype="System.Boolean" />
        <method name="CreatePermission()" argnames="" returntype="System.Security.IPermission" />
    </class>
    <class name="RegistryPermissionAttribute" namespace="System.Security.Permissions">
        <constructor name="RegistryPermissionAttribute(System.Security.Permissions.SecurityAction)" argnames="action" />
        <property name="Read" propertytype="System.String" />
        <property name="Write" propertytype="System.String" />
        <property name="Create" propertytype="System.String" />
        <property name="All" propertytype="System.String" />
        <method name="CreatePermission()" argnames="" returntype="System.Security.IPermission" />
    </class>
    <class name="SecurityPermissionAttribute" namespace="System.Security.Permissions">
        <constructor name="SecurityPermissionAttribute(System.Security.Permissions.SecurityAction)" argnames="action" />
        <property name="Flags" propertytype="System.Security.Permissions.SecurityPermissionFlag" />
        <property name="Assertion" propertytype="System.Boolean" />
        <property name="UnmanagedCode" propertytype="System.Boolean" />
        <property name="Execution" propertytype="System.Boolean" />
        <property name="SkipVerification" propertytype="System.Boolean" />
        <property name="ControlThread" propertytype="System.Boolean" />
        <property name="ControlEvidence" propertytype="System.Boolean" />
        <property name="ControlPolicy" propertytype="System.Boolean" />
        <property name="ControlDomainPolicy" propertytype="System.Boolean" />
        <property name="ControlPrincipal" propertytype="System.Boolean" />
        <property name="ControlAppDomain" propertytype="System.Boolean" />
        <property name="SerializationFormatter" propertytype="System.Boolean" />
        <property name="RemotingConfiguration" propertytype="System.Boolean" />
        <property name="Infrastructure" propertytype="System.Boolean" />
        <method name="CreatePermission()" argnames="" returntype="System.Security.IPermission" />
    </class>
    <class name="UIPermissionAttribute" namespace="System.Security.Permissions">
        <constructor name="UIPermissionAttribute(System.Security.Permissions.SecurityAction)" argnames="action" />
        <property name="Window" propertytype="System.Security.Permissions.UIPermissionWindow" />
        <property name="Clipboard" propertytype="System.Security.Permissions.UIPermissionClipboard" />
        <method name="CreatePermission()" argnames="" returntype="System.Security.IPermission" />
    </class>
    <class name="ZoneIdentityPermissionAttribute" namespace="System.Security.Permissions">
        <constructor name="ZoneIdentityPermissionAttribute(System.Security.Permissions.SecurityAction)" argnames="action" />
        <property name="Zone" propertytype="System.Security.SecurityZone" />
        <method name="CreatePermission()" argnames="" returntype="System.Security.IPermission" />
    </class>
    <class name="StrongNameIdentityPermissionAttribute" namespace="System.Security.Permissions">
        <constructor name="StrongNameIdentityPermissionAttribute(System.Security.Permissions.SecurityAction)" argnames="action" />
        <property name="Name" propertytype="System.String" />
        <property name="Version" propertytype="System.String" />
        <property name="PublicKey" propertytype="System.String" />
        <method name="CreatePermission()" argnames="" returntype="System.Security.IPermission" />
    </class>
    <class name="SiteIdentityPermissionAttribute" namespace="System.Security.Permissions">
        <constructor name="SiteIdentityPermissionAttribute(System.Security.Permissions.SecurityAction)" argnames="action" />
        <property name="Site" propertytype="System.String" />
        <method name="CreatePermission()" argnames="" returntype="System.Security.IPermission" />
    </class>
    <class name="UrlIdentityPermissionAttribute" namespace="System.Security.Permissions">
        <constructor name="UrlIdentityPermissionAttribute(System.Security.Permissions.SecurityAction)" argnames="action" />
        <property name="Url" propertytype="System.String" />
        <method name="CreatePermission()" argnames="" returntype="System.Security.IPermission" />
    </class>
    <class name="PublisherIdentityPermissionAttribute" namespace="System.Security.Permissions">
        <constructor name="PublisherIdentityPermissionAttribute(System.Security.Permissions.SecurityAction)" argnames="action" />
        <property name="X509Certificate" propertytype="System.String" />
        <property name="CertFile" propertytype="System.String" />
        <property name="SignedFile" propertytype="System.String" />
        <method name="CreatePermission()" argnames="" returntype="System.Security.IPermission" />
    </class>
    <class name="IsolatedStoragePermissionAttribute" namespace="System.Security.Permissions">
        <constructor name="IsolatedStoragePermissionAttribute(System.Security.Permissions.SecurityAction)" argnames="action" />
        <property name="UserQuota" propertytype="System.Int64" />
        <property name="UsageAllowed" propertytype="System.Security.Permissions.IsolatedStorageContainment" />
    </class>
    <class name="IsolatedStorageFilePermissionAttribute" namespace="System.Security.Permissions">
        <constructor name="IsolatedStorageFilePermissionAttribute(System.Security.Permissions.SecurityAction)" argnames="action" />
        <method name="CreatePermission()" argnames="" returntype="System.Security.IPermission" />
    </class>
    <class name="PermissionSetAttribute" namespace="System.Security.Permissions">
        <constructor name="PermissionSetAttribute(System.Security.Permissions.SecurityAction)" argnames="action" />
        <property name="File" propertytype="System.String" />
        <property name="UnicodeEncoded" propertytype="System.Boolean" />
        <property name="Name" propertytype="System.String" />
        <property name="XML" propertytype="System.String" />
        <method name="CreatePermission()" argnames="" returntype="System.Security.IPermission" />
        <method name="CreatePermissionSet()" argnames="" returntype="System.Security.PermissionSet" />
    </class>
    <class name="PublisherIdentityPermission" namespace="System.Security.Permissions">
        <constructor name="PublisherIdentityPermission(System.Security.Permissions.PermissionState)" argnames="state" />
        <constructor name="PublisherIdentityPermission(System.Security.Cryptography.X509Certificates.X509Certificate)" argnames="certificate" />
        <property name="Certificate" propertytype="System.Security.Cryptography.X509Certificates.X509Certificate" />
        <method name="FromXml(System.Security.SecurityElement)" argnames="esd" returntype="System.Void" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
        <method name="IsSubsetOf(System.Security.IPermission)" argnames="target" returntype="System.Boolean" />
        <method name="Union(System.Security.IPermission)" argnames="target" returntype="System.Security.IPermission" />
        <method name="Intersect(System.Security.IPermission)" argnames="target" returntype="System.Security.IPermission" />
        <method name="Copy()" argnames="" returntype="System.Security.IPermission" />
    </class>
    <class name="ReflectionPermission" namespace="System.Security.Permissions">
        <constructor name="ReflectionPermission(System.Security.Permissions.PermissionState)" argnames="state" />
        <constructor name="ReflectionPermission(System.Security.Permissions.ReflectionPermissionFlag)" argnames="flag" />
        <property name="Flags" propertytype="System.Security.Permissions.ReflectionPermissionFlag" />
        <method name="IsUnrestricted()" argnames="" returntype="System.Boolean" />
        <method name="FromXml(System.Security.SecurityElement)" argnames="esd" returntype="System.Void" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
        <method name="IsSubsetOf(System.Security.IPermission)" argnames="target" returntype="System.Boolean" />
        <method name="Union(System.Security.IPermission)" argnames="other" returntype="System.Security.IPermission" />
        <method name="Intersect(System.Security.IPermission)" argnames="target" returntype="System.Security.IPermission" />
        <method name="Copy()" argnames="" returntype="System.Security.IPermission" />
    </class>
    <class name="RegistryPermission" namespace="System.Security.Permissions">
        <constructor name="RegistryPermission(System.Security.Permissions.PermissionState)" argnames="state" />
        <constructor name="RegistryPermission(System.Security.Permissions.RegistryPermissionAccess, System.String)" argnames="access, pathList" />
        <method name="IsUnrestricted()" argnames="" returntype="System.Boolean" />
        <method name="FromXml(System.Security.SecurityElement)" argnames="esd" returntype="System.Void" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
        <method name="IsSubsetOf(System.Security.IPermission)" argnames="target" returntype="System.Boolean" />
        <method name="Union(System.Security.IPermission)" argnames="other" returntype="System.Security.IPermission" />
        <method name="Intersect(System.Security.IPermission)" argnames="target" returntype="System.Security.IPermission" />
        <method name="Copy()" argnames="" returntype="System.Security.IPermission" />
        <method name="SetPathList(System.Security.Permissions.RegistryPermissionAccess, System.String)" argnames="access, pathList" returntype="System.Void" />
        <method name="AddPathList(System.Security.Permissions.RegistryPermissionAccess, System.String)" argnames="access, pathList" returntype="System.Void" />
        <method name="GetPathList(System.Security.Permissions.RegistryPermissionAccess)" argnames="access" returntype="System.String" />
    </class>
    <class name="PrincipalPermission" namespace="System.Security.Permissions">
        <constructor name="PrincipalPermission(System.Security.Permissions.PermissionState)" argnames="state" />
        <constructor name="PrincipalPermission(System.String, System.String)" argnames="name, role" />
        <constructor name="PrincipalPermission(System.String, System.String, System.Boolean)" argnames="name, role, isAuthenticated" />
        <method name="IsUnrestricted()" argnames="" returntype="System.Boolean" />
        <method name="FromXml(System.Security.SecurityElement)" argnames="elem" returntype="System.Void" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
        <method name="Demand()" argnames="" returntype="System.Void" />
        <method name="IsSubsetOf(System.Security.IPermission)" argnames="target" returntype="System.Boolean" />
        <method name="Union(System.Security.IPermission)" argnames="other" returntype="System.Security.IPermission" />
        <method name="Intersect(System.Security.IPermission)" argnames="target" returntype="System.Security.IPermission" />
        <method name="Copy()" argnames="" returntype="System.Security.IPermission" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </class>
    <class name="SecurityPermission" namespace="System.Security.Permissions">
        <constructor name="SecurityPermission(System.Security.Permissions.PermissionState)" argnames="state" />
        <constructor name="SecurityPermission(System.Security.Permissions.SecurityPermissionFlag)" argnames="flag" />
        <property name="Flags" propertytype="System.Security.Permissions.SecurityPermissionFlag" />
        <method name="IsUnrestricted()" argnames="" returntype="System.Boolean" />
        <method name="FromXml(System.Security.SecurityElement)" argnames="esd" returntype="System.Void" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
        <method name="IsSubsetOf(System.Security.IPermission)" argnames="target" returntype="System.Boolean" />
        <method name="Union(System.Security.IPermission)" argnames="target" returntype="System.Security.IPermission" />
        <method name="Intersect(System.Security.IPermission)" argnames="target" returntype="System.Security.IPermission" />
        <method name="Copy()" argnames="" returntype="System.Security.IPermission" />
    </class>
    <class name="SiteIdentityPermission" namespace="System.Security.Permissions">
        <constructor name="SiteIdentityPermission(System.Security.Permissions.PermissionState)" argnames="state" />
        <constructor name="SiteIdentityPermission(System.String)" argnames="site" />
        <property name="Site" propertytype="System.String" />
        <method name="FromXml(System.Security.SecurityElement)" argnames="esd" returntype="System.Void" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
        <method name="IsSubsetOf(System.Security.IPermission)" argnames="target" returntype="System.Boolean" />
        <method name="Union(System.Security.IPermission)" argnames="target" returntype="System.Security.IPermission" />
        <method name="Intersect(System.Security.IPermission)" argnames="target" returntype="System.Security.IPermission" />
        <method name="Copy()" argnames="" returntype="System.Security.IPermission" />
    </class>
    <class name="StrongNameIdentityPermission" namespace="System.Security.Permissions">
        <constructor name="StrongNameIdentityPermission(System.Security.Permissions.PermissionState)" argnames="state" />
        <constructor name="StrongNameIdentityPermission(System.Security.Permissions.StrongNamePublicKeyBlob, System.String, System.Version)" argnames="blob, name, version" />
        <property name="PublicKey" propertytype="System.Security.Permissions.StrongNamePublicKeyBlob" />
        <property name="Name" propertytype="System.String" />
        <property name="Version" propertytype="System.Version" />
        <method name="FromXml(System.Security.SecurityElement)" argnames="e" returntype="System.Void" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
        <method name="IsSubsetOf(System.Security.IPermission)" argnames="target" returntype="System.Boolean" />
        <method name="Union(System.Security.IPermission)" argnames="target" returntype="System.Security.IPermission" />
        <method name="Intersect(System.Security.IPermission)" argnames="target" returntype="System.Security.IPermission" />
        <method name="Copy()" argnames="" returntype="System.Security.IPermission" />
    </class>
    <class name="StrongNamePublicKeyBlob" namespace="System.Security.Permissions">
        <constructor name="StrongNamePublicKeyBlob(System.Byte[])" argnames="publicKey" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="obj" returntype="System.Boolean" />
        <method name="ToString()" argnames="" returntype="System.String" />
    </class>
    <class name="UIPermission" namespace="System.Security.Permissions">
        <constructor name="UIPermission(System.Security.Permissions.PermissionState)" argnames="state" />
        <constructor name="UIPermission(System.Security.Permissions.UIPermissionWindow, System.Security.Permissions.UIPermissionClipboard)" argnames="windowFlag, clipboardFlag" />
        <constructor name="UIPermission(System.Security.Permissions.UIPermissionWindow)" argnames="windowFlag" />
        <constructor name="UIPermission(System.Security.Permissions.UIPermissionClipboard)" argnames="clipboardFlag" />
        <property name="Window" propertytype="System.Security.Permissions.UIPermissionWindow" />
        <property name="Clipboard" propertytype="System.Security.Permissions.UIPermissionClipboard" />
        <method name="IsUnrestricted()" argnames="" returntype="System.Boolean" />
        <method name="FromXml(System.Security.SecurityElement)" argnames="esd" returntype="System.Void" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
        <method name="IsSubsetOf(System.Security.IPermission)" argnames="target" returntype="System.Boolean" />
        <method name="Union(System.Security.IPermission)" argnames="target" returntype="System.Security.IPermission" />
        <method name="Intersect(System.Security.IPermission)" argnames="target" returntype="System.Security.IPermission" />
        <method name="Copy()" argnames="" returntype="System.Security.IPermission" />
    </class>
    <class name="UrlIdentityPermission" namespace="System.Security.Permissions">
        <constructor name="UrlIdentityPermission(System.Security.Permissions.PermissionState)" argnames="state" />
        <constructor name="UrlIdentityPermission(System.String)" argnames="site" />
        <property name="Url" propertytype="System.String" />
        <method name="FromXml(System.Security.SecurityElement)" argnames="esd" returntype="System.Void" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
        <method name="IsSubsetOf(System.Security.IPermission)" argnames="target" returntype="System.Boolean" />
        <method name="Union(System.Security.IPermission)" argnames="target" returntype="System.Security.IPermission" />
        <method name="Intersect(System.Security.IPermission)" argnames="target" returntype="System.Security.IPermission" />
        <method name="Copy()" argnames="" returntype="System.Security.IPermission" />
    </class>
    <class name="ZoneIdentityPermission" namespace="System.Security.Permissions">
        <constructor name="ZoneIdentityPermission(System.Security.Permissions.PermissionState)" argnames="state" />
        <constructor name="ZoneIdentityPermission(System.Security.SecurityZone)" argnames="zone" />
        <property name="SecurityZone" propertytype="System.Security.SecurityZone" />
        <method name="FromXml(System.Security.SecurityElement)" argnames="esd" returntype="System.Void" />
        <method name="ToXml()" argnames="" returntype="System.Security.SecurityElement" />
        <method name="IsSubsetOf(System.Security.IPermission)" argnames="target" returntype="System.Boolean" />
        <method name="Union(System.Security.IPermission)" argnames="target" returntype="System.Security.IPermission" />
        <method name="Intersect(System.Security.IPermission)" argnames="target" returntype="System.Security.IPermission" />
        <method name="Copy()" argnames="" returntype="System.Security.IPermission" />
    </class>
    <interface name="IUnrestrictedPermission" namespace="System.Security.Permissions">
        <method name="IsUnrestricted()" argnames="" returntype="System.Boolean" />
    </interface>
    <enum name="EnvironmentPermissionAccess" namespace="System.Security.Permissions">
        <field name="NoAccess" />
        <field name="Read" />
        <field name="Write" />
        <field name="AllAccess" />
    </enum>
    <enum name="FileDialogPermissionAccess" namespace="System.Security.Permissions">
        <field name="None" />
        <field name="Open" />
        <field name="Save" />
        <field name="OpenSave" />
    </enum>
    <enum name="FileIOPermissionAccess" namespace="System.Security.Permissions">
        <field name="NoAccess" />
        <field name="Read" />
        <field name="Write" />
        <field name="Append" />
        <field name="PathDiscovery" />
        <field name="AllAccess" />
    </enum>
    <enum name="IsolatedStorageContainment" namespace="System.Security.Permissions">
        <field name="None" />
        <field name="DomainIsolationByUser" />
        <field name="AssemblyIsolationByUser" />
        <field name="DomainIsolationByRoamingUser" />
        <field name="AssemblyIsolationByRoamingUser" />
        <field name="AdministerIsolatedStorageByUser" />
        <field name="UnrestrictedIsolatedStorage" />
    </enum>
    <enum name="PermissionState" namespace="System.Security.Permissions">
        <field name="Unrestricted" />
        <field name="None" />
    </enum>
    <enum name="SecurityAction" namespace="System.Security.Permissions">
        <field name="Demand" />
        <field name="Assert" />
        <field name="Deny" />
        <field name="PermitOnly" />
        <field name="LinkDemand" />
        <field name="InheritanceDemand" />
        <field name="RequestMinimum" />
        <field name="RequestOptional" />
        <field name="RequestRefuse" />
    </enum>
    <enum name="ReflectionPermissionFlag" namespace="System.Security.Permissions">
        <field name="NoFlags" />
        <field name="TypeInformation" />
        <field name="MemberAccess" />
        <field name="ReflectionEmit" />
        <field name="AllFlags" />
    </enum>
    <enum name="RegistryPermissionAccess" namespace="System.Security.Permissions">
        <field name="NoAccess" />
        <field name="Read" />
        <field name="Write" />
        <field name="Create" />
        <field name="AllAccess" />
    </enum>
    <enum name="SecurityPermissionFlag" namespace="System.Security.Permissions">
        <field name="NoFlags" />
        <field name="Assertion" />
        <field name="UnmanagedCode" />
        <field name="SkipVerification" />
        <field name="Execution" />
        <field name="ControlThread" />
        <field name="ControlEvidence" />
        <field name="ControlPolicy" />
        <field name="SerializationFormatter" />
        <field name="ControlDomainPolicy" />
        <field name="ControlPrincipal" />
        <field name="ControlAppDomain" />
        <field name="RemotingConfiguration" />
        <field name="Infrastructure" />
        <field name="AllFlags" />
    </enum>
    <enum name="UIPermissionWindow" namespace="System.Security.Permissions">
        <field name="NoWindows" />
        <field name="SafeSubWindows" />
        <field name="SafeTopLevelWindows" />
        <field name="AllWindows" />
    </enum>
    <enum name="UIPermissionClipboard" namespace="System.Security.Permissions">
        <field name="NoClipboard" />
        <field name="OwnClipboard" />
        <field name="AllClipboard" />
    </enum>
    <class name="ContextAttribute" namespace="System.Runtime.Remoting.Contexts">
        <constructor name="ContextAttribute(System.String)" argnames="name" />
        <field name="AttributeName" />
        <property name="Name" propertytype="System.String" />
        <method name="Freeze(System.Runtime.Remoting.Contexts.Context)" argnames="newContext" returntype="System.Void" />
        <method name="IsNewContextOK(System.Runtime.Remoting.Contexts.Context)" argnames="newCtx" returntype="System.Boolean" />
        <method name="GetPropertiesForNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage)" argnames="ctorMsg" returntype="System.Void" />
        <method name="IsContextOK(System.Runtime.Remoting.Contexts.Context, System.Runtime.Remoting.Activation.IConstructionCallMessage)" argnames="ctx, ctorMsg" returntype="System.Boolean" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="o" returntype="System.Boolean" />
    </class>
    <class name="Context" namespace="System.Runtime.Remoting.Contexts">
        <constructor name="Context()" argnames="" />
        <property name="ContextID" propertytype="System.Int32" />
        <property name="InternalContextID" propertytype="System.Int32" />
        <property name="AppDomain" propertytype="System.AppDomain" />
        <property name="IsDefaultContext" propertytype="System.Boolean" />
        <property name="DefaultContext" propertytype="System.Runtime.Remoting.Contexts.Context" />
        <property name="IsThreadPoolAware" propertytype="System.Boolean" />
        <property name="ContextProperties" propertytype="System.Runtime.Remoting.Contexts.IContextProperty[]" />
        <property name="MyLocalStore" propertytype="System.LocalDataStore" />
        <property name="PerContextDynamicProperties" propertytype="System.Runtime.Remoting.Contexts.IDynamicProperty[]" />
        <property name="GlobalDynamicProperties" propertytype="System.Runtime.Remoting.Contexts.IDynamicProperty[]" />
        <property name="GlobalDynamicSinks" propertytype="System.Runtime.Remoting.Contexts.ArrayWithSize" />
        <property name="DynamicSinks" propertytype="System.Runtime.Remoting.Contexts.ArrayWithSize" />
        <method name="Freeze()" argnames="" returntype="System.Void" />
        <method name="SetProperty(System.Runtime.Remoting.Contexts.IContextProperty)" argnames="prop" returntype="System.Void" />
        <method name="GetProperty(System.String)" argnames="name" returntype="System.Runtime.Remoting.Contexts.IContextProperty" />
        <method name="Finalize()" argnames="" returntype="System.Void" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="DoCallBack(System.Runtime.Remoting.Contexts.CrossContextDelegate)" argnames="deleg" returntype="System.Void" />
        <method name="AllocateDataSlot()" argnames="" returntype="System.LocalDataStoreSlot" />
        <method name="AllocateNamedDataSlot(System.String)" argnames="name" returntype="System.LocalDataStoreSlot" />
        <method name="GetNamedDataSlot(System.String)" argnames="name" returntype="System.LocalDataStoreSlot" />
        <method name="FreeNamedDataSlot(System.String)" argnames="name" returntype="System.Void" />
        <method name="SetData(System.LocalDataStoreSlot, System.Object)" argnames="slot, data" returntype="System.Void" />
        <method name="GetData(System.LocalDataStoreSlot)" argnames="slot" returntype="System.Object" />
        <method name="RegisterDynamicProperty(System.Runtime.Remoting.Contexts.IDynamicProperty, System.ContextBoundObject, System.Runtime.Remoting.Contexts.Context)" argnames="prop, obj, ctx" returntype="System.Boolean" />
        <method name="UnregisterDynamicProperty(System.String, System.ContextBoundObject, System.Runtime.Remoting.Contexts.Context)" argnames="name, obj, ctx" returntype="System.Boolean" />
    </class>
    <class name="ContextProperty" namespace="System.Runtime.Remoting.Contexts">
        <property name="Name" propertytype="System.String" />
        <property name="Property" propertytype="System.Object" />
    </class>
    <class name="SynchronizationAttribute" namespace="System.Runtime.Remoting.Contexts">
        <constructor name="SynchronizationAttribute()" argnames="" />
        <constructor name="SynchronizationAttribute(System.Boolean)" argnames="reEntrant" />
        <constructor name="SynchronizationAttribute(System.Int32)" argnames="flag" />
        <constructor name="SynchronizationAttribute(System.Int32, System.Boolean)" argnames="flag, reEntrant" />
        <field name="NOT_SUPPORTED" />
        <field name="SUPPORTED" />
        <field name="REQUIRED" />
        <field name="REQUIRES_NEW" />
        <property name="Locked" propertytype="System.Boolean" />
        <property name="IsReEntrant" propertytype="System.Boolean" />
        <property name="SyncCallOutLCID" propertytype="System.String" />
        <property name="AsyncCallOutLCIDList" propertytype="System.Collections.ArrayList" />
        <method name="GetClientContextSink(System.Runtime.Remoting.Messaging.IMessageSink)" argnames="nextSink" returntype="System.Runtime.Remoting.Messaging.IMessageSink" />
        <method name="GetServerContextSink(System.Runtime.Remoting.Messaging.IMessageSink)" argnames="nextSink" returntype="System.Runtime.Remoting.Messaging.IMessageSink" />
        <method name="GetPropertiesForNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage)" argnames="ctorMsg" returntype="System.Void" />
        <method name="IsContextOK(System.Runtime.Remoting.Contexts.Context, System.Runtime.Remoting.Activation.IConstructionCallMessage)" argnames="ctx, msg" returntype="System.Boolean" />
    </class>
    <interface name="IContextAttribute" namespace="System.Runtime.Remoting.Contexts">
        <method name="GetPropertiesForNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage)" argnames="msg" returntype="System.Void" />
        <method name="IsContextOK(System.Runtime.Remoting.Contexts.Context, System.Runtime.Remoting.Activation.IConstructionCallMessage)" argnames="ctx, msg" returntype="System.Boolean" />
    </interface>
    <interface name="IContextProperty" namespace="System.Runtime.Remoting.Contexts">
        <property name="Name" propertytype="System.String" />
        <method name="Freeze(System.Runtime.Remoting.Contexts.Context)" argnames="newContext" returntype="System.Void" />
        <method name="IsNewContextOK(System.Runtime.Remoting.Contexts.Context)" argnames="newCtx" returntype="System.Boolean" />
    </interface>
    <interface name="IContextPropertyActivator" namespace="System.Runtime.Remoting.Contexts">
        <method name="DeliverServerContextToClientContext(System.Runtime.Remoting.Activation.IConstructionReturnMessage)" argnames="msg" returntype="System.Boolean" />
        <method name="CollectFromServerContext(System.Runtime.Remoting.Activation.IConstructionReturnMessage)" argnames="msg" returntype="System.Void" />
        <method name="DeliverClientContextToServerContext(System.Runtime.Remoting.Activation.IConstructionCallMessage)" argnames="msg" returntype="System.Boolean" />
        <method name="CollectFromClientContext(System.Runtime.Remoting.Activation.IConstructionCallMessage)" argnames="msg" returntype="System.Void" />
        <method name="IsOKToActivate(System.Runtime.Remoting.Activation.IConstructionCallMessage)" argnames="msg" returntype="System.Boolean" />
    </interface>
    <interface name="IContributeClientContextSink" namespace="System.Runtime.Remoting.Contexts">
        <method name="GetClientContextSink(System.Runtime.Remoting.Messaging.IMessageSink)" argnames="nextSink" returntype="System.Runtime.Remoting.Messaging.IMessageSink" />
    </interface>
    <interface name="IContributeDynamicSink" namespace="System.Runtime.Remoting.Contexts">
        <method name="GetDynamicSink()" argnames="" returntype="System.Runtime.Remoting.Contexts.IDynamicMessageSink" />
    </interface>
    <interface name="IContributeEnvoySink" namespace="System.Runtime.Remoting.Contexts">
        <method name="GetEnvoySink(System.MarshalByRefObject, System.Runtime.Remoting.Messaging.IMessageSink)" argnames="obj, nextSink" returntype="System.Runtime.Remoting.Messaging.IMessageSink" />
    </interface>
    <interface name="IContributeObjectSink" namespace="System.Runtime.Remoting.Contexts">
        <method name="GetObjectSink(System.MarshalByRefObject, System.Runtime.Remoting.Messaging.IMessageSink)" argnames="obj, nextSink" returntype="System.Runtime.Remoting.Messaging.IMessageSink" />
    </interface>
    <interface name="IContributeServerContextSink" namespace="System.Runtime.Remoting.Contexts">
        <method name="GetServerContextSink(System.Runtime.Remoting.Messaging.IMessageSink)" argnames="nextSink" returntype="System.Runtime.Remoting.Messaging.IMessageSink" />
    </interface>
    <interface name="IDynamicProperty" namespace="System.Runtime.Remoting.Contexts">
        <property name="Name" propertytype="System.String" />
    </interface>
    <interface name="IDynamicMessageSink" namespace="System.Runtime.Remoting.Contexts">
        <method name="ProcessMessageFinish(System.Runtime.Remoting.Messaging.IMessage, System.Boolean, System.Boolean)" argnames="replyMsg, bCliSide, bAsync" returntype="System.Void" />
        <method name="ProcessMessageStart(System.Runtime.Remoting.Messaging.IMessage, System.Boolean, System.Boolean)" argnames="reqMsg, bCliSide, bAsync" returntype="System.Void" />
    </interface>
    <delegate name="CrossContextDelegate" namespace="System.Runtime.Remoting.Contexts">
        <constructor name="CrossContextDelegate(System.Object, System.IntPtr)" argnames="object, method" />
        <method name="EndInvoke(System.IAsyncResult)" argnames="result" returntype="System.Void" />
        <method name="BeginInvoke(System.AsyncCallback, System.Object)" argnames="callback, object" returntype="System.IAsyncResult" />
        <method name="Invoke()" argnames="" returntype="System.Void" />
    </delegate>
    <class name="UrlAttribute" namespace="System.Runtime.Remoting.Activation">
        <constructor name="UrlAttribute(System.String)" argnames="callsiteURL" />
        <property name="UrlValue" propertytype="System.String" />
        <method name="GetPropertiesForNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage)" argnames="ctorMsg" returntype="System.Void" />
        <method name="IsContextOK(System.Runtime.Remoting.Contexts.Context, System.Runtime.Remoting.Activation.IConstructionCallMessage)" argnames="ctx, msg" returntype="System.Boolean" />
        <method name="GetHashCode()" argnames="" returntype="System.Int32" />
        <method name="Equals(System.Object)" argnames="o" returntype="System.Boolean" />
    </class>
    <interface name="IActivator" namespace="System.Runtime.Remoting.Activation">
        <property name="NextActivator" propertytype="System.Runtime.Remoting.Activation.IActivator" />
        <property name="Level" propertytype="System.Runtime.Remoting.Activation.ActivatorLevel" />
        <method name="Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage)" argnames="msg" returntype="System.Runtime.Remoting.Activation.IConstructionReturnMessage" />
    </interface>
    <interface name="IConstructionCallMessage" namespace="System.Runtime.Remoting.Activation">
        <property name="Activator" propertytype="System.Runtime.Remoting.Activation.IActivator" />
        <property name="CallSiteActivationAttributes" propertytype="System.Object[]" />
        <property name="ActivationTypeName" propertytype="System.String" />
        <property name="ActivationType" propertytype="System.Type" />
        <property name="ContextProperties" propertytype="System.Collections.IList" />
    </interface>
    <interface name="IConstructionReturnMessage" namespace="System.Runtime.Remoting.Activation" />
    <enum name="ActivatorLevel" namespace="System.Runtime.Remoting.Activation">
        <field name="Construction" />
        <field name="Context" />
        <field name="AppDomain" />
        <field name="Process" />
        <field name="Machine" />
    </enum>
    <class name="AsyncResult" namespace="System.Runtime.Remoting.Messaging">
        <property name="IsCompleted" propertytype="System.Boolean" />
        <property name="AsyncDelegate" propertytype="System.Object" />
        <property name="AsyncState" propertytype="System.Object" />
        <property name="CompletedSynchronously" propertytype="System.Boolean" />
        <property name="EndInvokeCalled" propertytype="System.Boolean" />
        <property name="AsyncWaitHandle" propertytype="System.Threading.WaitHandle" />
        <property name="NextSink" propertytype="System.Runtime.Remoting.Messaging.IMessageSink" />
        <method name="AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Messaging.IMessageSink)" argnames="msg, replySink" returntype="System.Runtime.Remoting.Messaging.IMessageCtrl" />
        <method name="SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)" argnames="msg" returntype="System.Runtime.Remoting.Messaging.IMessage" />
        <method name="GetReplyMessage()" argnames="" returntype="System.Runtime.Remoting.Messaging.IMessage" />
        <method name="SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)" argnames="mc" returntype="System.Void" />
    </class>
    <class name="CallContext" namespace="System.Runtime.Remoting.Messaging">
        <property name="SecurityData" propertytype="System.Runtime.Remoting.Messaging.CallContextSecurityData" />
        <property name="RemotingData" propertytype="System.Runtime.Remoting.Messaging.CallContextRemotingData" />
        <method name="FreeNamedDataSlot(System.String)" argnames="name" returntype="System.Void" />
        <method name="GetData(System.String)" argnames="name" returntype="System.Object" />
        <method name="SetData(System.String, System.Object)" argnames="name, data" returntype="System.Void" />
        <method name="GetHeaders()" argnames="" returntype="System.Runtime.Remoting.Messaging.Header[]" />
        <method name="SetHeaders(System.Runtime.Remoting.Messaging.Header[])" argnames="headers" returntype="System.Void" />
    </class>
    <class name="LogicalCallContext" namespace="System.Runtime.Remoting.Messaging">
        <property name="HasInfo" propertytype="System.Boolean" />
        <property name="HasUserData" propertytype="System.Boolean" />
        <property name="RemotingData" propertytype="System.Runtime.Remoting.Messaging.CallContextRemotingData" />
        <property name="SecurityData" propertytype="System.Runtime.Remoting.Messaging.CallContextSecurityData" />
        <property name="Datastore" propertytype="System.Collections.Hashtable" />
        <property name="Principal" propertytype="System.Security.Principal.IPrincipal" />
        <method name="Clone()" argnames="" returntype="System.Object" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
        <method name="FreeNamedDataSlot(System.String)" argnames="name" returntype="System.Void" />
        <method name="GetData(System.String)" argnames="name" returntype="System.Object" />
        <method name="SetData(System.String, System.Object)" argnames="name, data" returntype="System.Void" />
    </class>
    <class name="InternalMessageWrapper" namespace="System.Runtime.Remoting.Messaging">
        <constructor name="InternalMessageWrapper(System.Runtime.Remoting.Messaging.IMessage)" argnames="msg" />
        <field name="WrappedMessage" />
    </class>
    <class name="MethodCallMessageWrapper" namespace="System.Runtime.Remoting.Messaging">
        <constructor name="MethodCallMessageWrapper(System.Runtime.Remoting.Messaging.IMethodCallMessage)" argnames="msg" />
        <property name="Uri" propertytype="System.String" />
        <property name="MethodName" propertytype="System.String" />
        <property name="TypeName" propertytype="System.String" />
        <property name="MethodSignature" propertytype="System.Object" />
        <property name="LogicalCallContext" propertytype="System.Runtime.Remoting.Messaging.LogicalCallContext" />
        <property name="MethodBase" propertytype="System.Reflection.MethodBase" />
        <property name="ArgCount" propertytype="System.Int32" />
        <property name="Args" propertytype="System.Object[]" />
        <property name="HasVarArgs" propertytype="System.Boolean" />
        <property name="InArgCount" propertytype="System.Int32" />
        <property name="InArgs" propertytype="System.Object[]" />
        <property name="Properties" propertytype="System.Collections.IDictionary" />
        <method name="GetArg(System.Int32)" argnames="argNum" returntype="System.Object" />
        <method name="GetArgName(System.Int32)" argnames="index" returntype="System.String" />
        <method name="GetInArg(System.Int32)" argnames="argNum" returntype="System.Object" />
        <method name="GetInArgName(System.Int32)" argnames="index" returntype="System.String" />
    </class>
    <class name="Header" namespace="System.Runtime.Remoting.Messaging">
        <constructor name="Header(System.String, System.Object)" argnames="_Name, _Value" />
        <constructor name="Header(System.String, System.Object, System.Boolean)" argnames="_Name, _Value, _MustUnderstand" />
        <constructor name="Header(System.String, System.Object, System.Boolean, System.String)" argnames="_Name, _Value, _MustUnderstand, _HeaderNamespace" />
        <field name="Name" />
        <field name="Value" />
        <field name="MustUnderstand" />
        <field name="HeaderNamespace" />
    </class>
    <class name="ReturnMessage" namespace="System.Runtime.Remoting.Messaging">
        <constructor name="ReturnMessage(System.Object, System.Object[], System.Int32, System.Runtime.Remoting.Messaging.LogicalCallContext, System.Runtime.Remoting.Messaging.IMethodCallMessage)" argnames="ret, outArgs, outArgsCount, callCtx, mcm" />
        <constructor name="ReturnMessage(System.Exception, System.Runtime.Remoting.Messaging.IMethodCallMessage)" argnames="e, mcm" />
        <property name="Uri" propertytype="System.String" />
        <property name="MethodName" propertytype="System.String" />
        <property name="TypeName" propertytype="System.String" />
        <property name="MethodSignature" propertytype="System.Object" />
        <property name="MethodBase" propertytype="System.Reflection.MethodBase" />
        <property name="HasVarArgs" propertytype="System.Boolean" />
        <property name="ArgCount" propertytype="System.Int32" />
        <property name="Args" propertytype="System.Object[]" />
        <property name="OutArgCount" propertytype="System.Int32" />
        <property name="OutArgs" propertytype="System.Object[]" />
        <property name="Exception" propertytype="System.Exception" />
        <property name="ReturnValue" propertytype="System.Object" />
        <property name="Properties" propertytype="System.Collections.IDictionary" />
        <property name="LogicalCallContext" propertytype="System.Runtime.Remoting.Messaging.LogicalCallContext" />
        <method name="GetArg(System.Int32)" argnames="argNum" returntype="System.Object" />
        <method name="GetArgName(System.Int32)" argnames="index" returntype="System.String" />
        <method name="GetOutArg(System.Int32)" argnames="argNum" returntype="System.Object" />
        <method name="GetOutArgName(System.Int32)" argnames="index" returntype="System.String" />
    </class>
    <class name="MethodCall" namespace="System.Runtime.Remoting.Messaging">
        <constructor name="MethodCall(System.Runtime.Remoting.Messaging.Header[])" argnames="h1" />
        <constructor name="MethodCall(System.Runtime.Remoting.Messaging.IMessage)" argnames="msg" />
        <field name="ExternalProperties" />
        <field name="InternalProperties" />
        <property name="ArgCount" propertytype="System.Int32" />
        <property name="Args" propertytype="System.Object[]" />
        <property name="InArgCount" propertytype="System.Int32" />
        <property name="InArgs" propertytype="System.Object[]" />
        <property name="MethodName" propertytype="System.String" />
        <property name="TypeName" propertytype="System.String" />
        <property name="MethodSignature" propertytype="System.Object" />
        <property name="MethodBase" propertytype="System.Reflection.MethodBase" />
        <property name="Uri" propertytype="System.String" />
        <property name="HasVarArgs" propertytype="System.Boolean" />
        <property name="Properties" propertytype="System.Collections.IDictionary" />
        <property name="LogicalCallContext" propertytype="System.Runtime.Remoting.Messaging.LogicalCallContext" />
        <method name="RootSetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, ctx" returntype="System.Void" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
        <method name="GetArg(System.Int32)" argnames="argNum" returntype="System.Object" />
        <method name="GetArgName(System.Int32)" argnames="index" returntype="System.String" />
        <method name="GetInArg(System.Int32)" argnames="argNum" returntype="System.Object" />
        <method name="GetInArgName(System.Int32)" argnames="index" returntype="System.String" />
        <method name="HeaderHandler(System.Runtime.Remoting.Messaging.Header[])" argnames="h" returntype="System.Object" />
        <method name="Init()" argnames="" returntype="System.Void" />
        <method name="ResolveMethod()" argnames="" returntype="System.Void" />
    </class>
    <class name="ConstructionCall" namespace="System.Runtime.Remoting.Messaging">
        <constructor name="ConstructionCall(System.Runtime.Remoting.Messaging.Header[])" argnames="headers" />
        <constructor name="ConstructionCall(System.Runtime.Remoting.Messaging.IMessage)" argnames="m" />
        <property name="CallSiteActivationAttributes" propertytype="System.Object[]" />
        <property name="ActivationType" propertytype="System.Type" />
        <property name="ActivationTypeName" propertytype="System.String" />
        <property name="ContextProperties" propertytype="System.Collections.IList" />
        <property name="Properties" propertytype="System.Collections.IDictionary" />
        <property name="Activator" propertytype="System.Runtime.Remoting.Activation.IActivator" />
    </class>
    <class name="MethodResponse" namespace="System.Runtime.Remoting.Messaging">
        <constructor name="MethodResponse(System.Runtime.Remoting.Messaging.Header[], System.Runtime.Remoting.Messaging.IMethodCallMessage)" argnames="h1, mcm" />
        <field name="InternalProperties" />
        <field name="ExternalProperties" />
        <property name="Uri" propertytype="System.String" />
        <property name="MethodName" propertytype="System.String" />
        <property name="TypeName" propertytype="System.String" />
        <property name="MethodSignature" propertytype="System.Object" />
        <property name="MethodBase" propertytype="System.Reflection.MethodBase" />
        <property name="HasVarArgs" propertytype="System.Boolean" />
        <property name="ArgCount" propertytype="System.Int32" />
        <property name="Args" propertytype="System.Object[]" />
        <property name="OutArgCount" propertytype="System.Int32" />
        <property name="OutArgs" propertytype="System.Object[]" />
        <property name="Exception" propertytype="System.Exception" />
        <property name="ReturnValue" propertytype="System.Object" />
        <property name="Properties" propertytype="System.Collections.IDictionary" />
        <property name="LogicalCallContext" propertytype="System.Runtime.Remoting.Messaging.LogicalCallContext" />
        <method name="RootSetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, ctx" returntype="System.Void" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
        <method name="GetArg(System.Int32)" argnames="argNum" returntype="System.Object" />
        <method name="GetArgName(System.Int32)" argnames="index" returntype="System.String" />
        <method name="GetOutArg(System.Int32)" argnames="argNum" returntype="System.Object" />
        <method name="GetOutArgName(System.Int32)" argnames="index" returntype="System.String" />
        <method name="HeaderHandler(System.Runtime.Remoting.Messaging.Header[])" argnames="h" returntype="System.Object" />
    </class>
    <class name="ConstructionResponse" namespace="System.Runtime.Remoting.Messaging">
        <constructor name="ConstructionResponse(System.Runtime.Remoting.Messaging.Header[], System.Runtime.Remoting.Messaging.IMethodCallMessage)" argnames="h, mcm" />
        <property name="Properties" propertytype="System.Collections.IDictionary" />
    </class>
    <class name="MethodReturnMessageWrapper" namespace="System.Runtime.Remoting.Messaging">
        <constructor name="MethodReturnMessageWrapper(System.Runtime.Remoting.Messaging.IMethodReturnMessage)" argnames="msg" />
        <property name="Uri" propertytype="System.String" />
        <property name="MethodName" propertytype="System.String" />
        <property name="TypeName" propertytype="System.String" />
        <property name="MethodSignature" propertytype="System.Object" />
        <property name="LogicalCallContext" propertytype="System.Runtime.Remoting.Messaging.LogicalCallContext" />
        <property name="MethodBase" propertytype="System.Reflection.MethodBase" />
        <property name="ArgCount" propertytype="System.Int32" />
        <property name="Args" propertytype="System.Object[]" />
        <property name="HasVarArgs" propertytype="System.Boolean" />
        <property name="OutArgCount" propertytype="System.Int32" />
        <property name="OutArgs" propertytype="System.Object[]" />
        <property name="Exception" propertytype="System.Exception" />
        <property name="ReturnValue" propertytype="System.Object" />
        <property name="Properties" propertytype="System.Collections.IDictionary" />
        <method name="GetArg(System.Int32)" argnames="argNum" returntype="System.Object" />
        <method name="GetArgName(System.Int32)" argnames="index" returntype="System.String" />
        <method name="GetOutArg(System.Int32)" argnames="argNum" returntype="System.Object" />
        <method name="GetOutArgName(System.Int32)" argnames="index" returntype="System.String" />
    </class>
    <class name="OneWayAttribute" namespace="System.Runtime.Remoting.Messaging">
        <constructor name="OneWayAttribute()" argnames="" />
    </class>
    <class name="RemotingSurrogateSelector" namespace="System.Runtime.Remoting.Messaging">
        <constructor name="RemotingSurrogateSelector()" argnames="" />
        <property name="Filter" propertytype="System.Runtime.Remoting.Messaging.MessageSurrogateFilter" />
        <method name="GetNextSelector()" argnames="" returntype="System.Runtime.Serialization.ISurrogateSelector" />
        <method name="GetSurrogate(System.Type, System.Runtime.Serialization.StreamingContext, System.Runtime.Serialization.ISurrogateSelector&amp;)" argnames="type, context, ssout" returntype="System.Runtime.Serialization.ISerializationSurrogate" />
        <method name="ChainSelector(System.Runtime.Serialization.ISurrogateSelector)" argnames="selector" returntype="System.Void" />
        <method name="UseSoapFormat()" argnames="" returntype="System.Void" />
        <method name="SetRootObject(System.Object)" argnames="obj" returntype="System.Void" />
        <method name="GetRootObject()" argnames="" returntype="System.Object" />
    </class>
    <interface name="IMessageSink" namespace="System.Runtime.Remoting.Messaging">
        <property name="NextSink" propertytype="System.Runtime.Remoting.Messaging.IMessageSink" />
        <method name="AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Messaging.IMessageSink)" argnames="msg, replySink" returntype="System.Runtime.Remoting.Messaging.IMessageCtrl" />
        <method name="SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)" argnames="msg" returntype="System.Runtime.Remoting.Messaging.IMessage" />
    </interface>
    <interface name="ILogicalThreadAffinative" namespace="System.Runtime.Remoting.Messaging" />
    <interface name="IMessage" namespace="System.Runtime.Remoting.Messaging">
        <property name="Properties" propertytype="System.Collections.IDictionary" />
    </interface>
    <interface name="IMethodMessage" namespace="System.Runtime.Remoting.Messaging">
        <property name="Uri" propertytype="System.String" />
        <property name="MethodName" propertytype="System.String" />
        <property name="TypeName" propertytype="System.String" />
        <property name="MethodSignature" propertytype="System.Object" />
        <property name="ArgCount" propertytype="System.Int32" />
        <property name="Args" propertytype="System.Object[]" />
        <property name="HasVarArgs" propertytype="System.Boolean" />
        <property name="LogicalCallContext" propertytype="System.Runtime.Remoting.Messaging.LogicalCallContext" />
        <property name="MethodBase" propertytype="System.Reflection.MethodBase" />
        <method name="GetArg(System.Int32)" argnames="argNum" returntype="System.Object" />
        <method name="GetArgName(System.Int32)" argnames="index" returntype="System.String" />
    </interface>
    <interface name="IMethodCallMessage" namespace="System.Runtime.Remoting.Messaging">
        <property name="InArgCount" propertytype="System.Int32" />
        <property name="InArgs" propertytype="System.Object[]" />
        <method name="GetInArg(System.Int32)" argnames="argNum" returntype="System.Object" />
        <method name="GetInArgName(System.Int32)" argnames="index" returntype="System.String" />
    </interface>
    <interface name="IMethodReturnMessage" namespace="System.Runtime.Remoting.Messaging">
        <property name="OutArgCount" propertytype="System.Int32" />
        <property name="OutArgs" propertytype="System.Object[]" />
        <property name="Exception" propertytype="System.Exception" />
        <property name="ReturnValue" propertytype="System.Object" />
        <method name="GetOutArg(System.Int32)" argnames="argNum" returntype="System.Object" />
        <method name="GetOutArgName(System.Int32)" argnames="index" returntype="System.String" />
    </interface>
    <interface name="IMessageCtrl" namespace="System.Runtime.Remoting.Messaging">
        <method name="Cancel(System.Int32)" argnames="msToCancel" returntype="System.Void" />
    </interface>
    <interface name="IRemotingFormatter" namespace="System.Runtime.Remoting.Messaging">
        <method name="Serialize(System.IO.Stream, System.Object, System.Runtime.Remoting.Messaging.Header[])" argnames="serializationStream, graph, headers" returntype="System.Void" />
        <method name="Deserialize(System.IO.Stream, System.Runtime.Remoting.Messaging.HeaderHandler)" argnames="serializationStream, handler" returntype="System.Object" />
    </interface>
    <delegate name="HeaderHandler" namespace="System.Runtime.Remoting.Messaging">
        <constructor name="HeaderHandler(System.Object, System.IntPtr)" argnames="object, method" />
        <method name="EndInvoke(System.IAsyncResult)" argnames="result" returntype="System.Object" />
        <method name="BeginInvoke(System.Runtime.Remoting.Messaging.Header[], System.AsyncCallback, System.Object)" argnames="headers, callback, object" returntype="System.IAsyncResult" />
        <method name="Invoke(System.Runtime.Remoting.Messaging.Header[])" argnames="headers" returntype="System.Object" />
    </delegate>
    <delegate name="MessageSurrogateFilter" namespace="System.Runtime.Remoting.Messaging">
        <constructor name="MessageSurrogateFilter(System.Object, System.IntPtr)" argnames="object, method" />
        <method name="EndInvoke(System.IAsyncResult)" argnames="result" returntype="System.Boolean" />
        <method name="BeginInvoke(System.String, System.Object, System.AsyncCallback, System.Object)" argnames="key, value, callback, object" returntype="System.IAsyncResult" />
        <method name="Invoke(System.String, System.Object)" argnames="key, value" returntype="System.Boolean" />
    </delegate>
    <class name="ChannelServices" namespace="System.Runtime.Remoting.Channels">
        <property name="CurrentChannelData" propertytype="System.Object[]" />
        <property name="remoteCalls" propertytype="System.Int64" />
        <property name="RegisteredChannels" propertytype="System.Runtime.Remoting.Channels.IChannel[]" />
        <method name="RegisterChannel(System.Runtime.Remoting.Channels.IChannel)" argnames="chnl" returntype="System.Void" />
        <method name="UnregisterChannel(System.Runtime.Remoting.Channels.IChannel)" argnames="chnl" returntype="System.Void" />
        <method name="GetChannel(System.String)" argnames="name" returntype="System.Runtime.Remoting.Channels.IChannel" />
        <method name="GetUrlsForObject(System.MarshalByRefObject)" argnames="obj" returntype="System.String[]" />
        <method name="GetChannelSinkProperties(System.Object)" argnames="obj" returntype="System.Collections.IDictionary" />
        <method name="DispatchMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Messaging.IMessage&amp;)" argnames="sinkStack, msg, replyMsg" returntype="System.Runtime.Remoting.Channels.ServerProcessing" />
        <method name="SyncDispatchMessage(System.Runtime.Remoting.Messaging.IMessage)" argnames="msg" returntype="System.Runtime.Remoting.Messaging.IMessage" />
        <method name="AsyncDispatchMessage(System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Messaging.IMessageSink)" argnames="msg, replySink" returntype="System.Runtime.Remoting.Messaging.IMessageCtrl" />
        <method name="CreateServerChannelSinkChain(System.Runtime.Remoting.Channels.IServerChannelSinkProvider, System.Runtime.Remoting.Channels.IChannelReceiver)" argnames="provider, channel" returntype="System.Runtime.Remoting.Channels.IServerChannelSink" />
    </class>
    <class name="ClientChannelSinkStack" namespace="System.Runtime.Remoting.Channels">
        <constructor name="ClientChannelSinkStack()" argnames="" />
        <constructor name="ClientChannelSinkStack(System.Runtime.Remoting.Messaging.IMessageSink)" argnames="replySink" />
        <method name="DispatchException(System.Exception)" argnames="e" returntype="System.Void" />
        <method name="DispatchReplyMessage(System.Runtime.Remoting.Messaging.IMessage)" argnames="msg" returntype="System.Void" />
        <method name="AsyncProcessResponse(System.Runtime.Remoting.Channels.ITransportHeaders, System.IO.Stream)" argnames="headers, stream" returntype="System.Void" />
        <method name="Pop(System.Runtime.Remoting.Channels.IClientChannelSink)" argnames="sink" returntype="System.Object" />
        <method name="Push(System.Runtime.Remoting.Channels.IClientChannelSink, System.Object)" argnames="sink, state" returntype="System.Void" />
    </class>
    <class name="ServerChannelSinkStack" namespace="System.Runtime.Remoting.Channels">
        <constructor name="ServerChannelSinkStack()" argnames="" />
        <property name="AsyncMessage" propertytype="System.Runtime.Remoting.Messaging.IMessage" />
        <property name="AsyncEnd" propertytype="System.Reflection.MethodInfo" />
        <property name="ServerObject" propertytype="System.Object" />
        <property name="Message" propertytype="System.Runtime.Remoting.Messaging.IMethodCallMessage" />
        <method name="GetResponseStream(System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Channels.ITransportHeaders)" argnames="msg, headers" returntype="System.IO.Stream" />
        <method name="AsyncProcessResponse(System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Channels.ITransportHeaders, System.IO.Stream)" argnames="msg, headers, stream" returntype="System.Void" />
        <method name="ServerCallback(System.IAsyncResult)" argnames="ar" returntype="System.Void" />
        <method name="StoreAndDispatch(System.Runtime.Remoting.Channels.IServerChannelSink, System.Object)" argnames="sink, state" returntype="System.Void" />
        <method name="Store(System.Runtime.Remoting.Channels.IServerChannelSink, System.Object)" argnames="sink, state" returntype="System.Void" />
        <method name="Pop(System.Runtime.Remoting.Channels.IServerChannelSink)" argnames="sink" returntype="System.Object" />
        <method name="Push(System.Runtime.Remoting.Channels.IServerChannelSink, System.Object)" argnames="sink, state" returntype="System.Void" />
    </class>
    <class name="ChannelDataStore" namespace="System.Runtime.Remoting.Channels">
        <constructor name="ChannelDataStore(System.String[])" argnames="channelURIs" />
        <property name="ChannelUris" propertytype="System.String[]" />
        <property name="Item" propertytype="System.Object" />
    </class>
    <class name="TransportHeaders" namespace="System.Runtime.Remoting.Channels">
        <constructor name="TransportHeaders()" argnames="" />
        <property name="Item" propertytype="System.Object" />
        <method name="GetEnumerator()" argnames="" returntype="System.Collections.IEnumerator" />
    </class>
    <class name="SinkProviderData" namespace="System.Runtime.Remoting.Channels">
        <constructor name="SinkProviderData(System.String)" argnames="name" />
        <property name="Name" propertytype="System.String" />
        <property name="Properties" propertytype="System.Collections.IDictionary" />
        <property name="Children" propertytype="System.Collections.IList" />
    </class>
    <class name="BaseChannelObjectWithProperties" namespace="System.Runtime.Remoting.Channels">
        <constructor name="BaseChannelObjectWithProperties()" argnames="" />
        <property name="Properties" propertytype="System.Collections.IDictionary" />
        <property name="Item" propertytype="System.Object" />
        <property name="Keys" propertytype="System.Collections.ICollection" />
        <property name="Values" propertytype="System.Collections.ICollection" />
        <property name="IsReadOnly" propertytype="System.Boolean" />
        <property name="IsFixedSize" propertytype="System.Boolean" />
        <property name="Count" propertytype="System.Int32" />
        <property name="SyncRoot" propertytype="System.Object" />
        <property name="IsSynchronized" propertytype="System.Boolean" />
        <method name="CopyTo(System.Array, System.Int32)" argnames="array, index" returntype="System.Void" />
        <method name="Remove(System.Object)" argnames="key" returntype="System.Void" />
        <method name="GetEnumerator()" argnames="" returntype="System.Collections.IDictionaryEnumerator" />
        <method name="Clear()" argnames="" returntype="System.Void" />
        <method name="Add(System.Object, System.Object)" argnames="key, value" returntype="System.Void" />
        <method name="Contains(System.Object)" argnames="key" returntype="System.Boolean" />
    </class>
    <class name="BaseChannelSinkWithProperties" namespace="System.Runtime.Remoting.Channels">
        <constructor name="BaseChannelSinkWithProperties()" argnames="" />
    </class>
    <class name="BaseChannelWithProperties" namespace="System.Runtime.Remoting.Channels">
        <constructor name="BaseChannelWithProperties()" argnames="" />
        <field name="SinksWithProperties" />
        <property name="Properties" propertytype="System.Collections.IDictionary" />
    </class>
    <interface name="IClientResponseChannelSinkStack" namespace="System.Runtime.Remoting.Channels">
        <method name="DispatchException(System.Exception)" argnames="e" returntype="System.Void" />
        <method name="DispatchReplyMessage(System.Runtime.Remoting.Messaging.IMessage)" argnames="msg" returntype="System.Void" />
        <method name="AsyncProcessResponse(System.Runtime.Remoting.Channels.ITransportHeaders, System.IO.Stream)" argnames="headers, stream" returntype="System.Void" />
    </interface>
    <interface name="IClientChannelSinkStack" namespace="System.Runtime.Remoting.Channels">
        <method name="Pop(System.Runtime.Remoting.Channels.IClientChannelSink)" argnames="sink" returntype="System.Object" />
        <method name="Push(System.Runtime.Remoting.Channels.IClientChannelSink, System.Object)" argnames="sink, state" returntype="System.Void" />
    </interface>
    <interface name="IServerResponseChannelSinkStack" namespace="System.Runtime.Remoting.Channels">
        <method name="GetResponseStream(System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Channels.ITransportHeaders)" argnames="msg, headers" returntype="System.IO.Stream" />
        <method name="AsyncProcessResponse(System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Channels.ITransportHeaders, System.IO.Stream)" argnames="msg, headers, stream" returntype="System.Void" />
    </interface>
    <interface name="IServerChannelSinkStack" namespace="System.Runtime.Remoting.Channels">
        <method name="ServerCallback(System.IAsyncResult)" argnames="ar" returntype="System.Void" />
        <method name="StoreAndDispatch(System.Runtime.Remoting.Channels.IServerChannelSink, System.Object)" argnames="sink, state" returntype="System.Void" />
        <method name="Store(System.Runtime.Remoting.Channels.IServerChannelSink, System.Object)" argnames="sink, state" returntype="System.Void" />
        <method name="Pop(System.Runtime.Remoting.Channels.IServerChannelSink)" argnames="sink" returntype="System.Object" />
        <method name="Push(System.Runtime.Remoting.Channels.IServerChannelSink, System.Object)" argnames="sink, state" returntype="System.Void" />
    </interface>
    <interface name="IChannel" namespace="System.Runtime.Remoting.Channels">
        <property name="ChannelPriority" propertytype="System.Int32" />
        <property name="ChannelName" propertytype="System.String" />
        <method name="Parse(System.String, System.String&amp;)" argnames="url, objectURI" returntype="System.String" />
    </interface>
    <interface name="IChannelSender" namespace="System.Runtime.Remoting.Channels">
        <method name="CreateMessageSink(System.String, System.Object, System.String&amp;)" argnames="url, remoteChannelData, objectURI" returntype="System.Runtime.Remoting.Messaging.IMessageSink" />
    </interface>
    <interface name="IChannelReceiver" namespace="System.Runtime.Remoting.Channels">
        <property name="ChannelData" propertytype="System.Object" />
        <method name="StopListening(System.Object)" argnames="data" returntype="System.Void" />
        <method name="StartListening(System.Object)" argnames="data" returntype="System.Void" />
        <method name="GetUrlsForUri(System.String)" argnames="objectURI" returntype="System.String[]" />
    </interface>
    <interface name="IServerChannelSinkProvider" namespace="System.Runtime.Remoting.Channels">
        <property name="Next" propertytype="System.Runtime.Remoting.Channels.IServerChannelSinkProvider" />
        <method name="CreateSink(System.Runtime.Remoting.Channels.IChannelReceiver)" argnames="channel" returntype="System.Runtime.Remoting.Channels.IServerChannelSink" />
        <method name="GetChannelData(System.Runtime.Remoting.Channels.IChannelDataStore)" argnames="channelData" returntype="System.Void" />
    </interface>
    <interface name="IChannelSinkBase" namespace="System.Runtime.Remoting.Channels">
        <property name="Properties" propertytype="System.Collections.IDictionary" />
    </interface>
    <interface name="IServerChannelSink" namespace="System.Runtime.Remoting.Channels">
        <property name="NextChannelSink" propertytype="System.Runtime.Remoting.Channels.IServerChannelSink" />
        <method name="GetResponseStream(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack, System.Object, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Channels.ITransportHeaders)" argnames="sinkStack, state, msg, headers" returntype="System.IO.Stream" />
        <method name="AsyncProcessResponse(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack, System.Object, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Channels.ITransportHeaders, System.IO.Stream)" argnames="sinkStack, state, msg, headers, stream" returntype="System.Void" />
        <method name="ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Channels.ITransportHeaders, System.IO.Stream, System.Runtime.Remoting.Messaging.IMessage&amp;, System.Runtime.Remoting.Channels.ITransportHeaders&amp;, System.IO.Stream&amp;)" argnames="sinkStack, requestMsg, requestHeaders, requestStream, responseMsg, responseHeaders, responseStream" returntype="System.Runtime.Remoting.Channels.ServerProcessing" />
    </interface>
    <interface name="IChannelReceiverHook" namespace="System.Runtime.Remoting.Channels">
        <property name="ChannelScheme" propertytype="System.String" />
        <property name="WantsToListen" propertytype="System.Boolean" />
        <property name="ChannelSinkChain" propertytype="System.Runtime.Remoting.Channels.IServerChannelSink" />
        <method name="AddHookChannelUri(System.String)" argnames="channelUri" returntype="System.Void" />
    </interface>
    <interface name="IClientChannelSinkProvider" namespace="System.Runtime.Remoting.Channels">
        <property name="Next" propertytype="System.Runtime.Remoting.Channels.IClientChannelSinkProvider" />
        <method name="CreateSink(System.Runtime.Remoting.Channels.IChannelSender, System.String, System.Object)" argnames="channel, url, remoteChannelData" returntype="System.Runtime.Remoting.Channels.IClientChannelSink" />
    </interface>
    <interface name="IClientFormatterSinkProvider" namespace="System.Runtime.Remoting.Channels" />
    <interface name="IServerFormatterSinkProvider" namespace="System.Runtime.Remoting.Channels" />
    <interface name="IClientChannelSink" namespace="System.Runtime.Remoting.Channels">
        <property name="NextChannelSink" propertytype="System.Runtime.Remoting.Channels.IClientChannelSink" />
        <method name="GetRequestStream(System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Channels.ITransportHeaders)" argnames="msg, headers" returntype="System.IO.Stream" />
        <method name="AsyncProcessResponse(System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack, System.Object, System.Runtime.Remoting.Channels.ITransportHeaders, System.IO.Stream)" argnames="sinkStack, state, headers, stream" returntype="System.Void" />
        <method name="AsyncProcessRequest(System.Runtime.Remoting.Channels.IClientChannelSinkStack, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Channels.ITransportHeaders, System.IO.Stream)" argnames="sinkStack, msg, headers, stream" returntype="System.Void" />
        <method name="ProcessMessage(System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Channels.ITransportHeaders, System.IO.Stream, System.Runtime.Remoting.Channels.ITransportHeaders&amp;, System.IO.Stream&amp;)" argnames="msg, requestHeaders, requestStream, responseHeaders, responseStream" returntype="System.Void" />
    </interface>
    <interface name="IClientFormatterSink" namespace="System.Runtime.Remoting.Channels" />
    <interface name="IChannelDataStore" namespace="System.Runtime.Remoting.Channels">
        <property name="ChannelUris" propertytype="System.String[]" />
        <property name="Item" propertytype="System.Object" />
    </interface>
    <interface name="ITransportHeaders" namespace="System.Runtime.Remoting.Channels">
        <property name="Item" propertytype="System.Object" />
        <method name="GetEnumerator()" argnames="" returntype="System.Collections.IEnumerator" />
    </interface>
    <enum name="ServerProcessing" namespace="System.Runtime.Remoting.Channels">
        <field name="Complete" />
        <field name="OneWay" />
        <field name="Async" />
    </enum>
    <class name="ClientSponsor" namespace="System.Runtime.Remoting.Lifetime">
        <constructor name="ClientSponsor()" argnames="" />
        <constructor name="ClientSponsor(System.TimeSpan)" argnames="renewalTime" />
        <property name="RenewalTime" propertytype="System.TimeSpan" />
        <method name="Renewal(System.Runtime.Remoting.Lifetime.ILease)" argnames="lease" returntype="System.TimeSpan" />
        <method name="InitializeLifetimeService()" argnames="" returntype="System.Object" />
        <method name="Finalize()" argnames="" returntype="System.Void" />
        <method name="Register(System.MarshalByRefObject)" argnames="obj" returntype="System.Boolean" />
        <method name="Unregister(System.MarshalByRefObject)" argnames="obj" returntype="System.Void" />
        <method name="Close()" argnames="" returntype="System.Void" />
    </class>
    <class name="LifetimeServices" namespace="System.Runtime.Remoting.Lifetime">
        <constructor name="LifetimeServices()" argnames="" />
        <property name="LeaseTime" propertytype="System.TimeSpan" />
        <property name="RenewOnCallTime" propertytype="System.TimeSpan" />
        <property name="SponsorshipTimeout" propertytype="System.TimeSpan" />
        <property name="LeaseManagerPollTime" propertytype="System.TimeSpan" />
    </class>
    <interface name="ISponsor" namespace="System.Runtime.Remoting.Lifetime">
        <method name="Renewal(System.Runtime.Remoting.Lifetime.ILease)" argnames="lease" returntype="System.TimeSpan" />
    </interface>
    <interface name="ILease" namespace="System.Runtime.Remoting.Lifetime">
        <property name="RenewOnCallTime" propertytype="System.TimeSpan" />
        <property name="SponsorshipTimeout" propertytype="System.TimeSpan" />
        <property name="InitialLeaseTime" propertytype="System.TimeSpan" />
        <property name="CurrentLeaseTime" propertytype="System.TimeSpan" />
        <property name="CurrentState" propertytype="System.Runtime.Remoting.Lifetime.LeaseState" />
        <method name="Renew(System.TimeSpan)" argnames="renewalTime" returntype="System.TimeSpan" />
        <method name="Unregister(System.Runtime.Remoting.Lifetime.ISponsor)" argnames="obj" returntype="System.Void" />
        <method name="Register(System.Runtime.Remoting.Lifetime.ISponsor)" argnames="obj" returntype="System.Void" />
        <method name="Register(System.Runtime.Remoting.Lifetime.ISponsor, System.TimeSpan)" argnames="obj, renewalTime" returntype="System.Void" />
    </interface>
    <enum name="LeaseState" namespace="System.Runtime.Remoting.Lifetime">
        <field name="Null" />
        <field name="Initial" />
        <field name="Active" />
        <field name="Renewing" />
        <field name="Expired" />
    </enum>
    <class name="EnterpriseServicesHelper" namespace="System.Runtime.Remoting.Services">
        <constructor name="EnterpriseServicesHelper()" argnames="" />
        <method name="WrapIUnknownWithComObject(System.IntPtr)" argnames="punk" returntype="System.Object" />
        <method name="CreateConstructionReturnMessage(System.Runtime.Remoting.Activation.IConstructionCallMessage, System.MarshalByRefObject)" argnames="ctorMsg, retObj" returntype="System.Runtime.Remoting.Activation.IConstructionReturnMessage" />
        <method name="SwitchWrappers(System.Runtime.Remoting.Proxies.RealProxy, System.Runtime.Remoting.Proxies.RealProxy)" argnames="oldcp, newcp" returntype="System.Void" />
    </class>
    <class name="TrackingServices" namespace="System.Runtime.Remoting.Services">
        <constructor name="TrackingServices()" argnames="" />
        <property name="RegisteredHandlers" propertytype="System.Runtime.Remoting.Services.ITrackingHandler[]" />
        <method name="RegisterTrackingHandler(System.Runtime.Remoting.Services.ITrackingHandler)" argnames="handler" returntype="System.Void" />
        <method name="UnregisterTrackingHandler(System.Runtime.Remoting.Services.ITrackingHandler)" argnames="handler" returntype="System.Void" />
    </class>
    <interface name="ITrackingHandler" namespace="System.Runtime.Remoting.Services">
        <method name="DisconnectedObject(System.Object)" argnames="obj" returntype="System.Void" />
        <method name="UnmarshaledObject(System.Object, System.Runtime.Remoting.ObjRef)" argnames="obj, or" returntype="System.Void" />
        <method name="MarshaledObject(System.Object, System.Runtime.Remoting.ObjRef)" argnames="obj, or" returntype="System.Void" />
    </interface>
    <class name="InternalRM" namespace="System.Runtime.Serialization.Formatters" />
    <class name="InternalST" namespace="System.Runtime.Serialization.Formatters" />
    <class name="SoapMessage" namespace="System.Runtime.Serialization.Formatters">
        <constructor name="SoapMessage()" argnames="" />
        <property name="ParamNames" propertytype="System.String[]" />
        <property name="ParamValues" propertytype="System.Object[]" />
        <property name="ParamTypes" propertytype="System.Type[]" />
        <property name="MethodName" propertytype="System.String" />
        <property name="XmlNameSpace" propertytype="System.String" />
        <property name="Headers" propertytype="System.Runtime.Remoting.Messaging.Header[]" />
    </class>
    <class name="SoapFault" namespace="System.Runtime.Serialization.Formatters">
        <constructor name="SoapFault()" argnames="" />
        <constructor name="SoapFault(System.String, System.String, System.String, System.Runtime.Serialization.Formatters.ServerFault)" argnames="faultCode, faultString, faultActor, serverFault" />
        <property name="FaultCode" propertytype="System.String" />
        <property name="FaultString" propertytype="System.String" />
        <property name="FaultActor" propertytype="System.String" />
        <property name="Detail" propertytype="System.Object" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
    </class>
    <class name="ServerFault" namespace="System.Runtime.Serialization.Formatters">
        <constructor name="ServerFault(System.String, System.String, System.String)" argnames="exceptionType, message, stackTrace" />
        <property name="ExceptionType" propertytype="System.String" />
        <property name="ExceptionMessage" propertytype="System.String" />
        <property name="StackTrace" propertytype="System.String" />
        <property name="Exception" propertytype="System.Exception" />
    </class>
    <interface name="IFieldInfo" namespace="System.Runtime.Serialization.Formatters">
        <property name="FieldNames" propertytype="System.String[]" />
        <property name="FieldTypes" propertytype="System.Type[]" />
    </interface>
    <interface name="ISoapMessage" namespace="System.Runtime.Serialization.Formatters">
        <property name="ParamNames" propertytype="System.String[]" />
        <property name="ParamValues" propertytype="System.Object[]" />
        <property name="ParamTypes" propertytype="System.Type[]" />
        <property name="MethodName" propertytype="System.String" />
        <property name="XmlNameSpace" propertytype="System.String" />
        <property name="Headers" propertytype="System.Runtime.Remoting.Messaging.Header[]" />
    </interface>
    <enum name="FormatterTypeStyle" namespace="System.Runtime.Serialization.Formatters">
        <field name="TypesWhenNeeded" />
        <field name="TypesAlways" />
        <field name="XsdString" />
    </enum>
    <enum name="FormatterAssemblyStyle" namespace="System.Runtime.Serialization.Formatters">
        <field name="Simple" />
        <field name="Full" />
    </enum>
    <class name="ProxyAttribute" namespace="System.Runtime.Remoting.Proxies">
        <constructor name="ProxyAttribute()" argnames="" />
        <method name="GetPropertiesForNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage)" argnames="msg" returntype="System.Void" />
        <method name="IsContextOK(System.Runtime.Remoting.Contexts.Context, System.Runtime.Remoting.Activation.IConstructionCallMessage)" argnames="ctx, msg" returntype="System.Boolean" />
        <method name="CreateProxy(System.Runtime.Remoting.ObjRef, System.Type, System.Object, System.Runtime.Remoting.Contexts.Context)" argnames="objRef, serverType, serverObject, serverContext" returntype="System.Runtime.Remoting.Proxies.RealProxy" />
        <method name="CreateInstance(System.Type)" argnames="serverType" returntype="System.MarshalByRefObject" />
    </class>
    <class name="RealProxy" namespace="System.Runtime.Remoting.Proxies">
        <constructor name="RealProxy(System.Type)" argnames="classToProxy" />
        <constructor name="RealProxy(System.Type, System.IntPtr, System.Object)" argnames="classToProxy, stub, stubData" />
        <constructor name="RealProxy()" argnames="" />
        <property name="UnwrappedServerObject" propertytype="System.MarshalByRefObject" />
        <property name="IdentityObject" propertytype="System.Runtime.Remoting.Identity" />
        <method name="GetTransparentProxy()" argnames="" returntype="System.Object" />
        <method name="SupportsInterface(System.Guid&amp;)" argnames="iid" returntype="System.IntPtr" />
        <method name="SetCOMIUnknown(System.IntPtr)" argnames="i" returntype="System.Void" />
        <method name="GetCOMIUnknown(System.Boolean)" argnames="fIsMarshalled" returntype="System.IntPtr" />
        <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" returntype="System.Void" />
        <method name="CreateObjRef(System.Type)" argnames="requestedType" returntype="System.Runtime.Remoting.ObjRef" />
        <method name="Invoke(System.Runtime.Remoting.Messaging.IMessage)" argnames="msg" returntype="System.Runtime.Remoting.Messaging.IMessage" />
        <method name="InitializeServerObject(System.Runtime.Remoting.Activation.IConstructionCallMessage)" argnames="ctorMsg" returntype="System.Runtime.Remoting.Activation.IConstructionReturnMessage" />
        <method name="GetUnwrappedServer()" argnames="" returntype="System.MarshalByRefObject" />
        <method name="DetachServer()" argnames="" returntype="System.MarshalByRefObject" />
        <method name="AttachServer(System.MarshalByRefObject)" argnames="s" returntype="System.Void" />
        <method name="SetStubData(System.Runtime.Remoting.Proxies.RealProxy, System.Object)" argnames="rp, stubData" returntype="System.Void" />
        <method name="GetStubData(System.Runtime.Remoting.Proxies.RealProxy)" argnames="rp" returntype="System.Object" />
        <method name="GetProxiedType()" argnames="" returntype="System.Type" />
    </class>
    <class name="SoapAttribute" namespace="System.Runtime.Remoting.Metadata">
        <constructor name="SoapAttribute()" argnames="" />
        <field name="ProtXmlNamespace" />
        <field name="ReflectInfo" />
        <property name="XmlNamespace" propertytype="System.String" />
        <property name="UseAttribute" propertytype="System.Boolean" />
        <property name="Embedded" propertytype="System.Boolean" />
    </class>
    <class name="SoapTypeAttribute" namespace="System.Runtime.Remoting.Metadata">
        <constructor name="SoapTypeAttribute()" argnames="" />
        <property name="SoapOptions" propertytype="System.Runtime.Remoting.Metadata.SoapOption" />
        <property name="XmlElementName" propertytype="System.String" />
        <property name="XmlNamespace" propertytype="System.String" />
        <property name="XmlTypeName" propertytype="System.String" />
        <property name="XmlTypeNamespace" propertytype="System.String" />
        <property name="XmlFieldOrder" propertytype="System.Runtime.Remoting.Metadata.XmlFieldOrderOption" />
        <property name="UseAttribute" propertytype="System.Boolean" />
    </class>
    <class name="SoapMethodAttribute" namespace="System.Runtime.Remoting.Metadata">
        <constructor name="SoapMethodAttribute()" argnames="" />
        <property name="SoapActionExplicitySet" propertytype="System.Boolean" />
        <property name="SoapAction" propertytype="System.String" />
        <property name="UseAttribute" propertytype="System.Boolean" />
        <property name="XmlNamespace" propertytype="System.String" />
        <property name="ResponseXmlElementName" propertytype="System.String" />
        <property name="ResponseXmlNamespace" propertytype="System.String" />
        <property name="ReturnXmlElementName" propertytype="System.String" />
        <property name="XmlTypeNamespaceOfDeclaringType" propertytype="System.String" />
    </class>
    <class name="SoapFieldAttribute" namespace="System.Runtime.Remoting.Metadata">
        <constructor name="SoapFieldAttribute()" argnames="" />
        <property name="XmlElementName" propertytype="System.String" />
        <property name="Order" propertytype="System.Int32" />
        <method name="IsInteropXmlElement()" argnames="" returntype="System.Boolean" />
    </class>
    <class name="SoapParameterAttribute" namespace="System.Runtime.Remoting.Metadata">
        <constructor name="SoapParameterAttribute()" argnames="" />
    </class>
    <enum name="SoapOption" namespace="System.Runtime.Remoting.Metadata">
        <field name="None" />
        <field name="AlwaysIncludeTypes" />
        <field name="XsdString" />
        <field name="EmbedAll" />
        <field name="Option1" />
        <field name="Option2" />
    </enum>
    <enum name="XmlFieldOrderOption" namespace="System.Runtime.Remoting.Metadata">
        <field name="All" />
        <field name="Sequence" />
        <field name="Choice" />
    </enum>
    <class name="SoapDateTime" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapDateTime()" argnames="" />
        <property name="XsdType" propertytype="System.String" />
        <method name="ToString(System.DateTime)" argnames="value" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.DateTime" />
    </class>
    <class name="SoapDuration" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapDuration()" argnames="" />
        <property name="XsdType" propertytype="System.String" />
        <method name="ToString(System.TimeSpan)" argnames="timeSpan" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.TimeSpan" />
    </class>
    <class name="SoapTime" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapTime()" argnames="" />
        <constructor name="SoapTime(System.DateTime)" argnames="value" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Value" propertytype="System.DateTime" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapTime" />
    </class>
    <class name="SoapDate" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapDate()" argnames="" />
        <constructor name="SoapDate(System.DateTime)" argnames="value" />
        <constructor name="SoapDate(System.DateTime, System.Int32)" argnames="value, sign" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Value" propertytype="System.DateTime" />
        <property name="Sign" propertytype="System.Int32" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate" />
    </class>
    <class name="SoapYearMonth" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapYearMonth()" argnames="" />
        <constructor name="SoapYearMonth(System.DateTime)" argnames="value" />
        <constructor name="SoapYearMonth(System.DateTime, System.Int32)" argnames="value, sign" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Value" propertytype="System.DateTime" />
        <property name="Sign" propertytype="System.Int32" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth" />
    </class>
    <class name="SoapYear" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapYear()" argnames="" />
        <constructor name="SoapYear(System.DateTime)" argnames="value" />
        <constructor name="SoapYear(System.DateTime, System.Int32)" argnames="value, sign" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Value" propertytype="System.DateTime" />
        <property name="Sign" propertytype="System.Int32" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear" />
    </class>
    <class name="SoapMonthDay" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapMonthDay()" argnames="" />
        <constructor name="SoapMonthDay(System.DateTime)" argnames="value" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Value" propertytype="System.DateTime" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonthDay" />
    </class>
    <class name="SoapDay" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapDay()" argnames="" />
        <constructor name="SoapDay(System.DateTime)" argnames="value" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Value" propertytype="System.DateTime" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDay" />
    </class>
    <class name="SoapMonth" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapMonth()" argnames="" />
        <constructor name="SoapMonth(System.DateTime)" argnames="value" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Value" propertytype="System.DateTime" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonth" />
    </class>
    <class name="SoapHexBinary" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapHexBinary()" argnames="" />
        <constructor name="SoapHexBinary(System.Byte[])" argnames="value" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Value" propertytype="System.Byte[]" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary" />
    </class>
    <class name="SoapBase64Binary" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapBase64Binary()" argnames="" />
        <constructor name="SoapBase64Binary(System.Byte[])" argnames="value" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Value" propertytype="System.Byte[]" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapBase64Binary" />
    </class>
    <class name="SoapInteger" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapInteger()" argnames="" />
        <constructor name="SoapInteger(System.Decimal)" argnames="value" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Value" propertytype="System.Decimal" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapInteger" />
    </class>
    <class name="SoapPositiveInteger" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapPositiveInteger()" argnames="" />
        <constructor name="SoapPositiveInteger(System.Decimal)" argnames="value" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Value" propertytype="System.Decimal" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapPositiveInteger" />
    </class>
    <class name="SoapNonPositiveInteger" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapNonPositiveInteger()" argnames="" />
        <constructor name="SoapNonPositiveInteger(System.Decimal)" argnames="value" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Value" propertytype="System.Decimal" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonPositiveInteger" />
    </class>
    <class name="SoapNonNegativeInteger" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapNonNegativeInteger()" argnames="" />
        <constructor name="SoapNonNegativeInteger(System.Decimal)" argnames="value" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Value" propertytype="System.Decimal" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonNegativeInteger" />
    </class>
    <class name="SoapNegativeInteger" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapNegativeInteger()" argnames="" />
        <constructor name="SoapNegativeInteger(System.Decimal)" argnames="value" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Value" propertytype="System.Decimal" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNegativeInteger" />
    </class>
    <class name="SoapAnyUri" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapAnyUri()" argnames="" />
        <constructor name="SoapAnyUri(System.String)" argnames="value" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Value" propertytype="System.String" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapAnyUri" />
    </class>
    <class name="SoapQName" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapQName()" argnames="" />
        <constructor name="SoapQName(System.String)" argnames="value" />
        <constructor name="SoapQName(System.String, System.String)" argnames="key, name" />
        <constructor name="SoapQName(System.String, System.String, System.String)" argnames="key, name, namespaceValue" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Name" propertytype="System.String" />
        <property name="Namespace" propertytype="System.String" />
        <property name="Key" propertytype="System.String" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName" />
    </class>
    <class name="SoapNotation" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapNotation()" argnames="" />
        <constructor name="SoapNotation(System.String)" argnames="value" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Value" propertytype="System.String" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNotation" />
    </class>
    <class name="SoapNormalizedString" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapNormalizedString()" argnames="" />
        <constructor name="SoapNormalizedString(System.String)" argnames="value" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Value" propertytype="System.String" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNormalizedString" />
    </class>
    <class name="SoapToken" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapToken()" argnames="" />
        <constructor name="SoapToken(System.String)" argnames="value" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Value" propertytype="System.String" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapToken" />
    </class>
    <class name="SoapLanguage" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapLanguage()" argnames="" />
        <constructor name="SoapLanguage(System.String)" argnames="value" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Value" propertytype="System.String" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapLanguage" />
    </class>
    <class name="SoapName" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapName()" argnames="" />
        <constructor name="SoapName(System.String)" argnames="value" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Value" propertytype="System.String" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapName" />
    </class>
    <class name="SoapIdrefs" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapIdrefs()" argnames="" />
        <constructor name="SoapIdrefs(System.String)" argnames="value" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Value" propertytype="System.String" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdrefs" />
    </class>
    <class name="SoapEntities" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapEntities()" argnames="" />
        <constructor name="SoapEntities(System.String)" argnames="value" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Value" propertytype="System.String" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntities" />
    </class>
    <class name="SoapNmtoken" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapNmtoken()" argnames="" />
        <constructor name="SoapNmtoken(System.String)" argnames="value" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Value" propertytype="System.String" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtoken" />
    </class>
    <class name="SoapNmtokens" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapNmtokens()" argnames="" />
        <constructor name="SoapNmtokens(System.String)" argnames="value" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Value" propertytype="System.String" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtokens" />
    </class>
    <class name="SoapNcName" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapNcName()" argnames="" />
        <constructor name="SoapNcName(System.String)" argnames="value" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Value" propertytype="System.String" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNcName" />
    </class>
    <class name="SoapId" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapId()" argnames="" />
        <constructor name="SoapId(System.String)" argnames="value" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Value" propertytype="System.String" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapId" />
    </class>
    <class name="SoapIdref" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapIdref()" argnames="" />
        <constructor name="SoapIdref(System.String)" argnames="value" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Value" propertytype="System.String" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdref" />
    </class>
    <class name="SoapEntity" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <constructor name="SoapEntity()" argnames="" />
        <constructor name="SoapEntity(System.String)" argnames="value" />
        <property name="XsdType" propertytype="System.String" />
        <property name="Value" propertytype="System.String" />
        <method name="GetXsdType()" argnames="" returntype="System.String" />
        <method name="ToString()" argnames="" returntype="System.String" />
        <method name="Parse(System.String)" argnames="value" returntype="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntity" />
    </class>
    <interface name="ISoapXsd" namespace="System.Runtime.Remoting.Metadata.W3cXsd2001">
        <method name="GetXsdType()" argnames="" returntype="System.String" />
    </interface>
    <class name="IsolatedStorage" namespace="System.IO.IsolatedStorage">
        <constructor name="IsolatedStorage()" argnames="" />
        <property name="SeparatorExternal" propertytype="System.Char" />
        <property name="SeparatorInternal" propertytype="System.Char" />
        <property name="MaximumSize" propertytype="System.UInt64" />
        <property name="CurrentSize" propertytype="System.UInt64" />
        <property name="DomainIdentity" propertytype="System.Object" />
        <property name="AssemblyIdentity" propertytype="System.Object" />
        <property name="Scope" propertytype="System.IO.IsolatedStorage.IsolatedStorageScope" />
        <property name="AppName" propertytype="System.String" />
        <property name="AssemName" propertytype="System.String" />
        <method name="GetPermission(System.Security.PermissionSet)" argnames="ps" returntype="System.Security.Permissions.IsolatedStoragePermission" />
        <method name="Remove()" argnames="" returntype="System.Void" />
        <method name="InitStore(System.IO.IsolatedStorage.IsolatedStorageScope, System.Type, System.Type)" argnames="scope, domainEvidenceType, assemblyEvidenceType" returntype="System.Void" />
    </class>
    <class name="IsolatedStorageFile" namespace="System.IO.IsolatedStorage">
        <property name="CurrentSize" propertytype="System.UInt64" />
        <property name="MaximumSize" propertytype="System.UInt64" />
        <property name="RootDirectory" propertytype="System.String" />
        <method name="Dispose()" argnames="" returntype="System.Void" />
        <method name="GetPermission(System.Security.PermissionSet)" argnames="ps" returntype="System.Security.Permissions.IsolatedStoragePermission" />
        <method name="Remove()" argnames="" returntype="System.Void" />
        <method name="Finalize()" argnames="" returntype="System.Void" />
        <method name="GetUserStoreForDomain()" argnames="" returntype="System.IO.IsolatedStorage.IsolatedStorageFile" />
        <method name="GetUserStoreForAssembly()" argnames="" returntype="System.IO.IsolatedStorage.IsolatedStorageFile" />
        <method name="GetStore(System.IO.IsolatedStorage.IsolatedStorageScope, System.Type, System.Type)" argnames="scope, domainEvidenceType, assemblyEvidenceType" returntype="System.IO.IsolatedStorage.IsolatedStorageFile" />
        <method name="GetStore(System.IO.IsolatedStorage.IsolatedStorageScope, System.Object, System.Object)" argnames="scope, domainIdentity, assemblyIdentity" returntype="System.IO.IsolatedStorage.IsolatedStorageFile" />
        <method name="GetStore(System.IO.IsolatedStorage.IsolatedStorageScope, System.Security.Policy.Evidence, System.Type, System.Security.Policy.Evidence, System.Type)" argnames="scope, domainEvidence, domainEvidenceType, assemblyEvidence, assemblyEvidenceType" returntype="System.IO.IsolatedStorage.IsolatedStorageFile" />
        <method name="DeleteFile(System.String)" argnames="file" returntype="System.Void" />
        <method name="CreateDirectory(System.String)" argnames="dir" returntype="System.Void" />
        <method name="DeleteDirectory(System.String)" argnames="dir" returntype="System.Void" />
        <method name="GetFileNames(System.String)" argnames="searchPattern" returntype="System.String[]" />
        <method name="GetDirectoryNames(System.String)" argnames="searchPattern" returntype="System.String[]" />
        <method name="Close()" argnames="" returntype="System.Void" />
        <method name="Remove(System.IO.IsolatedStorage.IsolatedStorageScope)" argnames="scope" returntype="System.Void" />
        <method name="GetEnumerator(System.IO.IsolatedStorage.IsolatedStorageScope)" argnames="scope" returntype="System.Collections.IEnumerator" />
    </class>
    <class name="IsolatedStorageFileStream" namespace="System.IO.IsolatedStorage">
        <constructor name="IsolatedStorageFileStream(System.String, System.IO.FileMode)" argnames="path, mode" />
        <constructor name="IsolatedStorageFileStream(System.String, System.IO.FileMode, System.IO.IsolatedStorage.IsolatedStorageFile)" argnames="path, mode, isf" />
        <constructor name="IsolatedStorageFileStream(System.String, System.IO.FileMode, System.IO.FileAccess)" argnames="path, mode, access" />
        <constructor name="IsolatedStorageFileStream(System.String, System.IO.FileMode, System.IO.FileAccess, System.IO.IsolatedStorage.IsolatedStorageFile)" argnames="path, mode, access, isf" />
        <constructor name="IsolatedStorageFileStream(System.String, System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare)" argnames="path, mode, access, share" />
        <constructor name="IsolatedStorageFileStream(System.String, System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare, System.IO.IsolatedStorage.IsolatedStorageFile)" argnames="path, mode, access, share, isf" />
        <constructor name="IsolatedStorageFileStream(System.String, System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare, System.Int32)" argnames="path, mode, access, share, bufferSize" />
        <constructor name="IsolatedStorageFileStream(System.String, System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare, System.Int32, System.IO.IsolatedStorage.IsolatedStorageFile)" argnames="path, mode, access, share, bufferSize, isf" />
        <property name="CanRead" propertytype="System.Boolean" />
        <property name="CanWrite" propertytype="System.Boolean" />
        <property name="CanSeek" propertytype="System.Boolean" />
        <property name="IsAsync" propertytype="System.Boolean" />
        <property name="Length" propertytype="System.Int64" />
        <property name="Position" propertytype="System.Int64" />
        <property name="Handle" propertytype="System.IntPtr" />
        <method name="Dispose(System.Boolean)" argnames="disposing" returntype="System.Void" />
        <method name="WriteByte(System.Byte)" argnames="value" returntype="System.Void" />
        <method name="Write(System.Byte[], System.Int32, System.Int32)" argnames="buffer, offset, count" returntype="System.Void" />
        <method name="ReadByte()" argnames="" returntype="System.Int32" />
        <method name="Read(System.Byte[], System.Int32, System.Int32)" argnames="buffer, offset, count" returntype="System.Int32" />
        <method name="SetLength(System.Int64)" argnames="value" returntype="System.Void" />
        <method name="Seek(System.Int64, System.IO.SeekOrigin)" argnames="offset, origin" returntype="System.Int64" />
        <method name="EndWrite(System.IAsyncResult)" argnames="asyncResult" returntype="System.Void" />
        <method name="BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object)" argnames="buffer, offset, numBytes, userCallback, stateObject" returntype="System.IAsyncResult" />
        <method name="EndRead(System.IAsyncResult)" argnames="asyncResult" returntype="System.Int32" />
        <method name="BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object)" argnames="buffer, offset, numBytes, userCallback, stateObject" returntype="System.IAsyncResult" />
        <method name="Flush()" argnames="" returntype="System.Void" />
        <method name="Close()" argnames="" returntype="System.Void" />
    </class>
    <class name="IsolatedStorageException" namespace="System.IO.IsolatedStorage">
        <constructor name="IsolatedStorageException()" argnames="" />
        <constructor name="IsolatedStorageException(System.String)" argnames="message" />
        <constructor name="IsolatedStorageException(System.String, System.Exception)" argnames="message, inner" />
        <constructor name="IsolatedStorageException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" argnames="info, context" />
    </class>
    <interface name="INormalizeForIsolatedStorage" namespace="System.IO.IsolatedStorage">
        <method name="Normalize()" argnames="" returntype="System.Object" />
    </interface>
    <enum name="IsolatedStorageScope" namespace="System.IO.IsolatedStorage">
        <field name="None" />
        <field name="User" />
        <field name="Domain" />
        <field name="Assembly" />
        <field name="Roaming" />
    </enum>
    <class name="BinaryFormatter" namespace="System.Runtime.Serialization.Formatters.Binary">
        <constructor name="BinaryFormatter()" argnames="" />
        <constructor name="BinaryFormatter(System.Runtime.Serialization.ISurrogateSelector, System.Runtime.Serialization.StreamingContext)" argnames="selector, context" />
        <property name="TypeFormat" propertytype="System.Runtime.Serialization.Formatters.FormatterTypeStyle" />
        <property name="AssemblyFormat" propertytype="System.Runtime.Serialization.Formatters.FormatterAssemblyStyle" />
        <property name="SurrogateSelector" propertytype="System.Runtime.Serialization.ISurrogateSelector" />
        <property name="Binder" propertytype="System.Runtime.Serialization.SerializationBinder" />
        <property name="Context" propertytype="System.Runtime.Serialization.StreamingContext" />
        <property name="CrossAppDomainArray" propertytype="System.Object[]" />
        <method name="Serialize(System.IO.Stream, System.Object)" argnames="serializationStream, graph" returntype="System.Void" />
        <method name="Deserialize(System.IO.Stream)" argnames="serializationStream" returntype="System.Object" />
        <method name="Serialize(System.IO.Stream, System.Object, System.Runtime.Remoting.Messaging.Header[])" argnames="serializationStream, graph, headers" returntype="System.Void" />
        <method name="Deserialize(System.IO.Stream, System.Runtime.Remoting.Messaging.HeaderHandler)" argnames="serializationStream, handler" returntype="System.Object" />
        <method name="DeserializeMethodResponse(System.IO.Stream, System.Runtime.Remoting.Messaging.HeaderHandler, System.Runtime.Remoting.Messaging.IMethodCallMessage)" argnames="serializationStream, handler, methodCallMessage" returntype="System.Object" />
    </class>
    <struct name="AssemblyHash" namespace="System.Configuration.Assemblies">
        <constructor name="AssemblyHash(System.Byte[])" argnames="value" />
        <constructor name="AssemblyHash(System.Configuration.Assemblies.AssemblyHashAlgorithm, System.Byte[])" argnames="algorithm, value" />
        <field name="Empty" />
        <property name="Algorithm" propertytype="System.Configuration.Assemblies.AssemblyHashAlgorithm" />
        <method name="Clone()" argnames="" returntype="System.Object" />
        <method name="GetValue()" argnames="" returntype="System.Byte[]" />
        <method name="SetValue(System.Byte[])" argnames="value" returntype="System.Void" />
    </struct>
    <enum name="AssemblyHashAlgorithm" namespace="System.Configuration.Assemblies">
        <field name="None" />
        <field name="MD5" />
        <field name="SHA1" />
    </enum>
    <enum name="AssemblyVersionCompatibility" namespace="System.Configuration.Assemblies">
        <field name="SameMachine" />
        <field name="SameProcess" />
        <field name="SameDomain" />
    </enum>
</masterdoc>