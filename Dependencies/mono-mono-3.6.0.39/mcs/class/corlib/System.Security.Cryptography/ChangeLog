2010-07-21  Sebastien Pouliot  <sebastien@ximian.com>

	* CryptoConfig_2_1.cs: Ensure Aes[Managed] can be created from
	our managed SSL/TLS implementation

2010-05-10  Sebastien Pouliot  <sebastien@ximian.com>

	* DES.cs:
	* DESCryptoServiceProvider.cs:
	* RC2.cs:
	* RC2CryptoServiceProvider.cs:
	* TripleDES.cs:
	* TripleDESCryptoServiceProvider.cs:
		Remove !MOONLIGHT check since we need those for SSL

2010-03-16  Jb Evain  <jbevain@novell.com>

	* Rijndael.cs
	* HMACSHA512.cs
	* RijndaelManagedTransform.cs
	* HMACSHA384.cs
	* RijndaelManaged.cs
	* CryptoConfig.cs
	* CryptoConfig_2_1.cs
	* DESCryptoServiceProvider.cs
	* SHA512Managed.cs
	* RC2.cs
	* TripleDES.cs
	* HMACRIPEMD160.cs
	* RIPEMD160.cs
	* RC2CryptoServiceProvider.cs
	* SymmetricAlgorithm.cs
	* SHA384Managed.cs
	* DSACryptoServiceProvider.cs
	* DES.cs
	* MACTripleDES.cs
	* HMACMD5.cs
	* RSACryptoServiceProvider.cs
	* RIPEMD160Managed.cs
	* TripleDESCryptoServiceProvider.cs
	* SHA1CryptoServiceProvider.cs
	* SHA512.cs
	* SHA384.cs:
		Use MOONLIGHT symbol to disambiguate MonoTouch and Moonlight code.

2010-01-07  Sebastien Pouliot  <sebastien@ximian.com>

	* ToBase64Transform.cs: Static-ify some methods to make it easier 
	to use from System.Convert

2009-12-01  Sebastien Pouliot  <sebastien@ximian.com>

	* CryptoConfig_2_1.cs: Add mapping for SHA256 since it's used 
	internally in corlib (e.g. HMAC256)
	* KeySizes.cs, RandomNumberGenerator.cs, RNGCryptoServiceProvider.cs:
	Remove [ComVisible] attribute from NET_2_1 build.

2009-09-22  Sebastien Pouliot  <sebastien@ximian.com>

	* CryptoStream.cs: Fix [Input|Output]BlockSize for custom streams.
	Patches by Santa Marta (via Atsushi).
	[Fix bug #539288 and #539229]

2009-09-18  Sebastien Pouliot  <sebastien@ximian.com>

	* RNGCryptoServiceProvider.cs: Remove unneeded SSC from NET_2_1

2009-07-28  Sebastien Pouliot  <sebastien@ximian.com> 

	* CryptoConfig_2_1.cs: Add SHA1 support in MapNameToOID in order to
	be able to verify the codecs signature integrity.

2009-04-30  Sebastien Pouliot  <sebastien@ximian.com> 

	* DSACryptoServiceProvider.cs, RSACryptoServiceProvider.cs: Remove
	from NET_2_1

2009-04-29  Sebastien Pouliot  <sebastien@ximian.com> 

	* DES.cs, DESCryptoServiceProvider.cs: Do not include in NET_2_1
	* HMACMD5.cs, HMACRIPEMD160.cs, HMACSHA384.cs, HMACSHA512.cs: Do 
	not include in NET_2_1
	* MACTripleDES.cs: Do not include in NET_2_1
	* RC2.cs, RC2CryptoServiceProvider.cs: Do not include in NET_2_1
	* Rijndael.cs, RijndaelManaged.cs, RijndaelManagedTransform.cs:
	Do not include in NET_2_1 (AES is available in System.Core.dll)
	* RIPEMD160.cs, RIPEMD160Managed.cs: Do not include in NET_2_1
	* SHA1CryptoServiceProvider.cs: Do not include in NET_2_1, however
	SHA1Managed is available.
	* SHA384.cs, SHA384Managed.cs: Do not include in NET_2_1
	* SHA512.cs, SHA512Managed.cs: Do not include in NET_2_1
	* TripleDES.cs, TripleDESCryptoServiceProvider.cs: Do not include
	in NET_2_1

2009-04-29  Sebastien Pouliot  <sebastien@ximian.com>

	* CryptoConfig.cs: Change to partial class and don't include this
	part (#ifdef out) in the NET_2_1 build.
	* CryptoConfig_2_1.cs: Partial class that contains only what's 
	needed for Moonlight (NET_2_1). This disallow dynamically replacing
	cryptographic algorithms using machine.config

2008-09-17  Sebastien Pouliot  <sebastien@ximian.com>

	* CryptoConfig.cs: Add missing URI for HMAC algorithms.

2008-08-07  Sebastien Pouliot  <sebastien@ximian.com>

	* SymmetricAlgorithm.cs: Hide some protected fields not present in
	Silverlight 2.0 (NET_2_1)

2008-07-13  Nestor Salceda  <nestor.salceda@gmail.com>

	* RSAPKCS1KeyExchangeFormatter.cs: Throw an ArgumentNullException if the
	key is null in SetKey, and also in the constructor with the key as
	parameter. Fixes the bug #408738.

2008-07-03  Andreas Nahr  <ClassDevelopment@A-SoftTech.com>

	* SHA1CryptoServiceProvider.cs: Fix parameter names

2008-07-03  Andreas Nahr  <ClassDevelopment@A-SoftTech.com>

	* SHA512Managed.cs:
	* SHA384Managed.cs:
	* SHA256Managed.cs:
	* SHA1Managed.cs:
	* SHA1CryptoServiceProvider.cs:
	* RSAPKCS1KeyExchangeDeformatter.cs:
	* RSACryptoServiceProvider.cs:
	* RSA.cs:
	* RIPEMD160Managed.cs:
	* RC2.cs:
	* PKCS1MaskGenerationMethod.cs:
	* MD5CryptoServiceProvider.cs:
	* MD5.cs:
	* MACTripleDES.cs:
	* HMACSHA512.cs:
	* HMACSHA384.cs:
	* HMACSHA256.cs:
	* HMACSHA1.cs:
	* HMACRIPEMD160.cs:
	* HMACMD5.cs:
	* HMAC.cs:
	* HashAlgorithm.cs:
	* FromBase64Transform.cs:
	* DSACryptoServiceProvider.cs:
	* DES.cs:
	* CspParameters.cs: Fix parameter names

2008-05-30  Sebastien Pouliot  <sebastien@ximian.com> 

	* RSACryptoServiceProvider.cs: Remove MonoTODO that were fixed a
	while ago. Provide better MonoTODO messages for the next version 
	of MoMA.
	* RijndaelManagedTransform.cs: Provide better MonoTODO messages 
	for the next version of MoMA.

2008-05-07  Sebastien Pouliot  <sebastien@ximian.com>

	* SHA384Managed.cs: Fix compiler warning and use the new local
	variable introduced previously.

2008-04-30  Alan McGovern  <alan.mcgovern@gmail.com>

	* SHA384Managed.cs: Inlined helper methods and made
	some fields local vars. Gives about 1.70x faster performance.

2008-04-30  Alan McGovern  <alan.mcgovern@gmail.com>

	* SHA256Managed.cs: Inlined helper methods removed
	unnecessary casts and made a field a local var.
	Gives about 1.70x faster performance.

2008-04-27  Alan McGovern  <alan.mcgovern@gmail.com>

	* SHA1CryptoServiceProvider.cs: Performed loop unrolling and
	re-rolling to reduce IL size significantly and improve
	perf by over 30%.

2008-04-27  Sebastien Pouliot  <sebastien@ximian.com>

	* SHA1CryptoServiceProvider.cs: Quick optimization to get better
	results with the JIT (a bit over 25% on a 4GB file).

2008-04-17  Sebastien Pouliot  <sebastien@ximian.com>

	* AsymmetricAlgorithm.cs: Add shared GetNamedParam helper method.
	* DSA.cs, RSA.cs: Rework FromXmlString to be more "careless" like
	MS implementation. Fix #355464

2008-02-21  Sebastien Pouliot  <sebastien@ximian.com>

	* Rfc2898DeriveBytes.cs: Fix GetByte not to throw an exception if
	called several time to get more data.

2008-01-31  Sebastien Pouliot  <sebastien@ximian.com> 

	* CryptoConfig.cs: Inverse name and oid when reading them from 
	machine.config. Part of the fix for #346536

2007-08-17  Sebastien Pouliot  <sebastien@ximian.com> 

	* CryptoStream.cs: Write cannot depend on buffer.Length (fix #82428)

2007-05-16  Sebastien Pouliot  <sebastien@ximian.com> 

	* CryptoStream.cs: Fix another problem that can occurs with WriteByte.

2007-05-11  Sebastien Pouliot  <sebastien@ximian.com> 

	* CryptoStream.cs: Ensure TransformFinalBlock isn't called multiple 
	times. Fix bug #81597.

2007-05-10  Sebastien Pouliot  <sebastien@ximian.com> 

	* SHA1CryptoServiceProvider.cs: Reduce by half the number of required
	memory allocations to produce a hash (in >90% of the cases) by reusing
	an existing memory buffer (instead of always allocating a new one).

2007-05-08  Randolph Chung  <tausq@debian.org>

	* DSACryptoServiceProvider.cs: Implement the ImportCspBlob and
	ExportCspBlob methods by calling into CryptoConvert.

2007-04-03  Alp Toker  <alp@atoker.com>

	* CryptoConfig.cs: CreateFromName(string,object[]) is params in 2.0.

2007-03-28  Sebastien Pouliot  <sebastien@ximian.com> 

	* RIPEMD160Managed.cs: Fix endian issue (take good code path).

2007-03-22  Sebastien Pouliot  <sebastien@ximian.com> 

	* CryptoConfig.cs: Names are case-insensitive only since fx 2.0.
	* CryptoStream.cs: 2.0 introduce different exceptions/behaviors in 
	corner cases.
	* PasswordDeriveBytes.cs: Reset method was fixed in fx 2.0.
	* Rfc2898DeriveBytes.cs: Fixed endian bug in F (thanks to Roei Erez)
	and reduced the number of memory allocations.

2007-03-05  Sebastien Pouliot  <sebastien@ximian.com>

	* CryptoStream.cs: Rework Write to buffer the last block correctly.
	The new code also reduce memory allocations. Fix for #81008.

2007-02-14  Sebastien Pouliot  <sebastien@ximian.com>

	* HMAC.cs: Handle BlockSizeValue correctly.
	* HMACSHA384.cs: Add support for forthcoming ProduceLegacyHmacValues
	property (in the next service pack).
	* HMACSHA512.cs: Add support for forthcoming ProduceLegacyHmacValues
	property (in the next service pack).

2007-01-22  Atsushi Enomoto  <atsushi@ximian.com>

	* CryptoConfig.cs: Fixed incorrect exchange in urlExcC14N and
	  urlExcC14NWithComments.

2006-11-24  Sebastien Pouliot  <sebastien@ximian.com>

	* CryptoConfig.cs: Add support for (2.0) custom X.509 chains.

2006-11-08  Sebastien Pouliot  <sebastien@ximian.com>

	* CryptoConfig.cs: Add support for (2.0) X.509 extensions in 
	CreateFromName method. This allows the framework to be extensible with
	new certificate extensions (syntax is missing from machine.config).

2006-10-12  Sebastien Pouliot  <sebastien@ximian.com>

	* CryptoConfig.cs: Use SmallXmlParser with a custom handler to reduce
	memory requirements to process machine.config. Fix #79653 (beagle).

2006-10-11  Sebastien Pouliot  <sebastien@ximian.com>

	* CryptoConfig.cs: Accept lower/mixed-case algorithm names in 
	CreateFromName and MapNameToOID methods (fix bug #79641). Removed OID
	mappings in 2.0 for DSA and 3DES (they were part of the betas but not
	in the final 2.0 release of the framework).

2006-09-20  Kazuki Oikawa  <kazuki@panicode.com>

	* RijndaelManaged.cs: improves the performance.

2006-09-08  Sebastien Pouliot  <sebastien@ximian.com>

	* RSAOAEPKeyExchangeDeformatter.cs: Throw a CryptographicException, 
	instead of returning null, when a padding error occurs on decryption.
	* RSAPKCS1KeyExchangeDeformatter.cs: Throw a CryptographicException, 
	instead of returning null, when a padding error occurs on decryption.

2006-07-01  Sebastien Pouliot  <sebastien@ximian.com>

	* AsymmetricSignatureDeformatter.cs: Set the hash algorithm name from
	the hash instance. Fix for bug #78744 by Diego Mesa Tabares.

2006-06-15  Sebastien Pouliot  <sebastien@ximian.com>

	* HashAlgorithm.cs: Changed the order of BlockCopy + HashCore to
	HashCore + BlockCopy. Fx 2.0 now allows using a null output buffer
	(without exception) while previous 1.x versions crashed the runtime
	(mono won't crash the runtime, so we always do like 2.0).

2006-05-30  Sebastien Pouliot  <sebastien@ximian.com>

	* AsymmetricKeyExchangeDeformatter.cs: Under 2.0 the ctor is 
	protected.
	* AsymmetricKeyExchangeFormatter.cs: Under 2.0 the ctor is protected.
	* AsymmetricSignatureDeformatter.cs: Under 2.0 the ctor is protected.
	* AsymmetricSignatureFormatter.cs: Under 2.0 the ctor is protected.
	* DES.cs: Under 2.0 the ctor is protected.
	* HashAlgorithm.cs: Under 2.0 the HashValue field is protected 
	internal.
	* RandomNumberGenerator.cs: Under 2.0 the ctor is protected.
	* RC2.cs: Under 2.0 the ctor is protected.
	* Rijndael.cs: Under 2.0 the ctor is protected.
	* RSA.cs: Under 2.0 the ctor is protected.
	* SHA256.cs: Under 2.0 the ctor is protected.
	* SHA384.cs: Under 2.0 the ctor is protected.
	* SHA512.cs: Under 2.0 the ctor is protected.
	* SymmetricAlgorithm.cs: Under 2.0 the ctor is protected.
	* TripleDES.cs: Under 2.0 the ctor is protected.

2006-02-03  Zoltan Varga  <vargaz@gmail.com>

	* CryptoStream.cs: Add 'override' keyword to Dispose (bool) method in 2.0.

2005-12-15  Sebastien Pouliot  <sebastien@ximian.com>

	* SymmetricAlgorithm.cs: Changing (not setting) BlockSize must 
	re-generate a new IV (so the properties are kept valid). Note that
	changing or setting (same value) the KeySize always re-generate a key.

2005-12-01  Sebastien Pouliot  <sebastien@ximian.com>

	* RIPEMD160Managed.cs: Endianess fix.

2005-11-22  Sebastien Pouliot  <sebastien@ximian.com>

	* DSAManaged.cs: Don't output J in the XML if it's not exported (i.e.
	if it wasn't imported too but instead calculated from the other 
	parameters ;-).

2005-11-09  Sebastien Pouliot  <sebastien@ximian.com>

	* KeyNumber.cs: Added missing [Serializable] present in 2.0.

2005-10-21  Sebastien Pouliot  <sebastien@ximian.com>

	* DESCryptoServiceProvider.cs: Don't change the instance key/iv when
	creating an encryptor or decryptor specifying them. Generate a new key
	if null is specified (not really useful but compatible with MS 
	behaviour). Check for weak/semi-weak key when creating transforms.
	* RC2CryptoServiceProvider.cs: Don't change the instance key/iv when 
	creating an encryptor or decryptor specifying them. Check legal key
	sizes when creating transforms.
	* RijndaelManaged.cs: Don't change the instance key/iv when creating 
	an encryptor or decryptor specifying them. Check legal key sizes when
	creating transforms.
	* TripleDESCryptoServiceProvider.cs: Don't change the instance key/iv
	when creating an encryptor or decryptor specifying them. Generate a 
	new key if null is specified (not really useful but compatible with MS
	behaviour). Check for weak key when creating transforms.

2005-09-29  Sebastien Pouliot  <sebastien@ximian.com>

	* HMACSHA1.cs: Added the new 2.0 ctor that let the programmer choose
	between the managed and unmanaged SHA1 algorithm used in the HMAC 
	(that doesn't change much thing in the default config for Mono).
	* PasswordDeriveBytes.cs: Added [Obsolete] on GetBytes (2.0) as new
	applications should be using Rfc2898DeriveBytes to get PKCS#5 v2
	support.

2005-08-17  Sebastien Pouliot  <sebastien@ximian.com>

	* FromBase64Transform.cs: Check that the TransformFinal can be called
	with only whitespace (with FromBase64TransformMode.IgnoreWhiteSpaces)
	so that we must return new byte [0].

2005-06-14  Sebastien Pouliot  <sebastien@ximian.com>

	* FromBase64Transform.cs: Removed memory allocations during the 
	transform. It's now just the accumulator (ctor) and the 
	TransformFinalBlock that allocates memory. The transform is now
	between 3 to 4 times faster than before.

2005-06-10  Sebastien Pouliot  <sebastien@ximian.com>

	* all: 2.0 beta2 fixes, i.e. mostly added [ComVisible(true)]

2005-06-09  Sebastien Pouliot  <sebastien@ximian.com>

	* HMAC.cs: BlockSizeValue has changed from a protected member to
	a protected property.

2005-06-06  Sebastien Pouliot  <sebastien@ximian.com>

	* CspProviderFlags.cs: UseExistingKey was added in 1.1 SP1. Added
	ComVisible attribute for 2.0.

2005-05-19  Sebastien Pouliot  <sebastien@ximian.com>

	* CryptoConfig.cs: Don't use the global hashtables until the 
	initialization is complete.

2005-05-18  Sebastien Pouliot  <sebastien@ximian.com>

	* CryptoConfig.cs: Changed lock pattern to second version of
	http://www.skeet.org.uk/csharp/singleton.html

2005-05-16  Sebastien Pouliot  <sebastien@ximian.com>

	* CryptoConfig.cs: Initialization wasn't threadsafe as the "checked" 
	value was assigned at the start of the initialization.

2005-04-25  Sebastien Pouliot  <sebastien@ximian.com>

	* CryptoConfig.cs: Removed RSA OID and added null check in EncodeOID
	in NET_2_0 to match beta2.
	* DES.cs: Added null check for IsWeakKey and IsSemiWeakKey in NET_2_0
	to match beta2.
	* SymmetricAlgorithm.cs: Throw CryptographicException when feedback is
	zero in NET_2_0 to match beta2
	* TripleDES.cs: Added null check for IsWeakKey in NET_2_0 to match 
	beta2.

2005-04-05  Sebastien Pouliot  <sebastien@ximian.com>

	* CryptoConfig.cs: Added Assert for FileIOPermission to LoadConfig so 
	the configuration can be read under partial trust.

2005-03-24  Sebastien Pouliot  <sebastien@ximian.com>

	* CryptoConfig.cs: Added LinkDemand for unrestricted to CreateFromName
	when used to create instance with object[] parameters.
	* CryptoAPITransform.cs: Added Demand for UnmanagedCode to KeyHandle 
	property.

2005-03-07  Sebastien Pouliot  <sebastien@ximian.com>

	* MD5CryptoServiceProvider.cs: Fixed #73404 to return right results
	if the data length is bigger than 2^32 bits.
	* SHA1CryptoServiceProvider.cs: Fixed #73404 to return right results
	if the data length is bigger than 2^32 bits.
	* SHA256Managed.cs: Fixed #73404 to return right results if the data
	length is bigger than 2^32 bits.

2005-03-03  Sebastien Pouliot  <sebastien@ximian.com>

	* RNGCryptoServiceProvider.cs: Added a new call in the static ctor
	to check if we're using a global handle. In that case we lock before
	calling the RNG.

2005-02-10  Sebastien Pouliot  <sebastien@ximian.com> 

	* DSA.cs: Weekly fix to case where DSAParameters.Counter is 0 :-(
	A new unit test was added for this specific case so it's hopefully
	the last fix for this. Fixed exception reporting to match NET_2_0.

2005-01-30  Sebastien Pouliot  <sebastien@ximian.com> 

	* DSA.cs: Really fixed case where DSAParameters.Counter is 0.

2005-01-21  Sebastien Pouliot  <sebastien@ximian.com> 

	* DSA.cs: Handle the case where DSAParameters.Counter is 0.

2005-01-11  Sebastien Pouliot  <sebastien@ximian.com> 

	* CryptoConfig.cs: Added support to create RIPEMD160 and the new HMAC
	algorithms (HMACMD5, HMACRIPEMD160, HMACSHA256, HMACSHA384 and 
	HMACSHA512). This fix the unit tests failures in Mono.Security.dll in
	the NET_2_0 profile.
	* DSACryptoServiceProvider.cs: Import|ExportCspBlob throws 
	NotImplementedException (CryptoConvert class doesn't support DSA yet).
	* RSACryptoServiceProvider.cs: SignHash/VerifyHash defaults to SHA-1
	in 2.0. VerifyHash throw appropriate exception when no OID is 
	specified (1.0/1.1). Import|ExportCspBlob implemented using the
	CryptoConvert class.
	* RSAOAEPKeyExchangeDeformatter.cs: Throw exception if no key is 
	specified.
	* RSAOAEPKeyExchangeFormatter.cs: Throw exception if no key is 
	specified.
	* RSAPKCS1KeyExchangeFormatter.cs: Throw exception if no key is 
	specified.
	* SymmetricAlgorithm.cs: More strict IV length checks on 2.0.

2005-01-10  Sebastien Pouliot  <sebastien@ximian.com>

	* CryptoConfig.cs: Change the OID for SHA-2 algorithms to match 2.0
	and added new OID for asymmetric and symmetric algorithms.
	* CspKeyContainerInfo.cs: Added CryptoKeySecurity property. This will
	always return null until we support access control for key containers.
	* CspParameters.cs: Added new constructors and propertys for access 
	control and password (2.0).
	* DSASignatureDeformatter.cs: Throw ArgumentNullException in NET_2_0 
	if a null key is specified.
	* DSASignatureFormatter.cs: Throw ArgumentNullException in NET_2_0 if
	a null key is specified.
	* HashAlgorithm.cs: Fix the reported exceptions for output buffers.
	* HMAC.cs: Change the .Clear (which calls Dispose) to a .Initialize.
	* MACTripleDES.cs: Removed unrequired private field _padding.
	* PasswordDeriveBytes.cs: Added 4 new constructors where the password
	is a byte[] (as it seems MS won't be using SecureString for this).
	* RIPEMD160Managed.cs: Removed overriden Dispose method to match 2.0.
	Clear buffers when initializing (e.g. re-using the hash instance).
	* Rfc2898DeriveBytes.cs: Added a new constructor where the password
	is a byte[] (as it seems MS won't be using SecureString for this).
	* RSAPKCS1SignatureDeformatter.cs: Throw ArgumentNullException in
	NET_2_0 if a null key is specified.
	* RSAPKCS1SignatureFormatter.cs: Throw ArgumentNullException in
	NET_2_0 if a null key is specified.
	* ToBase64Transform.cs: Fix the reported exceptions for output buffers.

2005-01-06  Sebastien Pouliot  <sebastien@ximian.com> 

	* DES.cs: Change wek and semi-weak key checking to avoid memory 
	allocations. Old version required 2 allocations (weak+semiweak) to 
	unpack the key. New versions are 16x-20x faster.
	*  RijndaelManaged.cs: Removed unrequired "& 0xff" when casting to 
	byte.

2005-01-03  Sebastien Pouliot  <sebastien@ximian.com> 

	* DESCryptoServiceProvider.cs: Refactored ECB/ProcessBlock to allow
	TripleDES to be more efficient by using the permutations itself. 
	* TripleDESCryptoServiceProvider.cs: Removed memory allocation in 
	Transform's ECB method. Changed code to directly call DES's 
	permutations. MACTripleDES is now 20% faster (didn't have any other
	3DES benchmark on hand) and requires much less memory.

2005-01-03  Sebastien Pouliot  <sebastien@ximian.com>

	* DESCryptoServiceProvider.cs: Now using pre-computed tables (instead
	of using a static constructor to compute them). Not much change 
	performance-wise unless you used DES but only "a little" ;-). The old
	code (who computed the results) is still present but commented,

2005-01-02  Sebastien Pouliot  <sebastien@ximian.com>

	* SHA1CryptoServiceProvider.cs: Removed memory allocation in 
	ProcessBlock method (now global). This gives up to 8% performance
	increase when multiple blocks are being used.
	* SHA256Managed.cs: Removed memory allocation in ProcessBlock method
	(now global). This gives up to 5% performance increase when multiple 
	blocks are being used.

2004-12-23  Sebastien Pouliot  <sebastien@ximian.com>

	* DataProtectionScope.cs: Moved in System.Security.dll
	* MemoryProtectionScope.cs: Moved in System.Security.dll
	* ProtectedData.cs: Moved in System.Security.dll
	* ProtectedMemory.cs: Moved in System.Security.dll

2004-12-22  Sebastien Pouliot  <sebastien@ximian.com>

	* RSA.cs: Throw the proper CryptographicException exception when 
	exporting a private key without CRT parameters, while keeping the
	ArgumentNullException when the private exponent (D) is missing.

2004-12-06  Sebastien Pouliot  <sebastien@ximian.com>

	* RSACryptoServiceProvider.cs: Adjust DecryptValue to the fact that 
	Mono's RSAManaged support decryption without CRT while MS requires it.

2004-11-26  Sebastien Pouliot  <sebastien@ximian.com>

	* CryptoAPITransform.cs: 
	* DSACryptoServiceProvider.cs: 
	* MACTripleDES.cs:
	* RC2CryptoServiceProvider.cs: 
	* RSACryptoServiceProvider.cs: 
		Added ComVisible attributes to match 2.0 October Preview.

2004-11-03  Sebastien Pouliot  <sebastien@ximian.com>

	* PasswordDeriveBytes.cs: Fix default iretation count to 100. Fix
	exceptions to match MS more closely. Fixed possible ArgumentException
	when asking multiple GetBytes than results in more bits than the hash
	function can provide.

2004-09-16  Sebastien Pouliot  <sebastien@ximian.com>

	* DESCryptoServiceProvider.cs: Fixed warning (l4) by adding empty {}.
	* DSASignatureDeformatter.cs: Fixed warning (l4) for unused variable.
	* DSASignatureFormatter.cs: Fixed warning (l4) for unused variable.
	* HMACSHA1.cs: Fixed warning (l4) for unused variable.

2004-09-03  Tim Coleman (tim@timcoleman.com)

	* CryptoConfig.cs: Add new Xml cryptography class info.

2004-08-08  Sebastien Pouliot  <sebastien@ximian.com>

	* CspProviderFlags.cs: Fixed new enums values.
	* DSA.cs: Fixed #if for constructor visibility.
	* CryptoAPITransform.cs: Removed constructor for NET_2_0 profile.

2004-07-07  Sebastien Pouliot  <sebastien@ximian.com>

	* DES.cs: Fixed FeedbackSizeValue to 8.
	* RC2.cs: Fixed FeedbackSizeValue to 8.
	* RC2CryptoServiceProvider.cs: When key size is different from 
	effective key size we throw CryptographicUnexpectedOperationException.
	* TripleDES.cs: Fixed FeedbackSizeValue to 8.

2004-07-07  Sebastien Pouliot  <sebastien@ximian.com>

	* CryptoAPITransform.cs: Added the new Reset method for NET_2_0. This
	is a NOP as this class isn't used by Mono (all crypto transforms are 
	managed).
	* CryptographicException.cs: Added _Exception interface for NET_2_0 
	profile.
	* CspProviderFlags.cs: Added new enum's members for NET_2_0.
	* DSA.cs: Changed constructor to protected for NET_2_0. It is now 
	possible to inherit from DSA in other assemblies.
	* DSACryptoServiceProvider.cs: NET_2_0 cleanup. Added interface 
	ICspAsymmetricAlgorithm (stub),	removed (unrequired) LegalKeySizes 
	override, fixed visibility of PublicOnly property.
	* HMACSHA1.cs: Fixed #if for NET_2_0 profile.
	* KeyNumber.cs: Fixed values for new enum in Fx 2.0.
	* MACTripleDES.cs: Added new Padding property to NET_2_0 profile.
	* ProtectedData.cs: Added missing private constructor.
	* ProtectedMemory.cs: Added missing private constructor.
	* RC2CryptoServiceProvider.cs: Added UseSalt property to NET_2_0 
	profile. Salt usage must be added to the transforms.
	* RIPEMD160Managed.cs: Removed unrequired [CLSCompliant] attributes.
	* RSACryptoServiceProvider.cs: NET_2_0 cleanup. Added interface 
	ICspAsymmetricAlgorithm (stub),	fixed visibility of PublicOnly 
	property.
	* RijndaelManaged.cs: Use the new RijndaelManagedTransform for Fx 2.0.
	* RijndaelManagedTransform.cs: New. Class is now public in Fx 2.0.

2004-06-23  Sebastien Pouliot  <sebastien@ximian.com>

	* CryptoStream.cs: Removed the block reduction. This seems to be done
	only for Decryptor so it was moved to SymmetricTransform.

2004-06-16  Sebastien Pouliot  <sebastien@ximian.com>

	* SignatureDescription.cs: Implemented .ctor(SecurityElement) using
	documentation from VS.NET 2005.

2004-06-10  Gert Driesen <drieseng@users.sourceforge.net>

	* ToBase64Transform.cs: Uncomment finalizer to fix public API
	signature

2004-05-29  Sebastien Pouliot  <sebastien@ximian.com>

	* CspProviderFlags.cs: Reverted previous patch as UseExistingKey isn't
	part of the 1.0/1.1 framework.

2004-05-29  Gert Driesen (drieseng@users.sourceforge.net)

	* CspProviderFlags.cs: Added missing enum field UseExistingKey

2004-05-27  Sebastien Pouliot  <sebastien@ximian.com>

	* HashAlgorithm.cs: Added missing exception handling to ComputeHash,
	TransformBlock and TransformFinalBlock.

2004-05-26  Sebastien Pouliot  <sebastien@ximian.com>

	* CryptoStream.cs: Fixed possible integer overflow.
	* FromBase64Transform.cs: Better exception handling and fixed possible
	integer overflow.
	* RNGCryptoServiceProvider.cs: Changed RNG interface with the runtime
	so it could be used in a thread-safe way with CryptoAPI.
	* ToBase64Transform.cs: Better exception handling and fixed possible
	integer overflow.

2004-05-07  Sebastien Pouliot  <sebastien@ximian.com>

	* CipherMode.cs: Moved XML comments to monodoc.
	* CryptoConfig.cs: Changed Array.Copy to Buffer.BlockCopy.
	* CryptoStream.cs: Changed Array.Copy to Buffer.BlockCopy.
	* DSA.cs: Changed Array.Copy to Buffer.BlockCopy.
	* DSACryptoServiceProvider.cs: Fixed SignData to hash data before 
	signing it (thanks to Jens Thiel for spotting this).
	* ICryptoTransform.cs: Moved XML comments to monodoc.
	* PasswordDeriveBytes.cs: Changed Array.Copy to Buffer.BlockCopy.
	* FromBase64Transform.cs: Moved XML comments to monodoc.
	* RSACryptoServiceProvider.cs: Fixed OID related exception in SignData.
	* ToBase64Transform.cs: Input block may be smaller than a full block
	when calling TransformFinalBlock (fix 2 CryptoStream unit tests).

2004-05-06  Sebastien Pouliot  <sebastien@ximian.com>

	* RSAOAEPKeyExchangeDeformatter.cs: Fixed wrt completed unit tests.
	* RSAOAEPKeyExchangeFormatter.cs: Fixed wrt completed unit tests.
	* RSAPKCS1KeyExchangeDeformatter.cs: Fixed wrt completed unit tests.
	Added globalization to exceptions.
	* RSAPKCS1KeyExchangeFormatter.cs: Fixed wrt completed unit tests.
	* RSAPKCS1SignatureDeformatter.cs: Fixed wrt completed unit tests.
	Added globalization to exceptions.
	* RSAPKCS1SignatureFormatter.cs: Fixed wrt completed unit tests.
	Added globalization to exceptions.
	
2004-05-06  Sebastien Pouliot  <sebastien@ximian.com>

	* RC2.cs: Fixed KeySize to change it's value and the EffectiveKeySize
	when the key is changed.
	* RC2CryptoServiceProvider.cs: Added globalization to exceptions. 
	Fixed the KeySize must be equal with EffectiveKeySize to match MS 
	implementation.
	* Rijndael.cs: Source clean up.
	* RijndaelManaged.cs: Moved XML comments to monodoc. Added 
	globalization to exceptions. 
	* RNGCryptoServiceProvider.cs: Removed TODO and documented them in
	mono doc. Now call runtime when a seed is provided.
	* RSA.cs: Added globalization to exceptions. Removed check for 
	<RSAKeyValue> as it is not checked by MS implementation.
	* SHA1.cs: Moved XML comments to monodoc.
	* SHA1CryptoServiceProvider.cs: Moved XML comments to monodoc. Removed
	CLSCompliance attributes from private fields. 
	* SHA256.cs: Moved XML comments to monodoc.
	* SHA256Managed.cs: Moved XML comments to monodoc. Removed 
	CLSCompliance attributes from	private fields.
	* SHA384.cs: Moved XML comments to monodoc.
	* SHA512.cs: Moved XML comments to monodoc.
	* SignatureDescription.cs: Moved XML comments to monodoc. Added 
	globalization to exceptions. Removed TODO and added notes to monodoc.
	* SymmetricAlgorithm.cs: Moved XML comments to monodoc. Added 
	globalization to exceptions.
	* ToBase64Tranform.cs: Added missing exception handling. Moved XML 
	comments to monodoc.
	* TripleDES.cs: Added globalization to exceptions.
	* TripleDESCryptoServiceProvider.cs: Changed Array.Copy to 
	Buffer.BlockCopy. Zeroize decrypted data.

2004-05-05  Sebastien Pouliot  <sebastien@ximian.com>

	* HashAlgorithm.cs: Moved XML comments to monodoc. Added globalization
	to exceptions.
	* KeyedHashAlgorithm.cs: Added globalization to exceptions.
	* KeySizes.cs: Moved XML comments to monodoc.
	* MaskGenerationMethod.cs: Source clean up.
	* MD5.cs: Moved XML comments to monodoc.
	* MD5CryptoServiceProvider.cs: Removed CLSCompliance attributes from
	private fields. Changed constants from enum to array. Zeroize data on
	Dispose.
	* PaddingMode.cs: Moved XML comments to monodoc.
	* PasswordDeriveBytes.cs: Added globalization to exceptions. Removed 
	TODO and documented as "not supported" in MonoDoc.
	* RandomNumberGenerator.cs: Source clean up.

2004-05-05  Sebastien Pouliot  <sebastien@ximian.com>

	* DSACryptoServiceProvider.cs: Added globalization to exceptions.
	* HMACSHA1.cs: Cleanup.
	* SHA1CryptoServiceProvider.cs: Removed unused private methods.
	* SHA1Managed.cs: Removed unused private methods.
	* SHA384Managed.cs: Don't zeroize buffer on first initialization.
	* SHA512Managed.cs: Don't zeroize buffer on first initialization.
	
2004-05-05  Sebastien Pouliot  <sebastien@ximian.com>

	* Base64Constants.cs: New. Convert code into tables for better base64
	performance.
	* FromBase64Transform.cs: Updated to use the new tables. Source code
	cleanup.
	* SHA256Managed.cs: Updated to use shared constants.
	* SHA384Managed.cs: Updated to use shared constants.
	* SHA512Managed.cs: Updated to use shared constants.
	* SHAConstants.cs: New. Shared constants for SHA implementations.
	* ToBase64Transform.cs: Updated to use the new tables. Added 
	globalization. Commented finalizer as it isn't required in this case.

2004-05-03  Sebastien Pouliot  <sebastien@ximian.com>

	* CryptoConfig.cs: Specify version and public key token when loading
	System.Security.dll for XML Digital Signature classes.

2004-04-29 Ben Maurer  <bmaurer@users.sourceforge.net>

	* DES.cs:
	* DESCryptoServiceProvider.cs:
	* RC2CryptoServiceProvider.cs:
	* RijndaelManaged.cs:
	* SHA384Managed.cs:
	* SHA512Managed.cs:
	* ToBase64Transform.cs:
	Readonly/Constify.

2004-04-29  Sebastien Pouliot  <sebastien@ximian.com>

	* DES.cs: Removed redundant weak/semi-weak key check in Key property.
	* DESCryptoServiceProvider.cs: Implementation already had 100% 
	coverage.

2004-04-28  Sebastien Pouliot  <sebastien@ximian.com>

	* DSACryptoServiceProvider.cs: Changed delegate signature.
	* RSACryptoServiceProvider.cs: Changed delegate signature.

2004-04-28  Sebastien Pouliot  <sebastien@ximian.com>

	* DSA.cs: Moved XML comments to monodoc. Added globalization to 
	exceptions. Already had 100% coverage.
	* DSAParameters.cs: Moved XML comments to monodoc.
	* DSASignatureDeformetter.cs: Added globalization to exceptions. 
	Limited catch to expected exception. Already had 100% coverage.
	* DSASignatureFormatter.cs: Added globalization to exceptions. Limited
	catch to expected exception. Already had 100% coverage.

2004-04-26  Sebastien Pouliot  <sebastien@ximian.com>

	* AsymmetricAlgorithm.cs: Moved XML comments to monodoc. Added 
	globalization to exceptions. Already had 100% coverage.
	* AsymmetricKeyExchangeDeformatter.cs: Moved XML comments to monodoc.
	Already had 100% coverage.
	* AsymmetricKeyExchangeFormatter.cs: Moved XML comments to monodoc.
	Already had 100% coverage.
	* AsymmetricSignatureDeformatter.cs: Moved XML comments to monodoc.
	Already had 100% coverage.
	* AsymmetricSignatureFormatter.cs: Moved XML comments to monodoc.
	Already had 100% coverage.
	* CryptoAPITransform.cs: Unused by Mono (added note to monodoc).
	Class will stay at 0% coverage.
	* CryptoConfig.cs: Added globalization to exceptions. 98% coverage.
	* CryptographicException.cs: Added globalization to exceptions. 
	Already had 100% coverage.
	* CryptoStream.cs: Added globalization to exceptions. Removed (unused)
	field _previousBlock to get 100% coverage.
	* CspParameters.cs: Moved XML comments to monodoc. Already had 100% 
	coverage.
	* CspProviderFlags.cs: Moved XML comments to monodoc.
	* DeriveBytes.cs: Moved XML comments to monodoc. Already had 100% 
	coverage.
	* DES.cs: Fixes to weak/semi-weak checking to pass new unit tests (it
	requires to set odd parity on keys before comparing).

2004-04-25  Andreas Nahr <ClassDevelopment@A-SoftTech.com>

	* DSACryptoServiceProvider.cs: Call invariant compare

2004-04-08  Bernie Solomon  <bernard@ugsolutions.com>

	* DSA.cs: Use Mono.Security.BitConverterLE

2004-04-05  Bernie Solomon  <bernard@ugsolutions.com>

	* DESCryptoServiceProvider.cs: Use BitConverter.IsLittleEndian
	to fix for big endian machines.

2004-03-10  Sebastien Pouliot  <sebastien@ximian.com>

	* FromBase64Transform.cs: Now throws ObjectDisposedException and
	return true for CanReuseTransform (as MS implementation).

2004-03-09  Atsushi Enomoto  <atsushi@ximian.com>

	* DSA.cs : fixed incorrectly modified catch for debugging.

2004-03-09  Atsushi Enomoto  <atsushi@ximian.com>

	* DSA.cs : In ToXmlString(), sequence of Seed and PgenCounter is
	  optional.

2004-02-26  Sebastien Pouliot  <sebastien@ximian.com>

	* DES.cs: Same fix as for SymmetricAlgorithm (get_Key is 
	overridden to check for weak keys). Also ensured that no weak keys
	would be generated.
	* SymmetricAlgorithm.cs: Return a copy of the key (and IV) so it 
	doesn't get destroyed when dispose is called (in this case the key
	zeroization is the caller's responsability). Match MS implementation.
	* TripleDES.cs: Same fix as for SymmetricAlgorithm (get_Key is 
	overridden to check for weak keys). Fix bugzilla #54868.

2004-02-12  Sebastien Pouliot  <sebastien@ximian.com>

	* CryptoStream.cs: Remove the _blockSize assumptions because some 
	Transforms could be different on Input/Output. Added a special case
	for cascading CryptoStreams in FlushFinalBlock.

2004-02-09  Sebastien Pouliot  <sebastien@ximian.com>

	* DSACryptoServiceProvider.cs: Fixed support for key pair persistence.
	It now requires (like MS) to call Clear to delete an existing 
	container. PersistKeyInCsp default value also changes if a 
	CspParameters is supplied (or not) to the constructor.
	* RSACryptoServiceProvider.cs: Same fixes as DSA.
	* SymmetricAlgorithm.cs: Reintroduced the patch from 2003-08-24 to fix
	IV length exception for stream ciphers (e.g. RC4). I overwrote it by
	accident some time ago :(

2004-02-08  Sebastien Pouliot  <sebastien@ximian.com>

	* HashAlgorithm.cs: Changed the ComputeHash(Stream) method to (a) not
	allocate the whole stream memory (big memory saver as suggested by
	Peter Williams in bugzilla entry #54022) and (b) to never use Stream.
	Length and Stream.Position because they aren't implemented for every
	stream class (similar issue to the CryptoStream patch).
	* MD5CryptoServiceProvider.cs: Moved a buffer allocation from 
	ProcessBlock to constructor to reduce memory allocation. Optimization
	suggested by Peter Williams in bugzilla entry #54024.

2004-02-06  Sebastien Pouliot  <sebastien@ximian.com>

	* DSACryptoServiceProvider.cs: Added keypair persistence support.
	Corrected dispose so object cannot be disposed multiple time. Added
	PublicOnly property (as internal before 1.2, public after).
	* RSACryptoServiceProvider.cs: Added keypair persistence support.
	Corrected dispose so object cannot be disposed multiple time. Added
	PublicOnly property (as internal before 1.2, public after).
	* SymmetricAlgorithm.cs: Removed class SymmetricTransform from file
	and moved it to Mono.Security.Cryptography namespace. The transform
	class will also be included in Mono.Security assembly.

2004-02-06  David Sheldon <dave-mono@earth.li>

  * FromBase64Transform.cs: Improved code layout to match coding style, 
   and removed the Byte comparison with -1.

2004-02-04  Sebastien Pouliot  <sebastien@ximian.com>

	* CryptoStream.cs: New implementation - should fix all known issues
	with the class (Read/WriteByte, reading by non-multiple of the
	block size, using Stream.Length and Stream.Position ...).
	* SymmetricAlgorithm.cs: Return an empty array when there's nothing
	to return (required for CryptoStream to work).

2004-01-31  David Sheldon      <dave-mono@earth.li>

	* FromBase64Transform.cs: Removed needless catch and rethrow.

2004-01-31  David Sheldon      <dave-mono@earth.li>

	* FromBase64Transform.cs: Fixes to what happens if a character in the
	input stream is not in the lookup table. IndexOutOfRangeException was 
	wrong.

2003-12-15  Sebastien Pouliot  <spouliot@videotron.ca>

	* CryptoConfig.cs: Now use internal Environment.GetMachineConfigPath()
	to find machine.config.	Initialization removed from static constructor
	to speed up 98% of software that do not requires it.
	* SymmetricAlgorithm.cs: Fixed padding for None and Zeros modes. Unit
	tests for padding modes are now in PaddingModeTest.cs.

2003-12-10  Zoltan Varga  <vargaz@freemail.hu>

	* HMAC.cs: Fix compilation warnings.

2003-12-10  Mark Crichton  <crichton@gimp.org>

	* RNGCryptoServiceProvider.cs: Removed icall to GetNonZeroBytes. Now
	done with managed code.

2003-11-13  Sebastien Pouliot  <spouliot@videotron.ca>

	* ProtectedData.cs: Added exceptions - core is still TODO.
	* ProtectedMemory.cs: Added exceptions - core is still TODO.

2003-11-11  Sebastien Pouliot  <spouliot@videotron.ca>

	* Rfc2898DeriveBytes.cs: Now handle resets and keys longer than 160 
	bits (HMACSHA1 block size). Removed TODO.
	* SymmetricAlgorithm.cs: Fixed decryption when inputOffset > 0.
	[#50826].

2003-11-10  Sebastien Pouliot  <spouliot@videotron.ca>

	* Rfc2898DeriveBytes.cs: Implementation for PKCS5 PBKDF2. It works
	except for the Reset() part - which implies some kind of Resume.

2003-11-09  Sebastien Pouliot  <spouliot@videotron.ca>

	* CryptoConfig.cs: Updated for RIPEMD160 and HMAC.
	* CspKeyContainerInfo.cs: New (1.2). Information about CSP based key
	containers.
	* DataProtectionScope.cs: New (1.2). Enumeration for ProtectedData.
	* HMAC.cs: New (1.2). Base class for all HMAC. Code is mostly copied 
	from internal Mono.Security.Cryptography.HMACAlgorith.cs.
	* HMACMD5.cs: New (1.2). HMAC implementation using MD5.
	* HMACRIPEMD160.cs: New (1.2). HMAC implementation using RIPEMD160.
	* HMACSHA1.cs: Modified to derive from HMAC for .NET 1.2.
	* HMACSHA256.cs: New (1.2). HMAC implementation using SHA256.
	* HMACSHA384.cs: New (1.2). HMAC implementation using SHA384.
	* HMACSHA512.cs: New (1.2). HMAC implementation using SHA512.
	* ICspAsymmetricAlgorithm.cs: New (1.2). Interface for CSP based 
	asymmetric algorithm.
	* KeyNumber.cs: New (1.2). Enumeration for CspKeyContainerInfo.
	* MemoryProtectionScope.cs: New (1.2). Enumeration for ProtectedMemory.
	* PaddingMode.cs: Added two new padding modes to enumeration (for 1.2).
	* ProtectedData.cs: New (1.2). ProtectedData without protection (TODO).
	* ProtectedMemory.cs: New (1.2). Stub for ProtectedMemory.
	* Rfc2898DeriveBytes.cs: New (1.2). Stub for PKCS5 PBKDF2.

2003-11-08  Sebastien Pouliot  <spouliot@videotron.ca>

	* RIPEMD160.cs: New (1.2). Abstract class for RIPEMD160 hash from 
	Pieter Philippaerts (Pieter@mentalis.org)
	* RIPEMD160Managed.cs: New (1.2). Implementation of the RIPEMD160 hash
	algorithm from Pieter Philippaerts (Pieter@mentalis.org)

2003-10-07  Sebastien Pouliot  <spouliot@videotron.ca>

	* CryptoStream.cs: Commented CanTransformMultipleBlocks
	optimization - it simply doesn't work :(

2003-10-04  Sebastien Pouliot  <spouliot@videotron.ca>

	* CryptoStream.cs: Fixed bug 49323. The CanTransformMultipleBlocks
	optimization in Read has been fixed for partial blocks.

2003-09-11  Lluis Sanchez Gual  <lluis@ximian.com>

	* CryptoStream.cs: Added [In,Out] attributes to Read method.

2003-08-24  Sebastien Pouliot  <spouliot@videotron.ca>

	* SymmetricAlgorithm.cs: Fixed IV length exception for stream ciphers
	(e.g. RC4) which don't uses IV. This needs more tests for small IV...

2003-08-09  Sebastien Pouliot  <spouliot@videotron.ca>

	* SymmetricAlgorithm.cs: Re-introduced Lluis patch for PaddingMode.None 
	and PaddingMode.Zeros (not PaddingMode.PKCS7).

2003-08-05  Sebastien Pouliot  <spouliot@videotron.ca>

	* CryptoStream.cs: Closing bug #40689. The Write method was re-written.
	* SymmetricAlgorithm.cs: Removed Lluis previous patch (it fails a unit
	test) and corrected a bug in FinalDecrypt.
	* RSACryptoServiceProvider.cs: Fixed different exceptions from .NET 1.0
	and 1.1.

2003-07-31  Sebastien Pouliot  <spouliot@videotron.ca>

	* CryptoStream.cs: Closing bug #46143. The Read method was re-written.

2003-07-30  Sebastien Pouliot  <spouliot@videotron.ca>

	* CryptoStream.cs: Fixed bug #46143 (exception) - however we dont 
	returns the same result as MS. Class needs to be re-written.

2003-07-09  Lluis Sanchez Gual  <lluis@ximian.com>

	* SymmetricAlgorithm.cs: Fixed FinalEncrypt. Return empty array if inputCount is 0.

2003-07-05  Sebastien Pouliot  <spouliot@videotron.ca>

	* AsymmetricAlgorithm.cs: Removed AsymmetricParameters (IReader) class. 
	Now uses the new Mono.Xml.SecurityParser (xml -> SecurityElement)
	* CryptoConfig.cs: Removed CorlibHandler and CorlibReader classes. Now 
	uses the new Mono.Xml.SecurityParser (xml -> SecurityElement)
	* DSA.cs: Removed DSAHandler (IHandler) class. Now uses the new 
	Mono.Xml.SecurityParser (xml -> SecurityElement)
	* DSACryptoServiceProvider.cs: Added ObjectDisposedException support
	and fixed bugs found in new unit tests.
	* RSA.cs: Removed DSAHandler (IHandler) class. Now uses the new 
	Mono.Xml.SecurityParser (xml -> SecurityElement)
	* RSACryptoServiceProvider.cs: Added ObjectDisposedException support
	and fixed bugs found in new unit tests.

2003-06-22  Sebastien Pouliot <spouliot@motus.com>

	* DSACryptoServiceProvider.cs: Added UseMachineKeyStore property (1.1).
	* RSACryptoServiceProvider.cs: Added UseMachineKeyStore property (1.1).

2003-06-11  Sebastien Pouliot <spouliot@motus.com>

	* DSACryptoServiceProvider.cs: Refactored from orginal by splitting 
	much core functionalities into DSAManaged. 
	* RSACryptoServiceProvider.cs: Refactored from orginal by splitting 
	much core functionalities into RSAManaged. 
	* RSAPKCS1SignatureDeformatter.cs: Updated to use the new PKCS#1 API.
	Now works with any hash algorithm (which OID is defined in machine.config)
	* RSAPKCS1SignatureFormatter.cs: Updated to use the new PKCS#1 API.
	Now works with any hash algorithm (which OID is defined in machine.config)

2003-06-09  Sebastien Pouliot <spouliot@motus.com>

	* CryptoConfig.cs: Now support OID in machine.config.
	* DSACryptoServiceProvider.cs: Changed USE_VERSION_1_0 for NET_1_0.
	* KeySizes.cs: Changed USE_VERSION_1_0 for NET_1_0.
	* MD5CryptoServiceProvider.cs: Changed USE_VERSION_1_0 for NET_1_0.
	* RNGCryptoServiceProvider.cs: Changed USE_VERSION_1_0 for NET_1_0.

2003-05-12  Sebastien Pouliot  <spouliot@videotron.ca>

	* PKCS1MaskGenerationMethod.cs: Added comment to justify why
	the class is no more compatible with MS implementation (the bug
	was preventing OAEP to work properly).

2003-05-09  Sebastien Pouliot  <spouliot@videotron.ca>

	* DSACryptoServiceProvider.cs: Class is now sealed in v.1.1.
	* KeySizes.cs: Class is now sealed in v.1.1.
	* MD5CryptoServiceProvider.cs: Class is now sealed in v.1.1.
	* RNGCryptoServiceProvider.cs: Class is now sealed in v.1.1.

2003-04-22  Sebastien Pouliot  <spouliot@videotron.ca>

	* DSACryptoServiceProvider.cs: Changed key generation to use the
	new BigInteger class (commited for Ben Maurer).
	* RSACryptoServiceProvider.cs: Changed key generation to use the
	new BigInteger class (commited for Ben Maurer).

2003-04-06  Sebastien Pouliot  <spouliot@videotron.ca>

	* AsymmetricAlgorithm.cs: Moved IsLegalKeySize to KeySizes.cs.
	* DSACryptoServiceProvider.cs: Fix bug where key generation always
	resulted in 1024 bits keypair.
	* KeySizes.cs: Added internal IsLegalKeySize and IsLegal to avoid
	duplication in both AsymmetricAlgorithm and SymmetricAlgorithm.
	* RC2.cs: Modified to use IsLegalKeySize from KeySizes.cs.
	* RSACryptoServiceProvider.cs: Fix bug where key generation always
	resulted in 1024 bits keypair. Should fix unit test failure under
	Linux.
	* SymmetricAlgorithm.cs: Moved IsLegalKeySize to KeySizes.cs.

2003-04-06  Sebastien Pouliot  <spouliot@videotron.ca>

	* CryptoStream.cs: Partial fix for bug #40689 (workaround). Does not 
	throw a NotSupportedException on closing a CryptoStream in read mode
	(like MS does but unlike MS documents).

2003-03-28  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* CryptoStream.cs: fixed the previous fix. MS throws a NotSupportedExc
	when FlushFinalBlock is called twice. I've moved a few lines from Close
	to FlushFinalBlock and added the exception check.

2003-03-28  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* CryptoStream.cs: don't Close the underlying stream in FlushFinalBlock.
	Fixes bug #40394.

2003-03-03  Sebastien Pouliot  <spouliot@videotron.ca>

	* RSACryptoServiceProvider.cs: Delay keypair generation event when 
	keysize is a constructor parameter (major speed improvment when
	importing keys). Removed NotSupportedException when CspParameter is
	used in constructor (required for forthcoming security tools).

2003-02-08  Sebastien Pouliot  <spouliot@videotron.ca>

	* Changes to refer Mono.Math and Mono.Security.Cryptography
	* Changes to refer Mono.Xml

2003-02-04  Sebastien Pouliot  <spouliot@videotron.ca>

	* CryptoConfig.cs: Added initital support for "machine.config" 
	(limited to algorithms, not OIDs). Modified CreateFromName to use
	the fully qualified class names (and removed xmldsig hack). Added
	algorithm names documented in book ".NET Framework Security".

2003-02-03  Sebastien Pouliot  <spouliot@videotron.ca>

	* PasswordDeriveBytes.cs: Finally got the derivation right. The
	class can now derive keys up to 1000 * HashSize (same limit as MS).
	* RSAPKCS1SignatureDeformatter.cs: No need to create the hash object
	in this class - the OID is enough.

2003-02-01  Sebastien Pouliot  <spouliot@videotron.ca>

	* AsymmetricSignatureFormatter.cs: Call abstract SetHashAlgorithm
	when CreateSignature(hash) is called.
	* CryptoStream.cs: Fixed some issues in constructor.
	* DSACryptoServiceProvider.cs: Fixed a bug (1 chance in 256) that
	a signature could be less than 40 bytes (which is invalid).

2003-01-25  Sebastien Pouliot  <spouliot@videotron.ca>

	* CryptographicException.cs: Default HResult to CORSEC_E_CRYPTO
	(0x80131430) as documented.
	* CryptographicUnexpectedOperationException.cs: Default HResult
	to CORSEC_E_CRYPTO_UNEX_OPER (0x80131431) as documented.

2003-01-20  Sebastien Pouliot  <spouliot@videotron.ca>

	* CipherMode.cs: Added missing [Serializable] to enum.
	* CspProviderFlags.cs: Added missing [Serializable] to enum.
	* FromBase64Transform.cs: Added missing [Serializable] to enum.
	* PaddingMode.cs: Added missing [Serializable] to enum.

2003-01-19  Sebastien Pouliot  <spouliot@videotron.ca>

	* CryptoTools.cs: Added internal class BlockProcessor to help
	implementation of block-based algorithms (like MAC and HMAC).
	* HMACSHA1.cs: Refactored to remove dependencies on CryptoStream,
	better constructors and Dispose support.
	* MACTripleDES.cs: Refactored to reuse new HMACSHA1 stuff, better
	constructors.

2003-01-18  Sebastien Pouliot  <spouliot@videotron.ca>

	* HMACSHA1.cs: Now use KeyBuilder to build the default key.

2003-01-12  Sebastien Pouliot  <spouliot@videotron.ca>

	* MACTripleDES.cs: Now working (the problem was with my stream usage
	which was removed for performance reason).
	* TripleDES.cs: Fixed key generation (wasn't called and returned
	null).

2003-01-09  Sebastien Pouliot  <spouliot@videotron.ca>

	* RNGCryptoServiceProvider.cs: Changed methods interacting with 
	the runtime as Internal<MethodName>. This will allow to make the
	class Windows-compatible by doing a switch at runtime.

2003-01-05  Sebastien Pouliot  <spouliot@videotron.ca>

	* CryptoAPITransform.cs: Removed all TODO. This class will not be
	used by Mono. MS uses it with <algo>CryptoServiceProvider classes 
	to provide a common ICryptoTransform access to CryptoAPI. 

2003-01-03  Sebastien Pouliot  <spouliot@videotron.ca>

	* RC2CryptoServiceProvider.cs: Now about 2 time faster by inlining 
	methods and changing to UInt16 (instead of UInt32). 

2003-01-02  Sebastien Pouliot  <spouliot@videotron.ca>

	* RijndaelManaged.cs: Now 7 (encrypt) to 10 (decrypt) times faster 
	by removing allocation inside intensively called methods, using pre-
	calculated tables instead of Mult_GF methods and inlining most methods.

2002-12-31  Sebastien Pouliot  <spouliot@videotron.ca>

	* AsymmetricAlgorithm.cs: Removed ValidKeySize (method only present
	in SymmetricAlgorithm).
	* DSA.cs: Change ZeroizePrivateKey from protected to internal.
	* DSACryptoServiceProvider.cs: Added some case where we need to check 
	for keypairGenerated.
	* RSA.cs: Change ZeroizePrivateKey from protected to internal.
	* RSACryptoServiceProvider.cs: Key were never generated with the default
	(no parameter) constructor. Now checks for keypairGenerated in methods.
	* SignatureDescription.cs: Added CreateDeformatter in RSAPKCS1SHA1-
	SignatureDescription to please corcompare (it just call it's ancestor).

2002-12-30  Sebastien Pouliot  <spouliot@videotron.ca>

	* CryptoStream.cs: Implemented core. Not sure about many details - 
	but it run the samples now (#30256).
	* CryptoStreamMode.cs: Added [Serializable] to enum declaration.
	* SymmetricAlgorithm.cs: Made some changes required for CryptoStream 
	and to match more closely MS implementation. Also added little
	optimizations in TransformBlock.

2002-12-27  Sebastien Pouliot  <spouliot@videotron.ca>

	* CryptoTools.cs: New. Shared classes for cryptography. Now
	includes a KeyBuilder to generate symmetric keys and IV.
	* DES.cs: Modified Key validation.
	* DESCryptoServiceProvider.cs: Implemented Key and IV using
	KeyBuilder.
	* RC2CryptoServiceProvider.cs: Implemented Key and IV using
	KeyBuilder (and removed TODO).
	* RijndaelManaged.cs: Implemented Key and IV using KeyBuilder 
	(and removed TODO).
	* SHA384Managed.cs: Changed code to remove compiler warning.
	* SHA512Managed.cs: Changed code to remove compiler warning.
	* SymmetricAlgorithm.cs: Removed TODO on IV.
	* TripleDESCryptoServiceProvider.cs: Implemented Key and IV
	using KeyBuilder (and removed TODO).

2002-11-20  Sebastien Pouliot  <spouliot@videotron.ca>

	* AsymmetricSignatureDeformatter.cs: Added exception handling in
	VerifySignature (moved from RSAPKCS1SignatureDeformatter).
	* AsymmetricSignatureFormatter.cs: Added exception handling in
	CreateSignature (moved from RSAPKCS1SignatureFormatter).
	* CryptoAPITransform.cs: Removed "= false" assignation from a private
	member (because this created an unwanted "ghost" constructor) and 
	modified Dispose declaration.
	* HashAlgorithm.cs: Removed destructor. Disposing unmanaged 
	ressources is the responsability of each class (not an abstract class).
	* RSAPKCS1SignatureDeformatter.cs: Removed a VerifySignature method
	which was present in the base class AsymmetricSignatureDeformatter.
	* RSAPKCS1SignatureFormatter.cs: Removed a CreateSignature method
	which was present in the base class AsymmetricSignatureFormatter.
	* SHA1Managed.cs: Removed sealed from class declaration. Removed 
	destructor and Dispose method as class is fully managed.
	* ToBase64Transform.cs: Added virtual to property CanReuseTransform.

2002-11-17  Sebastien Pouliot  <spouliot@videotron.ca>

	* CryptoConfig.cs: Added full classes name for MapNameToOID.
	* PKCS1.cs: New. Internal class for the various primitives defined
	in PKCS#1 v.2.1.
	* PKCS1MaskGenerationFunction.cs: Modified to use PKCS1.cs.
	* RSA.cs: Added internal class RSAHandler (which implements IHandler
	interface for MiniParser) to import RSA keypairs from XML strings.
	* RSACryptoServiceProvider.cs: Crypto implemented using BigInteger. 
	Key generation is VERY LONG.
	* RSAOAEPKeyExchangeDeformatter.cs: Completed using PKCS1. Not sure 
	of the results as this is not available in all versions of Windows.
	* RSAOAEPKeyExchangeFormatter.cs: Completed using PKCS1. Not sure 
	of the results as this is not available in all versions of Windows.
	* RSAPKCS1KeyExchangeDeformatter.cs: Completed using PKCS1.
	* RSAPKCS1KeyExchangeFormatter.cs: Completed using PKCS1.
	* RSAPKCS1SignatureDeformatter.cs: Completed using PKCS1.
	* RSAPKCS1SignatureFormatter.cs: Completed using PKCS1.

2002-11-17  Sebastien Pouliot  <spouliot@videotron.ca>

	* MiniParser.cs: Added explicit cast in order to compile with mcs.

2002-11-16  Sebastien Pouliot  <spouliot@videotron.ca>

	* AsymmetricAlgorithm.cs: Added internal class AsymmetricParameters
	(which implements the IReader interface for MiniParser). Corrected
	Dispose declaration.
	* BigInteger.cs: New. Internal class for handling BIG integers for 
	asymmetric crypto (both RSA and DSA). Thanks to Chew Keong TAN !
	* CryptoConfig.cs: Added XMLDSIG URLs in CreateFromName.
	Will dynamically load System.Security.dll, when required,
	to return instance of those classes. Also CryptoConfig can now
	create any object (e.g. System.IO.MemoryStream) !
	* DSA.cs: Added internal class DSAHandler (which implements IHandler
	interface for MiniParser) to import DSA keypairs from XML strings.
	* DSACryptoServiceProvider.cs: Crypto fully implemented using 
	BigInteger. Key generation (group) is VERY long.
	* MiniParser.cs: New. Minimal XML parser by Sergey Chaban. Used to 
	import keypairs in XML strings.
	* SignatureDescription.cs: Removed local CreateFromName (to use
	CryptoConfig - which actually can create anything). Added internal
	classes DSASignatureDescription and RSAPKCS1SHA1SignatureDescription.

2002-11-15  Sebastien Pouliot  <spouliot@videotron.ca>

	* CryptographicUnexpectedOperationException.cs: Forgot it last time!
	* FromBase64Transform.cs: Added missing virtual to CanReuseTransform.
	Changed Dispose().
	* HashAlgorithm.cs: Changed Dispose().
	* MD5CryptoServiceProvider.cs: Added destructor and Dipose(bool).
	* PasswordDeriveBytes.cs: Changed some declaration from
	protected to private.
	* RC2.cs: Added valid keysize check in EffectiveKeySize.
	* RC2CryptoServiceProvider.cs: Overriden EffectiveKeySize to match
	corlib declarations.
	* RSAOAEPKeyExchangeDeformatter.cs: Changed some declaration from
	protected to private.
	* RSAOAEPKeyExchangeFormatter.cs: Changed some declaration from
	protected to private.
	* RSAPKCS1KeyExchangeDeformatter.cs: Changed some declaration from
	protected to private.
	* RSAPKCS1KeyExchangeFormatter.cs: Changed some declaration from
	protected to private.
	* RSAPKCS1SignatureDeformatter.cs: Changed some declaration from
	protected to private.
	* RSAPKCS1SignatureFormatter.cs: Changed some declaration from
	protected to private.
	* SHA1CryptoServiceProvider.cs: Moved SHA1 code to SHA1Internal.
	SHA1CryptoServiceProvider now use SHA1Internal. Added Dispose and
	destructor.
	* SHA1Managed.cs: New. Use SHA1Internal. Same as 
	SHA1CryptoServiceProvider but is required for binary compatibility.
	* SHA256Managed.cs: Changed some declaration from protected to private.
	* SHA384Managed.cs: Changed some declaration from protected to private.
	* SHA512Managed.cs: Changed some declaration from protected to private.
	* SymmetricAlgorithm.cs: Added Clear(), changed Dispose() and added
	virtual to Dispose(bool).
	* ToBase64Transform.cs: Added missing virtual to CanReuseTransform.
	Changed Dispose().
	* TripleDESCryptoServiceProvider.cs: Added missing sealed to class
	declaration.

2002-11-03  Sebastien Pouliot  <spouliot@videotron.ca>

	* CryptoAPITransform.cs: Added missing CanReuseTransform property,
	Clear method, destructor and IDisposable support.
	* CryptographicException.cs: Added missing protected constructor.
	* CryptographicUnexpectedOperationException.cs: Added missing 
	protected constructor.
	* ICryptoTransform.cs: Added missing CanReuseTransform property.
	* FromBase64Transform.cs: Added missing CanReuseTransform property,
	Clear method, destructor and IDisposable support.
	* SymmetricAlgorithm.cs: Implement IDisposable.
	* ToBase64Transform.cs: Added missing CanReuseTransform property,
	Clear method, destructor and IDisposable support.

2002-11-02  Sebastien Pouliot  <spouliot@videotron.ca>

	* SignatureDescription.cs: Updated class to match unit test results
	* X509Certificate.cs: REMOVED! Wrong namespace. An almost complete
	implementation is now in System.Security.Cryptography.X509Certificates

2002-11-01  Sebastien Pouliot  <spouliot@videotron.ca>

	* bouncycastle.txt: Bouncy Castle JCE License.
	* SHA384Managed.cs: Hash implementation based on BouncyCastle JCE.
	* SHA512Managed.cs: Hash implementation based on BouncyCastle JCE.

2002-10-30  Sebastien Pouliot  <spouliot@videotron.ca>

	* DSASignatureDeformatter.cs: Fully implemented - however it 
	requires a functionnal DSA implementation to work.
	* DSASignatureFormatter.cs: Fully implemented - however it 
	requires a functionnal DSA implementation to work.

2002-10-25  Sebastien Pouliot  <spouliot@videotron.ca>

	* PasswordDeriveBytes.cs: New. PKCS#5 key derivation (PBKDF1) works up to
	HashSize length (but MS support longer keys)

2002-10-24  Sebastien Pouliot  <spouliot@videotron.ca>

	* RSACryptoServiceProvider.cs: New. Implemented most logic expect crypto 
	* RSAOAEPKeyExchangeDeformatter.cs: New. Stub.
	* RSAOAEPKeyExchangeFormatter.cs: New. Stub.
	* RSAPKCS1KeyExchangeDeformatter.cs: New. Stub.
	* RSAPKCS1KeyExchangeFormatter.cs: New. 98% implemented but still
	require RSA.DecryptValue (not supported in MS .NET Framework)
	* RSAPKCS1SignatureDeformatter.cs: New. Stub.
	* RSAPKCS1SignatureFormatter.cs: New. Stub.

2002-10-23  Sebastien Pouliot  <spouliot@videotron.ca>

	* SymmetricAlgorithm.cs: Fixed CFB mode (do encryption while decrypting!)
	* TripleDESCryptoServiceProvider.cs: Ajusted for CFB.

2002-10-22  Sebastien Pouliot  <spouliot@videotron.ca>

	* RjindaelManaged.cs: Fixed decryption for 192 and 256 bit block size

2002-10-21  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* RC2CryptoServiceProvider.cs: fixed end of lines (changed from \r
	to \n).

2002-10-20  Sebastien Pouliot  <spouliot@videotron.ca>

	* SymmetricAlgorithm.cs: Added better Dispose support
	* DES.cs: Now only contains the abstract DES class.
	* DESCryptoServiceProvider.cs: Added the DESTransform class (inherited
	from SymmetricTransform) based the old DESCore and DESTransformBase code
	* RC2.cs: Fixed EffectiveKeySize == 0
	* RC2CryptoServiceProvider.cs: Added the RC2Transform class (inherited
	from SymmetricTransform) based on the old RC2lImpl code. Unrolled some loops.
	* RjindaelManaged.cs: Few more optimizations while looking for decrypting bug
	* TripleDESCryptoServiceProvider.cs: New. Implement TripleDESTransform from 
	DESTransform (non-optimal but working :-).

2002-10-19  Sebastien Pouliot  <spouliot@videotron.ca>

	* SymmetricAlgorithm.cs: Added new class SymmetricTransform to avoid
	duplicating CipherMode (currently ECB, CBC) and PaddingMode functionalities
	in every crytographic algorithm implementation.
	* RijndaelManaged.cs: Added the RjindaelTransform class (inherited
	from SymmetricTransform) based the old RijndaelImpl / RijndaelController 
	code. Fixed encryption for block size 192, 256, there is still a problem
	decrypting block size 192, 256. Unrolled some loops + littl'optimizations
	* PKCS1MaskGenerationMethod.cs: Removed Array.Reverse in I2OSP to be
	compatible with MS implementation (however we are now failing the PKCS#1
	test vector) + added some more checks (null, overflow, ...)
	* AsymmetricAlgorithm.cs: Commented XMLDocument stuff to end the cyclic
	dependency (corlib->System.Xml->corlib)
	* RSA.cs: Commented FromXmlString stuff to end the cyclic dependency
	* DSA.cs: Commented FromXmlString stuff to end the cyclic dependency
	* RC2.cs: Create using CryptoConfig
	* TripleDES.cs: Marked class public. Added LegalKeySizes and LegalBlockSizes

2002-10-14  Sebastien Pouliot  <spouliot@videotron.ca>

	* MD5.cs: Create using CryptoConfig, set HashSizeValue, removed TODO.
	* Rijndael.cs: Create using CryptoConfig. Removed TODO.
	* RSAParameters.cs: Modulus must be serialized. Removed TODO.
	* SHA256.cs: Create using CryptoConfig, set HashSizeValue, removed TODO.
	* SHA384.cs: Create using CryptoConfig, set HashSizeValue, removed TODO.
	* SHA512.cs: Create using CryptoConfig, set HashSizeValue, removed TODO.
	* FromBase64Transform.cs: Removed ToString()
	* ToBase64Transform.cs: Removed ToString()
	* SymmetricAlgorithm.cs: Create using CryptoConfig, set default Mode and 
	Padding, added Clear, Dispose
	* TripleDES.cs: New. Abstract class.
	* MaskGenerationMethod.cs: New. Abstract class.
	* PKCS1MaskGenerationMethod.cs: New. Implement PKCS#1 MGF (currently not 
	compatible with MS implementation - but not sure the bug is mine!).

2002-10-13  Sebastien Pouliot  <spouliot@videotron.ca>

	* HashAlgorithm.cs: Added Dispose() to HashAlgorithm because it 
	inherits ICryptoTransform
	* KeyedHashAlgorithm.cs: New implementation
	* HMACSHA1.cs: New (include a generic HMACAlgorithm as internal class)
	* MACTripleDES.cs: New (missing core implementation on generic MACAlgorithm)
	* CryptoStream.cs: Added limited functionalities to support HMACSHA1

2002-10-12  Sebastien Pouliot  <spouliot@videotron.ca>

	* DSA.cs: changed constructor to public from internal (like MS)
	* HashAlgorithm.cs: Completed ComputeHash methods
	* SHA1.cs: Added HashSizeValue = 160

2002-10-12  Sebastien Pouliot  <spouliot@videotron.ca>

	* ICryptoTransform.cs: Now inherits from IDisposable
	* RC2CryptoServiceProvider.cs: Added Dispose() to RC2Impl because it inherits ICryptoTransform
        * CryptoAPITransform.cs: Added Dispose() to CryptoAPITransform... ICryptoTransform
        * RijndaelManaged.cs: Added Dispose() to RijndaelController...ICryptoTransform
        * FromBase64Transform.cs: Added Dispose() to FromBase64Transform...ICryptoTransform
        * ToBase64Transform.cs: Added Dispose() to ToBase64Transform...ICryptoTransform
        * DESCryptoServiceProvider.cs: Added Dispose() to DESTransformBase...ICryptoTransform

2002-10-11  Duncan Mak  <duncan@ximian.com>

	* DESCryptoServiceProvider.cs: Removed unnecessary Dispose ().

2002-10-11  Sebastien Pouliot  <spouliot@videotron.ca>

	* DES.cs: Create() using CryptoConfig, fix #30256
	* DESCryptoServiceProvider.cs: fix #30256
	* RandomNumberGenerator.cs: uncomment in Create(rng) for CryptoConfig

2002-10-10  Sebastien Pouliot  <spouliot@videotron.ca>

	* AsymmetricAlgorithm.cs: Inherit from IDisposable, common support from XML import
	* DSA.cs: FromXmlString() keypair import, Create() using CryptoConfig
	* RSA.cs: FromXmlString() keypair import, Create() using CryptoConfig
	* DSACryptoServiceProvider.cs: Added Dispose()

2002-10-09  Sebastien Pouliot  <spouliot@videotron.ca>

	* CryptoConfig.cs: New implementation

2002-10-05  Andrew Birkett  <andy@nobugs.org>

	* RC2CryptoServiceProvider.cs: New implementation
	* RC2.cs: New implementation

2002-09-22  Andrew Birkett  <andy@nobugs.org>

	* RijndaelManaged.cs: Added faster case for multiplication by 2 in GF(8)
	
2002-09-22  Andrew Birkett  <andy@nobugs.org>

	* RijndaelManaged.cs: BlockSize now reports size in bytes.
	* ICryptoTransform.cs: Updated comments - BlockSizes are in bytes, unlike elsewhere.

2002-09-19  Andrew Birkett  <andy@nobugs.org>

	* Rijndael.cs: Create() now gives you a RijndaelManaged object
	* RijndaelManaged.cs: Added dummy GenerateKey until we have a proper RNG.
	* SymmetricAlgorithm.cs: Updated comments

2002-09-15  Andrew Birkett  <andy@nobugs.org>

	* RijndaelManaged.cs: Added support for CBC-mode, PKCS7/Zero padding.
	* SymmetricAlgorithm.cs: IV size must match block size, not key size.  
	  Key property now sets KeySizeValue correctly in bits.

2002-09-11  Andrew Birkett  <andy@nobugs.org>

	* RijndaelManaged.cs: Implemented ECB-mode Rijndael cipher.
	* Rijndael.cs: Set valid key/block sizes.
	* SymmetricAlgorithm.cs: Remove throw from ctr so we can instantiate
	  derived classes.  Fixes to key sizes so they are measured in bits.
	* KeySizes.cs: Updated comments to emphasize that sizes are in bits.

2002-06-29  Martin Baulig  <martin@gnome.org>

	* AsymmetricAlgorithm.cs: Removed a duplicate semicolon to make it compile.

2002-05-19  Martin Baulig  <martin@gnome.org>

	* FromBase64Transform.cs (TransformFinalBlock): The return value of
	`DoTransform' tells us the number of bytes actually written - if it's
	smaller than `res', copy it to a smaller array.

2002-02-21  Mark Crichton <crichton@gimp.org>

	* RNGCryptoServiceProvider.cs: New file.
	* RandomNumberGenerator.cs: Constructor is now marked public.

2002-02-13  Dan Lewis <dihlewis@yahoo.co.uk>

	* DSACryptoServiceProvider.cs, SHA384Managed.cs, SHA512Managed.cs,
	Rijndael.cs, RSA.cs, RSAParameters.cs : New files (stubs)

Mon Feb 11 13:26:17 CET 2002 Paolo Molaro <lupus@ximian.com>

	* X509Certificates: dummy class.

2002-01-10  Duco Fijma <duco@lorentz.xs4all.nl>
	* Create (trivial) implementation of RandomNumberGenerator

2002-01-05  Ravi Pratap  <ravi@ximian.com>

	* CryptoAPITransform.cs, DESCryptoProvider.cs : MonoTODO attribute
	decoration.

	* HashAlgorithm.cs, MD5.cs, SHA1.cs, SHA256.cs, SHA384.cs : Ditto.

	* SHA512.cs, SymmetricAlgorithm.cs, ToBase64Transform.cs, 
	AsymmetricAlgorithm.cs, CryptoStream.cs, DSA.cs, DSASignatureDeformatter.cs,
	DSASignatureFormatter.cs, SignatureDescription.cs : Ditto.
	
Wed Nov 14 17:04:30 CET 2001 Paolo Molaro <lupus@ximian.com>

	* MD5CryptoServiceProvider.cs, SHA1CryptoServiceProvider.cs,
	SHA256Managed.cs: CLSCompliant updates.

2001-10-11  Thomas Neidhart <tome@sbox.tugraz.at>

	* CryptoAPITransform.cs: Initial version
	* CryptoStream.cs: Initial version
	* CspParameter.cs: Initial version
	* CspProviderFlags.cs: Initial version
	* DSA.cs: Initial version
	* DSAParameters.cs: Initial version
	* DSASignatureDeformatter.cs: Initial version
	* DSASignatureFormatter.cs: Initial version
	* DeriveBytes.cs: Initial version

2001-10-06  Thomas Neidhart <tome@sbox.tugraz.at>

    * AsymmetricAlgorithm.cs: Inital version
	* AsymmetricKeyExchangeDeformatter.cs: Initial version
	* AsymmetricKeyExchangeFormatter.cs: Initial version
	* AsymmetricSignatureDeformatter.cs: Initial version
	* AsymmetricSignatureFormatter.cs: Initial version
	* PaddingMode.cs: Added PaddingMode.None
	* SignatureDescription.cs: Initial version
    * CryptographicException.cs: Initial version
	* CryptographicUnknownOperationException.cs: Initial version
	* SymmetricAlgorithm.cs: Implemented CreateDecryptor, CreateEncryptor
	  and Create() methods.
	
2001-08-20  Sergey Chaban <serge@wildwestsoftware.com>

	* DES.cs encryption core is about 30% faster than previous version.
	* DESCryptoServiceProvider.cs added PKCS-5 padding.

2001-08-09  Sergey Chaban <serge@wildwestsoftware.com>

	* ToBase64Transform.cs: Base64Table now supports both encoding
	  and decoding tables. As a result Table was renamed to EncodeTable
	  and DecodeTable was added.
	* FromBase64Transform.cs: Initial check-in.
	* DES.cs: Initial check-in.
	* DESCryptoServiceProvider.cs: Initial check-in.

2001-08-01  Matthew S. Ford  <Matthew.S.Ford@Rose-Hulman.Edu>

	* CipherMode.cs: Initial version.
	* CryptoStreamMode.cs: Initial version.
	* HashAlgorithm.cs: Initial version.
	* ICryptoTransform.cs: Initial version.
	* KeySizes.cs: Initial version.
	* MD5.cs: Initial version.
	* MD5CryptoServiceProvider.cs: Initial version.
	* PaddingMode.cs: Initial version.
	* SHA1.cs: Initial version.
	* SHA1CryptoServiceProvider.cs: Initial version.
	* SHA256.cs: Initial version.
	* SHA256Managed.cs: Initial version.
	* SHA384.cs: Initial version.
	* SHA512.cs: Initial version.
