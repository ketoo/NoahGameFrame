2010-05-17 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* Timer.cs: check object reference when the timers are equal.
	Fixes bug #605092.

2010-04-23  Rolf Bjarne Kvinge  <RKvinge@novell.com>

	* LazyThreadSafetyMode.cs: Include in Moonlight build.

2010-04-15  Jérémie Laval  <jeremie.laval@gmail.com>

	* AtomicBoolean.cs:
	* CountdownEvent.cs:
	* SpinLock.cs: Add BOOTSTRAP_NET_4_0 define

2010-03-25 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* ThreadPool.cs: add fast path to queue work items in the runtime.

2010-03-23  Sebastien Pouliot  <sebastien@ximian.com>

	* Monitor.cs: Implement new NET_4_0 (and SL4) Enter overload 
	required to run some DRT tests (e.g. 7007)

2010-03-16  Jb Evain  <jbevain@novell.com>

	* ThreadPool.cs, Thread.cs, ExecutionContext.cs: use MOONLIGHT
	symbol to disambiguate MonoTouch and Moonlight code.

2010-03-08  Jérémie Laval  <jeremie.laval@gmail.com>

	* SpinLock.cs: Merge algorithm back in SpinLock struct

2010-03-08  Jérémie Laval  <jeremie.laval@gmail.com>

	* SpinLock.cs: Update to use ticket spinlock algorithm

2010-02-26 Rodrigo Kumpera  <rkumpera@novell.com>

	* LazyThreadSafetyMode.cs: Added.

2010-02-08  Zoltan Varga  <vargaz@gmail.com>

	* WaitHandle.cs (CheckArray): Check that the handles array is not null.
	Fixes #576039.

2010-02-02  Jérémie Laval  <jeremie.laval@gmail.com>

	* CancellationToken.cs:
	* CancellationTokenSource.cs:
	* ManualResetEventSlim.cs:
	* SemaphoreSlim.cs:
	* SpinLock.cs:
	* SpinWait.cs:
	* ThreadLocal.cs: Port to .NET 4 beta 2 API

2009-12-09  Jb Evain  <jbevain@novell.com>

	* ThreadPool.cs (QueueUserWorkItem): properly throw
	an ANE instead of triggering a NRE when being passed a null callback.

2009-11-02  Miguel de Icaza  <miguel@novell.com>

	* Jumbo patch to drop support for pre-NET_2_0 code:

	Remove ONLY_1_1 code
	Remove NET_1_0 only code
	Remove NET_2_0 defines assuming the value is true.

2009-11-02  Sebastien Pouliot  <sebastien@ximian.com>

	* Thread.cs (set_CurrentUICulture): Delay setting in_currentculture
	to true until after the null check and the return statement.

2009-11-02  Jérémie Laval  <jeremie.laval@gmail.com>

	* Parallel.cs: Added fix for Bug #536919.

2009-10-25  Sebastien Pouliot  <sebastien@ximian.com>

	* Thread.cs: Fix validations for Join and Sleep overloads

2009-10-22  Sebastien Pouliot  <sebastien@ximian.com>

	* EventWaitHandle.cs: Add validation on the EventResetMode 
	parameter used in the constructors
	* Monitor.cs: Fix validations for TryEnter and Wait. Reduce 
	duplicated code between overloads.

2009-10-21  Sebastien Pouliot  <sebastien@ximian.com>

	* WaitHandle.cs: Add missing validations for 'millisecondsTimeout'
	in Wait[One|Any|All]. Also call the overloaded (bool) methods for
	WaitAll to reduce code duplication.

2009-10-20  Sebastien Pouliot  <sebastien@ximian.com>

	* Timer.cs: Always call Init from every constructors to avoid 
	duplicate checks. Fix validations on different dueTime and period
	(ctor and Change methods). Seal private TimerComparer class and
	avoid multiple (identical) casts in its Compare method. Seal 
	private Scheduler class.

2009-10-20 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* Timer.cs: make sure we don't insert 2 timers with the same key.

2009-10-20  Jb Evain  <jbevain@novell.com>

	* Thread.cs: change type of the current_appcontext field to object
	to avoid triggering static constructors unless explicitely required.

2009-10-16 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* Timer.cs: looks like any negative value is treated as Infinite.

2009-10-07  Sebastien Pouliot  <sebastien@ximian.com>

	* Thread.cs: Remove LocalDataStoreSlot-related methods from
	Moonlight build

2009-09-29  Rolf Bjarne Kvinge  <RKvinge@novell.com>

	* Thread.cs: StartSafe: ignore ThreadAbortExceptions.

2009-09-27 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* Timer.cs: account for the time spent sending jobs to the queue.

2009-09-26  Mark Probst  <mark.probst@gmail.com>

	* Thread.cs: Serialize the principal so as not to make it cross
	appdomains.  Two new internal calls for copying byte arrays
	between domains.

2009-09-25  Mark Probst  <mark.probst@gmail.com>

	* Thread.cs: The Thread class is split up into Thread and
	InternalThread now.  We have exactly one InternalThread per
	thread, and at most one Thread per appdomain per thread.  Most
	data is stored in InternalThread.  All InternalThread objects live
	in the root domain.

	* Environment.cs: Corlib version bump.

2009-09-24 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* Timer.cs: no need to wake up the scheduler when removing the next
	scheduled item.

2009-09-23 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* Timer.cs: rewritten. It only has one queue now and it is sorted by
	due time. Before this changes, it was using a lot of CPU when there
	were a lot of 'future' timers.

2009-09-23  Sebastien Pouliot  <sebastien@ximian.com>

	* ExecutionContext.cs: Don't use SecurityContext and don't expose
	AsyncFlowControl for NET_2_1
	* ThreadAbortException.cs: Remove ExceptionState from NET_2_1
	* Thread.cs: Don't expose ApartmentState and remove Suspend and
	Resume methods for NET_2_1
	* ThreadPool.cs: Remove GetAvailableThreads and Unsafe* methods
	for NET_2_1

2009-09-22  Jb Evain  <jbevain@novell.com>

	* Timer.cs: MONOTOUCH doesn't support remoting, so do not pass
	true to exitContext when calling WaitOne on a WaitHandle.

2009-09-22  Sebastien Pouliot  <sebastien@ximian.com>

	* Thread.cs: Remove [Get|Set]CompressedStack for NET_2_1

2009-09-21  Sebastien Pouliot  <sebastien@ximian.com>

	* Thread.cs: Remove CurrentPrincipal property for NET_2_1
	* ExecutionContext.cs: Remove Run method for NET_2_1

2009-09-20  Sebastien Pouliot  <sebastien@ximian.com>

	* EventWaitHandle.cs: Remove AccessControl usage for NET_2_1
	* Mutex.cs: Remove some ctors and AccessControl usage for NET_2_1
	* NativeEventCalls.cs: Remove AccessControl usage for NET_2_1

2009-08-19  Jérémie Laval  <jeremie.laval@gmail.com>

	* ParallelLoopState.cs: Take in account that
	AtomicBoolean is a class.

2009-08-19  Jérémie Laval  <jeremie.laval@gmail.com>

	* AtomicBoolean.cs: Turn it into a class
	* CountdownEvent.cs: Work on cached variable. Make sure
	count doesn't go under 0.

2009-08-11  Jérémie Laval  <jeremie.laval@gmail.com>

	* Watch.cs:
	* SpinWait.cs:
	* CountdownEvent.cs:
	* CancellationToken.cs:
	* ICancelableOperation.cs:
	* CancellationTokenSource.cs:
	* CancellationTokenRegistration.cs: Add BOOTSTRAP_NET_4_0.

2009-08-11  Jérémie Laval  <jeremie.laval@gmail.com>

	* Parallel.cs: Disable While method.
	* CountdownEvent.cs: Fix method signature.
	* Barrier.cs: Moved type.
	* AggregateException.cs: Moved type.

2009-08-04 Jérémie Laval  <jeremie.laval@gmail.com>

	* SpinLock: Remove unused private methods.

2009-08-03  Zoltan Varga  <vargaz@gmail.com>

	* Thread.cs: Always call Thread_free_internal from the finalizer, since
	it frees other things besides the handle. Fixes #527576.

2009-07-31  Jérémie Laval  <jeremie.laval@gmail.com>

        * Snzi.cs:
        * Parallel.cs:
        * SpinLock.cs:
        * SpinWait.cs:
        * ThreadLocal.cs:
        * SemaphoreSlim.cs:
        * CountdownEvent.cs:
        * ManualResetEventSlim.cs
        * CancellationTokenSource.cs: Various 4.0 b1 API mismatch fixes.

2009-07-30 Jérémie Laval  <jeremie.laval@gmail.com>

	* AggregateException.cs:
	* AtomicBoolean.cs:
	* Barrier.cs:
	* CSnzi.cs:
	* CancellationToken.cs:
	* CancellationTokenRegistration.cs:
	* CancellationTokenSource.cs:
	* CountdownEvent.cs:
	* ICancelableOperation.cs:
	* LazyInitializer.cs:
	* ManualResetEventSlim.cs:
	* Parallel.cs:
	* ParallelLoopResult.cs:
	* ParallelLoopState.cs:
	* ParallelOptions.cs:
	* SemaphoreSlim.cs:
	* Snzi.cs:
	* SpinLock.cs:
	* SpinWait.cs:
	* ThreadLocal.cs:
	* Watch.cs: Add ParallelFx files for System.Threading namespace

2009-07-21  Jb Evain  <jbevain@novell.com>

	* ThreadPool.cs: avoid an unecessary method call when not running
	in moonlight.

2009-07-20  Jb Evain  <jbevain@novell.com>

	* Thread.cs: use the moonlight specific thread start
	hack for the net_2_1 profile exclusively.

2009-06-25  Miguel de Icaza  <miguel@novell.com>

	* Timer.cs: Throw ArgumentNullException if the callback is null. 

2009-06-22  Bill Holmes  <billholmes54@gmail.com>

	* Thread.cs : Adding interrupt_on_stop field.

	Contributed under MIT/X11 license.

2009-06-10  Rolf Bjarne Kvinge  <RKvinge@novell.com>

	* Thread.cs: MoonlightUnhandledException: ensure there's no way to
	reach native code with a managed exception.

2009-06-10  Sebastien Pouliot  <sebastien@ximian.com>

	* Thread.cs: Refactor calling Moonlight's OnUnhandledException to 
	make sur the delegate it not called from a [SecuritySafeCritical]
	caller.
	* ThreadPool.cs: Reuse the above code for QueueUserWorkItem. 
	Original patch from Alan McGovern

2009-06-10  Marek Safar  <marek.safar@gmail.com>

	* LockRecursionException.cs: New file.

2009-04-21  Mark Probst  <mark.probst@gmail.com>

	* Thread.cs: Make the execution context field thread-static to
	avoid it being shared between app domains.

2009-04-20  Rolf Bjarne Kvinge  <RKvinge@novell.com>

	* Thread.cs: For 2.1 ensure exceptions in threads are handled using the
	UnhandledException event mechanism in System.Windows.Application instead
	of crashing the application.

2009-04-18  Mark Probst  <mark.probst@gmail.com>

	* Thread.cs: Don't keep the current number formatter here because
	it's shared between app domains.

2009-04-18  Mark Probst  <mark.probst@gmail.com>

	* Thread.cs: Make the abort exception state a GC handle, to
	properly separate AppDomains.  Add internal method for getting the
	state object.

	* ThreadAbortException.cs: Get the abort exception state via the
	method in Thread.

2009-04-12 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WaitHandle.cs: implemented 2 missing WaitAny overloads.

2009-03-05 Rolf Bjarne Kvinge  <RKvinge@novell.com>

	* WaitHandle.cs: Added missing WaitOne overload.

2009-02-20 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* WaitHandle.cs: implemented SignalAndWait.

2009-02-18  Jb Evain  <jbevain@novell.com>

	* SynchronizationContext.cs: add NET_2_1 SetThreadStaticContext
	method, even if already obsolete.

2009-01-30  Andreia Gaita  <avidigal@novell.com>

	* SynchronizationContext.cs: Remove moonlight hacks, dispatcher should
	be able to handle this now.

2008-12-20  Miguel de Icaza  <miguel@novell.com>

	* WaitHandle.cs: Add two overloads that were introduced in 3.5.

2008-11-25  Geoff Norton  <gnorton@novell.com>

	* SynchronizationContext.cs: A temporary horrible hack to SyncContext
	to hard-wire all calls back to the main thread (moonlight-only) so that
	we can use our unit test harness.  This will be fixed for 2.1 when we
	implement Dispatcher properly.

2008-10-30 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* Interlocked.cs: make CompareExchange internal in 1.1 for use by the
	runtime.

2008-09-19  Miguel de Icaza  <miguel@novell.com>

	* WaitHandle.cs (WaitOne): Add new 3.5 SP1 overload.

Tue Sep 16 21:02:59 CEST 2008 Paolo Molaro <lupus@ximian.com>

	* Thread.cs: fixed SpinWait() implementation (bug #423582).

Tue Sep 9 15:19:48 CEST 2008 Paolo Molaro <lupus@ximian.com>

	* Timer.cs: use a separate queue for timers that are far in the future
	so they don't need to be looked at as often (bug #418272).
	Better precision of recheduling time.

2008-07-03  Andreas Nahr  <ClassDevelopment@A-SoftTech.com>

	* ThreadPool.cs:
	* LockCookie.cs:
	* Interlocked.cs:
	* ExecutionContext.cs:
	* AsyncFlowControl.cs:
	* AbandonedMutexException.cs: Fix parameter names

2008-07-02  Zoltan Varga  <vargaz@gmail.com>

	* Timer.cs (SchedulerThread): Iterate through the keys of the hashtable instead
	of key-value pairs.

2008-06-18  Kornél Pál  <kornelpal@gmail.com>

	* Thread.cs: Implement BeginThreadAffinity and EndThreadAffinity as no-op
	because managed and native threads are currently bound together.

2008-06-14  Zoltan Varga  <vargaz@gmail.com>

	* Thread.cs: Sync layout with unmanaged side.

2008-06-07  Zoltan Varga  <vargaz@gmail.com>

	* Monitor.cs: Implement Enter/Exit directly as icalls without managed wrapper
	methods.

2008-04-11  Zoltan Varga  <vargaz@gmail.com>

	* Thread.cs: Make in_currentculture non-static. Fixes #378892.

2008-04-07  Dick Porter  <dick@ximian.com>

	* Thread.cs: Fix throwing of exceptions when manipulating
	ApartmentState.  Fixes part of bug 324338.

2008-04-01: Eyal Alaluf <eyala@mainsoft.com>

	* Thread.cs: Put a NumberFormatter instance as a member of the current
	  thread so it can reused for performint ToString conversions.

2008-03-26  Massimiliano Mantione <massi@ximian.com>
	* Thread.cs: Renamed "unused6" because it will be used to hold
	the "mono_thread_manage" callback.

Tue Feb 26 17:51:58 CET 2008 Paolo Molaro <lupus@ximian.com>

	* Timer.cs: use a monotonic clock to schedule timers
	(fixes part of bug#347476).

Fri Feb 22 11:23:53 CET 2008 Paolo Molaro <lupus@ximian.com>

	* Thread.cs: implemented Begin/EndCriticalRegion.

2008-02-03  Sebastien Pouliot  <sebastien@ximian.com>

	* WaitHandle.cs: Ifdef out some unused code (found by Gendarme).

2008-01-06  Zoltan Varga  <vargaz@gmail.com>

	* Thread.cs (set_CurrentCulture): If the culture is read-only, cache the result
	of serializing it.
	(set_CurrentUICulture): Ditto.

2008-01-03  Zoltan Varga  <vargaz@gmail.com>

	* Thread.cs (set_CurrentCulture): Avoid the serialization overhead if
	the new culture is equal to the old one.

2007-12-27  Zoltan Varga  <vargaz@gmail.com>

	* Thread.cs: Change the type of synch_cs to an IntPtr to be in synch with the
	unmanaged definition.

2007-11-20  Atsushi Enomoto  <atsushi@ximian.com>

	* ReaderWriterLock.cs : ... and avoid extra finalizer call.

2007-11-20  Atsushi Enomoto  <atsushi@ximian.com>

	* ReaderWriterLock.cs : adding missing 2.0 destructor (does nothing).

Thu Nov 8 18:36:25 CET 2007 Paolo Molaro <lupus@ximian.com>

	* Timer.cs: if period is 0 with a non-infinite due time, we
	run the callback just once (bug #340212).

2007-10-24  Dick Porter  <dick@ximian.com>

	* Thread.cs: Call Thread_init on the new 2.0 constructors too.

2007-10-24  Dick Porter  <dick@ximian.com>

	* Thread.cs: Assign the ManagedThreadId when it is asked for,
	rather than in the constructor, so ThreadPool threads also work.
	Fixes bug 335579 (and doesn't break 325367 or 325566)

2007-10-24  Atsushi Enomoto  <atsushi@ximian.com>

	* SynchronizationContext.cs : removed SendOrPost().

Wed Oct 17 13:24:33 CEST 2007 Paolo Molaro <lupus@ximian.com>

	* Timer.cs: better cleanup test for the expired array.

Tue Oct 16 17:22:15 CEST 2007 Paolo Molaro <lupus@ximian.com>

	* Timer.cs: remove expired timers from the the jobs list.

Tue Oct 16 12:14:43 CEST 2007 Paolo Molaro <lupus@ximian.com>

	* Timer.cs: rewrote to use threadpool threads to invoke the callbacks,
	avoid Thread.Abort and Thread.Interrupt and use a single scheduler
	thread, partially from the patch of Rafael Ferreira in bug #315999.
	Fixes bug #315999, #332206.

2007-10-15  Dick Porter  <dick@ximian.com>

	* Thread.cs: Initialise synch_cs to null now we aren't using it as
	a monitor lock

2007-09-25  Dick Porter  <dick@ximian.com>

	* Thread.cs: Keep ManagedThreadId constant over the lifetime of a
	Thread.  Patch from jlarimer@gmail.com fixing bugs 325367 and
	325566.

2007-09-25  Jonathan Pobst  <monkey@jpobst.com>

	* SynchronizationContext.cs: Implement SetSynchronizationContext.

2007-09-06  Dick Porter  <dick@ximian.com>

	* Timer.cs: Only hold a WeakReference to the runner thread, to
	work around an issue when finalizing at shutdown or (I think)
	appdomain unload.  (Basically, the Thread was being finalized
	first, but the Timer's finalizer was still trying to reference it
	subsequently.)

2007-08-10  Gert Driesen  <drieseng@users.sourceforge.net>

	* Thread.cs: Throw ThreadStateException when retrieving ApartmentState
	or IsBackground if thread is stopped. Fixes bug #81658.

2007-08-08  Zoltan Varga  <vargaz@gmail.com>

	* Thread.cs: Add a fixme.

2007-07-21  Miguel de Icaza  <miguel@novell.com>

	* WaitHandle.cs (Handle): It turns out that we should never create
	new SafeWaitHandles, as applications will assume that a
	SafeWaitHandle pulled from this will be the same after a Handle
	update (from Gert's test):

	
                AutoResetEvent are1 = new AutoResetEvent (false);
                AutoResetEvent are2 = new AutoResetEvent (false);
                SafeWaitHandle swh1 = are1.SafeWaitHandle;
                Console.WriteLine ("#A1:" + !swh1.IsClosed);
                Console.WriteLine ("#A2:" + !swh1.IsInvalid);
                IntPtr dummyHandle = (IntPtr) 2;
                are1.Handle = dummyHandle;
                Console.WriteLine ("#A3:" + (are1.Handle == dummyHandle));
                Console.WriteLine ("#A4:" + !swh1.IsClosed);
                Console.WriteLine ("#A5:" + !swh1.IsClosed);
                Console.WriteLine ("#A6:" + !swh1.IsInvalid);
                Console.WriteLine ("#A7:" + !are1.SafeWaitHandle.IsClosed);
                Console.WriteLine ("#A8:" +
	        !are1.SafeWaitHandle.IsInvalid);

	We would return in A4, A5, A6 true, even when we have set the
	Handle ourselves. 

	* 

2007-07-18  Miguel de Icaza  <miguel@novell.com>

	* WaitHandle.cs (Handle): in the 2.0 profile, explicitly dispose
	the old SafeWaitHandle, do not wait for the finalizer to run;

	Take ownership of the handle;   The docs did not say that
	assigning to this value would lead to a leak, the docs said that
	in the 1.0 and 1.1 profiles assigning to this property might lead
	to a leak.   My mistake. 

	Fixes: 82134
	
2007-07-09  Atsushi Enomoto  <atsushi@ximian.com>

	* LockCookie.cs, AsyncFlowControl.cs :
	  added missing operator == and !=.

2007-05-22  Jonathan Chambers  <joncham@gmail.com>

	* Thread.cs: Use & to check ThreadState rather than ==.
	Fixes AlbumSurfer regression.

2007-05-09  Jonathan Chambers  <joncham@gmail.com>

	* Thread.cs: Implement ApartmentState related items.

2007-05-02  Dick Porter  <dick@ximian.com>

	* ReaderWriterLock.cs: ReaderWriterLock derives from
	CriticalFinalizerObject in the 2.0 profile

2007-05-01  Dick Porter  <dick@ximian.com>

	* ThreadState.cs: 
	* AsyncFlowControl.cs: 
	* Interlocked.cs: 
	* RegisteredWaitHandle.cs: 
	* TimerCallback.cs: 
	* ThreadStateException.cs: 
	* Monitor.cs: 
	* ThreadStart.cs: 
	* WaitOrTimerCallback.cs: 
	* LockCookie.cs: 
	* EventWaitHandle.cs: 
	* WaitHandle.cs: 
	* ThreadAbortException.cs: 
	* ThreadPriority.cs: 
	* ReaderWriterLock.cs: 
	* NativeOverlapped.cs: 
	* Mutex.cs: 
	* Overlapped.cs: 
	* ThreadPool.cs: 
	* ApartmentState.cs: 
	* EventResetMode.cs: 
	* SynchronizationLockException.cs: 
	* ManualResetEvent.cs: 
	* WaitCallback.cs: 
	* IOCompletionCallback.cs: 
	* AutoResetEvent.cs: 
	* AbandonedMutexException.cs: 
	* SendOrPostCallback.cs: 
	* ThreadInterruptedException.cs: Update to 2.0 profile

Thu Apr 19 16:47:52 CEST 2007 Paolo Molaro <lupus@ximian.com>

	* ThreadPool.cs: patch from Robert Jordan to implement
	ThreadPool.SetMaxThreads.

2007-04-03  Alp Toker  <alp@atoker.com>

	* Monitor.cs: Class is static in 2.0.

2007-03-27  Dick Porter  <dick@ximian.com>

	* Mutex.cs: Throw ApplicationException if ReleaseMutex() fails.
	Fixes bug 79358.

Tue Jan 23 17:43:50 CET 2007 Paolo Molaro <lupus@ximian.com>

	* Thread.cs: mark the GC-tracked field with UIntPtr.

2006-12-31  Miguel de Icaza  <miguel@novell.com>

	* ThreadPool.cs: Stub a method.

2006-12-11  Miguel de Icaza  <miguel@novell.com>

	* WaitHandle.cs: In 2.0 use SafeWaitHandles and the SafeWaitHandle
	patterns instead of using directly the IntPtr Handle.

	Refactor the code to reuse as much as possible, and follow the new
	conventions where appropriate. 

2006-11-07  Robert Jordan  <robertj@gmx.net>

	* WaitHandle.cs: Don't assume Assembly.GetEntryAssembly () !=
	null.  Fixes bug #79859.

2006-11-02  Dick Porter  <dick@ximian.com>

	* Thread.cs: Use the new Interrupt and SpinWait icalls.

2006-07-04  Atsushi Enomoto  <atsushi@ximian.com>

	* WaitHandle.cs : CheckArray() is also used in WaitAny(), so added
	  extra argument to skip STAThread check.

2006-06-30  Duncan Mak  <duncan@novell.com>

	* WaitHandle.cs (CheckArray): Avoid using reflection unless we
	really need to.

2006-06-29  Duncan Mak  <duncan@novell.com>

	* WaitHandle.cs (CheckArray): Throw NotSupportedException if the
	current thread is marked with the STAThreadAttribute. Fixes bug
	#78455.

2006-05-05  Sebastien Pouliot  <sebastien@ximian.com>

	* ExecutionContext.cs: Don't capture the compressed stack unless the 
	security manager is active (this wasn't ready to be called in 
	production code).

2004-04-29  Atsushi Enomoto  <atsushi@ximian.com>

	* Timer.cs : avoid NullReferenceException when it is already disposed.
	  Patch by pawel.sakowski@mind-breeze.com. Fixed bug #78208.

2004-04-28  Atsushi Enomoto  <atsushi@ximian.com>

	* SynchronizationContext.cs : use ThreadPool in Post(), as suggested
	  by cl (bug #78139).

2004-04-04  Atsushi Enomoto  <atsushi@ximian.com>

	* Thread.cs : base class is CriticalFinalizerObject.
	* ThreadStartException.cs : no public constructors.

Wed Mar 29 18:29:55 CEST 2006 Paolo Molaro <lupus@ximian.com>

	* Thread.cs: update for the runtime changes to culture caching.

Wed Mar 15 16:35:49 CET 2006 Paolo Molaro <lupus@ximian.com>

	* Thread.cs: updates for LocalDataStoreSlot: we use an array as
	storage for the slots now so that LocalDataStoreSlot objects an be
	garbage collected if the user doesn't keep a reference to them.

2006-02-09  Miguel de Icaza  <miguel@novell.com>

	* Monitor.cs: Patch from Thong Nguyen, Wait (.., Timeout) method
	should allow a -1 (Timeout.Infinite) to mean indefinite wait (the
	code already supported this.

	Removed also a LAMESPEC for missing argument checking in Wait with
	the int argument.
	
	Fixed the use of exceptions.

2005-12-23  Dick Porter  <dick@ximian.com>

	* EventWaitHandle.cs: 
	* Mutex.cs: Implement OpenExisting

	* NativeEventCalls.cs: Add OpenEvent icall for OpenExisting in
	2.0.  Add a "created" boolean out parameter to CreateEvent icall.

	* ManualResetEvent.cs: 
	* AutoResetEvent.cs: Update CreateEvent icall signature (now has
	"created" boolean out parameter.)

2005-12-17  Dick Porter  <dick@ximian.com>

	* ThreadStartException.cs: 
	* EventWaitHandle.cs: 
	* EventResetMode.cs: 
	* AbandonedMutexException.cs: New for 2.0 profile

	* ThreadState.cs: 
	* Interlocked.cs: 
	* RegisteredWaitHandle.cs: 
	* Monitor.cs: 
	* ThreadPriority.cs: 
	* Mutex.cs: 
	* ManualResetEvent.cs: 
	* AutoResetEvent.cs: Updated for 2.0 profile

2005-11-23  Zoltan Varga  <vargaz@gmail.com>

	* Interlocked.cs: Add T:class constraint to the generic 
	CompareExchange and Exchange methods.

2005-11-17  Zoltan Varga  <vargaz@gmail.com>

	* Interlocked.cs: Add generic CompareExchange and Exchange methods.

2005-11-17  Sebastien Pouliot  <sebastien@ximian.com>

	* WaitHandleCannotBeOpenedException.cs: New (2.0). Is required to 
	compile the Semaphore tests (in System.dll).

2005-10-23  Marek Safar  <marek.safar@seznam.cz>

	* SynchronizationContext.cs: A few simple fixes.

2005-10-06  Sebastien Pouliot  <sebastien@ximian.com>
 
	* Thread.cs: Copy an existing IPrincipal to new threads. Fix bug 
	#76332.

2005-10-06  Sebastien Pouliot  <sebastien@ximian.com> 

	* Thread.cs: Added new attributes, [ReliabilityContract] for 
	destructor and [Obsolete] for [Get|Set]CompressedStack, that were 
	added in 2.0 RC.

2005-09-11  Zoltan Varga  <vargaz@gmail.com>

	* Thread.cs (MemoryBarrier): Make this an icall.

2005-09-10  Zoltan Varga  <vargaz@gmail.com>

	* Thread.cs (Interrupt): Make this throw a NotImplementedException.

2005-09-09  Martin Baulig  <martin@ximian.com>

	* Timer.cs (Timer.Runner.Start): Silently catch
	ObjectDisposedException and return; works around some race
	condition on thread abort.	

2005-08-19  Dick Porter  <dick@ximian.com>

	* Thread.cs: Reserve 64 bits for the thread ID.

2005-07-19  Martin Baulig  <martin@ximian.com>

	* Timer.cs (Timer.Runner.Start): Fix a race condition which was
	causing a hang on exit int he debugger: check `!disposed' before
	`start_event.WaitOne ()' and again after it.

2005-06-07 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Thread.cs: check that the culture is valid for formatting
	(ie, (!neutral || invariant)).

2005-06-07  Sebastien Pouliot  <sebastien@ximian.com> 

	* Thread.cs: Added _Thread interface (and members) and a few missing
	attributes (for both 1.1 and 2.0).

2005-06-06  Zoltan Varga  <vargaz@freemail.hu>

	* Thread.cs Mutex.cs Monitor.cs: Add some missing 2.0 attributes.

2005-05-29  Sebastien Pouliot  <sebastien@ximian.com> 

	* Timer.cs: Added new constructor for 2.0 and ComVisible attribute.
	* Timeout.cs: This is a static class in 2.0 and ComVisible attribute.

2005-05-26  Ben Maurer  <bmaurer@ximian.com>

	* Thread.cs: Use a static object for a lock rather than
	typeof(Thread).

2005-05-26  Sebastien Pouliot  <sebastien@ximian.com> 
 
	* SynchronizationContext.cs: Re-introduced SendOrPost method as it's 
	being used in System.Web.Services.

2005-05-26  Sebastien Pouliot  <sebastien@ximian.com>

	* SynchronizationContext.cs: Updated to beta2 API so it doesn't depend
	on the switcher structure anymore (which will be removed from the 
	build).

2005-05-24  Sebastien Pouliot  <sebastien@ximian.com>

	* Thread.cs: Removed #pragma which aren't supported by CSC 7.x.

2005-05-20  Sebastien Pouliot  <sebastien@ximian.com>

	* AsyncFlowControl.cs: Now available, as internal, in NET_1_1. This is
	required to get some methods from SecurityContext and ExecutionContext
	working.
	* CompressedStack.cs: Now includes the current CompressedStack in a new
	Capture.
	* ExecutionContext.cs: Includes more methods in NET_1_1 to enable 
	ThreadPool.UnsafeQueueUserWorkItem to work properly (i.e. without
	stack propagation).
	* Thread.cs: Made ExecutionContext field accessible from the runtime.
	Added stack propagation when Thread.Start is called.
	* ThreadPool.cs: QueueUserWorkItem now does stack propagation (done in
	the runtime), so I "fixed" UnsafeQueueUserWorkItem not to do so.

2005-05-19  Miguel de Icaza  <miguel@novell.com>

	* Thread.cs: REmove warnings.

2005-05-16 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Thread.cs: first check for null, then set in_currentculture.

2005-05-12  Lluis Sanchez Gual  <lluis@novell.com>

	* Thread.cs: Moved all checks done inside sync_lock to unmanaged code.
	Merged Thread_internal and Start_internal into a single icall, which
	does all work.

2005-05-11  Sebastien Pouliot  <sebastien@ximian.com> 

	* CompressedStack.cs: Allow merging of an existing CompressedStack
	with the actual stack of the current Thread.
	* Thread.cs: GetCompressedStack and SetCompressedStack are public 
	before 2.0 but couldn't be seen with mono-api-info because of it's 
	LinkDemand for the ECMA public key. Removed unused CompressedStack
	private field (now part of the ExecutionContext).

2005-05-09  Sebastien Pouliot  <sebastien@ximian.com> 

	* CompressedStack.cs: GetCompressedStack is public before 2.0 but 
	couldn't be seen with mono-api-info because of it's LinkDemand for
	the ECMA public key. Stack capture occurs here if none exists on the
	current thread.

2005-04-28 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ReaderWriterLock.cs: fix random ApplicationException errors. Tested
	with the System.Web.Cache stress program. Patch by Eyal Alayuf
	(Mainsoft). Fixes 74598.

2005-04-28  Sebastien Pouliot  <sebastien@ximian.com>

	* Thread.cs: Added property to get the ExecutionContext in 2.0. Fixed
	GetCompressedStack and made SetCompressedStack available (as internal)
	before NET_2_0.

2005-04-28  Sebastien Pouliot  <sebastien@ximian.com> 
 
	* AsyncFlowControl.cs: Updated wrt beta2.
	* ExecutionContext.cs: Updated wrt beta2. Class is now internal in 
	NET_1_1 to allow the compressed stack propagation to other threads.
	* CompressedStack.cs: Updated wrt beta2. Class is internal in NET_1_1 
	to allow the compressed stack propagation to other threads.
	* ContextCallback.cs: Updated wrt beta2.
	* HostExecutionContext.cs: Updated wrt beta2.
	* HostExecutionContextManager.cs: Updated wrt beta2.
	* Thread.cs: Added internal property to get the ExecutionContext.

2005-04-19  Zoltan Varga  <vargaz@freemail.hu>

	* Thread.cs: Add some unused fields.

2005-04-07 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ThreadPool.cs: BindHandle does nothing now.

2005-04-07 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Thread.cs: clear the Unstarted bit before calling Start_internal.
	Fixes bug #72738.

2005-04-04  Ben Maurer  <bmaurer@ximian.com>

	* Thread.cs: Do argument checking for Current[UI]Culture to make
	the exception more clear for a null value being set.

2005-03-24  Sebastien Pouliot  <sebastien@ximian.com>

	* CompressedStack.cs: Added LinkDemand for UnmanagedCode and ECMA 
	public key on GetCompressedStack method.
	* Mutex: Added LinkDemand for UnmanagedCode to create named (system 
	wide) mutexes.
	* Thread.cs: Added LinkDemand for ECMA public key on [Get|Set]
	CompressedStack methods.
	* WaitHandle.cs: Added LinkDemand and InheritanceDemand for 
	UnmanagedCode on set Handle property.

2005-03-10  Zoltan Varga  <vargaz@freemail.hu>

	* Thread.cs: Make slothash a ThreadStatic field. Fixes #65414.

2005-02-21  Zoltan Varga  <vargaz@freemail.hu>

	* Monitor.cs Interlocked.cs: Add net 2.0 ReliabilityContractAttributes.

2005-02-20  Zoltan Varga  <vargaz@freemail.hu>

	* Interlocked.cs: Applied patch from Luca Barbieri (luca.barbieri@gmail.com). Add NET 2.0 methods.

Tue Feb 15 18:19:11 CET 2005 Paolo Molaro <lupus@ximian.com>

	* Thread.cs: make the slothash a field in MonoThread.

2005-01-27  Sebastien Pouliot  <sebastien@ximian.com>

	* Overlapped.cs: Added check for ControlPolicy and ControlEvidence for
	Unsafe pack. Added MonoTODO for missing security stack propagation.
	* Thread.cs: Add security checks for ControlThread.
	* ThreadPool.cs: Added declarative security checks.

Thu Jan 13 18:15:32 CET 2005 Paolo Molaro <lupus@ximian.com>

	* Thread.cs: implement stacksize and parameterized
	start functionality (requires matching runtime).

2005-01-12 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ThreadAbortException.cs: added private serialization .ctor.

2004-12-20  Sebastien Pouliot  <sebastien@ximian.com>

	* CompressedStack.cs: Implemented most todo so it's usable for CAS.
	* CompressedStackSwitcher.cs: Implemented most todo.
	* Thread.cs: Implement support for getting/setting CompressedStack.

2004-12-15  Zoltan Varga  <vargaz@freemail.hu>

	* Thread.cs: Change type of culture_info and ui_culture_info to 
	IntPtr. Implement correct culture handling for the UI culture as
	well.

2004-12-14  Zoltan Varga  <vargaz@freemail.hu>

	* Thread.cs: Optimize CurrentCulture to avoid initializing the
	serialization infrastructure in the common case when the culture is
	not set explicitly.

2004-12-06  Zoltan Varga  <vargaz@freemail.hu>

	* Thread.cs: Add new fields 'serialized_culture_info{_len}'.
	
	* Thread.cs (CurrentCulture): Fix leaking of culture info objects 
	across appdomains. Partially fixes #50049.

2004-12-05  Miguel de Icaza  <miguel@ximian.com>

	* AutoResetEvent.cs (Set, Reset): If we are disposed, throw a
	ObjectDisposedEvent, helped track the WebConnection destructor
	issue. 

2004-09-16 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Timer.cs: don't invoke the callback twice when the timer changes.
	Fixes bug #66116.

2004-09-08  Marek Safar  <marek.safar@seznam.cz>

	* Interlocked.cs: Class is static in NET_2_0.

2004-09-04  Sebastien Pouliot  <sebastien@ximian.com>

	* Thread.cs: Changed an imperative security demand to declarative
	(unsupported) so it doesn't (for now) call the security runtime.

2004-08-20  Sebastien Pouliot  <sebastien@ximian.com>

	* Thread.cs: Added Fx 2.0 properties/methods/attributes.

2004-08-12  Sebastien Pouliot  <sebastien@ximian.com>

	* CompressedStackSwitcher.cs: Added missing [ComVisible] and 
	[ReliabilityContract] attributes.
	* ExecutionContext.cs: Added missing [ComVisible] and 
	[Serializable] attributes.
	* HostExecutionContext.cs: Added missing [ComVisible] attribute.
	* HostExecutionContextManager.cs: Added missing [ComVisible] and 
	[ReliabilityContract] attributes.
	* HostExecutionContextSwitcher.cs: Added missing Equals and 
	GetHashCode methods and [ComVisible] and [ReliabilityContract] attrs.
	* ParameterizedThreadStart.cs: New delegate in NET_2_0.
	* SendOrPostCallback.cs: Added missing [ComVisible] attribute.
	* SynchronizationContext.cs: Added new (2.0 beta1) methods Copy and
	WaitHelper. Added missing [ComVisible] and [ReliabilityContract] attrs.
	* SynchronizationContextSwitcher.cs: Added missing [ComVisible] and 
	[ReliabilityContract] attributes.

2004-08-08  Sebastien Pouliot  <sebastien@ximian.com>

	* HostExecutionContext.cs: Fx 2.0 stub required for AppDomain.
	* HostExecutionContextManager.cs: Fx 2.0 stub required for AppDomain.
	* HostExecutionContextSwitcher.cs: Fx 2.0 stub required for AppDomain.

2004-08-04 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Timer.cs: don't invoke the callback if the period changes before the
	due time. Fixes bug #62421.

2004-07-27  Lluis Sanchez Gual  <lluis@novell.com>

	* ExecutionContext.cs, ExecutionContextSwitcher.cs, 
	  SynchronizationContext.cs, SynchronizationContextSwitcher.cs: Added
	  2.0 stubs.

2004-07-15  Dick Porter  <dick@ximian.com>

	* Thread.cs: Hold a lock in GetNamedDataSlot.  Fixes bug 61582,
	based on patch by Sbastien Robitaille
	(sebastien.robitaille@croesus.com).  Also fix instances of
	lock(typeof(Thread)) to lock a private object instead.

2004-07-14  Sebastien Pouliot  <sebastien@ximian.com>

	* AsyncFlowControl.cs: New structure in Fx 2.0 required in 
	System.Security namespace.
	* CompressedStackSwitcher.cs: New structure in Fx 2.0 required in 
	System.Security namespace.
	* ContextCallback.cs: New delegate in Fx 2.0 required in 
	System.Security namespace.
	* CompressedStack.cs: Updated API for NET_2_0 profile.

2004-07-10  Lluis Sanchez Gual  <lluis@ximian.com>

	* SendOrPostCallback.cs: New delegate.

2004-06-24  Dick Porter  <dick@ximian.com>

	* Mutex.cs: Implement the createdNew parameter

2004-06-15  Gert Driesen <drieseng@users.sourceforge.net>

	* Thread.cs: changed return type of VolatileRead to UIntPtr
	* ThreadPool.cs: set return type of SetMinThreads to bool

2004-06-15  Lluis Sanchez Gual  <lluis@ximian.com>

	* Thread.cs: Added new fields to keep sync with MonoThread.
	  Removed state changes in Sleep and Join. The state change is now done
	  in the icall. For accessing to internal fields lock with synch_lock
	  instead of this, which can be a source of deadlocks.

2004-06-15  Lluis Sanchez Gual  <lluis@ximian.com>

	* Timer.cs: Don't abort the thread if Dispose() is called from the runner
	  thread.

2004-06-11  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Thread.cs:
	(CurrentPrincipal): lock on CurrentThread, not typeof (Thread) and set
	the thread IPrincipal if we get it from the AppDomain.

2004-06-09  Gert Driesen <drieseng@users.sourceforge.net>

	* CompressedStack.cs: Added finalizer to match public API of
	MS.NET

2004-05-19  Lluis Sanchez Gual <lluis@ximian.com>

	* Thread.cs: Some fixes in Abort. Implemented Suspend and Resume.
	  Added internal interruption_requested field.

2004-05-13  Sebastien Pouliot  <sebastien@ximian.com>

	* CompressedStack.cs: Added an internal constructor so a default one
	doesn't appear with corcompare.
	* Thread.cs: Added missing MemoryBarrier (only for 1.1) and SpinWait to please
	corcompare. Both throw a NotImplementedException.
	* ThreadPool.cs: Added missing UnsafeRegisterWaitForSingleObject methods (4
	overloads) to please corcompare. All throw a NotImplementedException.

2004-05-12  Zoltan Varga  <vargaz@freemail.hu>

	* CompressedStack.cs: New file.

2004-04-15  Lluis Sanchez Gual <lluis@ximian.com>

	* ThreadPool.cs: Added GetMinThreads and SetMinThreads.
	* Timer.cs: In Change, return false if the timer has been disposed.
	In Dispose, notify the WaitHandle.

2004-04-11  Lluis Sanchez Gual <lluis@ximian.com>

	* ReaderWriterLock.cs: More fixes: never wait where acquiring a reader lock
	  if the thread already has the lock. Added readyWaitingReaders variable to
	  keep track of threads ready to get the reader lock.

2004-04-11  Lluis Sanchez Gual <lluis@ximian.com>

	* LockQueue.cs: Moved lockCount change inside the rwlock lock. Removed
	  lock(this) when entering the rwlock to avoid a deadlock.
	* ReaderWriterLock.cs: In AcquireWriterLock, queue the thread if the queue
	  is not empty (even if state==0).

2004-04-09  Zoltan Varga  <vargaz@freemail.hu>

	* Timer.cs: Call the callback immediately if dueTime is 0. Fixes
	#56728.

2004-04-08  Jackson Harper  <jackson@ximian.com>

	* ReaderWriterLock.cs: Fix tyop
	
2004-04-08  Lluis Sanchez Gual <lluis@ximian.com>

	* ReaderWriterLock.cs: Changed some methods to private.
	* WaitHandle.cs: In Wait methods, release the synchronization context when 
	  exitContext is true.

2004-04-08  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Timer.cs: call Abort on the Runner instance too.

2004-04-07  Jackson Harper  <jackson@ximian.com>

	* Thread.cs: Use new culture info method for constructing the
	current culture.
	
2004-04-07  Lluis Sanchez Gual <lluis@ximian.com>

	* ReaderWriterLock.cs: When a thread holds a writer lock, a call to
	  AcquireReaderLock works like a call to AcquireWriterLock.

2004-04-06  Lluis Sanchez Gual <lluis@ximian.com>

	* Monitor.cs: In Wait(), release the synchronization context when 
	  exitContext is true.

2004-04-06  Lluis Sanchez Gual <lluis@ximian.com>

	* LockCookie.cs: Keep in this class the count of reader or writer locks
	  for a thread, not only whether it has locks or not.
	* LockQueue.cs: Added property for checking if a thread is waiting in
	  the queue. Wait now returns a boolean that set to false on timeout 
	  expiration.
	* ReaderWriterLock.cs: Started fixing bugs but I had to rewrite a lot of it.
	  The main change is that now it keeps a reader lock count for each
	  thread. This is needed since methods like ReleaseLock or 
	  UpgradeToWriterLock need to return a per-thread status in LockCookie.
	  Also added support for recursive writer-lock requests.

2004-03-21  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ThreadAbortException.cs: use same HResult as MS.
	* Timer.cs: abort the running thread when disposing the Timer. This
	fixes NullRefs when finishing xsp.

2004-03-15  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* NativeOverlapped.cs: added 2 new internal fields.
	* Overlapped.cs: implemented, but it's not used.

	* ThreadPool.cs: implemented BindHandle.

2004-03-08  Zoltan Varga  <vargaz@freemail.hu>

	* Timer.cs (Dispose): Applied patch from Jaroslaw Kowalski 
	(jaak@zd.com.pl). Fix finalization problems during appdomain unload.

2004-02-23  Jackson Harper <jackson@ximian.com>

	* LockCookie.cs: Add some fields for restoring locks.
	* ReaderWriterLock.cs: Implement
	* LockQueue.cs: New File - used for queueing thread locks in
	ReaderWriterLock.
	
2004-02-19  Jackson Harper <jackson@ximian.com>

	* Monitor.cs: Fix spelleng.
	
2004-02-09  Zoltan Varga  <vargaz@freemail.hu>

	* Thread.cs: Add fields added to unmanaged MonoThread here as well.
	Fixes random errors caused by memory corruption.

2004-02-06  Zoltan Varga  <vargaz@freemail.hu>

	* Thread.cs: Store the thread name in unmanaged memory, since the
	thread object is shared between appdomains.

2004-02-05  Sebastien Pouliot  <sebastien@ximian.com>

	* Thread.cs: Implemented CurrentPrincipal.

2004-01-22  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Thread.cs: delayed thread creation until Start is called. If we
	don't do that and Start() is not called, the thread is leaked. First
	step towards fixing bug #53078. 

2003-12-02  Dick Porter  <dick@ximian.com>

	* Thread.cs: Throw InvalidOperationException if Thread.Name is
	already set.

2003-12-01  Dick Porter  <dick@ximian.com>

	* Thread.cs: Implement CurrentCulture and CurrentUICulture

2003-11-12  Miguel de Icaza  <miguel@ximian.com>

	* Thread.cs: Add new VolatileRead/VolatileWrite methods from 1.1

2003-10-23  Lluis Sanchez Gual  <lluis@ximian.com>

	* Thread.cs: Added ResetDataStoreStatus and RestoreDataStoreStatus
	  methods. They are used in CrossAppDomainChannel to save and restore
	  thread's local data when switching between domains.

2003-10-08  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ManualResetEvent.cs: added check for disposed.
	* Thread.cs: no need to init this field.

2003-10-01  Zoltan Varga  <vargaz@freemail.hu>

	* Thread.cs: Add locking to AllocateNamedDataSlot and 
	FreeNamedDataSlot.

Wed Aug 20 12:01:36 CEST 2003 Paolo Molaro <lupus@ximian.com>

	* Thread.cs: put all the fields at the start and add
	more fields needed by the runtime.

2003-08-14  Lluis Sanchez Gual  <lluis@ximian.com>

	* Thread.cs: SetData() method: use Hashtable.Contains to check
	  if a dataslot has been allocated (value could be null).

2003-07-23  Duncan Mak  <duncan@ximian.com>

	* WaitHandle.cs (CheckDisposed): This method is not in the public
	API, mark it as 'internal'.

2003-07-01  Dick Porter  <dick@ximian.com>

	* Thread.cs: Throw an exception if thread creation failed.
	(Better than just blowing up later.)

2003-06-27  Dietmar Maurer  <dietmar@ximian.com>

	* ThreadPool.cs: use async delegate invoke.

2003-06-25  Dick Porter  <dick@ximian.com>

	* WaitHandle.cs: Default handle value should be InvalidHandle, not
	Zero.

2003-06-21  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ThreadPool.cs: correctly create a TimeSpan with provided the number of
	milliseconds.

	* WaitHandle.cs: fixes for WaitAny/All and TimeSpan.

2003-06-06  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WaitHandle.cs: checks and exceptions.

2003-06-02  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* NativeEventCalls.cs: added CloseEvent_intenal.
	* WaitHandle.cs: call CloseEvent_internal when disposing.

2003-05-31  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* RegisteredWaitHandle.cs: check that the callback is not null before
	invoking.

	* ThreadPool.cs: fixed timeout -> TimeSpan conversions (closes bug
	#43963). Queue the item before setting the handle. If there's a timeout,
	avoid trying to Dequeue, getting the exception et al, just continue the
	loop.

Mon May 19 09:07:45 CEST 2003 Paolo Molaro <lupus@ximian.com>

	* Monitor.cs: removed test_owner, the check is already done in the
	icall.

Tue May 13 15:34:29 CEST 2003 Paolo Molaro <lupus@ximian.com>

	* Thread.cs: added missing field used by the runtime and
	a new field to support thread-static data.

2003-04-17  Pedro Mart?ez Juli? <yoros@wanadoo.es>

	* Timer.cs: Change the position of two lines because they were
	before the "if" that ensures the integrity. After this, the first of
	that two lines was producing a NullReferenceException.

2003-04-09  Dick Porter  <dick@ximian.com>

	* Thread.cs: Make sure a reference to the ThreadStart delegate is
	held.  There's no telling how long it will be before
	Thread.Start() is called, and GC might destroy the delegate.
	Thread() and Start() need to be rewritten so that the runtime
	creates the new thread when Start() is called, which will simplify
	the code a great deal.

2003-03-20  Miguel de Icaza  <miguel@ximian.com>

	* Thread.cs (CurrentCuluture): use the invaraint culture instead
	of "" for the current_culture setting.

2003-03-25  Zoltan Varga  <vargaz@freemail.hu>

	* Thread.cs: Fix visibility of ResetAbort().

2003-03-18  Dick Porter  <dick@ximian.com>

	* Thread.cs: Keep the thread state updated in all the places that
	require it.  (Suspend, Resume and Interrupt not handled yet)

2003-03-03  Lluis Sanchez Gual <lluis@ideary.com>

	* Thread.cs: Changed implementation of CurrentContext, adapted to the changes
	  in the runtime.

2003-02-19  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Thread.cs: implemented CurrentContext.

2003-02-17  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Thread.cs: made the thread_id for the current thread accesible through
	an internal property.  

2003-02-17  Dick Porter  <dick@ximian.com>

	* Thread.cs: Added the Start semaphore field to the class.  Update
	the thread state after Start() has returned, not before.

2003-02-13  Zoltan Varga  <vargaz@freemail.hu>

	* Thread.cs (Sleep): Timeout.Infinite is a value argument.

2003-02-11  Dick Porter  <dick@ximian.com>

	* Monitor.cs: Infinite wait is Infinite, not 0 ms

2003-02-10  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Thread.cs: fixed bug #37759.

2003-02-07  Patrik Torstensson

	* Timer.cs: Set the Background thread flag for the timer thread

2003-02-05  Patrik Torstensson

	* ThreadPool.cs: Reformated and fixed issue that made all thread exit the pool. 

2003-02-04  Lluis Sanchez Gual <lluis@ideary.com>

	* ThreadPool.cs: Implemented RegisterWaitForSingleObject methods.

Tue Jan 28 17:55:59 CET 2003 Paolo Molaro <lupus@ximian.com>

	* Thread.cs: delay-init datastorehash.

2003-01-10  Patrik Torstensson  <totte@race-x-change.com>

	* ThreadPool.cs: Temporary removed the usage of monitor thread, implemented a 
                    model more equal to the MS one.

2002-12-10  Dick Porter  <dick@ximian.com>

	* Monitor.cs:
	* Thread.cs:
	* ThreadPool.cs:
	* Timer.cs:
	* WaitHandle.cs: Use TotalMilliseconds to convert a TimeSpan to
	ms, not Milliseconds.

2002-12-07  Martin Baulig  <martin@ximian.com>

	* Timer.cs: Make it actually work; now it no longer sets your
	application on fire if you use a zero periode and Timer.Change()
	actually works.

2002-11-11  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* Timer.cs: implemented more stuff. It works now.

2002-10-25  Zoltan Varga  <vargaz@freemail.hu>

	* Thread.cs: Implement GetDomain() and GetDomainID().

2002-10-24  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ThreadPool.cs: now the monitor thread is not sleeping and checking if
	more worker threads needed. It waits on _DataInQueue. If (and only if)
	there's data in the queue it checks if more worker threads needed and
	then sleeps 0.5s before waiting for queued data again.

2002-09-28  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* ThreadPool.cs: set IsThreadPoolThread before starting the worker.

2002-09-11  Dick Porter  <dick@ximian.com>

	* Mutex.cs: 
	* ManualResetEvent.cs: 
	* AutoResetEvent.cs: Use the WaitHandle.Handle property instead of
	the private field

	* WaitHandle.cs: Hide the os_handle field and the WaitOne_internal
	method

2002-09-03  Dick Porter  <dick@ximian.com>

	* Thread.cs: Added thread ID field

2002-08-27  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WaitHandle.cs: IDisposable fixes.

2002-08-14  Dick Porter  <dick@ximian.com>

	* Thread.cs: Make CurrentUICulture act the same as CurrentCulture
	for now.

2002-08-12  Dietmar Maurer  <dietmar@ximian.com>

	* ThreadAbortException.cs: impl. ExceptionState property.

	* Thread.cs: moved all instance variables to the start of the
	class. added support for Thread::Abort()

2002-04-30  Dick Porter  <dick@ximian.com>

	* Thread.cs: If LocalDataStoreSlot already has data set, remove it
	before adding a new one.

	Use the Thread object destructor to tell the runtime to close the
	thread handle.

2002-04-14 Patrik Torstensson <patrik.torstensson@labs2.com>

	* Interlocked.cs: made all methods icalls.

2002-04-14  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* IOCompletionCallback.cs: added attributes to the delegate
	(CLSCompliant(false) and Serializable).

2002-04-14 Patrik Torstensson <patrik.torstensson@labs2.com>
	* Thread.cs: Fixed IsThreadPoolThread to use a internal property instead of extending 
				 the threadstate enum.
	* ThreadPool.cs: Now using the internal Isthreadpoolthread property
	* ThreadState.cs: removed non-standard enum (ThreadPoolThread)

2002-04-14 Patrik Torstensson <patrik.torstensson@labs2.com>

	* ThreadState.cs: Added enum for threadpool thread
	* Thread.cs: changed the set/clr_state to be internal (used from threadpool)
	* Thread.cs: Added IsThreadPoolThread
	* ThreadPool.cs: Implementation of QueueUserWorkItem

Wed Feb 13 21:51:30 CET 2002 Paolo Molaro <lupus@ximian.com>

	* Thread.cs: implement CurrentCulture property needed by
	Convert.ChangeType() (used when compiling enums).

2002-01-23  Dick Porter  <dick@ximian.com>

	* ManualResetEvent.cs: 
	* AutoResetEvent.cs: Fixed DOS line endings

2002-01-22  Veronica De Santis <veron78@interfree.it>   
        
	* NativeEventCalls : Class that contains internal calls shared by Auto 
	  		     and Manual Reset Events
	* AutoResetEvents.cs : Added class AutoResetEvents and its implementation
	* ManualResetEvents.cs : Added class ManualResetEvents and its implementation

2002-01-16  Veronica De Santis <veron78@interfree.it>   
        
	* WaitHandle.cs : Renamed handle to os_handle and make it protected
	                  instead of private.
	* Mutex.cs : Write the System.Threading.Mutex methods ( constructors 
	             and the ReleaseMutex)

2002-01-15  Dick Porter  <dick@ximian.com>

	* WaitHandle.cs:
	* Thread.cs: Make the runtime's idea of infinite timeouts coincide
	with the class library's

2002-01-10  Dick Porter  <dick@ximian.com>

	* WaitHandle.cs: Added checks for too many handles and null
	handles in WaitAll() and WaitAny
	

2002-01-05  Ravi Pratap  <ravi@ximian.com>

	* AutoResetEvent.cs, ManualResetEvent.cs, Monitor.cs : MonoTODO
	decoration.

	* Mutex.cs, Overlapped.cs, ReaderWriterLock.cs, RegisteredWaitHandle.cs,
	Thread.cs, ThreadAbortException.cs, ThreadPool.cs, Timer.cs, WaitHandler.cs : Ditto.

2001-12-11  Dick Porter  <dick@ximian.com>

	* WaitHandle.cs: Implemented WaitAll(), WaitAny() and WaitOne() as
	internal calls.

2001-11-26  Dick Porter  <dick@ximian.com>

	* Thread.cs: DataSlot uses a single system TLS slot, and a
	hashtable per thread.  Some minor changes to reflect the new
	internal calls using the new IO library, and the newly-supported
	bool returns from internal calls.

	* Monitor.cs: Use bool returns from internal calls now they are
	supported by the runtime.  Coalesce enter with the try_enter
	internal call.

Wed Nov 14 17:06:18 CET 2001 Paolo Molaro <lupus@ximian.com>

	* Overlapped.cs, ThreadPool.cs, Timer.cs: CLSCompliant updates.

2001-10-03  Dick Porter  <dick@ximian.com>

	* Monitor.cs: Implemented all methods except the two Wait()
	methods that take boolean parameters

2001-09-28  Dick Porter  <dick@ximian.com>

	* Thread.cs: Implemented AllocateDataSlot(),
	AllocateNamedDataSlot(), FreeNamedDataSlot(), GetData(),
	GetNamedDataSlot(), SetData(), IsBackground.  Reworked Thread()
	and Start() to avoid a race condition. Added thread-safe state
	changing private operations.

	* Monitor.cs: Comment out the GetType() calls because it isn't implemented yet

2001-09-25  Dick Porter  <dick@ximian.com>

	* Thread.cs: Implement Join and timed Join, set correct state
	around Start, Join and Sleep calls, implement IsAlive and
	ThreadState properties.

	* ThreadState.cs (Threading): Added StopRequested,
	SuspendRequested, Suspended values

2001-09-23  Dick Porter  <dick@ximian.com>

	* Thread.cs: Implemented CurrentThread and Sleep (both versions)
	with internal calls, and Name.

2001-09-21  Dick Porter  <dick@ximian.com>

	* Thread.cs: Implement Thread(ThreadStart) constructor and Start()
	with an internal call

	* WaitHandle.cs: Close calls Dispose(false)

2001-09-13  Dick Porter  <dick@ximian.com>

	* ApartmentState.cs (Threading): Set the correct enum values

2001-09-13  Dick Porter  <dick@ximian.com>

	* ApartmentState.cs, AutoResetEvent.cs, IOCompletionCallback.cs,
	Interlocked.cs, LockCookie.cs, ManualResetEvent.cs, Monitor.cs,
	Mutex.cs, NativeOverlapped.cs, Overlapped.cs, ReaderWriterLock.cs,
	RegisteredWaitHandle.cs, SynchronizationLockException.cs,
	Thread.cs, ThreadAbortException.cs, ThreadInterruptedException.cs,
	ThreadPool.cs, ThreadStart.cs, ThreadStateException.cs,
	Timeout.cs, Timer.cs, TimerCallback.cs, WaitCallback.cs,
	WaitHandle.cs, WaitOrTimerCallback.cs: System.Threading class
	stubs.
	
2001-07-18  Michael Lambert <michaellambert@email.com>

	* ThreadPriority.cs, ThreadState.cs: Add.
