2006-03-03  Lluis Sanchez Gual <lluis@novell.com> 

	* Methods.cs: In BuildResponseReflectionMembers, use the operation
	name as base name for the response element. Don't use the request
	name as base, since it may have been customized using the RequestElementName
	property. Fixes bug #548988.

2010-02-15 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* SoapDocumentationHandler.cs: use IndexOf() instead of LastIndexOf()
	when removing the querystring from the url.

2009-10-16  Miguel de Icaza  <miguel@novell.com>

	* ServerType.cs: Do not use Activator.CreateInstance, use the call
	directly. 

2009-10-02  Miguel de Icaza  <miguel@novell.com>

	* ServerType.cs: Refactored all of this code to not use
	Activator.CreateInstance. 

2009-09-30  Miguel de Icaza  <miguel@novell.com>

	* Methods.cs: Empty extensions for MonoTouch for now.

	* ServerType.cs: On MonoTouch, we do not support HttpGet or
	HttpPost variations yet.

	* SoapExtension.cs: Avoid System.Configuration features.

2009-08-24  Marek Habersack  <mhabersack@novell.com>

	* SoapDocumentationHandler.cs: get rid of the ugly fake virtual
	path hack when creating the helper page. Part of fix for bug
	#463813

2009-07-23 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* LogicalMethodInfo.cs: add CacheDuration property.
	* WebServiceHandlerFactory.cs: use CacheDuration.
	Fixes bug #524460.

2009-05-05  Marek Habersack  <mhabersack@novell.com>

	* Methods.cs: if SoapRpcMethodAttribute doesn't specify the action
	or the action name is an empty string, generate the Action in
	SoapMethodStubInfo constructor. Fixes bug #459790

2009-04-21 Gonzalo Paniagua Javier <gonzalo@novell.com>

	* HttpSoapWebServiceHandler.cs: provide the full stack trace instead
	of just the Message to aid in debugging web service problems.
	Bug #496758 fixed.

2008-06-10  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* TypeStubManager.cs: fixed TypeStubInfo ctor, default binding name is
	wrong, when declared in WebServiceBindingAttribute, but not used.
	fixes. bug number: #345448

2008-02-22  Atsushi Enomoto  <atsushi@ximian.com>

	* TypeStubManager.cs : reverted 2007-12-11 change as it caused
	  several regressions.

2008-01-24  Marek Habersack  <mhabersack@novell.com>

	* SoapDocumentationHandler.cs: use a fake virtual path to get the
	WSDL help generator.

	* WebServiceHandlerFactory.cs: use BuildManager.GetCompiledType
	for the 2.0+ profile to get the handler type.

2008-01-08  Arina Itkes  <arinai@mainsoft.com>

	* Methods.cs: Fix for compatibility with .NET:
	  In .NET if SOAPAction is set to empty string it is regarded like
	  clearly specified with empty string.
	  
2007-12-11  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* TypeStubManager.cs: fixed TypeStubInfo ctor, default binding name is
	wrong, when declared in WebServiceBindingAttribute, but not used.
	fixes #345448 

2007-11-12  Atsushi Enomoto  <atsushi@ximian.com>

	* SoapHttpClientProtocol.cs : compare content-type in case-
	  insensitive manner. Fixed bug #325277.

2007-11-09  Atsushi Enomoto  <atsushi@ximian.com>

	* SoapDocumentationHandler.cs : handle 'schema' HTTP parameter like
	  "...blah.asmx?schema=MySchemaID". (Such URL does not work yet.)

2007-10-29  Atsushi Enomoto  <atsushi@ximian.com>

	* SoapException.cs : serialization constructor didn't call base.
	  Fixed bug #337421.

2007-10-10  Atsushi Enomoto  <atsushi@ximian.com>

	* Methods.cs : (SoapMethodStubInfo) reverted r74747 which caused
	  bug #332150.

2007-10-05  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpWebClientProtocol.cs : implemented EnableDecompression.

2007-10-04  Atsushi Enomoto  <atsushi@ximian.com>

	* TypeStubManager.cs: reverted r82932 again. This #if ONLY_1_1 causes
	  NUnit test regressions. It should not be reverted again until
	  appropriate NUnit test case is provided and proper fix is provided
	  that does not cause regressions.

2007-09-25  Marek Habersack  <mhabersack@novell.com>

	* WebServiceHandlerFactory.cs: WebServiceParser.GetCompiledType
	must be passed a virtual path, not physical one. Fixes bug
	#327809.

2007-08-21  Robert Jordan  <robertj@gmx.net>

	* ValueCollectionParameterReader.cs (Read):
	Add support for array parameters. Fixes #82519.

2007-07-29  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* TypeStubManager.cs: fixed BindingInfo.ctor, reverted to ONLY_1_1

2007-06-16  Gert Driesen  <drieseng@users.sourceforge.net>

	* Fault.cs: In SOAP 1.1, the child elements of Fault may be unqualified.
	Fixed FaultReader's ReadObject_Fault to only process either unqualified
	elements or elements in the SOAP 1.1 namespace, hereby fixing part of
	bug #81886 where an unqualified detail element was not processed. In 
	FaultWriter, write unqualified detail element. Fixes second part of 
	bug #81886.

2007-05-11  Atsushi Enomoto  <atsushi@ximian.com>

	* SoapServerType.cs : avoid IndexOutOfRange on reflecting 
	  SoapRpcAttribute.

2007-05-08  Atsushi Enomoto  <atsushi@ximian.com>

	* SoapServerMethod.cs : Some refactoring. simply use GetMethod() in
	  type stub. WsiClaims could be retrieved from type stub.
	* SoapServerType.cs : store server methods and implement GetMethod().

2007-05-08  Atsushi Enomoto  <atsushi@ximian.com>

	* SoapServerType.cs
	  ServerType.cs
	  Methods.cs : SoapBindingUse and SoapServiceRoutingStyle could just
	  be stored in LogicalTypeInfo (as they are attributed in a web
	  service class), and removed duplicates of them in SoapTypeStubInfo.
	  Invalid attributes on a service class are checked in SoapServerType
	  .ctor().

2007-05-08  Atsushi Enomoto  <atsushi@ximian.com>

	* XmlReturnReader.cs
	  XmlReturnWriter.cs
	  TypeStubManager.cs
	  ServerType.cs
	  SoapServerType.cs
	  Methods.cs
	  HttpSimpleTypeStubInfo.cs
	  HttpGetTypeStubInfo.cs
	  HttpPostTypeStubInfo.cs :
	  I once replaced LogicalTypeInfo with ServerType. It was kind of
	  wrong, since ServerType could be instantiated at any time, while
	  LogicalTypeInfo used to be a singleton per static context.
	  Here I re-introduced LogicalTypeInfo and replaced most of
	  ServerType use with this.

2007-05-08  Atsushi Enomoto  <atsushi@ximian.com>

	* LogicalMethodInfo.cs : MethodInfo is null when it is async.
	  Added internal ActualMethodInfo to represent "sync or begin" method
	  (i.e. former MethodInfo).
	* HttpGetTypeStubInfo.cs, HttpPostTypeStubInfo.cs :
	  MethodInfo -> ActualMethodInfo.

2007-04-29  Konstantin Triger  <kostat@mainsoft.com>

	*  WebServiceHelper.cs, HttpSoapWebServiceHandler.cs: add support for SOAP1.2
				to pass action in ContentType HTTP header.
				See http://www.w3.org/TR/soap12-part0/#L4697.

2007-04-23  Atsushi Enomoto  <atsushi@ximian.com>

	* TypeStubManager.cs : fix binding enumeration on finding by name.
	  fix wrong ONLY_1_1.
	* ServerType.cs : ONLY_1_1 is evil enough to make sources confusing.
	  Use it only when it is really needed.

2007-04-11  Konstantin Triger <kostat@mainsoft.com>

	* WebServiceHandlerFactory.cs: Use HttpRequest.IsLocal to determine
		local request in 2.0 profile.

2007-03-21  Konstantin Triger <kostat@mainsoft.com>

	* TypeStubManager.cs, Methods.cs, ServerType.cs: add support for the 2.0
		feature, which enables declaring WebService/WebMethods attributes
		in interface.

2007-03-11  Konstantin Triger <kostat@mainsoft.com>

	* WebServiceHandlerFactory.cs: throw on protocol version mismatch
		for 2.0 profile only.

2007-03-11  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* TypeStubManager.cs: fixed BindingInfo.ctor, it does not takes Name
	property from WebServiceBindingAttribute in .net 2.0

2007-03-04  Konstantin Triger <kostat@mainsoft.com>

	* WebServiceHandlerFactory.cs: throw on protocol version mismatch.

2007-02-01  Konstantin Triger <kostat@mainsoft.com>

	* TypeStubManager.cs, Methods.cs: refactor BindingInfo contruction to contain
		either declared Bindings or a default one.

2007-02-01  Konstantin Triger <kostat@mainsoft.com>

	* HttpSimpleWebServiceHandler.cs: Provide better error info.

2007-01-22  Miguel de Icaza  <miguel@novell.com>

	* HttpSimpleClientProtocol.cs, SoapHttpClientProtocol.cs: Hook up
	RegisterMapping and UnregisterMapping.

	* HttpWebClientProtocol.cs (RegisterMapping, UnregisterMapping):
	Keep track of all the async invocations that are created, based on
	the "userState" key.

	(CancelAsync): Implement. 
	
2006-12-22  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpSoapWebServiceHandler.cs : (SerializeFault) requestMessage
	  could be null.

2006-12-21  Atsushi Enomoto  <atsushi@ximian.com>

	* WebServiceHelper.cs :
	  added Soap12FaultToSoapException conversion method (copied from
	  SoapHttpClientProtocol.cs).
	  Added couple of switching fault code getter (by soap12 flag).
	* SoapMessage.cs: added IsSoap12 property to simplify SOAP 1.2
	  conditional code.
	* HttpSimpleServerProtocolFactory.cs, WebServiceHelper.cs,
	  HttpSoapWebServiceHandler.cs, SoapHttpClientProtocol.cs :
	  reflected all changes above. Switch 1.2 fault and 1.1 fault, and
	  simplify 1.2 switch.

2006-12-21  Atsushi Enomoto  <atsushi@ximian.com>

	* SoapHttpClientProtocol.cs : SOAP 1.2 client should allow text/xml
	  content type. Now bug #79985 is fixed here.

2006-12-21  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpSoapWebServiceHandler.cs : read xml with correct
	  SOAP 1.2 Envelope namespace. To determine the message
	  version, it must check SOAP version in
	  DeserializeRequest().

2006-12-19  Atsushi Enomoto  <atsushi@ximian.com>

	* SoapClientMessage.cs : oops, SoapVersion is only 2.0.

2006-12-19  Atsushi Enomoto  <atsushi@ximian.com>

	* SoapHttpClientProtocol.cs :
	  Don't use HTTP header when SoapVersion is Soap12.
	* HttpSoapWebServiceHandler.cs :
	  With SOAP 1.2 message we can only use Body content.
	  Set correct Content-Type for SOAP 1.2 message.
	* Fault12.cs : added null check.
	* SoapClientMessage.cs :
	  Set correct Content-Type for SOAP 1.2 message.
	* WebServiceHandlerFactory.cs :
	  don't reject SOAP 1.2 protocol here.

2006-12-18  Atsushi Enomoto  <atsushi@ximian.com>

	* WebServiceHandlerFactory.cs,
	  SoapServerMessage.cs,
	  HttpSoapWebServiceHandler.cs :
	  set guessed protocol to SoapServerMessage.

2006-12-18  Atsushi Enomoto  <atsushi@ximian.com>

	* TypeStubManager.cs, Methods.cs, SoapServerMethod.cs :
	  added WsiClaims property to TypeStubInfo, to implement
	  SoapServerMethod.WsiClaims.

2006-12-15  Atsushi Enomoto  <atsushi@ximian.com>

	* ServerType.cs : added SOAP 1.2 protocol as a different one from
	  SOAP 1.1.
	* Methods.cs : added Soap12TypeStubInfo.

2006-12-15  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpSoapWebServiceHandler.cs,
	  SoapHttpClientProtocol.cs : support application/soap+xml.

2006-12-04  Atsushi Enomoto  <atsushi@ximian.com>

	* AnyReturnReader.cs : not sure why, but the build must have been
	  broken, and now it is exposed.
	* SoapHttpClientProtocol.cs : added missing members, left as MonoTODO.

2006-12-01  Atsushi Enomoto  <atsushi@ximian.com>

	* AnyReturnReader.cs : implemented, it does almost nothing.

2006-12-01  Atsushi Enomoto  <atsushi@ximian.com>

	* SoapServerMethod.cs : implemented based on SoapMethodStubInfo.
	* ServerType.cs : added UseEncoded, used in SoapServerType.
	* SoapServerType.cs : ServiceDefaultIsEncoded is base.UseEncoded,
	  and ServiceNamespace is base.WebServiceNamespace.
	* SoapHeaderMapping.cs : origin info.

2006-12-01  Atsushi Enomoto  <atsushi@ximian.com>

	* SoapDocumentationHandler.cs, SoapExtension.cs :
	  WebServicesSection.Instance -> .Current.

2006-11-30  Atsushi Enomoto  <atsushi@ximian.com>

	* SoapHeaderMapping.cs : Now HeaderInfo became this type to implement
	  this class. Remapped some members (e.g. IsUnknownHeader -> Custom).
	* Methods.cs : so, split HeaderInfo from here.
	* SoapMessage.cs : Added alias HeaderInfo to SoapHeaderMapping.
	  Renamed some properties.

2006-11-30  Atsushi Enomoto  <atsushi@ximian.com>

	* ServerType.cs : Now LogicalTypeInfo became this type to implement
	  this class (and SoapTypeStubInfo to SoapServerType later).
	* TypeStubManager.cs : so, split LogicalTypeInfo from here.
	* XmlReturnReader.cs, XmlReturnWriter.cs, Methods.cs,
	  HttpSimpleTypeStubInfo.cs, HttpGetTypeStubInfo.cs,
	  HttpPostTypeStubInfo.cs : LogicalTypeInfo -> ServerType.

2006-11-30  Atsushi Enomoto  <atsushi@ximian.com>

	* SoapHttpClientProtocol.cs : looks like (only) the last Text is used
	  instead of the first one in .net.

2006-11-28  Atsushi Enomoto  <atsushi@ximian.com>

	* Fault12.cs : they should be all internal.

2006-11-28  Atsushi Enomoto  <atsushi@ximian.com>

	* Fault12.cs, fault-12.genxs, Fault12Serializer.cs :
	  SOAP 1.2 Fault serializer and its generation sources.
	* SoapException.cs :
	  Fixed .ctor() whose initialization was incorrect.
	* WebServiceHelper.cs, Methods.cs, HttpSoapWebServiceHandler.cs,
	  SoapHttpClientProtocol.cs :
	  handle SOAP 1.2 Fault.

2006-11-22  Atsushi Enomoto  <atsushi@ximian.com>

	* SoapHeader.cs WebServiceHelper.cs SoapClientMessage.cs
	  HttpSoapWebServiceHandler.cs SoapHttpClientProtocol.cs:
	  SOAP 1.2 Envelope support has started. Though I will have to
	  change its internals significantly, so it is in my branch.

2006-11-21  Atsushi Enomoto  <atsushi@ximian.com>

	* WebClientProtocol.cs HttpWebClientProtocol.cs SoapException.cs
	  SoapHeaderException.cs HttpSimpleClientProtocol.cs
	  SoapHttpClientProtocol.cs SoapMessage.cs:
	  assorted cosmetic API fixes.

2006-11-19  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpSoapWebServiceHandler.cs: on deserializing the request, do not 
	  close the input stream. Fixed bug #79954. Fix by Juan C. Olivares.

2006-11-16  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpServerProtocol.cs : removed old code.
	* SoapServerProtocol.cs, ServerProtocol.cs : removed as well, and
	  added up-to-date ones.
	* SoapHeaderHandling.cs, SoapHeaderMapping.cs,
	  ServerProtocolFactory.cs, SoapServerType.cs,
	  SoapServerProtocolFactory.cs, ServerType.cs,
	  SoapServerProtocol.cs, ServerProtocol.cs,
	  SoapServerMethod.cs :
	  Added stubs for 2.0 server protocol model. For now I don't spend
	  time on these ones but rather fill more important bits like
	  SOAP 1.2 support.

2006-11-15  Atsushi Enomoto  <atsushi@ximian.com>

	* SoapHeaderException.cs, SoapException.cs, SoapFaultSubcode.cs,
	  Soap12FaultCodes.cs : API fixes, mostly for SoapFaultSubCode.

2006-11-14  Atsushi Enomoto  <atsushi@ximian.com>

	* SoapHttpClientProtocol.cs : 2.0 API fix (WsiClaims -> WsiProfiles).

2006-09-06  Lluis Sanchez Gual <lluis@novell.com> 

	* ValueCollectionParameterReader.cs, MimeFormatter.cs: Support enums in
	the http get and post protocols. Fixes bug #78461.

2006-09-06  Lluis Sanchez Gual <lluis@novell.com>

	* SoapException.cs: Fix property name.

2006-09-05  Ankit Jain <jankit@novell.com>

	* LogicalMethodTypes.cs:
	* SoapMessageStage.cs:
	* SoapServiceRoutingStyle.cs:
	* SoapHeaderDirection.cs:
	* SoapParameterStyle.cs:
	* SoapProtocolVersion.cs: Remove [Serializable].

2006-08-30  Konstantin Triger <kostat@mainsoft.com>

	* WebClientProtocol.cs: implemented WebClientProtocol.UseDefaultCredentials().

2006-06-08  Chris Toshok  <toshok@ximian.com>

	* WebServiceHandlerFactory.cs: remove the CONFIGURATION_2_0 from
	ifdefs. NET_2_0 implies this now.

	* SoapExtension.cs: same.

	* SoapDocumentationHandler.cs: same.

2006-03-15  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* SoapExtension.cs: fixed ExecuteProcessMessage signature, added 
	stream parameter in order to update SoapMessage stream
	* SoapMessage.cs: removed unused ctor, added internal property to
	set SoapMessage's stream member
	* HttpSoapWebServiceHandler.cs, SoapHttpClientProtocol.cs: updated
	usage of ExecuteProcessMessage

2006-03-15  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* SoapServerMessage.cs: fixed SoapServerMessage constructors to
	remove quotes from SoapAction http header when initializing local
	action member

2006-03-15  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpSoapWebServiceHandler.cs, SoapServerMessage.cs: fixed
	SoapMessage.ContentEncoding that used in ProcessMessage method
	in SoapExtension

2006-03-12  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* TypeStubManager.cs: fixed type_to_manager member to be initialized
	per appdoamin (within TARGET_JVM block)

2006-03-12  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* SoapDocumentationHandler.cs: TARGET_JVM blocks added to exclude
	not supported methods

2006-01-12  Ben Maurer  <bmaurer@andrew.cmu.edu>

	* WebClientProtocol.cs: Add a 2.0 stub

2006-01-04  Chris Toshok  <toshok@ximian.com>

	* SoapDocumentationHandler.cs: add CONFIGURATION_2_0 stuff.

2006-01-04  Chris Toshok  <toshok@ximian.com>

	* WebServiceHandlerFactory.cs: add CONFIGURATION_2_0 stuff.

	* SoapExtension.cs: add CONFIGURATION_2_0 stuff.

2005-09-26  Lluis Sanchez Gual <lluis@novell.com>

	* LogicalMethodInfo.cs: GetCustomAttribute* does not return
	inherited attributes in MS.NET.

2005-08-15 Gert Driesen <drieseng@users.sourceforge.net>

	* SoapException.cs: Only mark serializable on 2.0 profile.
	* SoapHeaderException.cs: Only mark serializable on 2.0 profile.
	* WebClientProtocol.cs: DefaultValue of RequestEncoding must be null
	to match MS.NET. Fixed line endings.

2005-08-03 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* SoapDocumentationHandler.cs: workaround for a bug in the HttpRequest
	QueryString property. Under MS, GetKey (0) yields null.

2005-06-30  Konstantin Triger <kostat@mainsoft.com>

	* HttpSoapWebServiceHandler.cs:
	* HttpSimpleWebServiceHandler.cs: Disposing the WebService instance
	after a WebMethod invocation.

2005-06-14  Lluis Sanchez Gual <lluis@novell.com>

	* SoapHttpClientProtocol.cs: 
	* WebServiceHelper.cs:
	* Methods.cs: Changed the way headers are serialized. Instead of having
	a serializer per header type, we now have a serializer per method, and
	headers are serialized using a member mapping.
	
	* HttpSoapWebServiceHandler.cs: Handle one way methods properly.
	Fixes bug #70699.

2005-06-10 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpSoapWebServiceHandler.cs: use the HttpResponse.BufferOutput
	instead of our own MemoryStream when buffering is enabled. Flush the
	response instead of closing it, as that allows for Content-Length to
	be sent from HttpResponse and helps reusing connections.

2005-06-09 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* WebServiceHelper.cs: don't even try to read the response if its length
	is known to be 0.

	* SoapHttpClientProtocol.cs: for successful responses on methods that
	are not one-way, don't return immediately if the content length is 0 so
	that the check for Content-Type takes place.

2005-06-07  Kornél Pál <kornelpal@hotmail.com>

	* WebServiceHandlerFactory.cs: Throw InvalidOperationException instead of
	returning DummyHttpHandler when the request format is not supported.

2005-06-06  Kornél Pál <kornelpal@hotmail.com>

	* WebServiceHandlerFactory.cs: Added support for HttpPostLocalhost and HttpSoap12

2005-06-05 Konstantin Triger <kostat@mainsoft.com>

	* SoapHttpClientProtocol.cs: Close WebResponse to free resources
	* WebClientProtocol.cs, TypeStubManager.cs, SoapExtension.cs: moving static fields to AppDomain in Java builds

2005-02-07  Lluis Sanchez Gual <lluis@novell.com>

	* XmlReturnWriter.cs, SoapDocumentationHandler.cs: Use utf-8 encoding
	when generating xml responses, wsdl documents and schemas. This fixes
	bug #72202.

2004-12-09  Lluis Sanchez Gual <lluis@novell.com> 

	* ValueCollectionParameterReader.cs: Parse parameters in the correct
	way, Convert.ChangeType is not enough. This fixes bug #70266.
	Removed some types that are not supported as parameters.
	* MimeFormatter.cs: Added methods for xml <-> object conversion.
	* UrlEncodedParameterWriter.cs: Use a more elaborate method for converting
	from object to string, ToString() is not enough.

2004-12-09  Lluis Sanchez Gual <lluis@novell.com>

	* TypeStubManager.cs: Removed redundat hastable access.
	* SoapHttpClientProtocol.cs: Accept responses with ContentLength==0.
	This fixes bug #70310.

2004-12-03 Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* SoapHttpClientProtocol.cs: dispose the StreamReader that wraps the
	response stream.

2004-09-15  Lluis Sanchez Gual <lluis@novell.com>

	* Methods.cs: Use the service namespace as the base for the soap action.
	  This fixes bug #60379.

2004-08-25  Lluis Sanchez Gual <lluis@novell.com>

	* HttpSoapWebServiceHandler.cs, WebServiceHandler.cs: Do not assign the
	  context to the service. It already gets it from HttpContext.Current.

2004-07-27  Lluis Sanchez Gual  <lluis@ximian.com>

	* HttpSimpleClientProtocol.cs, HttpWebClientProtocol.cs, 
	  SoapHttpClientProtocol.cs: Implemented support for the new async model.
	* InvokeCompletedEventArgs.cs: Implemented.

2004-07-20  Lluis Sanchez Gual  <lluis@ximian.com>

	* HttpWebClientProtocol.cs: Add received cookies to cookieContainer when
	  getting the response, do not wait for the next request to do it.

2004-07-13  Lluis Sanchez Gual  <lluis@ximian.com>

	* HttpWebClientProtocol.cs, Soap12FaultCodes.cs, SoapClientMessage.cs,
	  SoapException.cs, SoapHeader.cs, SoapHeaderException.cs, 
	  SoapHttpClientProtocol.cs, SoapMessage.cs, SoapRpcMethodAttribute.cs,
	  SoapRpcServiceAttribute.cs, SoapServerMessage.cs: Api fixage (mainly
	  missing attributes).

2004-07-10  Lluis Sanchez Gual  <lluis@ximian.com>

	* HttpSimpleClientProtocol.cs, HttpWebClientProtocol.cs, 
	  SoapClientMessage.cs, SoapHttpClientProtocol.cs, SoapServerMessage.cs:
	  Added 2.0 stubs.
	* SoapException.cs, SoapHeader.cs, SoapHeaderException.cs, SoapMessage.cs,
	  SoapRpcMethodAttribute.cs, SoapRpcServiceAttribute.cs: Implemented some
	  new methods and properties.
	* WebClientProtocol.cs: uri field must be internal.

2004-07-05  Lluis Sanchez Gual  <lluis@ximian.com>

	* Methods.cs: When using RPC, ignore RequestElementName and MessageName, 
	  and always uses the method name (MS.NET seems to do this).

2004-07-02  Lluis Sanchez Gual  <lluis@ximian.com>

	* XmlReturnWriter.cs: Add XmlIncludes to the reflection importer when
	  reflecting the return type.

2004-07-01  Lluis Sanchez Gual  <lluis@ximian.com>

	* Methods.cs: Check for null when looking for a header serializer, since
	  unknown headers don't have a serializer.
	* SoapHeader.cs: Check for empty string before setting 
	  EncodedMustUnderstand.

2004-07-01  Lluis Sanchez Gual  <lluis@ximian.com>

	* Methods.cs, SoapMessage.cs: Added support for unknown headers.
	* SoapHeader.cs, SoapUnknownHeader.cs: Added new constructor that takes an
	  XmlElement with header info.
	* WebServiceHelper.cs: Write the encodingStyle attribute when using the
	  encoded format. Added support for unknown headers.

2004-06-22  Lluis Sanchez Gual  <lluis@ximian.com>

	* XmlReturnReader.cs, XmlReturnWriter.cs: Generate the serializer with
	  the root attribute taken from the method attributes.

2004-06-10  Lluis Sanchez Gual  <lluis@ximian.com>

	* TypeStubManager.cs: Improved locking in GetLogicalTypeInfo().
	* WebServiceHandler.cs: Removed unneded methods.

2004-06-02  Lluis Sanchez Gual  <lluis@ximian.com>

	* LogicalMethodInfo.cs: Don't crash in GetCustomAttribute if the requested
	  attribute is not found.

2004-06-01  Gert Driesen <drieseng@users.sourceforge.net>

	* HttpSoapWebServiceHandler.cs: Removed unused variables.
	* SoapHeaderAttribute.cs: Added Obsolete attribute.

2004-05-24  Lluis Sanchez Gual  <lluis@ximian.com>

	* SoapClientMessage.cs: Get the MethodInfo from the corresponding
	  SoapMethodStubInfo.

2004-05-18  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* SoapHttpClientProtocol.cs: when the response has a not acceptable
	status code, the WebException we throw has a status of ProtocolError.
	Fixes bug #58564.

2004-05-12  Lluis Sanchez Gual  <lluis@ximian.com>

	* LogicalMethodInfo.cs: Made EnableSession property internal.

2004-05-12  Lluis Sanchez Gual  <lluis@ximian.com>

	* HttpSimpleWebServiceHandler.cs: Added GetRequestMethod(), which is used
	  by the handler factory to check if the target method needs session or not.
	  Also factorized error handling in WriteError().
	* HttpSoapWebServiceHandler.cs: Added GetRequestMethod(), for the same 
	  reason. Assign the context to the WebService just before invoking the
	  method.
	* SoapHttpClientProtocol.cs: Use helper method to create the xml writer.
	* WebServiceHandler.cs: Added virtual GetRequestMethod().
	* WebServiceHandlerFactory.cs: Use an http handler wrapper when the target
	  method requires session support.
	* WebServiceHelper.cs: Added some helper methods.

2004-05-11  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* SoapDocumentationHandler.cs: added internal property to get the page
	handler when available.

	* WebServiceHandlerFactory.cs: wrap the documentation handler in a class
	that implements IRequiresSessionState and, if requested,
	IReadOnlySessionState, so that we can use Sesion object in the default
	WSDL help generator.

2004-05-10  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpSoapWebServiceHandler.cs: finish the request after serializing
	the fault message.

2004-05-05  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpGetWebServiceHandler.cs:
	* HttpPostWebServiceHandler.cs: removed.

	* HttpSimpleWebServiceHandler.cs: changed ctor parameters and added
	EnableSession property.

	* WebServiceHandler.cs: added EnableSession virtual property.

	* WebServiceHandlerFactory.cs: added a new handler that implements
	IRequiresSessionState used for HttpGet and HttpPost.
	(GetHandler): for HttpGet and HttpPost check if the method requires to
	have a Session object and use the new SimpleSyncSessionHandler in that
	case.

	Still missing proper session handler for SOAP requests.

2004-05-05  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpSimpleWebServiceHandler.cs:
	* HttpSoapWebServiceHandler.cs: use the session if the method has
	EnableSession set.

	* LogicalMethodInfo.cs: added EnableSession property.

	* WebServiceHandler.cs: set the Session object of the WebService.

2004-03-25  Lluis Sanchez Gual  <lluis@ximian.com>

	* WebServiceHelper.cs: In GetContentEncoding, chop off the single & double
	  quotes around the encoding name. Patch by George Kodinov. This fixes
	  bug #55806.

2004-03-10  Lluis Sanchez Gual  <lluis@ximian.com>

	* HttpSoapWebServiceHandler.cs: Set the properties ContentType and 
	  ContentEncoding in SoapServerMessage.
	* LogicalMethodInfo.cs: Implemented AsyncResultParameter, BeginInvoke and
	  EndInvoke. Fixed ComputeParameters, so it computes the correct parameters
	  for async logical methods.
	* Methods.cs: Check that client proxies have one and only one 
	  WebServiceBindingAttribute.
	* PatternMatcher.cs: Implemented (in fact, just moved code from 
	  TextReturnReader.cs)
	* SoapDocumentationHandler.cs: Add soap bindings in the generated
	  discovery document.
	* SoapHttpClientProtocol.cs: Implemented method Discover().
	* SoapMessage.cs: Implemented property ContentEncoding.
	* TextReturnReader.cs: Moved code to PatternMatcher.cs.
	
2004-02-27  Lluis Sanchez Gual  <lluis@ximian.com>

	* Fault.cs: Moved Fault class from Methods.cd to this file. It also includes
	  a generated serializer.
	* HttpSoapWebServiceHandler.cs, WebServiceHelper.cs: Use the new static Fault serializer.
	* Methods.cs: Include types declared with XmlInclude and SoapInclude to the
	  reflection importer. Moved Fault and its serializer to Fault.cs
	* SoapHttpClientProtocol.cs: Removed unused method.

2004-02-12  Lluis Sanchez Gual <lluis@ximian.com>

	* WebServiceHelper.cs: When reading a soap request, skip empty headers. 
	  This fixes bug #51846.

2004-01-27  Lluis Sanchez Gual <lluis@ximian.com>

	* WebServiceHandler.cs: inheritance from WebService is not mandatory.

2004-02-05  Alon Gazit <along@mainsoft.com>

       * HttpMethodAttribute.cs:
       * MatchAttribute.cs:
       * SoapDocumentMethodAttribute.cs:
       * SoapDocumentServiceAttribute.cs:
       * SoapHeaderAttribute.cs:
       * SoapRpcMethodAttribute.cs:
       * SoapRpcServiceAttribute.cs: This attribute is inherited by
		derived classes.changed the AttributeUsage attribute.

2004-02-05  Alon Gazit <along@mainsoft.com>

	* SoapHeaderAttribute.cs: This attribute is multiuse.
	Changed the AttributeUsage attribute.

2004-01-27  Lluis Sanchez Gual <lluis@ximian.com>

	* SoapDocumentMethodAttribute.cs: Fixed bug in ResponseNamespace.

2004-01-24  Lluis Sanchez Gual <lluis@ximian.com>

	* HttpWebClientProtocol.cs: Added missing property.
	* Methods.cs: Default binding for a method must be null.
	* SoapHeaderDirection.cs: Added missing enum value.
	* SoapMessage.cs: Added missing property.
	* TypeStubManager.cs: Removed unneded check from AddBinding.
	  In GetBinding(), return default binding if name is null.
	* ValueCollectionParameterReader.cs: IsPrimitive must be internal.

2004-01-21  Lluis Sanchez Gual <lluis@ximian.com>

	* HttpSoapWebServiceHandler.cs, SoapHttpClientProtocol.cs: Do not use 
	  indented format for requests and responses. SOAPAction header value
	  must be quoted (fix by Yaacov Akiba Slama).
	
2004-01-21  Lluis Sanchez Gual <lluis@ximian.com>

	* Methods.cs: Set the correct namespaces for Fault. This fixes bug #53117.
	  Based on the fix by Eran Domb.

2004-01-19  Lluis Sanchez Gual <lluis@ximian.com>

	* Methods.cs: Get the method namespace from the binding, not from the web
	service.
	* TypeStubManager.cs: When adding a binding, ignore it if it has already
	been added. Changed WebServiceLiteralNamespace by the method
	GetWebServiceLiteralNamespace. The literal namespace depends on the binding
	namespace, so it has to be provided as parameter.
	* XmlReturnReader.cs, XmlReturnWriter.cs: Use GetWebServiceLiteralNamespace 
	instead of WebServiceLiteralNamespace.

2004-01-14  Lluis Sanchez Gual <lluis@ximian.com>

	* Methods.cs: Set the correct element name and namespace for headers (those
	are not managed like other data classes).

2004-01-10  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpSoapWebServiceHandler.cs:
	* HttpSimpleWebServiceHandler.cs: set
	base.Context property.

	* WebServiceHandler.cs: added set_Context and set the context for the
	WebService when creating the instance.

2003-12-23  Lluis Sanchez Gual <lluis@ximian.com>

	* SoapDocumentationHandler.cs: Added support for DISCO file generation.

2003-12-16  Lluis Sanchez Gual <lluis@ximian.com>

	* HttpSimpleClientProtocol.cs: Do not encode the request url, since it is
	  already encoded by the MimeParameterWriter.
	* MatchAttribute.cs: Set default value for Group to 1.
	* TextReturnReader.cs: Implemented. With this it is possible to create an
	  XML web service that parse the contents of a web page.

2003-12-15  Lluis Sanchez Gual <lluis@ximian.com>

	* HttpSoapWebServiceHandler.cs: Added check for valid SOAPAction header.
	  Fixed bug when routing style is RequestElement.
	  Removed GetMethodFromAction. This is done now in the type stub.
	  Other minor fixes.
	* Methods.cs, WebServiceHelper.cs: Faults are always serialized using 
	  literal format. Removed unneded code.
	
2003-12-12  Lluis Sanchez Gual <lluis@ximian.com>

	* Methods.cs: Added special handling for RPC format.
	
2003-11-27  Lluis Sanchez Gual <lluis@ximian.com>

	* Methods.cs: Added correct namespace for serialization in Fault class.
	* SoapHttpClientProtocol.cs: Changed the method used to check if the
	  result is a fault. Now the check is done inside 
	  WebServiceHelper.ReadSoapMessage. Removed some debug writelines.
	* WebServiceHelper.cs: If the message body is a fault, use the fault
	  serializer.

2003-11-24  Lluis Sanchez Gual <lluis@ximian.com>

	* Methods.cs, TypeStubManager.cs, SoapMessage.cs: Removed TODO comment.
	* SoapDocumentationHandler.cs: Check that the documentation page exist.
	* SoapHttpClientProtocol.cs: Removed cast from WebResponse to
	  HttpWebResponse. This fixes bug #51281.

2003-11-20  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpSoapWebServiceHandler.cs: WebException is ok here for wrong 
	content encoding...
	* SoapHttpClientProtocol.cs: ... but here, we should throw an
	InvalidOperationException including the full response.

	* WebServiceHelper.cs:
	(GetContentEncoding): now fills an output variable with the name of the
	content encoding used.
	(InvalidOperation): new method to build the message for
	InvalidOperationException.

2003-11-20  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* SoapHttpClientProtocol.cs:
	* WebServiceHelper.cs: throw a WebException instead of an Exception.
	Fixes bug #51193.

2003-10-26  Miguel de Icaza  <miguel@ximian.com>

	* WebServiceHelper.cs: Compute content type and encoding
	correctly in the absence of extra options.

2003-10-22  Lluis Sanchez Gual <lluis@ximian.com>

	* Methods.cs: Class Fault is now public, so it can be serialized.

2003-10-15  Lluis Sanchez Gual <lluis@ximian.com>

	* TypeStubManager.cs: Added OperationName property.

2003-10-13  Lluis Sanchez Gual <lluis@ximian.com>

	* HttpGetTypeStubInfo.cs, HttpPostTypeStubInfo.cs, HttpSimpleTypeStubInfo.cs,
	  HttpSoapWebServiceHandler.cs, Methods.cs, SoapHttpClientProtocol.cs,
	  TypeStubManager.cs
	  Added class LogicalTypeInfo, which contains info common to all protocols
	  through which a web service can be accessed. Also, modified the way
	  Serializers are created. Instead of creating one by one, they are now
	  created all at once. This will make serialization creation more efficient
	  when the serializer code generator is in place.
	* SoapRpcMethodAttribute.cs: Set the correct default values for the
	  properties.
	* WebServiceHelper.cs: Removed unused method GetServiceNamespace().
	* XmlReturnReader.cs, XmlReturnWriter.cs: Get the namespace for the return
	  type from LogicalTypeInfo.

2003-10-12  Lluis Sanchez Gual <lluis@ximian.com>

	* SoapHttpClientProtocol.cs: Replaced AsyncInfo by a new 
	  SoapWebClientAsyncResult class derived from WebClientAsyncResult.
	* WebClientAsyncResult.cs: Removed unneeded members.

2003-10-10  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* SoapDocumentationHandler.cs: don't close the response stream here
	to allow filtering.

2003-10-06  Lluis Sanchez Gual <lluis@ximian.com>

	* HtmlFormParameterWriter.cs: Fixed WriteRequest().
	* HttpGetTypeStubInfo.cs, HttpPostTypeStubInfo.cs: Check that 
	  HttpMethodAttribute is present in proxy's method.
	* HttpSimpleClientProtocol.cs: Forgot to call InitializeRequest before
	  getting the request stream.
	* UrlEncodedParameterWriter.cs: in Encode(), take into account that
	  requestEncoding can be null.

2003-10-04  Lluis Sanchez Gual <lluis@ximian.com>

	* SoapDocumentationHandler.cs: Moved here the code from 
	  WebServiceHandlerFactory that generates the documentation page.
	* WebServiceHandlerFactory.cs: Moved the code that generates the doc page
	  to SoapDocumentationHandler.cs.
	* HttpGetClientProtocol.cs, HttpGetWebServiceHandler.cs,
	  HttpPostClientProtocol.cs, HttpPostWebServiceHandler.cs,
	  HttpSimpleWebServiceHandler.cs, HttpSoapWebServiceHandler.cs,
	  SoapHttpClientProtocol.cs: Changed parameters of GetTypeStub call.
	* HttpGetTypeStubInfo.cs, HttpPostTypeStubInfo.cs: Added ProtocolName
	  property. Added check for valid parameters.
	* HttpSimpleTypeStubInfo.cs: Define return MimeFormatter in constructor.
	* Methods.cs: BindingInfo and related properties moved to base TypeStubInfo.
	  Added properties for XmlImporter and SoapImporter.
	* TypeStubManager.cs: Added BindingInfo and related properties.
	  Changed GetTypeStub method. Now it takes the name of the protocol for
	  which to get the type stub info.
	* ValueCollectionParameterReader.cs: IsSupported should only return true
	  for input primitive parameters or array of primitives.

2003-10-03  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* SoapDocumentationHandler.cs: it does not generate the documentation
	page any more. GetDescription and GetSchemas are now internal.

	* WebServiceHandlerFactory.cs: generate the documentation page without
	doing a Transfer () but instead creating a Page instance from the wsdl
	help file. This file is located from the configuration file that
	contains the <wsdlHelpGenerator> tag.

2003-10-01  Lluis Sanchez Gual <lluis@ximian.com>

	* HtmlFormParameterReader.cs, HtmlFormParameterWriter.cs, 
	  HttpGetClientProtocol.cs, HttpPostClientProtocol.cs, 
	  HttpSimpleClientProtocol.cs, MimeFormatter.cs, MimeParameterWriter.cs,
	  NopReturnReader.cs, UrlEncodedParameterWriter.cs, UrlParameterReader.cs,
	  UrlParameterWriter.cs, ValueCollectionParameterReader.cs, 
	  WebClientAsyncResult.cs, XmlReturnReader.cs, XmlReturnWriter.cs
	  : Implemented.
	
	* HttpSoapWebServiceHandler.cs, SoapClientMessage.cs, SoapServerMessage.cs,
	  SoapDocumentationHandler.cs, SoapHttpClientProtocol.cs, 
	  WebServiceHelper.cs: Changed due to modifications in  TypeStubInfo.
	  
	* Methods.cs: Moved common code to TypeStubInfo.cs.
	* WebServiceHandler.cs: Moved invoke code to HttpSoapWebServiceHandler.cs
	* ServerProtocol.cs, SoapServerProtocol.cs: Fixed formatting.
	* WebServiceHandlerFactory.cs: Added support for HttpGet and HttpPost.

2003-09-29  Lluis Sanchez Gual  <lluis@ximian.com>
	
	* Methods.cs: Little fix in binding check.
	* SoapExtension.cs: Implemented ChainStream. Changed some methods from
	  public to internal.
	* SoapClientMessage: Implemented EnsureInStage.
	* SoapServerMessage: Implemented EnsureInStage, EnsureOutStage.
	  
2003-09-28  Lluis Sanchez Gual  <lluis@ximian.com>
	
	* HttpSoapWebServiceHandler.cs: In SerializeResponse method, improved
	  management of exceptions. Also added support for BufferResponse flag.
	* Methods.cs: Added MethodAttribute property in MethodStubInfo. Added
	  XmlImporter, SoapImporter and Type properties in TypeStubInfo.
	* SoapMessage.cs: little fix.
	
2003-09-14  Lluis Sanchez Gual  <lluis@ximian.com>
	
	* SoapDocumentationHandler.cs: Added support for on-the-fly proxy
	  code generation in documentation pages.

2003-09-04  Lluis Sanchez Gual  <lluis@ximian.com>

	* Methods.cs: Added support for bare parameter style. Fixed some defaults.

2003-09-01  Lluis Sanchez Gual  <lluis@ximian.com>

	* Methods.cs: In TypeStubInfo, added Documentation field.

2003-07-28  Lluis Sanchez Gual  <lluis@ximian.com>

	* HttpSoapWebServiceHandler.cs: 
	* Methods.cs: Added SoapBindingStyle, SoapBindingUse, InputMembersMapping
	  and OutputMembersMapping properties in MethodStubInfo.
	  Use default value defined in TypeStubInfo for RequestNamespace,
	  ResponseNamespace and other properties.
	  Added class BindingInfo to store information about class bindings.
	  In TypeStubInfo added SoapBindingStyle, DefaultBinding, Methods and
	  Bindings properties.
	* SoapRpcMethodAttribute.cs: Use WebServiceAttribute.DefaultNamespace constant 
	  instead of hardcoded namespace name.
	* WebServiceHandlerFactory.cs: Create new SoapDocumentationHandler for
	  documentation requests.
	* SoapDocumentationHandler.cs: new handler that generates WS documentation.
	
2003-07-22  Lluis Sanchez Gual  <lluis@ximian.com>

	* WebServiceHandler.cs: Fixed Invoke(). ParameterInfo.Position is now
	  zero-based, like in MS.NET.
	
2003-07-16  Lluis Sanchez Gual  <lluis@ximian.com>

	* SoapHttpClientProtocol.cs: Removed debug WriteLine.
	
2003-07-10  Lluis Sanchez Gual  <lluis@ximian.com>

	* HttpSoapWebServiceHandler.cs: MS puts the soap action in quotation marks??
	  Fix for this case.
	* SoapHttpClientProtocol.cs: Implemented support for asynchronous calls 
	  (BeginInvoke and EndInvoke).

2003-07-09  Lluis Sanchez Gual  <lluis@ximian.com>

	* SoapHttpClientProtocol.cs, HttpSoapWebServiceHandler.cs, Methods.cs: 
	  Added support for soap extensions. Moved some code to
	  WebServiceHelper. Implemented support for the two types of RoutingStyle. Added support
	  for In and Out headers. Improved management of exceptions.
	* SoapClientMessage.cs: code to retrieve soap headers moved to SoapMessage.
	* SoapExtension.cs: Added methods for getting and creating soap extensions.
	* SoapMessage.cs: Added methods for getting and assigning headers to an object.
	* SoapServerMessage.cs: Added setter for MethodStubInfo. Other minor fixes.
	* WebServiceHandler.cs: Added support for In and Out headers. Fixed management of exceptions.
	* WebServiceHandlerFactory.cs: Check if the request protocol is supported.
	* WebServiceHelper.cs: Added method for reading a soap request.

2003-07-04  Lluis Sanchez Gual  <lluis@ximian.com>

	* LogicalMethodInfo.cs: Fixed Invoke method. If return type is void,
	  then the result object array only contain output parameters.

	* Methods.cs: In class MethodStubInfo, added support from some server properties
	  taken from WebMethodAttribute. Now MethodStubInfo can be created without SoapDocument*
	  or SoapRpc* attributes, in which case takes default values from TypeStubInfo.
	  Added method for getting header info.
	  In class Fault: added constructor for creating a fault from a SoapException.
	  In class TypeStubInfo: new way to manage serializers for headers. Now it is possible to
	  get a header using a name and namespace (used when deserializing).

	* SoapHttpClientProtocol.cs: moved WriteSoapEnvelope method to WebServiceHelper (so it can be shared).
	  Also moved other serialization stuff to WebServiceHelper.

	* SoapMessage.cs: Added some convenient constructors and internal properties.
	  Implemented GetOutParameterValue and GetReturnValue.

	* SoapServerMessage.cs: Implemented.

	* WebServiceHandler.cs: Implemented method Invoke.

	* WebServiceHandlerFactory.cs: Basic implementation.

	* WebServiceHelper.cs: Added. Has some methods shared between client and server classes.

	* HttpSoapWebServiceHandler.cs: Added. IHttpHandler implementation for HttpSoap requests.

2003-06-21  Gonzalo Paniagua Javier <gonzalo@ximian.com>

	* HttpWebClientProtocol.cs: handle cookies if the request is a
	HttpWebRequest. It gets the cookies set in the response and sends them
	on subsequent requests.

	* SoapHttpClientProtocol.cs:
	(GetWebRequest): just calls the base method.
	(SendRequest): set the method here.
	(Invoke): call GetWebResponse instead of request.GetResponse.

	* WebClientProtocol.cs:
	(GetWebRequest): set some properties of the request.
	(GetWebResponse): if we get a WebException containing a response, return
	that as the response and ignore the exception.
	(GetWebResponse (req, async)): only call EndGetResponse.

2003-06-14  Lluis Sanchez Gual  <lluis@ximian.com>

	* Methods.cs: Added information about headers in MethodStubInfo. Added cache of serializers
	  in TypeStubInfo so serializers for headers they can be shared by several methods.
	* SoapClientMessage.cs: Headers added in the constructor.
	* SoapMessage.cs: Added header list initialization.
	* SoapHttpClientProtocol.cs: Added support soap headers.

2003-06-13  Lluis Sanchez Gual  <lluis@ximian.com>

	* Methods.cs: Added serializer to MethodStubInfo for deserializing faults.
	* SoapHttpClientProtocol.cs: Added support for faults.

2003-06-10  Lluis Sanchez Gual  <lluis@ximian.com>

	* Methods.cs: removed handler for UnknownNode event

2003-06-05  Lluis Sanchez Gual  <lluis@ximian.com>

	* Methods.cs: added support for encoded format

2003-06-01  Miguel de Icaza  <miguel@ximian.com>

	* Methods.cs (MethodStubInfo): If creating an RPC call, pass an
	optional XmlElementAttribute with the namespace set to null;  Use
	this on each element of the request and response serializers.

	(MakeRequestSerializer, MakeResponseSerializer): Use the empty
	element for the return values.

	* SoapRpcMethodAttribute.cs: Drop the default name on the
	SoapRpcMethodAttribute, it was incorrectly given a default name.

2003-05-30  Miguel de Icaza  <miguel@ximian.com>

	* Methods.cs (MethodStubInfo): Start support for RPC style as well
	as Literal style.  Take an object instead of a
	SoapDocumentMethodAttribute, and allow the value to be also a
	SoapRpcMethodAttribute.  Pull data from both.

	Kill SoapBindingUse, we only use this during validation.

	Turn out Google uses RPC/Literal, and its a good demo.

	(MakeResponseSerializer): OneWay is not the only
	condition to catch;  Also void return types are not required to
	have a response.

	(MakeRequestSerializer): InParameters *might* be ref parameters,
	deal with that here too.

	Add some debugging code for tracking down missing implementation
	details in serialization creation.

	(MakeResponseSerializer): DUH.  Use the
	ResponseName/ResponseNamespace for the member import, not the
	RequestName and RequestNamespace.  The bugs of cut-and-paste.

2003-05-29  Miguel de Icaza  <miguel@ximian.com>

	* SoapHttpClientProtocol.cs (CreateMessage): Kill.  Move
	functionality to Invoke.

	(Invoke): Use new TypeStubInfo/MethodStubInfo instead.

	* SoapClientMessage.cs: Drop old mechanism, use MethodStubInfo instead.

	* Methods.cs: New file.  Contains the managed for TypeStubs and
	MethodInfoStubs.   

	A MethodInfoStub contains the serializers we use for the SOAP
	request. 

	* SoapClientMessage.cs: Drop parameters from the clientmessage, it
	does not belong here.  Drop oneway, we canextract that from the
	SoapDocumentMethodAttribute class that we pass.

2003-05-28  Miguel de Icaza  <miguel@ximian.com>

	* LogicalMethodInfo.cs (Create): Implement begin/end method
	pairing.
	(Name): Implement. 
	(EndMethodInfo): Always return end_method_info.

2003-04-30  Miguel de Icaza  <miguel@ximian.com>

	* SoapHttpClientProtocol.cs: Flag the methods in the chain that
	gets the caller method as non-inlineable.

2003-04-29  Miguel de Icaza  <miguel@ximian.com>

	* SoapHttpClientProtocol.cs (CreateMessage): Extract information
	from the method to be called.

	* SoapDocumentMethodAttribute.cs: Do not initialize all the fields
	on the attribute at bootstrap, for default values, just compute
	them when queried.

	* SoapMessage.cs (SetStage): New internal method, used to register
	the stage as we move along the soap pipeline.

	* LogicalMethodInfo.cs: Most of this is implemented.  Its only
	missing a few bits in the Create() method.

	* SoapHttpClientProtocol.cs: Begin implementation of Invoke, which
	lead to other dependencies to be implemented.

	* LogicalMethodInfo.cs: Mostly complete.  It is only missing the
	async features (BeginInvoke/EndInvoke) on a LogicalMethodInfo.

	* WebClientProtocol.cs (GetWebRequest): Track the web request, so
	we can abort it later.
	(Abort): Call abort on the underlying transport.

2002-08-24  Tim Coleman <tim@timcoleman.com>
	* HttpServerProtocol.cs:
	* WebServiceHandler.cs:
		Some commented code added, from analysing 
		an exception trace.
	* MimeReturnWriter.cs:
	* XmlReturnWriter.cs:
		New stubs added.

2002-08-23  Tim Coleman <tim@timcoleman.com>
	* ServerProtocol.cs:
	* SoapServerProtocol.cs:
		More cleanup, comparison with class status.
	* WebServiceHandler.cs:
	* HttpServerProtocol.cs:
		New stubs added.

2002-08-15  Tim Coleman <tim@timcoleman.com>
	* ServerProtocol.cs:
	* SoapServerProtocol.cs:
		Some more implementation.

2002-08-06  Tim Coleman <tim@timcoleman.com>
        * ServerProtocol.cs:
                Add new class as implied by class statuc page.
                SoapServerProtocol is derived from this.
        * SoapServerProtocol.cs:
                Change base class to ServerProtocol.  Add some
		properties shown by class status page.
        * SoapClientMethod.cs:
                This class should not be sealed.  Add some
		fields shown by the class status page.

2002-07-25  Tim Coleman <tim@timcoleman.com>
	* SoapClientMethod.cs:
	* SoapServerProtocol.cs:
		Add new internal classes as discovered.
	* SoapClientMessage.cs:
	* SoapMessage.cs:
	* SoapServerMessage.cs:
	* WebClientAsyncResult.cs:
		Add internal constructor, as found on class
		status page; modify some properties.

2002-07-23  Tim Coleman <tim@timcoleman.com>
	* SoapException.cs: modified constructors to
		call base class correctly.
	* WebClientAsyncResult: some implementation

2002-07-23  Tim Coleman <tim@timcoleman.com>
	* HttpGetClientProtocol.cs:
	* HttpPostClientProtocol.cs
		Implemented the GetWebRequest method
	* HttpSimpleClientProtocol:
		Some implementation of the EndInvoke method
	* HttpWebClientProtocol.cs:
		Set the UserAgent string appropriately
		Implemented the GetWebRequest method
		Implemented the GetWebResponse methods
	* SoapHttpClientProtocol.cs:
		Removed unused fields
		Implemented the GetWebRequest method
	* SoapMessage.cs:
		Implemented the EnsureStage method
	* WebClientProtocol.cs:
		Added a static constructor to construct the cache
		Implemented the Abort method
		Implemented the AddToCache, GetFromCache methods
		Implemented the GetWebRequest method
		Implemented the GetWebResponse methods

2002-07-23  Tim Coleman <tim@timcoleman.com>
	* LogicalMethodTypes.cs:
	* SoapHeaderDirection.cs:
	* SoapMessageStage.cs:
	* SoapParameterStyle.cs:
	* SoapServiceRoutingStyle.cs:
		Explicitly define values in enum to match
		.NET.
	* SoapMessage.cs: 
		Removed constructor which should not be present.
	* SoapException.cs:
		Made protected fields private as they should
		be.
	* SoapHeaderException.cs:
		Modifications to constructors to propertly
		call base class constructor

2002-07-22  Tim Coleman <tim@timcoleman.com>
	* SoapHeaderException.cs:
		Fixed name error in constructor
	* SoapUnknownHeader.cs:
		Added reference to System.Xml.Serialization

2002-07-22  Tim Coleman <tim@timcoleman.com>
	* SoapHeaderException.cs:
		New file added

2002-07-22  Tim Coleman <tim@timcoleman.com>	
	* AnyReturnReader.cs:
	* HtmlFormParameterReader.cs :
	* HtmlFormParameterWriter.cs :
	* HttpGetClientProtocol.cs :
	* HttpMethodAttribute.cs :
	* HttpPostClientProtocol.cs :
	* HttpSimpleClientProtocol.cs :
	* HttpWebClientProtocol.cs :
	* LogicalMethodInfo.cs :
	* LogicalMethodTypes.cs :
	* MatchAttribute.cs :
	* MimeFormatter.cs :
	* MimeParameterReader.cs :
	* MimeParameterWriter.cs :
	* MimeReturnReader.cs :
	* NopReturnReader.cs :
	* PatternMatcher.cs :
	* SoapClientMessage.cs :
	* SoapDocumentMethodAttribute.cs :
	* SoapDocumentServiceAttribute.cs :
	* SoapException.cs :
	* SoapExtension.cs :
	* SoapExtensionAttribute.cs :
	* SoapHeader.cs :
	* SoapHeaderAttribute.cs :
	* SoapHeaderCollection.cs :
	* SoapHeaderDirection.cs :
	* SoapHttpClientProtocol.cs :
	* SoapMessage.cs :
	* SoapMessageStage.cs :
	* SoapParameterStyle.cs :
	* SoapRpcMethodAttribute.cs :
	* SoapRpcServiceAttribute.cs :
	* SoapServerMessage.cs :
	* SoapServiceRoutingStyle.cs :
	* SoapUnknownHeader.cs :
	* TextReturnReader.cs :
	* UrlEncodedParameterWriter.cs :
	* UrlParameterReader.cs :
	* UrlParameterWriter.cs :
	* ValueCollectionParameterReader.cs :
	* WebClientAsyncResult.cs :
	* WebClientProtocol.cs :
	* WebServiceHandlerFactory.cs :
	* XmlReturnReader.cs :
		Add missing methods and attributes to make as few missing
		things as possible in this namespace.  This is from the
		project status page.

2002-07-20 Tim Coleman  <tim@timcoleman.com>
       * AnyReturnReader.cs:
       * HtmlFormParameterReader.cs:
       * HtmlFormParameterWriter.cs:
       * HttpGetClientProtocol.cs:
       * HttpMethodAttribute.cs:
       * HttpPostClientProtocol.cs:
       * HttpSimpleClientProtocol.cs:
       * HttpWebClientProtocol.cs:
       * MatchAttribute.cs:
       * MimeFormatter.cs:
       * MimeParameterReader.cs:
       * MimeParameterWriter.cs:
       * MimeReturnReader.cs:
       * NopReturnReader.cs:
       * PatternMatcher.cs:
       * SoapClientMessage.cs:
       * SoapDocumentMethodAttribute.cs:
       * SoapDocumentServiceAttribute.cs:
       * SoapException.cs:
       * SoapExtensionAttribute.cs:
       * SoapExtension.cs:
       * SoapHeaderAttribute.cs:
       * SoapHeaderCollection.cs:
       * SoapHeader.cs:
       * SoapHeaderDirection.cs:
       * SoapHttpClientProtocol.cs:
       * SoapMessage.cs:
       * SoapMessageStage.cs:
       * SoapParameterStyle.cs:
       * SoapRpcMethodAttribute.cs:
       * SoapRpcServiceAttribute.cs:
       * SoapServerMessage.cs:
       * SoapServiceRoutingStyle.cs:
       * SoapUnknownHeader.cs:
       * TextReturnReader.cs:
       * UrlEncodedParameterWriter.cs:
       * UrlParameterReader.cs:
       * UrlParameterWriter.cs:
       * ValueCollectionParameterReader.cs:
       * WebClientAsyncResult.cs:
       * WebClientProtocol.cs:
       * WebServiceHandlerFactory.cs:
       * XmlReturnReader.cs:
               Added new stubbs and some implementation
       * LogicalMethodTypes.cs:
               Added [Serializable] attribute which was missing.

2002-07-19 Tim Coleman  <tim@timcoleman.com>
	* ChangeLog:
	* LogicalMethodInfo.cs:
	* LogicalMethodTypes.cs:
		Add required classes to maek System.Web.Services.Description
		buildable.
