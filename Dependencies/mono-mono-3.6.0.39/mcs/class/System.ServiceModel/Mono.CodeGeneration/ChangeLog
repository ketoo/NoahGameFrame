2009-12-04  Sebastien Pouliot  <sebastien@ximian.com>

	* CodeModule.cs: Silverlight does not allow AssemblyBuilderAccess.
	RunAndSave so we reduce it to AssemblyBuilderAccess.Run
	[Foreport r144715]

2009-04-08  Atsushi Enomoto  <atsushi@ximian.com>

	* CodeWriter.cs : move into namespace.

2009-02-19  Atsushi Enomoto  <atsushi@ximian.com>

	* CodeTryBlock.cs : new statement support.

2009-02-19  Atsushi Enomoto  <atsushi@ximian.com>

	* CodeCast.cs : fix PrintCode() for no-conversion case.

2009-01-19  Atsushi Enomoto  <atsushi@ximian.com>

	* CodeLiteral.cs : use Convert.ChangeType() override that is
	  available in 2.1.

2009-01-19  Atsushi Enomoto  <atsushi@ximian.com>

	* CodeModule.cs : use DefineDynamicModule() which is avaiable in 2.1.

2008-07-05  Eyal Alaluf <eyala@mainsoft.com>

	* CodeGenerationHelper.cs: Correctly handle enum underlying types.

2008-05-04  Eyal Alaluf <eyala@mainsoft.com>

	* CodeArgumentReference.cs: Fix GetResultType () when argument type is
	  by-ref.

2008-04-10  Eyal Alaluf <eyala@mainsoft.com>

	* CodeArgumentReference.cs, CodeGenerationHelper.cs: Added ByRef support.

2008-02-27  Eyal Alaluf <eyala@mainsoft.com>

	* CodeCustomAttribute.cs CodeAssignment.cs: Fix compilation warnings.

2006-06-22  Atsushi Enomoto  <atsushi@ximian.com>

	* CodeArrayItem.cs, CodeAssignment.cs : some more ArgumentNull check.

2006-06-22  Atsushi Enomoto  <atsushi@ximian.com>

	* CodeExpression.cs : replaced all operator overloads with general
	  methods, especially since when operator== is overriden to have
	  different return type (CodeExpression) it is impossible to check
	  whether a variable is null or not.
	* CodeForEach.cs : overriden operator < was used there.
	* CodeBuilder.cs : added some null argument check.
	* CodeMethodCall.cs : allow MethodBase.

2006-06-20  Atsushi Enomoto  <atsushi@ximian.com>

	* CodeClass.cs : removed some DefineField() overloads as they
	  easily brings ambiguous match at call.

2006-06-20  Atsushi Enomoto  <atsushi@ximian.com>

	* CodeCustomAttribute.cs : check named argument strictly (check if
	  the named args really exist).

2006-06-12  Atsushi Enomoto  <atsushi@ximian.com>

	* CodeLiteral.cs : added Value property (needed to extract value)
	* CodeCustomAttribute.cs : CustomAttributeBuilder.ctor() takes
	  both properties and fields.
	* CodeMethod.cs, CodeProperty.cs : add named-arg-less .ctor().

2006-06-12  Atsushi Enomoto  <atsushi@ximian.com>

	* CodeProperty.cs : setter and getter must match for each method
	  signature with related to the property type.

2006-06-12  Atsushi Enomoto  <atsushi@ximian.com>

	* CodeAdd.cs, CodeAnd.cs, CodeArgument.cs, CodeArgumentReference.cs,
	CodeArithmeticOperation.cs, CodeArrayItem.cs, CodeArrayLength.cs,
	CodeAssignment.cs, CodeBinaryComparison.cs, CodeBinaryOperation.cs,
	CodeBlock.cs, CodeBuilder.cs, CodeCast.cs, CodeClass.cs,
	CodeCustomAttribute.cs, CodeDecrement.cs, CodeEquals.cs,
	CodeExpression.cs, CodeFieldReference.cs, CodeFor.cs,
	CodeForeach.cs, CodeGenerationHelper.cs, CodeIf.cs,
	CodeIncrement.cs, CodeIs.cs, CodeItem.cs, CodeLiteral.cs,
	CodeMethod.cs, CodeMethodCall.cs, CodeModule.cs, CodeNew.cs,
	CodeNewArray.cs, CodeNotEquals.cs, CodeOr.cs, CodeProperty.cs,
	CodePropertyReference.cs, CodeReturn.cs, CodeSelect.cs,
	CodeSelfIncrement.cs, CodeUnaryOperation.cs, CodeValueReference.cs,
	CodeVariableDeclaration.cs, CodeVariableReference.cs, CodeWhen.cs,
	CodeWhile.cs, CodeWriter.cs, Exp.cs :

	initial import. See ../README.
