2008-09-23  Michael Hutchinson  <mhutchinson@novell.com>

	* SoapServerFormatterSink.cs: Do not try to parse text/xml code 
	  unless there is a SOAPAction.  Set position on outgoing streams to 
	  zero, so they can be properly parsed in the general infrastructure.
	  Do not try to seek on incoming streams.

2008-08-09  Gert Driesen  <drieseng@users.sourceforge.net>

	* BinaryServerFormatterSink.cs: Fixed argument name to match MS.
	* SoapClientFormatterSink.cs: Fixed argument name to match MS. Code
	formatting.
	* SocketCachePolicy.cs: Added.

2007-05-10  Jonathan Chambers  <joncham@gmail.com>

	* BinaryClientFormatterSinkProvider.cs: Allow typeFilterLevel property
	if NET_1_1 or greater; matches code already in BinaryCore.

2007-05-07  Robert Jordan  <robertj@gmx.net>

	* SoapMessageFormatter.cs (BuildMethodCallFromSoapMessage):
	Validate DecodeXmlNamespaceForClrTypeNamespace's result.
	Don't use RemotingServices.GetServerTypeForUri's result to
	lookup the method from, because it returns the concrete server
	type. We need the type that was used to make the call, which
	we can compute from DecodeXmlNamespaceForClrTypeNamespace's output.
	Fixes the last part of bug #77191.

2007-28-02  Lluis Sanchez Gual  <lluis@novell.com>

	* ChannelCore.cs: Added missing null check. LoadWithPartialName can
	return null.

2006-12-18  Lluis Sanchez Gual  <lluis@novell.com>

	* SoapMessageFormatter.cs: FieldSetter and FieldGetter methods need
	  to be handled in a special way, since they are the only private
	  methods which can be called from a subclass.

2006-05-31  Gert Driesen  <drieseng@users.sourceforge.net>

	* SoapCore.cs: Set eol-style to native.
	* SoapServerFormatterSinkProvider.cs: Fixed line endings. Set eol-style
	to CRLF.
	* ChannelCore.cs: Set eol-style to native.
	* BinaryServerFormatterSink.cs: Set eol-style to native.
	* SoapClientFormatterSinkProvider.cs: Fixed line endings. Set eol-style
	to CRLF. Next and CreateSink should not be virtual.
	* SoapMessageFormatter.cs: Set eol-style to CRLF.
	* BinaryClientFormatterSink.cs: Fixed line endings. Set eol-style to
	native.
	* BinaryCore.cs: Set eol-style to native.
	* BinaryServerFormatterSinkProvider.cs: Set eol-style to native.
	* CommonTransportKeys.cs: Set eol-style to native.
	* SoapServerFormatterSink.cs: Fixed line endings. Set eol-style to CRLF.
	* RemotingThreadPool.cs: Fixed line endings. Set eol-style to native.
	* BinaryClientFormatterSinkProvider.cs: Set eol-style to native.
	* SoapClientFormatterSink.cs: Fixed line endings. Set eol-style to CRLF.

2006-03-05  Andrew Skiba <andrews@mainsoft.com>

	* SoapMessageFormatter.cs: : exceptions propagating
	incompatible with dotnet. Patch by roeie@mainsoft.com

2006-01-26  Svetlana Zholkovsky  <svetlanaz@mainsoft.com>
    * BinaryCore.cs: TARGET_JVM related changes

2005-12-05  Robert Jordan  <robertj@gmx.net>

	* BinaryServerFormatterSink.cs, SoapServerFormatterSink.cs:
	  Implemented formatter chaining. Fixes bug #74878.
	* BinaryClientFormatterSink.cs: AsyncProcessMessage: Set the transport
	  headers.

2005-11-05  Robert Jordan  <robertj@gmx.net>

	* IAuthorizeRemotingConnection.cs: Added.

2005-11-06  Svetlana Zholkovsky  <svetlanaz@mainsoft.com>

    * SoapMessageFormatter.cs, RemotingThreadPool.cs: only TARGET_JVM changes
	* Create new dictionary object for Properties during initialization:
	  - SoapCore.cs
	  - BinaryCore.cs

2005-05-18  Lluis Sanchez Gual  <lluis@novell.com>

	* BinaryServerFormatterSink.cs: Properly handle exceptions raised
	during serialization. Fixes bug #74950.

2005-01-14  Lluis Sanchez Gual  <lluis@novell.com>

	* SoapMessageFormatter.cs, SoapServerFormatterSink.cs: Fixed warnings.
	* RemotingThreadPool.cs: New thread pool for the tcp and http channels.

2004-07-26  Lluis Sanchez Gual  <lluis@ximian.com>

	* SoapMessageFormater.cs: In BuildSoapMessageFromMethodResponse, add the
	  return value to the SoapMessage even if it is null. This fixes bug #61837.

2004-07-06  Lluis Sanchez Gual  <lluis@ximian.com>

	* SoapMessageFormatter.cs: In BuildMethodCallFromSoapMessage, set get the
	  parameters from the SoapMessage by position, not by name, since names
	  may be different. This fixes bug #60427.

2004-06-16  Lluis Sanchez Gual  <lluis@ximian.com>

	* SoapServerFormatterSink.cs: Removed unneded method.

2004-06-10  Lluis Sanchez Gual  <lluis@ximian.com>

	* SoapMessageFormatter.cs: Don't add the signature to the headers list if
	  the method is not overloaded, and don't add the LogicalCallContext if
	  it has no info.

2004-05-26  Lluis Sanchez Gual  <lluis@ximian.com>

	* SoapMessageFormatter.cs: Include soap headers as properties when creating
	  the IMessage, and add IMessage properties as headers when creating the
	  SoapMessage. LogicalCallContext info will be passed as a header value.

2004-05-13  Lluis Sanchez Gual  <lluis@ximian.com>

	* BinaryCore.cs, SoapCore.cs: Added Properties property.
	* BinaryServerFormatterSink.cs, SoapServerFormatterSink.cs: Added missing
	  TypeFilterLevel property.
	* BinaryServerFormatterSinkProvider.cs: Fixed setter for TypeFilterLevel.
	* SoapServerFormatterSinkProvider.cs: Added missing TypeFilterLevel
	  property.
	
2004-05-11  Lluis Sanchez Gual  <lluis@ximian.com>

	* ChannelCore.cs: Use LoadWithPartialName when configuration information
	  is not present.

2004-04-30  Lluis Sanchez Gual <lluis@ximian.com>

	* SoapClientFormatterSink.cs: The deserialized message can be actually a
	  SoapFault. Taken this into account.
	* SoapMessageFormatter.cs: Added FormatFault method. In FormatResponse(),
	  the array of output parameters must also include placeholders for the
	  input parameters (set to null). 
	  ParameterInfo.IsOut does not correspond to the "out" keyword in C#, but
	  to the OutAttribute applied to parameters. There can be input parameters
	  with the OutAttribute. Fixed this in a couple of places.
	  Added CreateSoapMessage method, which creates a SoapMessage including
	  the parameter types (only for responses, since for requests the target
	  method is not known).
	* SoapServerFormatterSink.cs: Use soapMsgFormatter.CreateSoapMessage to
	  create the SoapMessage.

2004-02-27  Lluis Sanchez Gual  <lluis@ximian.com>

	* BinaryClientFormatterSink.cs: Don't set the request uri here, this will
	  be done in the transport sink.
	* BinaryCore.cs: Added TypeFilterLevel property.
	* BinaryServerFormatterSinkProvider.cs: Added missing TypeFilterLevel property.

2003-12-15  Lluis Sanchez Gual  <lluis@ximian.com>

	* BinaryServerFormatterSinkProvider.cs, SoapServerFormatterSinkProvider.cs:
	  Changed some ifdefs for allowedProperties field.

2003-12-11  Patrik Torstensson  <p@rxc.se>

	* SoapMessageFormater.cs: Use GetMethod with signature if possible, solves
          AmbiguousMatchException for bug 51990.
 
2003-12-10  Lluis Sanchez Gual  <lluis@ximian.com>

	* BinaryServerFormatterSinkProvider.cs: Removed TODO.
	* CommonTransportKeys.cs: Added some internal transport keys.

2003-11-21  Lluis Sanchez Gual  <lluis@ximian.com>

	* BinaryClientFormatterSinkProvider.cs, BinaryServerFormatterSinkProvider.cs,
	  BinaryCore.cs, BinaryServerFormatterSinkProvider.cs,
	  SoapClientFormatterSinkProvider.cs, SoapCore.cs, 
	  SoapServerFormatterSinkProvider.cs.cs: Added support for TypeFilterLevel
	  property.
	
2003-11-17  Lluis Sanchez Gual  <lluis@ximian.com>

	* BinaryClientFormatterSinkProvider.cs, BinaryServerFormatterSinkProvider.cs:
	  SoapClientFormatterSinkProvider.cs, SoapServerFormatterSinkProvider.cs: Small fix.
	* SoapServerFormatterSink.cs: Small fix in AsyncProcessResponse.
	* BinaryCore.cs, SoapCore.cs: throw an exception if an unknown property
	  is found.
	
2003-11-16  Lluis Sanchez Gual  <lluis@ximian.com>

	* BinaryClientFormatterSink.cs, BinaryClientFormatterSinkProvider.cs,
	  BinaryServerFormatterSink.cs, BinaryServerFormatterSinkProvider.cs:
	  Moved formatter code to BinaryCore. This adds support for the properties
	  "includeVersion" and "strictBinding" to the binary formatter.
	* BinaryCore.cs: New file. Contains some code used by the binary formatter sinks.
	* SoapClientFormatterSink.cs, SoapClientFormatterSinkProvider.cs,
	  SoapServerFormatterSink.cs, SoapServerFormatterSinkProvider.cs
	  Moved formatter code to BinaryCore. This adds support for the properties
	  "includeVersion" and "strictBinding" to the soap formatter.
	* SoapCore.cs: New file. Contains some code used by the soap formatter sinks.
	* ChannelCore.cs: New file. Implements a simple type binder used by the
	  formatter sinks.

2003-11-12  Lluis Sanchez Gual  <lluis@ximian.com>

	* BinaryServerFormatterSink.cs: Removed fixme.
	* BinaryServerFormatterSinkProvider.cs: Removed a NotImplementedException.
	* SoapServerFormatterSinkProvider.cs: Removed some TODOs.

2003-09-25  Lluis Sanchez Gual  <lluis@ximian.com>

	* SoapMessageFormatter.cs: Consider parameters with Out flag when collectiong
	  out parameters.

2003-08-22  Lluis Sanchez Gual  <lluis@ximian.com>

	* SoapClientFormatterSink.cs: Fixed a some bugs to make async calls work.
	* SoapMessageFormatter.cs: Fixed some problems with out and ref parameters.
	* SoapServerFormatterSink.cs: Improved catching of exceptions.

2003-07-23  Lluis Sanchez Gual  <lluis@ximian.com>

	* SoapMessageFormatter.cs: ParameterInfo.Position is now zero-based.
	  Fixed methods that use it.

2003-07-09:  Jean-Marc Andr√© <jean-marc.andre@polymtl.ca>

	* SoapClientFormatterSink.cs, SoapClientFormatterSinkProvider.cs, 
	SoapServerFormatterSink.cs, SoapServerFormatterSinkProvider.cs, 
	SoapMessageFormatter.cs: Support for the soap serialization added to
	the remoting infrastructure.
