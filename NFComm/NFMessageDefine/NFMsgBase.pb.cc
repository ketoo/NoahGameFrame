// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgBase.proto

#include "NFMsgBase.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_NFMsgBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ident_NFMsgBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_ObjectPropertyList_NFMsgBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectRecordBase_NFMsgBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectRecordList_NFMsgBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropertyFloat_NFMsgBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropertyInt_NFMsgBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PropertyObject_NFMsgBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropertyString_NFMsgBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PropertyVector2_NFMsgBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PropertyVector3_NFMsgBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_RecordAddRowStruct_NFMsgBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecordFloat_NFMsgBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecordInt_NFMsgBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecordObject_NFMsgBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecordString_NFMsgBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecordVector2_NFMsgBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecordVector3_NFMsgBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector2_NFMsgBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_NFMsgBase_2eproto;
namespace NFMsg {
class IdentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ident> _instance;
} _Ident_default_instance_;
class Vector2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vector2> _instance;
} _Vector2_default_instance_;
class Vector3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vector3> _instance;
} _Vector3_default_instance_;
class PropertyIntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropertyInt> _instance;
} _PropertyInt_default_instance_;
class PropertyFloatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropertyFloat> _instance;
} _PropertyFloat_default_instance_;
class PropertyStringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropertyString> _instance;
} _PropertyString_default_instance_;
class PropertyObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropertyObject> _instance;
} _PropertyObject_default_instance_;
class PropertyVector2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropertyVector2> _instance;
} _PropertyVector2_default_instance_;
class PropertyVector3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropertyVector3> _instance;
} _PropertyVector3_default_instance_;
class RecordIntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecordInt> _instance;
} _RecordInt_default_instance_;
class RecordFloatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecordFloat> _instance;
} _RecordFloat_default_instance_;
class RecordStringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecordString> _instance;
} _RecordString_default_instance_;
class RecordObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecordObject> _instance;
} _RecordObject_default_instance_;
class RecordVector2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecordVector2> _instance;
} _RecordVector2_default_instance_;
class RecordVector3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecordVector3> _instance;
} _RecordVector3_default_instance_;
class RecordAddRowStructDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecordAddRowStruct> _instance;
} _RecordAddRowStruct_default_instance_;
class ObjectRecordBaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectRecordBase> _instance;
} _ObjectRecordBase_default_instance_;
class ObjectPropertyIntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectPropertyInt> _instance;
} _ObjectPropertyInt_default_instance_;
class ObjectPropertyFloatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectPropertyFloat> _instance;
} _ObjectPropertyFloat_default_instance_;
class ObjectPropertyStringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectPropertyString> _instance;
} _ObjectPropertyString_default_instance_;
class ObjectPropertyObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectPropertyObject> _instance;
} _ObjectPropertyObject_default_instance_;
class ObjectPropertyVector2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectPropertyVector2> _instance;
} _ObjectPropertyVector2_default_instance_;
class ObjectPropertyVector3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectPropertyVector3> _instance;
} _ObjectPropertyVector3_default_instance_;
class ObjectRecordIntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectRecordInt> _instance;
} _ObjectRecordInt_default_instance_;
class ObjectRecordFloatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectRecordFloat> _instance;
} _ObjectRecordFloat_default_instance_;
class ObjectRecordStringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectRecordString> _instance;
} _ObjectRecordString_default_instance_;
class ObjectRecordObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectRecordObject> _instance;
} _ObjectRecordObject_default_instance_;
class ObjectRecordVector2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectRecordVector2> _instance;
} _ObjectRecordVector2_default_instance_;
class ObjectRecordVector3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectRecordVector3> _instance;
} _ObjectRecordVector3_default_instance_;
class ObjectRecordSwapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectRecordSwap> _instance;
} _ObjectRecordSwap_default_instance_;
class ObjectRecordAddRowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectRecordAddRow> _instance;
} _ObjectRecordAddRow_default_instance_;
class ObjectRecordRemoveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectRecordRemove> _instance;
} _ObjectRecordRemove_default_instance_;
class ObjectPropertyListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectPropertyList> _instance;
} _ObjectPropertyList_default_instance_;
class MultiObjectPropertyListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiObjectPropertyList> _instance;
} _MultiObjectPropertyList_default_instance_;
class ObjectRecordListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectRecordList> _instance;
} _ObjectRecordList_default_instance_;
class MultiObjectRecordListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiObjectRecordList> _instance;
} _MultiObjectRecordList_default_instance_;
class MsgBaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgBase> _instance;
} _MsgBase_default_instance_;
class ReqAckLagTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckLagTest> _instance;
} _ReqAckLagTest_default_instance_;
class ReqCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqCommand> _instance;
} _ReqCommand_default_instance_;
}  // namespace NFMsg
static void InitDefaultsscc_info_Ident_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_Ident_default_instance_;
    new (ptr) ::NFMsg::Ident();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::Ident::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ident_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Ident_NFMsgBase_2eproto}, {}};

static void InitDefaultsscc_info_MsgBase_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_MsgBase_default_instance_;
    new (ptr) ::NFMsg::MsgBase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::MsgBase::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgBase_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgBase_NFMsgBase_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_MultiObjectPropertyList_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_MultiObjectPropertyList_default_instance_;
    new (ptr) ::NFMsg::MultiObjectPropertyList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::MultiObjectPropertyList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiObjectPropertyList_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MultiObjectPropertyList_NFMsgBase_2eproto}, {
      &scc_info_ObjectPropertyList_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_MultiObjectRecordList_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_MultiObjectRecordList_default_instance_;
    new (ptr) ::NFMsg::MultiObjectRecordList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::MultiObjectRecordList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiObjectRecordList_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MultiObjectRecordList_NFMsgBase_2eproto}, {
      &scc_info_ObjectRecordList_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ObjectPropertyFloat_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ObjectPropertyFloat_default_instance_;
    new (ptr) ::NFMsg::ObjectPropertyFloat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ObjectPropertyFloat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectPropertyFloat_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ObjectPropertyFloat_NFMsgBase_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_PropertyFloat_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ObjectPropertyInt_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ObjectPropertyInt_default_instance_;
    new (ptr) ::NFMsg::ObjectPropertyInt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ObjectPropertyInt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectPropertyInt_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ObjectPropertyInt_NFMsgBase_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_PropertyInt_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ObjectPropertyList_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ObjectPropertyList_default_instance_;
    new (ptr) ::NFMsg::ObjectPropertyList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ObjectPropertyList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_ObjectPropertyList_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_ObjectPropertyList_NFMsgBase_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_PropertyInt_NFMsgBase_2eproto.base,
      &scc_info_PropertyFloat_NFMsgBase_2eproto.base,
      &scc_info_PropertyString_NFMsgBase_2eproto.base,
      &scc_info_PropertyObject_NFMsgBase_2eproto.base,
      &scc_info_PropertyVector2_NFMsgBase_2eproto.base,
      &scc_info_PropertyVector3_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ObjectPropertyObject_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ObjectPropertyObject_default_instance_;
    new (ptr) ::NFMsg::ObjectPropertyObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ObjectPropertyObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectPropertyObject_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ObjectPropertyObject_NFMsgBase_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_PropertyObject_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ObjectPropertyString_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ObjectPropertyString_default_instance_;
    new (ptr) ::NFMsg::ObjectPropertyString();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ObjectPropertyString::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectPropertyString_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ObjectPropertyString_NFMsgBase_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_PropertyString_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ObjectPropertyVector2_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ObjectPropertyVector2_default_instance_;
    new (ptr) ::NFMsg::ObjectPropertyVector2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ObjectPropertyVector2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectPropertyVector2_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ObjectPropertyVector2_NFMsgBase_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_PropertyVector2_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ObjectPropertyVector3_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ObjectPropertyVector3_default_instance_;
    new (ptr) ::NFMsg::ObjectPropertyVector3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ObjectPropertyVector3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectPropertyVector3_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ObjectPropertyVector3_NFMsgBase_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_PropertyVector3_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ObjectRecordAddRow_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ObjectRecordAddRow_default_instance_;
    new (ptr) ::NFMsg::ObjectRecordAddRow();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ObjectRecordAddRow::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectRecordAddRow_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ObjectRecordAddRow_NFMsgBase_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_RecordAddRowStruct_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ObjectRecordBase_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ObjectRecordBase_default_instance_;
    new (ptr) ::NFMsg::ObjectRecordBase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ObjectRecordBase::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectRecordBase_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObjectRecordBase_NFMsgBase_2eproto}, {
      &scc_info_RecordAddRowStruct_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ObjectRecordFloat_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ObjectRecordFloat_default_instance_;
    new (ptr) ::NFMsg::ObjectRecordFloat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ObjectRecordFloat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectRecordFloat_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ObjectRecordFloat_NFMsgBase_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_RecordFloat_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ObjectRecordInt_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ObjectRecordInt_default_instance_;
    new (ptr) ::NFMsg::ObjectRecordInt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ObjectRecordInt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectRecordInt_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ObjectRecordInt_NFMsgBase_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_RecordInt_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ObjectRecordList_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ObjectRecordList_default_instance_;
    new (ptr) ::NFMsg::ObjectRecordList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ObjectRecordList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectRecordList_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ObjectRecordList_NFMsgBase_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_ObjectRecordBase_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ObjectRecordObject_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ObjectRecordObject_default_instance_;
    new (ptr) ::NFMsg::ObjectRecordObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ObjectRecordObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectRecordObject_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ObjectRecordObject_NFMsgBase_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_RecordObject_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ObjectRecordRemove_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ObjectRecordRemove_default_instance_;
    new (ptr) ::NFMsg::ObjectRecordRemove();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ObjectRecordRemove::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectRecordRemove_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObjectRecordRemove_NFMsgBase_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ObjectRecordString_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ObjectRecordString_default_instance_;
    new (ptr) ::NFMsg::ObjectRecordString();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ObjectRecordString::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectRecordString_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ObjectRecordString_NFMsgBase_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_RecordString_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ObjectRecordSwap_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ObjectRecordSwap_default_instance_;
    new (ptr) ::NFMsg::ObjectRecordSwap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ObjectRecordSwap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectRecordSwap_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObjectRecordSwap_NFMsgBase_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ObjectRecordVector2_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ObjectRecordVector2_default_instance_;
    new (ptr) ::NFMsg::ObjectRecordVector2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ObjectRecordVector2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectRecordVector2_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ObjectRecordVector2_NFMsgBase_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_RecordVector2_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ObjectRecordVector3_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ObjectRecordVector3_default_instance_;
    new (ptr) ::NFMsg::ObjectRecordVector3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ObjectRecordVector3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectRecordVector3_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ObjectRecordVector3_NFMsgBase_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_RecordVector3_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_PropertyFloat_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_PropertyFloat_default_instance_;
    new (ptr) ::NFMsg::PropertyFloat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::PropertyFloat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropertyFloat_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PropertyFloat_NFMsgBase_2eproto}, {}};

static void InitDefaultsscc_info_PropertyInt_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_PropertyInt_default_instance_;
    new (ptr) ::NFMsg::PropertyInt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::PropertyInt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropertyInt_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PropertyInt_NFMsgBase_2eproto}, {}};

static void InitDefaultsscc_info_PropertyObject_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_PropertyObject_default_instance_;
    new (ptr) ::NFMsg::PropertyObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::PropertyObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PropertyObject_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PropertyObject_NFMsgBase_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_PropertyString_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_PropertyString_default_instance_;
    new (ptr) ::NFMsg::PropertyString();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::PropertyString::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropertyString_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PropertyString_NFMsgBase_2eproto}, {}};

static void InitDefaultsscc_info_PropertyVector2_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_PropertyVector2_default_instance_;
    new (ptr) ::NFMsg::PropertyVector2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::PropertyVector2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PropertyVector2_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PropertyVector2_NFMsgBase_2eproto}, {
      &scc_info_Vector2_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_PropertyVector3_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_PropertyVector3_default_instance_;
    new (ptr) ::NFMsg::PropertyVector3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::PropertyVector3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PropertyVector3_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PropertyVector3_NFMsgBase_2eproto}, {
      &scc_info_Vector3_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_RecordAddRowStruct_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_RecordAddRowStruct_default_instance_;
    new (ptr) ::NFMsg::RecordAddRowStruct();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::RecordAddRowStruct::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_RecordAddRowStruct_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_RecordAddRowStruct_NFMsgBase_2eproto}, {
      &scc_info_RecordInt_NFMsgBase_2eproto.base,
      &scc_info_RecordFloat_NFMsgBase_2eproto.base,
      &scc_info_RecordString_NFMsgBase_2eproto.base,
      &scc_info_RecordObject_NFMsgBase_2eproto.base,
      &scc_info_RecordVector2_NFMsgBase_2eproto.base,
      &scc_info_RecordVector3_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_RecordFloat_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_RecordFloat_default_instance_;
    new (ptr) ::NFMsg::RecordFloat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::RecordFloat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecordFloat_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RecordFloat_NFMsgBase_2eproto}, {}};

static void InitDefaultsscc_info_RecordInt_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_RecordInt_default_instance_;
    new (ptr) ::NFMsg::RecordInt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::RecordInt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecordInt_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RecordInt_NFMsgBase_2eproto}, {}};

static void InitDefaultsscc_info_RecordObject_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_RecordObject_default_instance_;
    new (ptr) ::NFMsg::RecordObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::RecordObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecordObject_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RecordObject_NFMsgBase_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_RecordString_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_RecordString_default_instance_;
    new (ptr) ::NFMsg::RecordString();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::RecordString::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecordString_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RecordString_NFMsgBase_2eproto}, {}};

static void InitDefaultsscc_info_RecordVector2_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_RecordVector2_default_instance_;
    new (ptr) ::NFMsg::RecordVector2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::RecordVector2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecordVector2_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RecordVector2_NFMsgBase_2eproto}, {
      &scc_info_Vector2_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_RecordVector3_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_RecordVector3_default_instance_;
    new (ptr) ::NFMsg::RecordVector3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::RecordVector3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecordVector3_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RecordVector3_NFMsgBase_2eproto}, {
      &scc_info_Vector3_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckLagTest_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckLagTest_default_instance_;
    new (ptr) ::NFMsg::ReqAckLagTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckLagTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqAckLagTest_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReqAckLagTest_NFMsgBase_2eproto}, {}};

static void InitDefaultsscc_info_ReqCommand_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqCommand_default_instance_;
    new (ptr) ::NFMsg::ReqCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqCommand_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqCommand_NFMsgBase_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_Vector2_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_Vector2_default_instance_;
    new (ptr) ::NFMsg::Vector2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::Vector2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector2_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vector2_NFMsgBase_2eproto}, {}};

static void InitDefaultsscc_info_Vector3_NFMsgBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_Vector3_default_instance_;
    new (ptr) ::NFMsg::Vector3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::Vector3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_NFMsgBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vector3_NFMsgBase_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_NFMsgBase_2eproto[39];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_NFMsgBase_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_NFMsgBase_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_NFMsgBase_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::Ident, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::Ident, svrid_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::Ident, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::Vector2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::Vector2, x_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::Vector2, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::Vector3, x_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::Vector3, y_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::Vector3, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::PropertyInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::PropertyInt, property_name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PropertyInt, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::PropertyFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::PropertyFloat, property_name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PropertyFloat, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::PropertyString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::PropertyString, property_name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PropertyString, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::PropertyObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::PropertyObject, property_name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PropertyObject, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::PropertyVector2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::PropertyVector2, property_name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PropertyVector2, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::PropertyVector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::PropertyVector3, property_name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PropertyVector3, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordInt, row_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordInt, col_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordInt, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordFloat, row_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordFloat, col_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordFloat, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordString, row_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordString, col_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordString, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordObject, row_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordObject, col_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordObject, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordVector2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordVector2, row_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordVector2, col_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordVector2, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordVector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordVector3, row_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordVector3, col_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordVector3, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordAddRowStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordAddRowStruct, row_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordAddRowStruct, record_int_list_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordAddRowStruct, record_float_list_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordAddRowStruct, record_string_list_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordAddRowStruct, record_object_list_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordAddRowStruct, record_vector2_list_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::RecordAddRowStruct, record_vector3_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordBase, record_name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordBase, row_struct_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectPropertyInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectPropertyInt, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectPropertyInt, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectPropertyFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectPropertyFloat, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectPropertyFloat, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectPropertyString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectPropertyString, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectPropertyString, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectPropertyObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectPropertyObject, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectPropertyObject, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectPropertyVector2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectPropertyVector2, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectPropertyVector2, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectPropertyVector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectPropertyVector3, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectPropertyVector3, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordInt, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordInt, record_name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordInt, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordFloat, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordFloat, record_name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordFloat, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordString, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordString, record_name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordString, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordObject, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordObject, record_name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordObject, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordVector2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordVector2, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordVector2, record_name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordVector2, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordVector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordVector3, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordVector3, record_name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordVector3, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordSwap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordSwap, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordSwap, origin_record_name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordSwap, target_record_name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordSwap, row_origin_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordSwap, row_target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordAddRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordAddRow, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordAddRow, record_name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordAddRow, row_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordRemove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordRemove, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordRemove, record_name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordRemove, remove_row_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectPropertyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectPropertyList, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectPropertyList, property_int_list_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectPropertyList, property_float_list_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectPropertyList, property_string_list_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectPropertyList, property_object_list_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectPropertyList, property_vector2_list_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectPropertyList, property_vector3_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::MultiObjectPropertyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::MultiObjectPropertyList, multi_player_property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordList, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ObjectRecordList, record_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::MultiObjectRecordList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::MultiObjectRecordList, multi_player_record_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::MsgBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::MsgBase, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::MsgBase, msg_data_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::MsgBase, player_client_list_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::MsgBase, hash_ident_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckLagTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckLagTest, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqCommand, control_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqCommand, command_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqCommand, command_str_value_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqCommand, command_value_int_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqCommand, command_value_float_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqCommand, command_value_str_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqCommand, command_value_object_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqCommand, row_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqCommand, col_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NFMsg::Ident)},
  { 7, -1, sizeof(::NFMsg::Vector2)},
  { 14, -1, sizeof(::NFMsg::Vector3)},
  { 22, -1, sizeof(::NFMsg::PropertyInt)},
  { 29, -1, sizeof(::NFMsg::PropertyFloat)},
  { 36, -1, sizeof(::NFMsg::PropertyString)},
  { 43, -1, sizeof(::NFMsg::PropertyObject)},
  { 50, -1, sizeof(::NFMsg::PropertyVector2)},
  { 57, -1, sizeof(::NFMsg::PropertyVector3)},
  { 64, -1, sizeof(::NFMsg::RecordInt)},
  { 72, -1, sizeof(::NFMsg::RecordFloat)},
  { 80, -1, sizeof(::NFMsg::RecordString)},
  { 88, -1, sizeof(::NFMsg::RecordObject)},
  { 96, -1, sizeof(::NFMsg::RecordVector2)},
  { 104, -1, sizeof(::NFMsg::RecordVector3)},
  { 112, -1, sizeof(::NFMsg::RecordAddRowStruct)},
  { 124, -1, sizeof(::NFMsg::ObjectRecordBase)},
  { 131, -1, sizeof(::NFMsg::ObjectPropertyInt)},
  { 138, -1, sizeof(::NFMsg::ObjectPropertyFloat)},
  { 145, -1, sizeof(::NFMsg::ObjectPropertyString)},
  { 152, -1, sizeof(::NFMsg::ObjectPropertyObject)},
  { 159, -1, sizeof(::NFMsg::ObjectPropertyVector2)},
  { 166, -1, sizeof(::NFMsg::ObjectPropertyVector3)},
  { 173, -1, sizeof(::NFMsg::ObjectRecordInt)},
  { 181, -1, sizeof(::NFMsg::ObjectRecordFloat)},
  { 189, -1, sizeof(::NFMsg::ObjectRecordString)},
  { 197, -1, sizeof(::NFMsg::ObjectRecordObject)},
  { 205, -1, sizeof(::NFMsg::ObjectRecordVector2)},
  { 213, -1, sizeof(::NFMsg::ObjectRecordVector3)},
  { 221, -1, sizeof(::NFMsg::ObjectRecordSwap)},
  { 231, -1, sizeof(::NFMsg::ObjectRecordAddRow)},
  { 239, -1, sizeof(::NFMsg::ObjectRecordRemove)},
  { 247, -1, sizeof(::NFMsg::ObjectPropertyList)},
  { 259, -1, sizeof(::NFMsg::MultiObjectPropertyList)},
  { 265, -1, sizeof(::NFMsg::ObjectRecordList)},
  { 272, -1, sizeof(::NFMsg::MultiObjectRecordList)},
  { 278, -1, sizeof(::NFMsg::MsgBase)},
  { 287, -1, sizeof(::NFMsg::ReqAckLagTest)},
  { 293, -1, sizeof(::NFMsg::ReqCommand)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_Ident_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_Vector2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_Vector3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_PropertyInt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_PropertyFloat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_PropertyString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_PropertyObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_PropertyVector2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_PropertyVector3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_RecordInt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_RecordFloat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_RecordString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_RecordObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_RecordVector2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_RecordVector3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_RecordAddRowStruct_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ObjectRecordBase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ObjectPropertyInt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ObjectPropertyFloat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ObjectPropertyString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ObjectPropertyObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ObjectPropertyVector2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ObjectPropertyVector3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ObjectRecordInt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ObjectRecordFloat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ObjectRecordString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ObjectRecordObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ObjectRecordVector2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ObjectRecordVector3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ObjectRecordSwap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ObjectRecordAddRow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ObjectRecordRemove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ObjectPropertyList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_MultiObjectPropertyList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ObjectRecordList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_MultiObjectRecordList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_MsgBase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckLagTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqCommand_default_instance_),
};

const char descriptor_table_protodef_NFMsgBase_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017NFMsgBase.proto\022\005NFMsg\"%\n\005Ident\022\r\n\005svr"
  "id\030\001 \001(\003\022\r\n\005index\030\002 \001(\003\"\037\n\007Vector2\022\t\n\001x\030"
  "\001 \001(\002\022\t\n\001y\030\002 \001(\002\"*\n\007Vector3\022\t\n\001x\030\001 \001(\002\022\t"
  "\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"2\n\013PropertyInt\022\025\n\rp"
  "roperty_name\030\001 \001(\014\022\014\n\004data\030\002 \001(\003\"4\n\rProp"
  "ertyFloat\022\025\n\rproperty_name\030\001 \001(\014\022\014\n\004data"
  "\030\002 \001(\002\"5\n\016PropertyString\022\025\n\rproperty_nam"
  "e\030\001 \001(\014\022\014\n\004data\030\002 \001(\014\"C\n\016PropertyObject\022"
  "\025\n\rproperty_name\030\001 \001(\014\022\032\n\004data\030\002 \001(\0132\014.N"
  "FMsg.Ident\"F\n\017PropertyVector2\022\025\n\rpropert"
  "y_name\030\001 \001(\014\022\034\n\004data\030\002 \001(\0132\016.NFMsg.Vecto"
  "r2\"F\n\017PropertyVector3\022\025\n\rproperty_name\030\001"
  " \001(\014\022\034\n\004data\030\002 \001(\0132\016.NFMsg.Vector3\"3\n\tRe"
  "cordInt\022\013\n\003row\030\001 \001(\005\022\013\n\003col\030\002 \001(\005\022\014\n\004dat"
  "a\030\003 \001(\003\"5\n\013RecordFloat\022\013\n\003row\030\001 \001(\005\022\013\n\003c"
  "ol\030\002 \001(\005\022\014\n\004data\030\003 \001(\002\"6\n\014RecordString\022\013"
  "\n\003row\030\001 \001(\005\022\013\n\003col\030\002 \001(\005\022\014\n\004data\030\003 \001(\014\"D"
  "\n\014RecordObject\022\013\n\003row\030\001 \001(\005\022\013\n\003col\030\002 \001(\005"
  "\022\032\n\004data\030\003 \001(\0132\014.NFMsg.Ident\"G\n\rRecordVe"
  "ctor2\022\013\n\003row\030\001 \001(\005\022\013\n\003col\030\002 \001(\005\022\034\n\004data\030"
  "\003 \001(\0132\016.NFMsg.Vector2\"G\n\rRecordVector3\022\013"
  "\n\003row\030\001 \001(\005\022\013\n\003col\030\002 \001(\005\022\034\n\004data\030\003 \001(\0132\016"
  ".NFMsg.Vector3\"\303\002\n\022RecordAddRowStruct\022\013\n"
  "\003row\030\001 \001(\005\022)\n\017record_int_list\030\002 \003(\0132\020.NF"
  "Msg.RecordInt\022-\n\021record_float_list\030\003 \003(\013"
  "2\022.NFMsg.RecordFloat\022/\n\022record_string_li"
  "st\030\004 \003(\0132\023.NFMsg.RecordString\022/\n\022record_"
  "object_list\030\005 \003(\0132\023.NFMsg.RecordObject\0221"
  "\n\023record_vector2_list\030\006 \003(\0132\024.NFMsg.Reco"
  "rdVector2\0221\n\023record_vector3_list\030\007 \003(\0132\024"
  ".NFMsg.RecordVector3\"V\n\020ObjectRecordBase"
  "\022\023\n\013record_name\030\001 \001(\014\022-\n\nrow_struct\030\002 \003("
  "\0132\031.NFMsg.RecordAddRowStruct\"_\n\021ObjectPr"
  "opertyInt\022\037\n\tplayer_id\030\001 \001(\0132\014.NFMsg.Ide"
  "nt\022)\n\rproperty_list\030\002 \003(\0132\022.NFMsg.Proper"
  "tyInt\"c\n\023ObjectPropertyFloat\022\037\n\tplayer_i"
  "d\030\001 \001(\0132\014.NFMsg.Ident\022+\n\rproperty_list\030\002"
  " \003(\0132\024.NFMsg.PropertyFloat\"e\n\024ObjectProp"
  "ertyString\022\037\n\tplayer_id\030\001 \001(\0132\014.NFMsg.Id"
  "ent\022,\n\rproperty_list\030\002 \003(\0132\025.NFMsg.Prope"
  "rtyString\"e\n\024ObjectPropertyObject\022\037\n\tpla"
  "yer_id\030\001 \001(\0132\014.NFMsg.Ident\022,\n\rproperty_l"
  "ist\030\002 \003(\0132\025.NFMsg.PropertyObject\"g\n\025Obje"
  "ctPropertyVector2\022\037\n\tplayer_id\030\001 \001(\0132\014.N"
  "FMsg.Ident\022-\n\rproperty_list\030\002 \003(\0132\026.NFMs"
  "g.PropertyVector2\"g\n\025ObjectPropertyVecto"
  "r3\022\037\n\tplayer_id\030\001 \001(\0132\014.NFMsg.Ident\022-\n\rp"
  "roperty_list\030\002 \003(\0132\026.NFMsg.PropertyVecto"
  "r3\"p\n\017ObjectRecordInt\022\037\n\tplayer_id\030\001 \001(\013"
  "2\014.NFMsg.Ident\022\023\n\013record_name\030\002 \001(\014\022\'\n\rp"
  "roperty_list\030\003 \003(\0132\020.NFMsg.RecordInt\"t\n\021"
  "ObjectRecordFloat\022\037\n\tplayer_id\030\001 \001(\0132\014.N"
  "FMsg.Ident\022\023\n\013record_name\030\002 \001(\014\022)\n\rprope"
  "rty_list\030\003 \003(\0132\022.NFMsg.RecordFloat\"v\n\022Ob"
  "jectRecordString\022\037\n\tplayer_id\030\001 \001(\0132\014.NF"
  "Msg.Ident\022\023\n\013record_name\030\002 \001(\014\022*\n\rproper"
  "ty_list\030\003 \003(\0132\023.NFMsg.RecordString\"v\n\022Ob"
  "jectRecordObject\022\037\n\tplayer_id\030\001 \001(\0132\014.NF"
  "Msg.Ident\022\023\n\013record_name\030\002 \001(\014\022*\n\rproper"
  "ty_list\030\003 \003(\0132\023.NFMsg.RecordObject\"x\n\023Ob"
  "jectRecordVector2\022\037\n\tplayer_id\030\001 \001(\0132\014.N"
  "FMsg.Ident\022\023\n\013record_name\030\002 \001(\014\022+\n\rprope"
  "rty_list\030\003 \003(\0132\024.NFMsg.RecordVector2\"x\n\023"
  "ObjectRecordVector3\022\037\n\tplayer_id\030\001 \001(\0132\014"
  ".NFMsg.Ident\022\023\n\013record_name\030\002 \001(\014\022+\n\rpro"
  "perty_list\030\003 \003(\0132\024.NFMsg.RecordVector3\"\223"
  "\001\n\020ObjectRecordSwap\022\037\n\tplayer_id\030\001 \001(\0132\014"
  ".NFMsg.Ident\022\032\n\022origin_record_name\030\002 \001(\014"
  "\022\032\n\022target_record_name\030\003 \001(\014\022\022\n\nrow_orig"
  "in\030\004 \001(\005\022\022\n\nrow_target\030\005 \001(\005\"w\n\022ObjectRe"
  "cordAddRow\022\037\n\tplayer_id\030\001 \001(\0132\014.NFMsg.Id"
  "ent\022\023\n\013record_name\030\002 \001(\014\022+\n\010row_data\030\003 \003"
  "(\0132\031.NFMsg.RecordAddRowStruct\"^\n\022ObjectR"
  "ecordRemove\022\037\n\tplayer_id\030\001 \001(\0132\014.NFMsg.I"
  "dent\022\023\n\013record_name\030\002 \001(\014\022\022\n\nremove_row\030"
  "\003 \003(\005\"\357\002\n\022ObjectPropertyList\022\037\n\tplayer_i"
  "d\030\001 \001(\0132\014.NFMsg.Ident\022-\n\021property_int_li"
  "st\030\002 \003(\0132\022.NFMsg.PropertyInt\0221\n\023property"
  "_float_list\030\003 \003(\0132\024.NFMsg.PropertyFloat\022"
  "3\n\024property_string_list\030\004 \003(\0132\025.NFMsg.Pr"
  "opertyString\0223\n\024property_object_list\030\005 \003"
  "(\0132\025.NFMsg.PropertyObject\0225\n\025property_ve"
  "ctor2_list\030\006 \003(\0132\026.NFMsg.PropertyVector2"
  "\0225\n\025property_vector3_list\030\007 \003(\0132\026.NFMsg."
  "PropertyVector3\"S\n\027MultiObjectPropertyLi"
  "st\0228\n\025multi_player_property\030\001 \003(\0132\031.NFMs"
  "g.ObjectPropertyList\"a\n\020ObjectRecordList"
  "\022\037\n\tplayer_id\030\001 \001(\0132\014.NFMsg.Ident\022,\n\013rec"
  "ord_list\030\002 \003(\0132\027.NFMsg.ObjectRecordBase\""
  "M\n\025MultiObjectRecordList\0224\n\023multi_player"
  "_record\030\001 \003(\0132\027.NFMsg.ObjectRecordList\"\210"
  "\001\n\007MsgBase\022\037\n\tplayer_id\030\001 \001(\0132\014.NFMsg.Id"
  "ent\022\020\n\010msg_data\030\002 \001(\014\022(\n\022player_Client_l"
  "ist\030\003 \003(\0132\014.NFMsg.Ident\022 \n\nhash_ident\030\004 "
  "\001(\0132\014.NFMsg.Ident\"\036\n\rReqAckLagTest\022\r\n\005in"
  "dex\030\001 \001(\005\"\213\003\n\nReqCommand\022 \n\ncontrol_id\030\001"
  " \001(\0132\014.NFMsg.Ident\0226\n\ncommand_id\030\002 \001(\0162\""
  ".NFMsg.ReqCommand.EGameCommandType\022\031\n\021co"
  "mmand_str_value\030\003 \001(\014\022\031\n\021command_value_i"
  "nt\030\004 \001(\003\022\033\n\023command_value_float\030\005 \001(\001\022\031\n"
  "\021command_value_str\030\006 \001(\014\022*\n\024command_valu"
  "e_object\030\007 \001(\0132\014.NFMsg.Ident\022\013\n\003row\030\010 \001("
  "\005\022\013\n\003col\030\t \001(\005\"o\n\020EGameCommandType\022\027\n\023EG"
  "CT_MODIY_PROPERTY\020\000\022\023\n\017EGCT_MODIY_ITEM\020\001"
  "\022\026\n\022EGCT_CREATE_OBJECT\020\002\022\025\n\021EGCT_ADD_ROL"
  "E_EXP\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_NFMsgBase_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_NFMsgBase_2eproto_sccs[39] = {
  &scc_info_Ident_NFMsgBase_2eproto.base,
  &scc_info_MsgBase_NFMsgBase_2eproto.base,
  &scc_info_MultiObjectPropertyList_NFMsgBase_2eproto.base,
  &scc_info_MultiObjectRecordList_NFMsgBase_2eproto.base,
  &scc_info_ObjectPropertyFloat_NFMsgBase_2eproto.base,
  &scc_info_ObjectPropertyInt_NFMsgBase_2eproto.base,
  &scc_info_ObjectPropertyList_NFMsgBase_2eproto.base,
  &scc_info_ObjectPropertyObject_NFMsgBase_2eproto.base,
  &scc_info_ObjectPropertyString_NFMsgBase_2eproto.base,
  &scc_info_ObjectPropertyVector2_NFMsgBase_2eproto.base,
  &scc_info_ObjectPropertyVector3_NFMsgBase_2eproto.base,
  &scc_info_ObjectRecordAddRow_NFMsgBase_2eproto.base,
  &scc_info_ObjectRecordBase_NFMsgBase_2eproto.base,
  &scc_info_ObjectRecordFloat_NFMsgBase_2eproto.base,
  &scc_info_ObjectRecordInt_NFMsgBase_2eproto.base,
  &scc_info_ObjectRecordList_NFMsgBase_2eproto.base,
  &scc_info_ObjectRecordObject_NFMsgBase_2eproto.base,
  &scc_info_ObjectRecordRemove_NFMsgBase_2eproto.base,
  &scc_info_ObjectRecordString_NFMsgBase_2eproto.base,
  &scc_info_ObjectRecordSwap_NFMsgBase_2eproto.base,
  &scc_info_ObjectRecordVector2_NFMsgBase_2eproto.base,
  &scc_info_ObjectRecordVector3_NFMsgBase_2eproto.base,
  &scc_info_PropertyFloat_NFMsgBase_2eproto.base,
  &scc_info_PropertyInt_NFMsgBase_2eproto.base,
  &scc_info_PropertyObject_NFMsgBase_2eproto.base,
  &scc_info_PropertyString_NFMsgBase_2eproto.base,
  &scc_info_PropertyVector2_NFMsgBase_2eproto.base,
  &scc_info_PropertyVector3_NFMsgBase_2eproto.base,
  &scc_info_RecordAddRowStruct_NFMsgBase_2eproto.base,
  &scc_info_RecordFloat_NFMsgBase_2eproto.base,
  &scc_info_RecordInt_NFMsgBase_2eproto.base,
  &scc_info_RecordObject_NFMsgBase_2eproto.base,
  &scc_info_RecordString_NFMsgBase_2eproto.base,
  &scc_info_RecordVector2_NFMsgBase_2eproto.base,
  &scc_info_RecordVector3_NFMsgBase_2eproto.base,
  &scc_info_ReqAckLagTest_NFMsgBase_2eproto.base,
  &scc_info_ReqCommand_NFMsgBase_2eproto.base,
  &scc_info_Vector2_NFMsgBase_2eproto.base,
  &scc_info_Vector3_NFMsgBase_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_NFMsgBase_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NFMsgBase_2eproto = {
  false, false, descriptor_table_protodef_NFMsgBase_2eproto, "NFMsgBase.proto", 4215,
  &descriptor_table_NFMsgBase_2eproto_once, descriptor_table_NFMsgBase_2eproto_sccs, descriptor_table_NFMsgBase_2eproto_deps, 39, 0,
  schemas, file_default_instances, TableStruct_NFMsgBase_2eproto::offsets,
  file_level_metadata_NFMsgBase_2eproto, 39, file_level_enum_descriptors_NFMsgBase_2eproto, file_level_service_descriptors_NFMsgBase_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_NFMsgBase_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_NFMsgBase_2eproto)), true);
namespace NFMsg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReqCommand_EGameCommandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_NFMsgBase_2eproto);
  return file_level_enum_descriptors_NFMsgBase_2eproto[0];
}
bool ReqCommand_EGameCommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReqCommand_EGameCommandType ReqCommand::EGCT_MODIY_PROPERTY;
constexpr ReqCommand_EGameCommandType ReqCommand::EGCT_MODIY_ITEM;
constexpr ReqCommand_EGameCommandType ReqCommand::EGCT_CREATE_OBJECT;
constexpr ReqCommand_EGameCommandType ReqCommand::EGCT_ADD_ROLE_EXP;
constexpr ReqCommand_EGameCommandType ReqCommand::EGameCommandType_MIN;
constexpr ReqCommand_EGameCommandType ReqCommand::EGameCommandType_MAX;
constexpr int ReqCommand::EGameCommandType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Ident::InitAsDefaultInstance() {
}
class Ident::_Internal {
 public:
};

Ident::Ident(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.Ident)
}
Ident::Ident(const Ident& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&svrid_, &from.svrid_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&svrid_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.Ident)
}

void Ident::SharedCtor() {
  ::memset(&svrid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&svrid_)) + sizeof(index_));
}

Ident::~Ident() {
  // @@protoc_insertion_point(destructor:NFMsg.Ident)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ident::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Ident::ArenaDtor(void* object) {
  Ident* _this = reinterpret_cast< Ident* >(object);
  (void)_this;
}
void Ident::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ident::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ident& Ident::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ident_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void Ident::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.Ident)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&svrid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&svrid_)) + sizeof(index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ident::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 svrid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          svrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ident::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.Ident)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 svrid = 1;
  if (this->svrid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_svrid(), target);
  }

  // int64 index = 2;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.Ident)
  return target;
}

size_t Ident::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.Ident)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 svrid = 1;
  if (this->svrid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_svrid());
  }

  // int64 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ident::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.Ident)
  GOOGLE_DCHECK_NE(&from, this);
  const Ident* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ident>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.Ident)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.Ident)
    MergeFrom(*source);
  }
}

void Ident::MergeFrom(const Ident& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.Ident)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.svrid() != 0) {
    _internal_set_svrid(from._internal_svrid());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void Ident::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.Ident)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ident::CopyFrom(const Ident& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.Ident)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ident::IsInitialized() const {
  return true;
}

void Ident::InternalSwap(Ident* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ident, index_)
      + sizeof(Ident::index_)
      - PROTOBUF_FIELD_OFFSET(Ident, svrid_)>(
          reinterpret_cast<char*>(&svrid_),
          reinterpret_cast<char*>(&other->svrid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ident::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vector2::InitAsDefaultInstance() {
}
class Vector2::_Internal {
 public:
};

Vector2::Vector2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.Vector2)
}
Vector2::Vector2(const Vector2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.Vector2)
}

void Vector2::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vector2::~Vector2() {
  // @@protoc_insertion_point(destructor:NFMsg.Vector2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vector2::ArenaDtor(void* object) {
  Vector2* _this = reinterpret_cast< Vector2* >(object);
  (void)_this;
}
void Vector2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vector2& Vector2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vector2_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void Vector2::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.Vector2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.Vector2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.Vector2)
  return target;
}

size_t Vector2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.Vector2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.Vector2)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.Vector2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.Vector2)
    MergeFrom(*source);
  }
}

void Vector2::MergeFrom(const Vector2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.Vector2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Vector2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.Vector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2::CopyFrom(const Vector2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.Vector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2::IsInitialized() const {
  return true;
}

void Vector2::InternalSwap(Vector2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector2, y_)
      + sizeof(Vector2::y_)
      - PROTOBUF_FIELD_OFFSET(Vector2, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vector3::InitAsDefaultInstance() {
}
class Vector3::_Internal {
 public:
};

Vector3::Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.Vector3)
}

void Vector3::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:NFMsg.Vector3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vector3::ArenaDtor(void* object) {
  Vector3* _this = reinterpret_cast< Vector3* >(object);
  (void)_this;
}
void Vector3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vector3& Vector3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vector3_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.Vector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.Vector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.Vector3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.Vector3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.Vector3)
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Vector3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  return true;
}

void Vector3::InternalSwap(Vector3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3, z_)
      + sizeof(Vector3::z_)
      - PROTOBUF_FIELD_OFFSET(Vector3, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PropertyInt::InitAsDefaultInstance() {
}
class PropertyInt::_Internal {
 public:
};

PropertyInt::PropertyInt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.PropertyInt)
}
PropertyInt::PropertyInt(const PropertyInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_property_name().empty()) {
    property_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_property_name(),
      GetArena());
  }
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.PropertyInt)
}

void PropertyInt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PropertyInt_NFMsgBase_2eproto.base);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_ = PROTOBUF_LONGLONG(0);
}

PropertyInt::~PropertyInt() {
  // @@protoc_insertion_point(destructor:NFMsg.PropertyInt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PropertyInt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  property_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PropertyInt::ArenaDtor(void* object) {
  PropertyInt* _this = reinterpret_cast< PropertyInt* >(object);
  (void)_this;
}
void PropertyInt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PropertyInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropertyInt& PropertyInt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropertyInt_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void PropertyInt::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.PropertyInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertyInt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes property_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_property_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PropertyInt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.PropertyInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes property_name = 1;
  if (this->property_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_property_name(), target);
  }

  // int64 data = 2;
  if (this->data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.PropertyInt)
  return target;
}

size_t PropertyInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.PropertyInt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes property_name = 1;
  if (this->property_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_property_name());
  }

  // int64 data = 2;
  if (this->data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyInt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.PropertyInt)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyInt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropertyInt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.PropertyInt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.PropertyInt)
    MergeFrom(*source);
  }
}

void PropertyInt::MergeFrom(const PropertyInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.PropertyInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.property_name().size() > 0) {
    _internal_set_property_name(from._internal_property_name());
  }
  if (from.data() != 0) {
    _internal_set_data(from._internal_data());
  }
}

void PropertyInt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.PropertyInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyInt::CopyFrom(const PropertyInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.PropertyInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyInt::IsInitialized() const {
  return true;
}

void PropertyInt::InternalSwap(PropertyInt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  property_name_.Swap(&other->property_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyInt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PropertyFloat::InitAsDefaultInstance() {
}
class PropertyFloat::_Internal {
 public:
};

PropertyFloat::PropertyFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.PropertyFloat)
}
PropertyFloat::PropertyFloat(const PropertyFloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_property_name().empty()) {
    property_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_property_name(),
      GetArena());
  }
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.PropertyFloat)
}

void PropertyFloat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PropertyFloat_NFMsgBase_2eproto.base);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_ = 0;
}

PropertyFloat::~PropertyFloat() {
  // @@protoc_insertion_point(destructor:NFMsg.PropertyFloat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PropertyFloat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  property_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PropertyFloat::ArenaDtor(void* object) {
  PropertyFloat* _this = reinterpret_cast< PropertyFloat* >(object);
  (void)_this;
}
void PropertyFloat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PropertyFloat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropertyFloat& PropertyFloat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropertyFloat_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void PropertyFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.PropertyFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertyFloat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes property_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_property_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PropertyFloat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.PropertyFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes property_name = 1;
  if (this->property_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_property_name(), target);
  }

  // float data = 2;
  if (!(this->data() <= 0 && this->data() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.PropertyFloat)
  return target;
}

size_t PropertyFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.PropertyFloat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes property_name = 1;
  if (this->property_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_property_name());
  }

  // float data = 2;
  if (!(this->data() <= 0 && this->data() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyFloat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.PropertyFloat)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyFloat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropertyFloat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.PropertyFloat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.PropertyFloat)
    MergeFrom(*source);
  }
}

void PropertyFloat::MergeFrom(const PropertyFloat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.PropertyFloat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.property_name().size() > 0) {
    _internal_set_property_name(from._internal_property_name());
  }
  if (!(from.data() <= 0 && from.data() >= 0)) {
    _internal_set_data(from._internal_data());
  }
}

void PropertyFloat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.PropertyFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyFloat::CopyFrom(const PropertyFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.PropertyFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyFloat::IsInitialized() const {
  return true;
}

void PropertyFloat::InternalSwap(PropertyFloat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  property_name_.Swap(&other->property_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyFloat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PropertyString::InitAsDefaultInstance() {
}
class PropertyString::_Internal {
 public:
};

PropertyString::PropertyString(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.PropertyString)
}
PropertyString::PropertyString(const PropertyString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_property_name().empty()) {
    property_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_property_name(),
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.PropertyString)
}

void PropertyString::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PropertyString_NFMsgBase_2eproto.base);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PropertyString::~PropertyString() {
  // @@protoc_insertion_point(destructor:NFMsg.PropertyString)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PropertyString::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  property_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PropertyString::ArenaDtor(void* object) {
  PropertyString* _this = reinterpret_cast< PropertyString* >(object);
  (void)_this;
}
void PropertyString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PropertyString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropertyString& PropertyString::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropertyString_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void PropertyString::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.PropertyString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertyString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes property_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_property_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PropertyString::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.PropertyString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes property_name = 1;
  if (this->property_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_property_name(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.PropertyString)
  return target;
}

size_t PropertyString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.PropertyString)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes property_name = 1;
  if (this->property_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_property_name());
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.PropertyString)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropertyString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.PropertyString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.PropertyString)
    MergeFrom(*source);
  }
}

void PropertyString::MergeFrom(const PropertyString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.PropertyString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.property_name().size() > 0) {
    _internal_set_property_name(from._internal_property_name());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
}

void PropertyString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.PropertyString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyString::CopyFrom(const PropertyString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.PropertyString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyString::IsInitialized() const {
  return true;
}

void PropertyString::InternalSwap(PropertyString* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  property_name_.Swap(&other->property_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyString::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PropertyObject::InitAsDefaultInstance() {
  ::NFMsg::_PropertyObject_default_instance_._instance.get_mutable()->data_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class PropertyObject::_Internal {
 public:
  static const ::NFMsg::Ident& data(const PropertyObject* msg);
};

const ::NFMsg::Ident&
PropertyObject::_Internal::data(const PropertyObject* msg) {
  return *msg->data_;
}
PropertyObject::PropertyObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.PropertyObject)
}
PropertyObject::PropertyObject(const PropertyObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_property_name().empty()) {
    property_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_property_name(),
      GetArena());
  }
  if (from._internal_has_data()) {
    data_ = new ::NFMsg::Ident(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.PropertyObject)
}

void PropertyObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PropertyObject_NFMsgBase_2eproto.base);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_ = nullptr;
}

PropertyObject::~PropertyObject() {
  // @@protoc_insertion_point(destructor:NFMsg.PropertyObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PropertyObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  property_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void PropertyObject::ArenaDtor(void* object) {
  PropertyObject* _this = reinterpret_cast< PropertyObject* >(object);
  (void)_this;
}
void PropertyObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PropertyObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropertyObject& PropertyObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropertyObject_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void PropertyObject::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.PropertyObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertyObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes property_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_property_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Ident data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PropertyObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.PropertyObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes property_name = 1;
  if (this->property_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_property_name(), target);
  }

  // .NFMsg.Ident data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.PropertyObject)
  return target;
}

size_t PropertyObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.PropertyObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes property_name = 1;
  if (this->property_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_property_name());
  }

  // .NFMsg.Ident data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.PropertyObject)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropertyObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.PropertyObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.PropertyObject)
    MergeFrom(*source);
  }
}

void PropertyObject::MergeFrom(const PropertyObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.PropertyObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.property_name().size() > 0) {
    _internal_set_property_name(from._internal_property_name());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::NFMsg::Ident::MergeFrom(from._internal_data());
  }
}

void PropertyObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.PropertyObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyObject::CopyFrom(const PropertyObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.PropertyObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyObject::IsInitialized() const {
  return true;
}

void PropertyObject::InternalSwap(PropertyObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  property_name_.Swap(&other->property_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PropertyVector2::InitAsDefaultInstance() {
  ::NFMsg::_PropertyVector2_default_instance_._instance.get_mutable()->data_ = const_cast< ::NFMsg::Vector2*>(
      ::NFMsg::Vector2::internal_default_instance());
}
class PropertyVector2::_Internal {
 public:
  static const ::NFMsg::Vector2& data(const PropertyVector2* msg);
};

const ::NFMsg::Vector2&
PropertyVector2::_Internal::data(const PropertyVector2* msg) {
  return *msg->data_;
}
PropertyVector2::PropertyVector2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.PropertyVector2)
}
PropertyVector2::PropertyVector2(const PropertyVector2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_property_name().empty()) {
    property_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_property_name(),
      GetArena());
  }
  if (from._internal_has_data()) {
    data_ = new ::NFMsg::Vector2(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.PropertyVector2)
}

void PropertyVector2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PropertyVector2_NFMsgBase_2eproto.base);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_ = nullptr;
}

PropertyVector2::~PropertyVector2() {
  // @@protoc_insertion_point(destructor:NFMsg.PropertyVector2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PropertyVector2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  property_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void PropertyVector2::ArenaDtor(void* object) {
  PropertyVector2* _this = reinterpret_cast< PropertyVector2* >(object);
  (void)_this;
}
void PropertyVector2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PropertyVector2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropertyVector2& PropertyVector2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropertyVector2_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void PropertyVector2::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.PropertyVector2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertyVector2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes property_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_property_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Vector2 data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PropertyVector2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.PropertyVector2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes property_name = 1;
  if (this->property_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_property_name(), target);
  }

  // .NFMsg.Vector2 data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.PropertyVector2)
  return target;
}

size_t PropertyVector2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.PropertyVector2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes property_name = 1;
  if (this->property_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_property_name());
  }

  // .NFMsg.Vector2 data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyVector2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.PropertyVector2)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyVector2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropertyVector2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.PropertyVector2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.PropertyVector2)
    MergeFrom(*source);
  }
}

void PropertyVector2::MergeFrom(const PropertyVector2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.PropertyVector2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.property_name().size() > 0) {
    _internal_set_property_name(from._internal_property_name());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::NFMsg::Vector2::MergeFrom(from._internal_data());
  }
}

void PropertyVector2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.PropertyVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyVector2::CopyFrom(const PropertyVector2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.PropertyVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyVector2::IsInitialized() const {
  return true;
}

void PropertyVector2::InternalSwap(PropertyVector2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  property_name_.Swap(&other->property_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyVector2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PropertyVector3::InitAsDefaultInstance() {
  ::NFMsg::_PropertyVector3_default_instance_._instance.get_mutable()->data_ = const_cast< ::NFMsg::Vector3*>(
      ::NFMsg::Vector3::internal_default_instance());
}
class PropertyVector3::_Internal {
 public:
  static const ::NFMsg::Vector3& data(const PropertyVector3* msg);
};

const ::NFMsg::Vector3&
PropertyVector3::_Internal::data(const PropertyVector3* msg) {
  return *msg->data_;
}
PropertyVector3::PropertyVector3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.PropertyVector3)
}
PropertyVector3::PropertyVector3(const PropertyVector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_property_name().empty()) {
    property_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_property_name(),
      GetArena());
  }
  if (from._internal_has_data()) {
    data_ = new ::NFMsg::Vector3(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.PropertyVector3)
}

void PropertyVector3::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PropertyVector3_NFMsgBase_2eproto.base);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_ = nullptr;
}

PropertyVector3::~PropertyVector3() {
  // @@protoc_insertion_point(destructor:NFMsg.PropertyVector3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PropertyVector3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  property_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void PropertyVector3::ArenaDtor(void* object) {
  PropertyVector3* _this = reinterpret_cast< PropertyVector3* >(object);
  (void)_this;
}
void PropertyVector3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PropertyVector3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropertyVector3& PropertyVector3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropertyVector3_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void PropertyVector3::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.PropertyVector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertyVector3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes property_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_property_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Vector3 data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PropertyVector3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.PropertyVector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes property_name = 1;
  if (this->property_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_property_name(), target);
  }

  // .NFMsg.Vector3 data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.PropertyVector3)
  return target;
}

size_t PropertyVector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.PropertyVector3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes property_name = 1;
  if (this->property_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_property_name());
  }

  // .NFMsg.Vector3 data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyVector3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.PropertyVector3)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyVector3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropertyVector3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.PropertyVector3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.PropertyVector3)
    MergeFrom(*source);
  }
}

void PropertyVector3::MergeFrom(const PropertyVector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.PropertyVector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.property_name().size() > 0) {
    _internal_set_property_name(from._internal_property_name());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::NFMsg::Vector3::MergeFrom(from._internal_data());
  }
}

void PropertyVector3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.PropertyVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyVector3::CopyFrom(const PropertyVector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.PropertyVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyVector3::IsInitialized() const {
  return true;
}

void PropertyVector3::InternalSwap(PropertyVector3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  property_name_.Swap(&other->property_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyVector3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecordInt::InitAsDefaultInstance() {
}
class RecordInt::_Internal {
 public:
};

RecordInt::RecordInt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.RecordInt)
}
RecordInt::RecordInt(const RecordInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&row_, &from.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&row_)) + sizeof(data_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.RecordInt)
}

void RecordInt::SharedCtor() {
  ::memset(&row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&row_)) + sizeof(data_));
}

RecordInt::~RecordInt() {
  // @@protoc_insertion_point(destructor:NFMsg.RecordInt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordInt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RecordInt::ArenaDtor(void* object) {
  RecordInt* _this = reinterpret_cast< RecordInt* >(object);
  (void)_this;
}
void RecordInt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordInt& RecordInt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecordInt_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void RecordInt::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.RecordInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&row_)) + sizeof(data_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordInt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordInt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.RecordInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 row = 1;
  if (this->row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_row(), target);
  }

  // int32 col = 2;
  if (this->col() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_col(), target);
  }

  // int64 data = 3;
  if (this->data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.RecordInt)
  return target;
}

size_t RecordInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.RecordInt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 row = 1;
  if (this->row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_row());
  }

  // int32 col = 2;
  if (this->col() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_col());
  }

  // int64 data = 3;
  if (this->data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordInt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.RecordInt)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordInt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordInt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.RecordInt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.RecordInt)
    MergeFrom(*source);
  }
}

void RecordInt::MergeFrom(const RecordInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.RecordInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.row() != 0) {
    _internal_set_row(from._internal_row());
  }
  if (from.col() != 0) {
    _internal_set_col(from._internal_col());
  }
  if (from.data() != 0) {
    _internal_set_data(from._internal_data());
  }
}

void RecordInt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.RecordInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordInt::CopyFrom(const RecordInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.RecordInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordInt::IsInitialized() const {
  return true;
}

void RecordInt::InternalSwap(RecordInt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordInt, data_)
      + sizeof(RecordInt::data_)
      - PROTOBUF_FIELD_OFFSET(RecordInt, row_)>(
          reinterpret_cast<char*>(&row_),
          reinterpret_cast<char*>(&other->row_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordInt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecordFloat::InitAsDefaultInstance() {
}
class RecordFloat::_Internal {
 public:
};

RecordFloat::RecordFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.RecordFloat)
}
RecordFloat::RecordFloat(const RecordFloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&row_, &from.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&row_)) + sizeof(data_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.RecordFloat)
}

void RecordFloat::SharedCtor() {
  ::memset(&row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&row_)) + sizeof(data_));
}

RecordFloat::~RecordFloat() {
  // @@protoc_insertion_point(destructor:NFMsg.RecordFloat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordFloat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RecordFloat::ArenaDtor(void* object) {
  RecordFloat* _this = reinterpret_cast< RecordFloat* >(object);
  (void)_this;
}
void RecordFloat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordFloat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordFloat& RecordFloat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecordFloat_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void RecordFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.RecordFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&row_)) + sizeof(data_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordFloat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordFloat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.RecordFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 row = 1;
  if (this->row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_row(), target);
  }

  // int32 col = 2;
  if (this->col() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_col(), target);
  }

  // float data = 3;
  if (!(this->data() <= 0 && this->data() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.RecordFloat)
  return target;
}

size_t RecordFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.RecordFloat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 row = 1;
  if (this->row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_row());
  }

  // int32 col = 2;
  if (this->col() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_col());
  }

  // float data = 3;
  if (!(this->data() <= 0 && this->data() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordFloat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.RecordFloat)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordFloat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordFloat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.RecordFloat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.RecordFloat)
    MergeFrom(*source);
  }
}

void RecordFloat::MergeFrom(const RecordFloat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.RecordFloat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.row() != 0) {
    _internal_set_row(from._internal_row());
  }
  if (from.col() != 0) {
    _internal_set_col(from._internal_col());
  }
  if (!(from.data() <= 0 && from.data() >= 0)) {
    _internal_set_data(from._internal_data());
  }
}

void RecordFloat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.RecordFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordFloat::CopyFrom(const RecordFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.RecordFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordFloat::IsInitialized() const {
  return true;
}

void RecordFloat::InternalSwap(RecordFloat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordFloat, data_)
      + sizeof(RecordFloat::data_)
      - PROTOBUF_FIELD_OFFSET(RecordFloat, row_)>(
          reinterpret_cast<char*>(&row_),
          reinterpret_cast<char*>(&other->row_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordFloat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecordString::InitAsDefaultInstance() {
}
class RecordString::_Internal {
 public:
};

RecordString::RecordString(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.RecordString)
}
RecordString::RecordString(const RecordString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  ::memcpy(&row_, &from.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_) -
    reinterpret_cast<char*>(&row_)) + sizeof(col_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.RecordString)
}

void RecordString::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecordString_NFMsgBase_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&row_)) + sizeof(col_));
}

RecordString::~RecordString() {
  // @@protoc_insertion_point(destructor:NFMsg.RecordString)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordString::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RecordString::ArenaDtor(void* object) {
  RecordString* _this = reinterpret_cast< RecordString* >(object);
  (void)_this;
}
void RecordString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordString& RecordString::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecordString_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void RecordString::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.RecordString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&row_)) + sizeof(col_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordString::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.RecordString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 row = 1;
  if (this->row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_row(), target);
  }

  // int32 col = 2;
  if (this->col() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_col(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.RecordString)
  return target;
}

size_t RecordString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.RecordString)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 row = 1;
  if (this->row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_row());
  }

  // int32 col = 2;
  if (this->col() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_col());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.RecordString)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.RecordString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.RecordString)
    MergeFrom(*source);
  }
}

void RecordString::MergeFrom(const RecordString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.RecordString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.row() != 0) {
    _internal_set_row(from._internal_row());
  }
  if (from.col() != 0) {
    _internal_set_col(from._internal_col());
  }
}

void RecordString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.RecordString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordString::CopyFrom(const RecordString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.RecordString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordString::IsInitialized() const {
  return true;
}

void RecordString::InternalSwap(RecordString* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordString, col_)
      + sizeof(RecordString::col_)
      - PROTOBUF_FIELD_OFFSET(RecordString, row_)>(
          reinterpret_cast<char*>(&row_),
          reinterpret_cast<char*>(&other->row_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordString::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecordObject::InitAsDefaultInstance() {
  ::NFMsg::_RecordObject_default_instance_._instance.get_mutable()->data_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class RecordObject::_Internal {
 public:
  static const ::NFMsg::Ident& data(const RecordObject* msg);
};

const ::NFMsg::Ident&
RecordObject::_Internal::data(const RecordObject* msg) {
  return *msg->data_;
}
RecordObject::RecordObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.RecordObject)
}
RecordObject::RecordObject(const RecordObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::NFMsg::Ident(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&row_, &from.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_) -
    reinterpret_cast<char*>(&row_)) + sizeof(col_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.RecordObject)
}

void RecordObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecordObject_NFMsgBase_2eproto.base);
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&data_)) + sizeof(col_));
}

RecordObject::~RecordObject() {
  // @@protoc_insertion_point(destructor:NFMsg.RecordObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void RecordObject::ArenaDtor(void* object) {
  RecordObject* _this = reinterpret_cast< RecordObject* >(object);
  (void)_this;
}
void RecordObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordObject& RecordObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecordObject_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void RecordObject::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.RecordObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  ::memset(&row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&row_)) + sizeof(col_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Ident data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.RecordObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 row = 1;
  if (this->row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_row(), target);
  }

  // int32 col = 2;
  if (this->col() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_col(), target);
  }

  // .NFMsg.Ident data = 3;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.RecordObject)
  return target;
}

size_t RecordObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.RecordObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Ident data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int32 row = 1;
  if (this->row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_row());
  }

  // int32 col = 2;
  if (this->col() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_col());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.RecordObject)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.RecordObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.RecordObject)
    MergeFrom(*source);
  }
}

void RecordObject::MergeFrom(const RecordObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.RecordObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::NFMsg::Ident::MergeFrom(from._internal_data());
  }
  if (from.row() != 0) {
    _internal_set_row(from._internal_row());
  }
  if (from.col() != 0) {
    _internal_set_col(from._internal_col());
  }
}

void RecordObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.RecordObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordObject::CopyFrom(const RecordObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.RecordObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordObject::IsInitialized() const {
  return true;
}

void RecordObject::InternalSwap(RecordObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordObject, col_)
      + sizeof(RecordObject::col_)
      - PROTOBUF_FIELD_OFFSET(RecordObject, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecordVector2::InitAsDefaultInstance() {
  ::NFMsg::_RecordVector2_default_instance_._instance.get_mutable()->data_ = const_cast< ::NFMsg::Vector2*>(
      ::NFMsg::Vector2::internal_default_instance());
}
class RecordVector2::_Internal {
 public:
  static const ::NFMsg::Vector2& data(const RecordVector2* msg);
};

const ::NFMsg::Vector2&
RecordVector2::_Internal::data(const RecordVector2* msg) {
  return *msg->data_;
}
RecordVector2::RecordVector2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.RecordVector2)
}
RecordVector2::RecordVector2(const RecordVector2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::NFMsg::Vector2(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&row_, &from.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_) -
    reinterpret_cast<char*>(&row_)) + sizeof(col_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.RecordVector2)
}

void RecordVector2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecordVector2_NFMsgBase_2eproto.base);
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&data_)) + sizeof(col_));
}

RecordVector2::~RecordVector2() {
  // @@protoc_insertion_point(destructor:NFMsg.RecordVector2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordVector2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void RecordVector2::ArenaDtor(void* object) {
  RecordVector2* _this = reinterpret_cast< RecordVector2* >(object);
  (void)_this;
}
void RecordVector2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordVector2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordVector2& RecordVector2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecordVector2_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void RecordVector2::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.RecordVector2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  ::memset(&row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&row_)) + sizeof(col_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordVector2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Vector2 data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordVector2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.RecordVector2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 row = 1;
  if (this->row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_row(), target);
  }

  // int32 col = 2;
  if (this->col() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_col(), target);
  }

  // .NFMsg.Vector2 data = 3;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.RecordVector2)
  return target;
}

size_t RecordVector2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.RecordVector2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Vector2 data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int32 row = 1;
  if (this->row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_row());
  }

  // int32 col = 2;
  if (this->col() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_col());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordVector2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.RecordVector2)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordVector2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordVector2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.RecordVector2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.RecordVector2)
    MergeFrom(*source);
  }
}

void RecordVector2::MergeFrom(const RecordVector2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.RecordVector2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::NFMsg::Vector2::MergeFrom(from._internal_data());
  }
  if (from.row() != 0) {
    _internal_set_row(from._internal_row());
  }
  if (from.col() != 0) {
    _internal_set_col(from._internal_col());
  }
}

void RecordVector2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.RecordVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordVector2::CopyFrom(const RecordVector2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.RecordVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordVector2::IsInitialized() const {
  return true;
}

void RecordVector2::InternalSwap(RecordVector2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordVector2, col_)
      + sizeof(RecordVector2::col_)
      - PROTOBUF_FIELD_OFFSET(RecordVector2, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordVector2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecordVector3::InitAsDefaultInstance() {
  ::NFMsg::_RecordVector3_default_instance_._instance.get_mutable()->data_ = const_cast< ::NFMsg::Vector3*>(
      ::NFMsg::Vector3::internal_default_instance());
}
class RecordVector3::_Internal {
 public:
  static const ::NFMsg::Vector3& data(const RecordVector3* msg);
};

const ::NFMsg::Vector3&
RecordVector3::_Internal::data(const RecordVector3* msg) {
  return *msg->data_;
}
RecordVector3::RecordVector3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.RecordVector3)
}
RecordVector3::RecordVector3(const RecordVector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::NFMsg::Vector3(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&row_, &from.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_) -
    reinterpret_cast<char*>(&row_)) + sizeof(col_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.RecordVector3)
}

void RecordVector3::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecordVector3_NFMsgBase_2eproto.base);
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&data_)) + sizeof(col_));
}

RecordVector3::~RecordVector3() {
  // @@protoc_insertion_point(destructor:NFMsg.RecordVector3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordVector3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void RecordVector3::ArenaDtor(void* object) {
  RecordVector3* _this = reinterpret_cast< RecordVector3* >(object);
  (void)_this;
}
void RecordVector3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordVector3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordVector3& RecordVector3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecordVector3_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void RecordVector3::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.RecordVector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  ::memset(&row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&row_)) + sizeof(col_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordVector3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Vector3 data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordVector3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.RecordVector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 row = 1;
  if (this->row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_row(), target);
  }

  // int32 col = 2;
  if (this->col() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_col(), target);
  }

  // .NFMsg.Vector3 data = 3;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.RecordVector3)
  return target;
}

size_t RecordVector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.RecordVector3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Vector3 data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int32 row = 1;
  if (this->row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_row());
  }

  // int32 col = 2;
  if (this->col() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_col());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordVector3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.RecordVector3)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordVector3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordVector3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.RecordVector3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.RecordVector3)
    MergeFrom(*source);
  }
}

void RecordVector3::MergeFrom(const RecordVector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.RecordVector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::NFMsg::Vector3::MergeFrom(from._internal_data());
  }
  if (from.row() != 0) {
    _internal_set_row(from._internal_row());
  }
  if (from.col() != 0) {
    _internal_set_col(from._internal_col());
  }
}

void RecordVector3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.RecordVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordVector3::CopyFrom(const RecordVector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.RecordVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordVector3::IsInitialized() const {
  return true;
}

void RecordVector3::InternalSwap(RecordVector3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordVector3, col_)
      + sizeof(RecordVector3::col_)
      - PROTOBUF_FIELD_OFFSET(RecordVector3, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordVector3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecordAddRowStruct::InitAsDefaultInstance() {
}
class RecordAddRowStruct::_Internal {
 public:
};

RecordAddRowStruct::RecordAddRowStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  record_int_list_(arena),
  record_float_list_(arena),
  record_string_list_(arena),
  record_object_list_(arena),
  record_vector2_list_(arena),
  record_vector3_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.RecordAddRowStruct)
}
RecordAddRowStruct::RecordAddRowStruct(const RecordAddRowStruct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      record_int_list_(from.record_int_list_),
      record_float_list_(from.record_float_list_),
      record_string_list_(from.record_string_list_),
      record_object_list_(from.record_object_list_),
      record_vector2_list_(from.record_vector2_list_),
      record_vector3_list_(from.record_vector3_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  row_ = from.row_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.RecordAddRowStruct)
}

void RecordAddRowStruct::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecordAddRowStruct_NFMsgBase_2eproto.base);
  row_ = 0;
}

RecordAddRowStruct::~RecordAddRowStruct() {
  // @@protoc_insertion_point(destructor:NFMsg.RecordAddRowStruct)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordAddRowStruct::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RecordAddRowStruct::ArenaDtor(void* object) {
  RecordAddRowStruct* _this = reinterpret_cast< RecordAddRowStruct* >(object);
  (void)_this;
}
void RecordAddRowStruct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordAddRowStruct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordAddRowStruct& RecordAddRowStruct::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecordAddRowStruct_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void RecordAddRowStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.RecordAddRowStruct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_int_list_.Clear();
  record_float_list_.Clear();
  record_string_list_.Clear();
  record_object_list_.Clear();
  record_vector2_list_.Clear();
  record_vector3_list_.Clear();
  row_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordAddRowStruct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.RecordInt record_int_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_int_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.RecordFloat record_float_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_float_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.RecordString record_string_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_string_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.RecordObject record_object_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_object_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.RecordVector2 record_vector2_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_vector2_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.RecordVector3 record_vector3_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_vector3_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordAddRowStruct::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.RecordAddRowStruct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 row = 1;
  if (this->row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_row(), target);
  }

  // repeated .NFMsg.RecordInt record_int_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_int_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_record_int_list(i), target, stream);
  }

  // repeated .NFMsg.RecordFloat record_float_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_float_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_record_float_list(i), target, stream);
  }

  // repeated .NFMsg.RecordString record_string_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_string_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_record_string_list(i), target, stream);
  }

  // repeated .NFMsg.RecordObject record_object_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_object_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_record_object_list(i), target, stream);
  }

  // repeated .NFMsg.RecordVector2 record_vector2_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_vector2_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_record_vector2_list(i), target, stream);
  }

  // repeated .NFMsg.RecordVector3 record_vector3_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_vector3_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_record_vector3_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.RecordAddRowStruct)
  return target;
}

size_t RecordAddRowStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.RecordAddRowStruct)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.RecordInt record_int_list = 2;
  total_size += 1UL * this->_internal_record_int_list_size();
  for (const auto& msg : this->record_int_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .NFMsg.RecordFloat record_float_list = 3;
  total_size += 1UL * this->_internal_record_float_list_size();
  for (const auto& msg : this->record_float_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .NFMsg.RecordString record_string_list = 4;
  total_size += 1UL * this->_internal_record_string_list_size();
  for (const auto& msg : this->record_string_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .NFMsg.RecordObject record_object_list = 5;
  total_size += 1UL * this->_internal_record_object_list_size();
  for (const auto& msg : this->record_object_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .NFMsg.RecordVector2 record_vector2_list = 6;
  total_size += 1UL * this->_internal_record_vector2_list_size();
  for (const auto& msg : this->record_vector2_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .NFMsg.RecordVector3 record_vector3_list = 7;
  total_size += 1UL * this->_internal_record_vector3_list_size();
  for (const auto& msg : this->record_vector3_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 row = 1;
  if (this->row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_row());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordAddRowStruct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.RecordAddRowStruct)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordAddRowStruct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordAddRowStruct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.RecordAddRowStruct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.RecordAddRowStruct)
    MergeFrom(*source);
  }
}

void RecordAddRowStruct::MergeFrom(const RecordAddRowStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.RecordAddRowStruct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  record_int_list_.MergeFrom(from.record_int_list_);
  record_float_list_.MergeFrom(from.record_float_list_);
  record_string_list_.MergeFrom(from.record_string_list_);
  record_object_list_.MergeFrom(from.record_object_list_);
  record_vector2_list_.MergeFrom(from.record_vector2_list_);
  record_vector3_list_.MergeFrom(from.record_vector3_list_);
  if (from.row() != 0) {
    _internal_set_row(from._internal_row());
  }
}

void RecordAddRowStruct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.RecordAddRowStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordAddRowStruct::CopyFrom(const RecordAddRowStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.RecordAddRowStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordAddRowStruct::IsInitialized() const {
  return true;
}

void RecordAddRowStruct::InternalSwap(RecordAddRowStruct* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  record_int_list_.InternalSwap(&other->record_int_list_);
  record_float_list_.InternalSwap(&other->record_float_list_);
  record_string_list_.InternalSwap(&other->record_string_list_);
  record_object_list_.InternalSwap(&other->record_object_list_);
  record_vector2_list_.InternalSwap(&other->record_vector2_list_);
  record_vector3_list_.InternalSwap(&other->record_vector3_list_);
  swap(row_, other->row_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordAddRowStruct::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectRecordBase::InitAsDefaultInstance() {
}
class ObjectRecordBase::_Internal {
 public:
};

ObjectRecordBase::ObjectRecordBase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  row_struct_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.ObjectRecordBase)
}
ObjectRecordBase::ObjectRecordBase(const ObjectRecordBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      row_struct_(from.row_struct_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_name().empty()) {
    record_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_record_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectRecordBase)
}

void ObjectRecordBase::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectRecordBase_NFMsgBase_2eproto.base);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ObjectRecordBase::~ObjectRecordBase() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectRecordBase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectRecordBase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  record_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ObjectRecordBase::ArenaDtor(void* object) {
  ObjectRecordBase* _this = reinterpret_cast< ObjectRecordBase* >(object);
  (void)_this;
}
void ObjectRecordBase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectRecordBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectRecordBase& ObjectRecordBase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectRecordBase_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void ObjectRecordBase::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectRecordBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_struct_.Clear();
  record_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectRecordBase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes record_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_record_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.RecordAddRowStruct row_struct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_struct(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectRecordBase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectRecordBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes record_name = 1;
  if (this->record_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_record_name(), target);
  }

  // repeated .NFMsg.RecordAddRowStruct row_struct = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_row_struct_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_row_struct(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectRecordBase)
  return target;
}

size_t ObjectRecordBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectRecordBase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.RecordAddRowStruct row_struct = 2;
  total_size += 1UL * this->_internal_row_struct_size();
  for (const auto& msg : this->row_struct_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes record_name = 1;
  if (this->record_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_record_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectRecordBase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectRecordBase)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordBase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectRecordBase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectRecordBase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectRecordBase)
    MergeFrom(*source);
  }
}

void ObjectRecordBase::MergeFrom(const ObjectRecordBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectRecordBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  row_struct_.MergeFrom(from.row_struct_);
  if (from.record_name().size() > 0) {
    _internal_set_record_name(from._internal_record_name());
  }
}

void ObjectRecordBase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectRecordBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordBase::CopyFrom(const ObjectRecordBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectRecordBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordBase::IsInitialized() const {
  return true;
}

void ObjectRecordBase::InternalSwap(ObjectRecordBase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  row_struct_.InternalSwap(&other->row_struct_);
  record_name_.Swap(&other->record_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectRecordBase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectPropertyInt::InitAsDefaultInstance() {
  ::NFMsg::_ObjectPropertyInt_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ObjectPropertyInt::_Internal {
 public:
  static const ::NFMsg::Ident& player_id(const ObjectPropertyInt* msg);
};

const ::NFMsg::Ident&
ObjectPropertyInt::_Internal::player_id(const ObjectPropertyInt* msg) {
  return *msg->player_id_;
}
ObjectPropertyInt::ObjectPropertyInt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.ObjectPropertyInt)
}
ObjectPropertyInt::ObjectPropertyInt(const ObjectPropertyInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectPropertyInt)
}

void ObjectPropertyInt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectPropertyInt_NFMsgBase_2eproto.base);
  player_id_ = nullptr;
}

ObjectPropertyInt::~ObjectPropertyInt() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectPropertyInt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectPropertyInt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectPropertyInt::ArenaDtor(void* object) {
  ObjectPropertyInt* _this = reinterpret_cast< ObjectPropertyInt* >(object);
  (void)_this;
}
void ObjectPropertyInt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectPropertyInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectPropertyInt& ObjectPropertyInt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectPropertyInt_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void ObjectPropertyInt::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectPropertyInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  if (GetArena() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectPropertyInt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.PropertyInt property_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectPropertyInt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectPropertyInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // repeated .NFMsg.PropertyInt property_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_property_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectPropertyInt)
  return target;
}

size_t ObjectPropertyInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectPropertyInt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.PropertyInt property_list = 2;
  total_size += 1UL * this->_internal_property_list_size();
  for (const auto& msg : this->property_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectPropertyInt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectPropertyInt)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectPropertyInt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectPropertyInt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectPropertyInt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectPropertyInt)
    MergeFrom(*source);
  }
}

void ObjectPropertyInt::MergeFrom(const ObjectPropertyInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectPropertyInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::NFMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectPropertyInt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectPropertyInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyInt::CopyFrom(const ObjectPropertyInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectPropertyInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyInt::IsInitialized() const {
  return true;
}

void ObjectPropertyInt::InternalSwap(ObjectPropertyInt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  property_list_.InternalSwap(&other->property_list_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectPropertyInt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectPropertyFloat::InitAsDefaultInstance() {
  ::NFMsg::_ObjectPropertyFloat_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ObjectPropertyFloat::_Internal {
 public:
  static const ::NFMsg::Ident& player_id(const ObjectPropertyFloat* msg);
};

const ::NFMsg::Ident&
ObjectPropertyFloat::_Internal::player_id(const ObjectPropertyFloat* msg) {
  return *msg->player_id_;
}
ObjectPropertyFloat::ObjectPropertyFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.ObjectPropertyFloat)
}
ObjectPropertyFloat::ObjectPropertyFloat(const ObjectPropertyFloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectPropertyFloat)
}

void ObjectPropertyFloat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectPropertyFloat_NFMsgBase_2eproto.base);
  player_id_ = nullptr;
}

ObjectPropertyFloat::~ObjectPropertyFloat() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectPropertyFloat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectPropertyFloat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectPropertyFloat::ArenaDtor(void* object) {
  ObjectPropertyFloat* _this = reinterpret_cast< ObjectPropertyFloat* >(object);
  (void)_this;
}
void ObjectPropertyFloat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectPropertyFloat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectPropertyFloat& ObjectPropertyFloat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectPropertyFloat_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void ObjectPropertyFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectPropertyFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  if (GetArena() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectPropertyFloat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.PropertyFloat property_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectPropertyFloat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectPropertyFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // repeated .NFMsg.PropertyFloat property_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_property_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectPropertyFloat)
  return target;
}

size_t ObjectPropertyFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectPropertyFloat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.PropertyFloat property_list = 2;
  total_size += 1UL * this->_internal_property_list_size();
  for (const auto& msg : this->property_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectPropertyFloat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectPropertyFloat)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectPropertyFloat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectPropertyFloat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectPropertyFloat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectPropertyFloat)
    MergeFrom(*source);
  }
}

void ObjectPropertyFloat::MergeFrom(const ObjectPropertyFloat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectPropertyFloat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::NFMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectPropertyFloat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectPropertyFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyFloat::CopyFrom(const ObjectPropertyFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectPropertyFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyFloat::IsInitialized() const {
  return true;
}

void ObjectPropertyFloat::InternalSwap(ObjectPropertyFloat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  property_list_.InternalSwap(&other->property_list_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectPropertyFloat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectPropertyString::InitAsDefaultInstance() {
  ::NFMsg::_ObjectPropertyString_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ObjectPropertyString::_Internal {
 public:
  static const ::NFMsg::Ident& player_id(const ObjectPropertyString* msg);
};

const ::NFMsg::Ident&
ObjectPropertyString::_Internal::player_id(const ObjectPropertyString* msg) {
  return *msg->player_id_;
}
ObjectPropertyString::ObjectPropertyString(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.ObjectPropertyString)
}
ObjectPropertyString::ObjectPropertyString(const ObjectPropertyString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectPropertyString)
}

void ObjectPropertyString::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectPropertyString_NFMsgBase_2eproto.base);
  player_id_ = nullptr;
}

ObjectPropertyString::~ObjectPropertyString() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectPropertyString)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectPropertyString::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectPropertyString::ArenaDtor(void* object) {
  ObjectPropertyString* _this = reinterpret_cast< ObjectPropertyString* >(object);
  (void)_this;
}
void ObjectPropertyString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectPropertyString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectPropertyString& ObjectPropertyString::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectPropertyString_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void ObjectPropertyString::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectPropertyString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  if (GetArena() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectPropertyString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.PropertyString property_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectPropertyString::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectPropertyString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // repeated .NFMsg.PropertyString property_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_property_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectPropertyString)
  return target;
}

size_t ObjectPropertyString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectPropertyString)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.PropertyString property_list = 2;
  total_size += 1UL * this->_internal_property_list_size();
  for (const auto& msg : this->property_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectPropertyString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectPropertyString)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectPropertyString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectPropertyString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectPropertyString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectPropertyString)
    MergeFrom(*source);
  }
}

void ObjectPropertyString::MergeFrom(const ObjectPropertyString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectPropertyString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::NFMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectPropertyString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectPropertyString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyString::CopyFrom(const ObjectPropertyString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectPropertyString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyString::IsInitialized() const {
  return true;
}

void ObjectPropertyString::InternalSwap(ObjectPropertyString* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  property_list_.InternalSwap(&other->property_list_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectPropertyString::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectPropertyObject::InitAsDefaultInstance() {
  ::NFMsg::_ObjectPropertyObject_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ObjectPropertyObject::_Internal {
 public:
  static const ::NFMsg::Ident& player_id(const ObjectPropertyObject* msg);
};

const ::NFMsg::Ident&
ObjectPropertyObject::_Internal::player_id(const ObjectPropertyObject* msg) {
  return *msg->player_id_;
}
ObjectPropertyObject::ObjectPropertyObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.ObjectPropertyObject)
}
ObjectPropertyObject::ObjectPropertyObject(const ObjectPropertyObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectPropertyObject)
}

void ObjectPropertyObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectPropertyObject_NFMsgBase_2eproto.base);
  player_id_ = nullptr;
}

ObjectPropertyObject::~ObjectPropertyObject() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectPropertyObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectPropertyObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectPropertyObject::ArenaDtor(void* object) {
  ObjectPropertyObject* _this = reinterpret_cast< ObjectPropertyObject* >(object);
  (void)_this;
}
void ObjectPropertyObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectPropertyObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectPropertyObject& ObjectPropertyObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectPropertyObject_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void ObjectPropertyObject::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectPropertyObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  if (GetArena() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectPropertyObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.PropertyObject property_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectPropertyObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectPropertyObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // repeated .NFMsg.PropertyObject property_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_property_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectPropertyObject)
  return target;
}

size_t ObjectPropertyObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectPropertyObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.PropertyObject property_list = 2;
  total_size += 1UL * this->_internal_property_list_size();
  for (const auto& msg : this->property_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectPropertyObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectPropertyObject)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectPropertyObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectPropertyObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectPropertyObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectPropertyObject)
    MergeFrom(*source);
  }
}

void ObjectPropertyObject::MergeFrom(const ObjectPropertyObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectPropertyObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::NFMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectPropertyObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectPropertyObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyObject::CopyFrom(const ObjectPropertyObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectPropertyObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyObject::IsInitialized() const {
  return true;
}

void ObjectPropertyObject::InternalSwap(ObjectPropertyObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  property_list_.InternalSwap(&other->property_list_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectPropertyObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectPropertyVector2::InitAsDefaultInstance() {
  ::NFMsg::_ObjectPropertyVector2_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ObjectPropertyVector2::_Internal {
 public:
  static const ::NFMsg::Ident& player_id(const ObjectPropertyVector2* msg);
};

const ::NFMsg::Ident&
ObjectPropertyVector2::_Internal::player_id(const ObjectPropertyVector2* msg) {
  return *msg->player_id_;
}
ObjectPropertyVector2::ObjectPropertyVector2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.ObjectPropertyVector2)
}
ObjectPropertyVector2::ObjectPropertyVector2(const ObjectPropertyVector2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectPropertyVector2)
}

void ObjectPropertyVector2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectPropertyVector2_NFMsgBase_2eproto.base);
  player_id_ = nullptr;
}

ObjectPropertyVector2::~ObjectPropertyVector2() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectPropertyVector2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectPropertyVector2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectPropertyVector2::ArenaDtor(void* object) {
  ObjectPropertyVector2* _this = reinterpret_cast< ObjectPropertyVector2* >(object);
  (void)_this;
}
void ObjectPropertyVector2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectPropertyVector2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectPropertyVector2& ObjectPropertyVector2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectPropertyVector2_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void ObjectPropertyVector2::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectPropertyVector2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  if (GetArena() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectPropertyVector2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.PropertyVector2 property_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectPropertyVector2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectPropertyVector2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // repeated .NFMsg.PropertyVector2 property_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_property_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectPropertyVector2)
  return target;
}

size_t ObjectPropertyVector2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectPropertyVector2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.PropertyVector2 property_list = 2;
  total_size += 1UL * this->_internal_property_list_size();
  for (const auto& msg : this->property_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectPropertyVector2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectPropertyVector2)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectPropertyVector2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectPropertyVector2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectPropertyVector2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectPropertyVector2)
    MergeFrom(*source);
  }
}

void ObjectPropertyVector2::MergeFrom(const ObjectPropertyVector2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectPropertyVector2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::NFMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectPropertyVector2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectPropertyVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyVector2::CopyFrom(const ObjectPropertyVector2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectPropertyVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyVector2::IsInitialized() const {
  return true;
}

void ObjectPropertyVector2::InternalSwap(ObjectPropertyVector2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  property_list_.InternalSwap(&other->property_list_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectPropertyVector2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectPropertyVector3::InitAsDefaultInstance() {
  ::NFMsg::_ObjectPropertyVector3_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ObjectPropertyVector3::_Internal {
 public:
  static const ::NFMsg::Ident& player_id(const ObjectPropertyVector3* msg);
};

const ::NFMsg::Ident&
ObjectPropertyVector3::_Internal::player_id(const ObjectPropertyVector3* msg) {
  return *msg->player_id_;
}
ObjectPropertyVector3::ObjectPropertyVector3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.ObjectPropertyVector3)
}
ObjectPropertyVector3::ObjectPropertyVector3(const ObjectPropertyVector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectPropertyVector3)
}

void ObjectPropertyVector3::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectPropertyVector3_NFMsgBase_2eproto.base);
  player_id_ = nullptr;
}

ObjectPropertyVector3::~ObjectPropertyVector3() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectPropertyVector3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectPropertyVector3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectPropertyVector3::ArenaDtor(void* object) {
  ObjectPropertyVector3* _this = reinterpret_cast< ObjectPropertyVector3* >(object);
  (void)_this;
}
void ObjectPropertyVector3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectPropertyVector3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectPropertyVector3& ObjectPropertyVector3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectPropertyVector3_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void ObjectPropertyVector3::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectPropertyVector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  if (GetArena() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectPropertyVector3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.PropertyVector3 property_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectPropertyVector3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectPropertyVector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // repeated .NFMsg.PropertyVector3 property_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_property_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectPropertyVector3)
  return target;
}

size_t ObjectPropertyVector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectPropertyVector3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.PropertyVector3 property_list = 2;
  total_size += 1UL * this->_internal_property_list_size();
  for (const auto& msg : this->property_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectPropertyVector3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectPropertyVector3)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectPropertyVector3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectPropertyVector3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectPropertyVector3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectPropertyVector3)
    MergeFrom(*source);
  }
}

void ObjectPropertyVector3::MergeFrom(const ObjectPropertyVector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectPropertyVector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::NFMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectPropertyVector3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectPropertyVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyVector3::CopyFrom(const ObjectPropertyVector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectPropertyVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyVector3::IsInitialized() const {
  return true;
}

void ObjectPropertyVector3::InternalSwap(ObjectPropertyVector3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  property_list_.InternalSwap(&other->property_list_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectPropertyVector3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectRecordInt::InitAsDefaultInstance() {
  ::NFMsg::_ObjectRecordInt_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ObjectRecordInt::_Internal {
 public:
  static const ::NFMsg::Ident& player_id(const ObjectRecordInt* msg);
};

const ::NFMsg::Ident&
ObjectRecordInt::_Internal::player_id(const ObjectRecordInt* msg) {
  return *msg->player_id_;
}
ObjectRecordInt::ObjectRecordInt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.ObjectRecordInt)
}
ObjectRecordInt::ObjectRecordInt(const ObjectRecordInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_name().empty()) {
    record_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_record_name(),
      GetArena());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectRecordInt)
}

void ObjectRecordInt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectRecordInt_NFMsgBase_2eproto.base);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_id_ = nullptr;
}

ObjectRecordInt::~ObjectRecordInt() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectRecordInt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectRecordInt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  record_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordInt::ArenaDtor(void* object) {
  ObjectRecordInt* _this = reinterpret_cast< ObjectRecordInt* >(object);
  (void)_this;
}
void ObjectRecordInt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectRecordInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectRecordInt& ObjectRecordInt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectRecordInt_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void ObjectRecordInt::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectRecordInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  record_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectRecordInt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes record_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_record_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.RecordInt property_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectRecordInt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectRecordInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes record_name = 2;
  if (this->record_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_record_name(), target);
  }

  // repeated .NFMsg.RecordInt property_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_property_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectRecordInt)
  return target;
}

size_t ObjectRecordInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectRecordInt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.RecordInt property_list = 3;
  total_size += 1UL * this->_internal_property_list_size();
  for (const auto& msg : this->property_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes record_name = 2;
  if (this->record_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_record_name());
  }

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectRecordInt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectRecordInt)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordInt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectRecordInt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectRecordInt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectRecordInt)
    MergeFrom(*source);
  }
}

void ObjectRecordInt::MergeFrom(const ObjectRecordInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectRecordInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (from.record_name().size() > 0) {
    _internal_set_record_name(from._internal_record_name());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::NFMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectRecordInt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectRecordInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordInt::CopyFrom(const ObjectRecordInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectRecordInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordInt::IsInitialized() const {
  return true;
}

void ObjectRecordInt::InternalSwap(ObjectRecordInt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  property_list_.InternalSwap(&other->property_list_);
  record_name_.Swap(&other->record_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectRecordInt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectRecordFloat::InitAsDefaultInstance() {
  ::NFMsg::_ObjectRecordFloat_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ObjectRecordFloat::_Internal {
 public:
  static const ::NFMsg::Ident& player_id(const ObjectRecordFloat* msg);
};

const ::NFMsg::Ident&
ObjectRecordFloat::_Internal::player_id(const ObjectRecordFloat* msg) {
  return *msg->player_id_;
}
ObjectRecordFloat::ObjectRecordFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.ObjectRecordFloat)
}
ObjectRecordFloat::ObjectRecordFloat(const ObjectRecordFloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_name().empty()) {
    record_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_record_name(),
      GetArena());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectRecordFloat)
}

void ObjectRecordFloat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectRecordFloat_NFMsgBase_2eproto.base);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_id_ = nullptr;
}

ObjectRecordFloat::~ObjectRecordFloat() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectRecordFloat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectRecordFloat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  record_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordFloat::ArenaDtor(void* object) {
  ObjectRecordFloat* _this = reinterpret_cast< ObjectRecordFloat* >(object);
  (void)_this;
}
void ObjectRecordFloat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectRecordFloat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectRecordFloat& ObjectRecordFloat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectRecordFloat_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void ObjectRecordFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectRecordFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  record_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectRecordFloat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes record_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_record_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.RecordFloat property_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectRecordFloat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectRecordFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes record_name = 2;
  if (this->record_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_record_name(), target);
  }

  // repeated .NFMsg.RecordFloat property_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_property_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectRecordFloat)
  return target;
}

size_t ObjectRecordFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectRecordFloat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.RecordFloat property_list = 3;
  total_size += 1UL * this->_internal_property_list_size();
  for (const auto& msg : this->property_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes record_name = 2;
  if (this->record_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_record_name());
  }

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectRecordFloat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectRecordFloat)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordFloat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectRecordFloat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectRecordFloat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectRecordFloat)
    MergeFrom(*source);
  }
}

void ObjectRecordFloat::MergeFrom(const ObjectRecordFloat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectRecordFloat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (from.record_name().size() > 0) {
    _internal_set_record_name(from._internal_record_name());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::NFMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectRecordFloat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectRecordFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordFloat::CopyFrom(const ObjectRecordFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectRecordFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordFloat::IsInitialized() const {
  return true;
}

void ObjectRecordFloat::InternalSwap(ObjectRecordFloat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  property_list_.InternalSwap(&other->property_list_);
  record_name_.Swap(&other->record_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectRecordFloat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectRecordString::InitAsDefaultInstance() {
  ::NFMsg::_ObjectRecordString_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ObjectRecordString::_Internal {
 public:
  static const ::NFMsg::Ident& player_id(const ObjectRecordString* msg);
};

const ::NFMsg::Ident&
ObjectRecordString::_Internal::player_id(const ObjectRecordString* msg) {
  return *msg->player_id_;
}
ObjectRecordString::ObjectRecordString(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.ObjectRecordString)
}
ObjectRecordString::ObjectRecordString(const ObjectRecordString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_name().empty()) {
    record_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_record_name(),
      GetArena());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectRecordString)
}

void ObjectRecordString::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectRecordString_NFMsgBase_2eproto.base);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_id_ = nullptr;
}

ObjectRecordString::~ObjectRecordString() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectRecordString)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectRecordString::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  record_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordString::ArenaDtor(void* object) {
  ObjectRecordString* _this = reinterpret_cast< ObjectRecordString* >(object);
  (void)_this;
}
void ObjectRecordString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectRecordString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectRecordString& ObjectRecordString::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectRecordString_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void ObjectRecordString::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectRecordString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  record_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectRecordString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes record_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_record_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.RecordString property_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectRecordString::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectRecordString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes record_name = 2;
  if (this->record_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_record_name(), target);
  }

  // repeated .NFMsg.RecordString property_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_property_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectRecordString)
  return target;
}

size_t ObjectRecordString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectRecordString)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.RecordString property_list = 3;
  total_size += 1UL * this->_internal_property_list_size();
  for (const auto& msg : this->property_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes record_name = 2;
  if (this->record_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_record_name());
  }

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectRecordString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectRecordString)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectRecordString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectRecordString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectRecordString)
    MergeFrom(*source);
  }
}

void ObjectRecordString::MergeFrom(const ObjectRecordString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectRecordString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (from.record_name().size() > 0) {
    _internal_set_record_name(from._internal_record_name());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::NFMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectRecordString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectRecordString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordString::CopyFrom(const ObjectRecordString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectRecordString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordString::IsInitialized() const {
  return true;
}

void ObjectRecordString::InternalSwap(ObjectRecordString* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  property_list_.InternalSwap(&other->property_list_);
  record_name_.Swap(&other->record_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectRecordString::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectRecordObject::InitAsDefaultInstance() {
  ::NFMsg::_ObjectRecordObject_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ObjectRecordObject::_Internal {
 public:
  static const ::NFMsg::Ident& player_id(const ObjectRecordObject* msg);
};

const ::NFMsg::Ident&
ObjectRecordObject::_Internal::player_id(const ObjectRecordObject* msg) {
  return *msg->player_id_;
}
ObjectRecordObject::ObjectRecordObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.ObjectRecordObject)
}
ObjectRecordObject::ObjectRecordObject(const ObjectRecordObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_name().empty()) {
    record_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_record_name(),
      GetArena());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectRecordObject)
}

void ObjectRecordObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectRecordObject_NFMsgBase_2eproto.base);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_id_ = nullptr;
}

ObjectRecordObject::~ObjectRecordObject() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectRecordObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectRecordObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  record_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordObject::ArenaDtor(void* object) {
  ObjectRecordObject* _this = reinterpret_cast< ObjectRecordObject* >(object);
  (void)_this;
}
void ObjectRecordObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectRecordObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectRecordObject& ObjectRecordObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectRecordObject_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void ObjectRecordObject::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectRecordObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  record_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectRecordObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes record_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_record_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.RecordObject property_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectRecordObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectRecordObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes record_name = 2;
  if (this->record_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_record_name(), target);
  }

  // repeated .NFMsg.RecordObject property_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_property_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectRecordObject)
  return target;
}

size_t ObjectRecordObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectRecordObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.RecordObject property_list = 3;
  total_size += 1UL * this->_internal_property_list_size();
  for (const auto& msg : this->property_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes record_name = 2;
  if (this->record_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_record_name());
  }

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectRecordObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectRecordObject)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectRecordObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectRecordObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectRecordObject)
    MergeFrom(*source);
  }
}

void ObjectRecordObject::MergeFrom(const ObjectRecordObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectRecordObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (from.record_name().size() > 0) {
    _internal_set_record_name(from._internal_record_name());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::NFMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectRecordObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectRecordObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordObject::CopyFrom(const ObjectRecordObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectRecordObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordObject::IsInitialized() const {
  return true;
}

void ObjectRecordObject::InternalSwap(ObjectRecordObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  property_list_.InternalSwap(&other->property_list_);
  record_name_.Swap(&other->record_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectRecordObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectRecordVector2::InitAsDefaultInstance() {
  ::NFMsg::_ObjectRecordVector2_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ObjectRecordVector2::_Internal {
 public:
  static const ::NFMsg::Ident& player_id(const ObjectRecordVector2* msg);
};

const ::NFMsg::Ident&
ObjectRecordVector2::_Internal::player_id(const ObjectRecordVector2* msg) {
  return *msg->player_id_;
}
ObjectRecordVector2::ObjectRecordVector2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.ObjectRecordVector2)
}
ObjectRecordVector2::ObjectRecordVector2(const ObjectRecordVector2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_name().empty()) {
    record_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_record_name(),
      GetArena());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectRecordVector2)
}

void ObjectRecordVector2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectRecordVector2_NFMsgBase_2eproto.base);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_id_ = nullptr;
}

ObjectRecordVector2::~ObjectRecordVector2() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectRecordVector2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectRecordVector2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  record_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordVector2::ArenaDtor(void* object) {
  ObjectRecordVector2* _this = reinterpret_cast< ObjectRecordVector2* >(object);
  (void)_this;
}
void ObjectRecordVector2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectRecordVector2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectRecordVector2& ObjectRecordVector2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectRecordVector2_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void ObjectRecordVector2::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectRecordVector2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  record_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectRecordVector2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes record_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_record_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.RecordVector2 property_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectRecordVector2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectRecordVector2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes record_name = 2;
  if (this->record_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_record_name(), target);
  }

  // repeated .NFMsg.RecordVector2 property_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_property_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectRecordVector2)
  return target;
}

size_t ObjectRecordVector2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectRecordVector2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.RecordVector2 property_list = 3;
  total_size += 1UL * this->_internal_property_list_size();
  for (const auto& msg : this->property_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes record_name = 2;
  if (this->record_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_record_name());
  }

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectRecordVector2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectRecordVector2)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordVector2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectRecordVector2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectRecordVector2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectRecordVector2)
    MergeFrom(*source);
  }
}

void ObjectRecordVector2::MergeFrom(const ObjectRecordVector2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectRecordVector2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (from.record_name().size() > 0) {
    _internal_set_record_name(from._internal_record_name());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::NFMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectRecordVector2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectRecordVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordVector2::CopyFrom(const ObjectRecordVector2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectRecordVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordVector2::IsInitialized() const {
  return true;
}

void ObjectRecordVector2::InternalSwap(ObjectRecordVector2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  property_list_.InternalSwap(&other->property_list_);
  record_name_.Swap(&other->record_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectRecordVector2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectRecordVector3::InitAsDefaultInstance() {
  ::NFMsg::_ObjectRecordVector3_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ObjectRecordVector3::_Internal {
 public:
  static const ::NFMsg::Ident& player_id(const ObjectRecordVector3* msg);
};

const ::NFMsg::Ident&
ObjectRecordVector3::_Internal::player_id(const ObjectRecordVector3* msg) {
  return *msg->player_id_;
}
ObjectRecordVector3::ObjectRecordVector3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.ObjectRecordVector3)
}
ObjectRecordVector3::ObjectRecordVector3(const ObjectRecordVector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_name().empty()) {
    record_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_record_name(),
      GetArena());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectRecordVector3)
}

void ObjectRecordVector3::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectRecordVector3_NFMsgBase_2eproto.base);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_id_ = nullptr;
}

ObjectRecordVector3::~ObjectRecordVector3() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectRecordVector3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectRecordVector3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  record_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordVector3::ArenaDtor(void* object) {
  ObjectRecordVector3* _this = reinterpret_cast< ObjectRecordVector3* >(object);
  (void)_this;
}
void ObjectRecordVector3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectRecordVector3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectRecordVector3& ObjectRecordVector3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectRecordVector3_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void ObjectRecordVector3::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectRecordVector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  record_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectRecordVector3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes record_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_record_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.RecordVector3 property_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectRecordVector3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectRecordVector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes record_name = 2;
  if (this->record_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_record_name(), target);
  }

  // repeated .NFMsg.RecordVector3 property_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_property_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectRecordVector3)
  return target;
}

size_t ObjectRecordVector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectRecordVector3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.RecordVector3 property_list = 3;
  total_size += 1UL * this->_internal_property_list_size();
  for (const auto& msg : this->property_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes record_name = 2;
  if (this->record_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_record_name());
  }

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectRecordVector3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectRecordVector3)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordVector3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectRecordVector3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectRecordVector3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectRecordVector3)
    MergeFrom(*source);
  }
}

void ObjectRecordVector3::MergeFrom(const ObjectRecordVector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectRecordVector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (from.record_name().size() > 0) {
    _internal_set_record_name(from._internal_record_name());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::NFMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectRecordVector3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectRecordVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordVector3::CopyFrom(const ObjectRecordVector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectRecordVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordVector3::IsInitialized() const {
  return true;
}

void ObjectRecordVector3::InternalSwap(ObjectRecordVector3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  property_list_.InternalSwap(&other->property_list_);
  record_name_.Swap(&other->record_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectRecordVector3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectRecordSwap::InitAsDefaultInstance() {
  ::NFMsg::_ObjectRecordSwap_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ObjectRecordSwap::_Internal {
 public:
  static const ::NFMsg::Ident& player_id(const ObjectRecordSwap* msg);
};

const ::NFMsg::Ident&
ObjectRecordSwap::_Internal::player_id(const ObjectRecordSwap* msg) {
  return *msg->player_id_;
}
ObjectRecordSwap::ObjectRecordSwap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.ObjectRecordSwap)
}
ObjectRecordSwap::ObjectRecordSwap(const ObjectRecordSwap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  origin_record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_origin_record_name().empty()) {
    origin_record_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_origin_record_name(),
      GetArena());
  }
  target_record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target_record_name().empty()) {
    target_record_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target_record_name(),
      GetArena());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  ::memcpy(&row_origin_, &from.row_origin_,
    static_cast<size_t>(reinterpret_cast<char*>(&row_target_) -
    reinterpret_cast<char*>(&row_origin_)) + sizeof(row_target_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectRecordSwap)
}

void ObjectRecordSwap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectRecordSwap_NFMsgBase_2eproto.base);
  origin_record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&row_target_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(row_target_));
}

ObjectRecordSwap::~ObjectRecordSwap() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectRecordSwap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectRecordSwap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  origin_record_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_record_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordSwap::ArenaDtor(void* object) {
  ObjectRecordSwap* _this = reinterpret_cast< ObjectRecordSwap* >(object);
  (void)_this;
}
void ObjectRecordSwap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectRecordSwap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectRecordSwap& ObjectRecordSwap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectRecordSwap_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void ObjectRecordSwap::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectRecordSwap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  origin_record_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_record_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  ::memset(&row_origin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&row_target_) -
      reinterpret_cast<char*>(&row_origin_)) + sizeof(row_target_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectRecordSwap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes origin_record_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_origin_record_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes target_record_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_target_record_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 row_origin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          row_origin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 row_target = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          row_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectRecordSwap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectRecordSwap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes origin_record_name = 2;
  if (this->origin_record_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_origin_record_name(), target);
  }

  // bytes target_record_name = 3;
  if (this->target_record_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_target_record_name(), target);
  }

  // int32 row_origin = 4;
  if (this->row_origin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_row_origin(), target);
  }

  // int32 row_target = 5;
  if (this->row_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_row_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectRecordSwap)
  return target;
}

size_t ObjectRecordSwap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectRecordSwap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes origin_record_name = 2;
  if (this->origin_record_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_origin_record_name());
  }

  // bytes target_record_name = 3;
  if (this->target_record_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_target_record_name());
  }

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 row_origin = 4;
  if (this->row_origin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_row_origin());
  }

  // int32 row_target = 5;
  if (this->row_target() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_row_target());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectRecordSwap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectRecordSwap)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordSwap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectRecordSwap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectRecordSwap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectRecordSwap)
    MergeFrom(*source);
  }
}

void ObjectRecordSwap::MergeFrom(const ObjectRecordSwap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectRecordSwap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.origin_record_name().size() > 0) {
    _internal_set_origin_record_name(from._internal_origin_record_name());
  }
  if (from.target_record_name().size() > 0) {
    _internal_set_target_record_name(from._internal_target_record_name());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::NFMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.row_origin() != 0) {
    _internal_set_row_origin(from._internal_row_origin());
  }
  if (from.row_target() != 0) {
    _internal_set_row_target(from._internal_row_target());
  }
}

void ObjectRecordSwap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectRecordSwap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordSwap::CopyFrom(const ObjectRecordSwap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectRecordSwap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordSwap::IsInitialized() const {
  return true;
}

void ObjectRecordSwap::InternalSwap(ObjectRecordSwap* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  origin_record_name_.Swap(&other->origin_record_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_record_name_.Swap(&other->target_record_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectRecordSwap, row_target_)
      + sizeof(ObjectRecordSwap::row_target_)
      - PROTOBUF_FIELD_OFFSET(ObjectRecordSwap, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectRecordSwap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectRecordAddRow::InitAsDefaultInstance() {
  ::NFMsg::_ObjectRecordAddRow_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ObjectRecordAddRow::_Internal {
 public:
  static const ::NFMsg::Ident& player_id(const ObjectRecordAddRow* msg);
};

const ::NFMsg::Ident&
ObjectRecordAddRow::_Internal::player_id(const ObjectRecordAddRow* msg) {
  return *msg->player_id_;
}
ObjectRecordAddRow::ObjectRecordAddRow(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  row_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.ObjectRecordAddRow)
}
ObjectRecordAddRow::ObjectRecordAddRow(const ObjectRecordAddRow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      row_data_(from.row_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_name().empty()) {
    record_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_record_name(),
      GetArena());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectRecordAddRow)
}

void ObjectRecordAddRow::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectRecordAddRow_NFMsgBase_2eproto.base);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_id_ = nullptr;
}

ObjectRecordAddRow::~ObjectRecordAddRow() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectRecordAddRow)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectRecordAddRow::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  record_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordAddRow::ArenaDtor(void* object) {
  ObjectRecordAddRow* _this = reinterpret_cast< ObjectRecordAddRow* >(object);
  (void)_this;
}
void ObjectRecordAddRow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectRecordAddRow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectRecordAddRow& ObjectRecordAddRow::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectRecordAddRow_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void ObjectRecordAddRow::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectRecordAddRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_data_.Clear();
  record_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectRecordAddRow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes record_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_record_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.RecordAddRowStruct row_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectRecordAddRow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectRecordAddRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes record_name = 2;
  if (this->record_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_record_name(), target);
  }

  // repeated .NFMsg.RecordAddRowStruct row_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_row_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_row_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectRecordAddRow)
  return target;
}

size_t ObjectRecordAddRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectRecordAddRow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.RecordAddRowStruct row_data = 3;
  total_size += 1UL * this->_internal_row_data_size();
  for (const auto& msg : this->row_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes record_name = 2;
  if (this->record_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_record_name());
  }

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectRecordAddRow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectRecordAddRow)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordAddRow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectRecordAddRow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectRecordAddRow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectRecordAddRow)
    MergeFrom(*source);
  }
}

void ObjectRecordAddRow::MergeFrom(const ObjectRecordAddRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectRecordAddRow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  row_data_.MergeFrom(from.row_data_);
  if (from.record_name().size() > 0) {
    _internal_set_record_name(from._internal_record_name());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::NFMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectRecordAddRow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectRecordAddRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordAddRow::CopyFrom(const ObjectRecordAddRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectRecordAddRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordAddRow::IsInitialized() const {
  return true;
}

void ObjectRecordAddRow::InternalSwap(ObjectRecordAddRow* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  row_data_.InternalSwap(&other->row_data_);
  record_name_.Swap(&other->record_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectRecordAddRow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectRecordRemove::InitAsDefaultInstance() {
  ::NFMsg::_ObjectRecordRemove_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ObjectRecordRemove::_Internal {
 public:
  static const ::NFMsg::Ident& player_id(const ObjectRecordRemove* msg);
};

const ::NFMsg::Ident&
ObjectRecordRemove::_Internal::player_id(const ObjectRecordRemove* msg) {
  return *msg->player_id_;
}
ObjectRecordRemove::ObjectRecordRemove(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  remove_row_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.ObjectRecordRemove)
}
ObjectRecordRemove::ObjectRecordRemove(const ObjectRecordRemove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      remove_row_(from.remove_row_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_name().empty()) {
    record_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_record_name(),
      GetArena());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectRecordRemove)
}

void ObjectRecordRemove::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectRecordRemove_NFMsgBase_2eproto.base);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_id_ = nullptr;
}

ObjectRecordRemove::~ObjectRecordRemove() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectRecordRemove)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectRecordRemove::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  record_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordRemove::ArenaDtor(void* object) {
  ObjectRecordRemove* _this = reinterpret_cast< ObjectRecordRemove* >(object);
  (void)_this;
}
void ObjectRecordRemove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectRecordRemove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectRecordRemove& ObjectRecordRemove::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectRecordRemove_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void ObjectRecordRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectRecordRemove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remove_row_.Clear();
  record_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectRecordRemove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes record_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_record_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 remove_row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_remove_row(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_remove_row(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectRecordRemove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectRecordRemove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes record_name = 2;
  if (this->record_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_record_name(), target);
  }

  // repeated int32 remove_row = 3;
  {
    int byte_size = _remove_row_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_remove_row(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectRecordRemove)
  return target;
}

size_t ObjectRecordRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectRecordRemove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 remove_row = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->remove_row_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _remove_row_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes record_name = 2;
  if (this->record_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_record_name());
  }

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectRecordRemove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectRecordRemove)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordRemove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectRecordRemove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectRecordRemove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectRecordRemove)
    MergeFrom(*source);
  }
}

void ObjectRecordRemove::MergeFrom(const ObjectRecordRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectRecordRemove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  remove_row_.MergeFrom(from.remove_row_);
  if (from.record_name().size() > 0) {
    _internal_set_record_name(from._internal_record_name());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::NFMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectRecordRemove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectRecordRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordRemove::CopyFrom(const ObjectRecordRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectRecordRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordRemove::IsInitialized() const {
  return true;
}

void ObjectRecordRemove::InternalSwap(ObjectRecordRemove* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  remove_row_.InternalSwap(&other->remove_row_);
  record_name_.Swap(&other->record_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectRecordRemove::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectPropertyList::InitAsDefaultInstance() {
  ::NFMsg::_ObjectPropertyList_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ObjectPropertyList::_Internal {
 public:
  static const ::NFMsg::Ident& player_id(const ObjectPropertyList* msg);
};

const ::NFMsg::Ident&
ObjectPropertyList::_Internal::player_id(const ObjectPropertyList* msg) {
  return *msg->player_id_;
}
ObjectPropertyList::ObjectPropertyList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_int_list_(arena),
  property_float_list_(arena),
  property_string_list_(arena),
  property_object_list_(arena),
  property_vector2_list_(arena),
  property_vector3_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.ObjectPropertyList)
}
ObjectPropertyList::ObjectPropertyList(const ObjectPropertyList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_int_list_(from.property_int_list_),
      property_float_list_(from.property_float_list_),
      property_string_list_(from.property_string_list_),
      property_object_list_(from.property_object_list_),
      property_vector2_list_(from.property_vector2_list_),
      property_vector3_list_(from.property_vector3_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectPropertyList)
}

void ObjectPropertyList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectPropertyList_NFMsgBase_2eproto.base);
  player_id_ = nullptr;
}

ObjectPropertyList::~ObjectPropertyList() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectPropertyList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectPropertyList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectPropertyList::ArenaDtor(void* object) {
  ObjectPropertyList* _this = reinterpret_cast< ObjectPropertyList* >(object);
  (void)_this;
}
void ObjectPropertyList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectPropertyList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectPropertyList& ObjectPropertyList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectPropertyList_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void ObjectPropertyList::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectPropertyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_int_list_.Clear();
  property_float_list_.Clear();
  property_string_list_.Clear();
  property_object_list_.Clear();
  property_vector2_list_.Clear();
  property_vector3_list_.Clear();
  if (GetArena() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectPropertyList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.PropertyInt property_int_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_int_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.PropertyFloat property_float_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_float_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.PropertyString property_string_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_string_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.PropertyObject property_object_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_object_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.PropertyVector2 property_vector2_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_vector2_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.PropertyVector3 property_vector3_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_vector3_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectPropertyList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectPropertyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // repeated .NFMsg.PropertyInt property_int_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_int_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_property_int_list(i), target, stream);
  }

  // repeated .NFMsg.PropertyFloat property_float_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_float_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_property_float_list(i), target, stream);
  }

  // repeated .NFMsg.PropertyString property_string_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_string_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_property_string_list(i), target, stream);
  }

  // repeated .NFMsg.PropertyObject property_object_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_object_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_property_object_list(i), target, stream);
  }

  // repeated .NFMsg.PropertyVector2 property_vector2_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_vector2_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_property_vector2_list(i), target, stream);
  }

  // repeated .NFMsg.PropertyVector3 property_vector3_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_vector3_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_property_vector3_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectPropertyList)
  return target;
}

size_t ObjectPropertyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectPropertyList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.PropertyInt property_int_list = 2;
  total_size += 1UL * this->_internal_property_int_list_size();
  for (const auto& msg : this->property_int_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .NFMsg.PropertyFloat property_float_list = 3;
  total_size += 1UL * this->_internal_property_float_list_size();
  for (const auto& msg : this->property_float_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .NFMsg.PropertyString property_string_list = 4;
  total_size += 1UL * this->_internal_property_string_list_size();
  for (const auto& msg : this->property_string_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .NFMsg.PropertyObject property_object_list = 5;
  total_size += 1UL * this->_internal_property_object_list_size();
  for (const auto& msg : this->property_object_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .NFMsg.PropertyVector2 property_vector2_list = 6;
  total_size += 1UL * this->_internal_property_vector2_list_size();
  for (const auto& msg : this->property_vector2_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .NFMsg.PropertyVector3 property_vector3_list = 7;
  total_size += 1UL * this->_internal_property_vector3_list_size();
  for (const auto& msg : this->property_vector3_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectPropertyList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectPropertyList)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectPropertyList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectPropertyList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectPropertyList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectPropertyList)
    MergeFrom(*source);
  }
}

void ObjectPropertyList::MergeFrom(const ObjectPropertyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectPropertyList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_int_list_.MergeFrom(from.property_int_list_);
  property_float_list_.MergeFrom(from.property_float_list_);
  property_string_list_.MergeFrom(from.property_string_list_);
  property_object_list_.MergeFrom(from.property_object_list_);
  property_vector2_list_.MergeFrom(from.property_vector2_list_);
  property_vector3_list_.MergeFrom(from.property_vector3_list_);
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::NFMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectPropertyList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectPropertyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyList::CopyFrom(const ObjectPropertyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectPropertyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyList::IsInitialized() const {
  return true;
}

void ObjectPropertyList::InternalSwap(ObjectPropertyList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  property_int_list_.InternalSwap(&other->property_int_list_);
  property_float_list_.InternalSwap(&other->property_float_list_);
  property_string_list_.InternalSwap(&other->property_string_list_);
  property_object_list_.InternalSwap(&other->property_object_list_);
  property_vector2_list_.InternalSwap(&other->property_vector2_list_);
  property_vector3_list_.InternalSwap(&other->property_vector3_list_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectPropertyList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiObjectPropertyList::InitAsDefaultInstance() {
}
class MultiObjectPropertyList::_Internal {
 public:
};

MultiObjectPropertyList::MultiObjectPropertyList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  multi_player_property_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.MultiObjectPropertyList)
}
MultiObjectPropertyList::MultiObjectPropertyList(const MultiObjectPropertyList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      multi_player_property_(from.multi_player_property_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.MultiObjectPropertyList)
}

void MultiObjectPropertyList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiObjectPropertyList_NFMsgBase_2eproto.base);
}

MultiObjectPropertyList::~MultiObjectPropertyList() {
  // @@protoc_insertion_point(destructor:NFMsg.MultiObjectPropertyList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiObjectPropertyList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MultiObjectPropertyList::ArenaDtor(void* object) {
  MultiObjectPropertyList* _this = reinterpret_cast< MultiObjectPropertyList* >(object);
  (void)_this;
}
void MultiObjectPropertyList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiObjectPropertyList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiObjectPropertyList& MultiObjectPropertyList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiObjectPropertyList_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void MultiObjectPropertyList::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.MultiObjectPropertyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multi_player_property_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiObjectPropertyList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .NFMsg.ObjectPropertyList multi_player_property = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_multi_player_property(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiObjectPropertyList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.MultiObjectPropertyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.ObjectPropertyList multi_player_property = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_multi_player_property_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_multi_player_property(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.MultiObjectPropertyList)
  return target;
}

size_t MultiObjectPropertyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.MultiObjectPropertyList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.ObjectPropertyList multi_player_property = 1;
  total_size += 1UL * this->_internal_multi_player_property_size();
  for (const auto& msg : this->multi_player_property_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiObjectPropertyList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.MultiObjectPropertyList)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiObjectPropertyList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiObjectPropertyList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.MultiObjectPropertyList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.MultiObjectPropertyList)
    MergeFrom(*source);
  }
}

void MultiObjectPropertyList::MergeFrom(const MultiObjectPropertyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.MultiObjectPropertyList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  multi_player_property_.MergeFrom(from.multi_player_property_);
}

void MultiObjectPropertyList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.MultiObjectPropertyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiObjectPropertyList::CopyFrom(const MultiObjectPropertyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.MultiObjectPropertyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiObjectPropertyList::IsInitialized() const {
  return true;
}

void MultiObjectPropertyList::InternalSwap(MultiObjectPropertyList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  multi_player_property_.InternalSwap(&other->multi_player_property_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiObjectPropertyList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectRecordList::InitAsDefaultInstance() {
  ::NFMsg::_ObjectRecordList_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ObjectRecordList::_Internal {
 public:
  static const ::NFMsg::Ident& player_id(const ObjectRecordList* msg);
};

const ::NFMsg::Ident&
ObjectRecordList::_Internal::player_id(const ObjectRecordList* msg) {
  return *msg->player_id_;
}
ObjectRecordList::ObjectRecordList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  record_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.ObjectRecordList)
}
ObjectRecordList::ObjectRecordList(const ObjectRecordList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      record_list_(from.record_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectRecordList)
}

void ObjectRecordList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectRecordList_NFMsgBase_2eproto.base);
  player_id_ = nullptr;
}

ObjectRecordList::~ObjectRecordList() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectRecordList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectRecordList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordList::ArenaDtor(void* object) {
  ObjectRecordList* _this = reinterpret_cast< ObjectRecordList* >(object);
  (void)_this;
}
void ObjectRecordList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectRecordList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectRecordList& ObjectRecordList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectRecordList_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void ObjectRecordList::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectRecordList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_list_.Clear();
  if (GetArena() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectRecordList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.ObjectRecordBase record_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectRecordList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectRecordList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // repeated .NFMsg.ObjectRecordBase record_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_record_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectRecordList)
  return target;
}

size_t ObjectRecordList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectRecordList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.ObjectRecordBase record_list = 2;
  total_size += 1UL * this->_internal_record_list_size();
  for (const auto& msg : this->record_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectRecordList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectRecordList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectRecordList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectRecordList)
    MergeFrom(*source);
  }
}

void ObjectRecordList::MergeFrom(const ObjectRecordList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  record_list_.MergeFrom(from.record_list_);
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::NFMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectRecordList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordList::CopyFrom(const ObjectRecordList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordList::IsInitialized() const {
  return true;
}

void ObjectRecordList::InternalSwap(ObjectRecordList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  record_list_.InternalSwap(&other->record_list_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectRecordList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiObjectRecordList::InitAsDefaultInstance() {
}
class MultiObjectRecordList::_Internal {
 public:
};

MultiObjectRecordList::MultiObjectRecordList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  multi_player_record_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.MultiObjectRecordList)
}
MultiObjectRecordList::MultiObjectRecordList(const MultiObjectRecordList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      multi_player_record_(from.multi_player_record_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.MultiObjectRecordList)
}

void MultiObjectRecordList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiObjectRecordList_NFMsgBase_2eproto.base);
}

MultiObjectRecordList::~MultiObjectRecordList() {
  // @@protoc_insertion_point(destructor:NFMsg.MultiObjectRecordList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiObjectRecordList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MultiObjectRecordList::ArenaDtor(void* object) {
  MultiObjectRecordList* _this = reinterpret_cast< MultiObjectRecordList* >(object);
  (void)_this;
}
void MultiObjectRecordList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiObjectRecordList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiObjectRecordList& MultiObjectRecordList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiObjectRecordList_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void MultiObjectRecordList::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.MultiObjectRecordList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multi_player_record_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiObjectRecordList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .NFMsg.ObjectRecordList multi_player_record = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_multi_player_record(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiObjectRecordList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.MultiObjectRecordList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.ObjectRecordList multi_player_record = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_multi_player_record_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_multi_player_record(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.MultiObjectRecordList)
  return target;
}

size_t MultiObjectRecordList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.MultiObjectRecordList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.ObjectRecordList multi_player_record = 1;
  total_size += 1UL * this->_internal_multi_player_record_size();
  for (const auto& msg : this->multi_player_record_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiObjectRecordList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.MultiObjectRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiObjectRecordList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiObjectRecordList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.MultiObjectRecordList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.MultiObjectRecordList)
    MergeFrom(*source);
  }
}

void MultiObjectRecordList::MergeFrom(const MultiObjectRecordList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.MultiObjectRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  multi_player_record_.MergeFrom(from.multi_player_record_);
}

void MultiObjectRecordList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.MultiObjectRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiObjectRecordList::CopyFrom(const MultiObjectRecordList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.MultiObjectRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiObjectRecordList::IsInitialized() const {
  return true;
}

void MultiObjectRecordList::InternalSwap(MultiObjectRecordList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  multi_player_record_.InternalSwap(&other->multi_player_record_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiObjectRecordList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MsgBase::InitAsDefaultInstance() {
  ::NFMsg::_MsgBase_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_MsgBase_default_instance_._instance.get_mutable()->hash_ident_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class MsgBase::_Internal {
 public:
  static const ::NFMsg::Ident& player_id(const MsgBase* msg);
  static const ::NFMsg::Ident& hash_ident(const MsgBase* msg);
};

const ::NFMsg::Ident&
MsgBase::_Internal::player_id(const MsgBase* msg) {
  return *msg->player_id_;
}
const ::NFMsg::Ident&
MsgBase::_Internal::hash_ident(const MsgBase* msg) {
  return *msg->hash_ident_;
}
MsgBase::MsgBase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_client_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.MsgBase)
}
MsgBase::MsgBase(const MsgBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      player_client_list_(from.player_client_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_data().empty()) {
    msg_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_msg_data(),
      GetArena());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_hash_ident()) {
    hash_ident_ = new ::NFMsg::Ident(*from.hash_ident_);
  } else {
    hash_ident_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.MsgBase)
}

void MsgBase::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgBase_NFMsgBase_2eproto.base);
  msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hash_ident_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(hash_ident_));
}

MsgBase::~MsgBase() {
  // @@protoc_insertion_point(destructor:NFMsg.MsgBase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgBase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msg_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete hash_ident_;
}

void MsgBase::ArenaDtor(void* object) {
  MsgBase* _this = reinterpret_cast< MsgBase* >(object);
  (void)_this;
}
void MsgBase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgBase& MsgBase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgBase_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void MsgBase::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.MsgBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_client_list_.Clear();
  msg_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArena() == nullptr && hash_ident_ != nullptr) {
    delete hash_ident_;
  }
  hash_ident_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.Ident player_Client_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_client_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .NFMsg.Ident hash_ident = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_hash_ident(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgBase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.MsgBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes msg_data = 2;
  if (this->msg_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_msg_data(), target);
  }

  // repeated .NFMsg.Ident player_Client_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_client_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_player_client_list(i), target, stream);
  }

  // .NFMsg.Ident hash_ident = 4;
  if (this->has_hash_ident()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::hash_ident(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.MsgBase)
  return target;
}

size_t MsgBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.MsgBase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.Ident player_Client_list = 3;
  total_size += 1UL * this->_internal_player_client_list_size();
  for (const auto& msg : this->player_client_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes msg_data = 2;
  if (this->msg_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_data());
  }

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .NFMsg.Ident hash_ident = 4;
  if (this->has_hash_ident()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hash_ident_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgBase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.MsgBase)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgBase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgBase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.MsgBase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.MsgBase)
    MergeFrom(*source);
  }
}

void MsgBase::MergeFrom(const MsgBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.MsgBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_client_list_.MergeFrom(from.player_client_list_);
  if (from.msg_data().size() > 0) {
    _internal_set_msg_data(from._internal_msg_data());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::NFMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_hash_ident()) {
    _internal_mutable_hash_ident()->::NFMsg::Ident::MergeFrom(from._internal_hash_ident());
  }
}

void MsgBase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.MsgBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBase::CopyFrom(const MsgBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.MsgBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBase::IsInitialized() const {
  return true;
}

void MsgBase::InternalSwap(MsgBase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  player_client_list_.InternalSwap(&other->player_client_list_);
  msg_data_.Swap(&other->msg_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgBase, hash_ident_)
      + sizeof(MsgBase::hash_ident_)
      - PROTOBUF_FIELD_OFFSET(MsgBase, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckLagTest::InitAsDefaultInstance() {
}
class ReqAckLagTest::_Internal {
 public:
};

ReqAckLagTest::ReqAckLagTest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.ReqAckLagTest)
}
ReqAckLagTest::ReqAckLagTest(const ReqAckLagTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckLagTest)
}

void ReqAckLagTest::SharedCtor() {
  index_ = 0;
}

ReqAckLagTest::~ReqAckLagTest() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckLagTest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqAckLagTest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReqAckLagTest::ArenaDtor(void* object) {
  ReqAckLagTest* _this = reinterpret_cast< ReqAckLagTest* >(object);
  (void)_this;
}
void ReqAckLagTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqAckLagTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckLagTest& ReqAckLagTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckLagTest_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void ReqAckLagTest::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckLagTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqAckLagTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckLagTest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckLagTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckLagTest)
  return target;
}

size_t ReqAckLagTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckLagTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckLagTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckLagTest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckLagTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckLagTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckLagTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckLagTest)
    MergeFrom(*source);
  }
}

void ReqAckLagTest::MergeFrom(const ReqAckLagTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckLagTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void ReqAckLagTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckLagTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckLagTest::CopyFrom(const ReqAckLagTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckLagTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckLagTest::IsInitialized() const {
  return true;
}

void ReqAckLagTest::InternalSwap(ReqAckLagTest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckLagTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqCommand::InitAsDefaultInstance() {
  ::NFMsg::_ReqCommand_default_instance_._instance.get_mutable()->control_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqCommand_default_instance_._instance.get_mutable()->command_value_object_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqCommand::_Internal {
 public:
  static const ::NFMsg::Ident& control_id(const ReqCommand* msg);
  static const ::NFMsg::Ident& command_value_object(const ReqCommand* msg);
};

const ::NFMsg::Ident&
ReqCommand::_Internal::control_id(const ReqCommand* msg) {
  return *msg->control_id_;
}
const ::NFMsg::Ident&
ReqCommand::_Internal::command_value_object(const ReqCommand* msg) {
  return *msg->command_value_object_;
}
ReqCommand::ReqCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NFMsg.ReqCommand)
}
ReqCommand::ReqCommand(const ReqCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  command_str_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_command_str_value().empty()) {
    command_str_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_command_str_value(),
      GetArena());
  }
  command_value_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_command_value_str().empty()) {
    command_value_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_command_value_str(),
      GetArena());
  }
  if (from._internal_has_control_id()) {
    control_id_ = new ::NFMsg::Ident(*from.control_id_);
  } else {
    control_id_ = nullptr;
  }
  if (from._internal_has_command_value_object()) {
    command_value_object_ = new ::NFMsg::Ident(*from.command_value_object_);
  } else {
    command_value_object_ = nullptr;
  }
  ::memcpy(&command_value_int_, &from.command_value_int_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_) -
    reinterpret_cast<char*>(&command_value_int_)) + sizeof(col_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqCommand)
}

void ReqCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqCommand_NFMsgBase_2eproto.base);
  command_str_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_value_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&control_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&control_id_)) + sizeof(col_));
}

ReqCommand::~ReqCommand() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  command_str_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_value_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete control_id_;
  if (this != internal_default_instance()) delete command_value_object_;
}

void ReqCommand::ArenaDtor(void* object) {
  ReqCommand* _this = reinterpret_cast< ReqCommand* >(object);
  (void)_this;
}
void ReqCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqCommand& ReqCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqCommand_NFMsgBase_2eproto.base);
  return *internal_default_instance();
}


void ReqCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_str_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  command_value_str_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && control_id_ != nullptr) {
    delete control_id_;
  }
  control_id_ = nullptr;
  if (GetArena() == nullptr && command_value_object_ != nullptr) {
    delete command_value_object_;
  }
  command_value_object_ = nullptr;
  ::memset(&command_value_int_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&command_value_int_)) + sizeof(col_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident control_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_control_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.ReqCommand.EGameCommandType command_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_command_id(static_cast<::NFMsg::ReqCommand_EGameCommandType>(val));
        } else goto handle_unusual;
        continue;
      // bytes command_str_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_command_str_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 command_value_int = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          command_value_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double command_value_float = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          command_value_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bytes command_value_str = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_command_value_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Ident command_value_object = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_command_value_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 row = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 col = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident control_id = 1;
  if (this->has_control_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::control_id(this), target, stream);
  }

  // .NFMsg.ReqCommand.EGameCommandType command_id = 2;
  if (this->command_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_command_id(), target);
  }

  // bytes command_str_value = 3;
  if (this->command_str_value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_command_str_value(), target);
  }

  // int64 command_value_int = 4;
  if (this->command_value_int() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_command_value_int(), target);
  }

  // double command_value_float = 5;
  if (!(this->command_value_float() <= 0 && this->command_value_float() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_command_value_float(), target);
  }

  // bytes command_value_str = 6;
  if (this->command_value_str().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_command_value_str(), target);
  }

  // .NFMsg.Ident command_value_object = 7;
  if (this->has_command_value_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::command_value_object(this), target, stream);
  }

  // int32 row = 8;
  if (this->row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_row(), target);
  }

  // int32 col = 9;
  if (this->col() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_col(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqCommand)
  return target;
}

size_t ReqCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes command_str_value = 3;
  if (this->command_str_value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_command_str_value());
  }

  // bytes command_value_str = 6;
  if (this->command_value_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_command_value_str());
  }

  // .NFMsg.Ident control_id = 1;
  if (this->has_control_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *control_id_);
  }

  // .NFMsg.Ident command_value_object = 7;
  if (this->has_command_value_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *command_value_object_);
  }

  // int64 command_value_int = 4;
  if (this->command_value_int() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_command_value_int());
  }

  // double command_value_float = 5;
  if (!(this->command_value_float() <= 0 && this->command_value_float() >= 0)) {
    total_size += 1 + 8;
  }

  // .NFMsg.ReqCommand.EGameCommandType command_id = 2;
  if (this->command_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command_id());
  }

  // int32 row = 8;
  if (this->row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_row());
  }

  // int32 col = 9;
  if (this->col() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_col());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqCommand)
    MergeFrom(*source);
  }
}

void ReqCommand::MergeFrom(const ReqCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.command_str_value().size() > 0) {
    _internal_set_command_str_value(from._internal_command_str_value());
  }
  if (from.command_value_str().size() > 0) {
    _internal_set_command_value_str(from._internal_command_value_str());
  }
  if (from.has_control_id()) {
    _internal_mutable_control_id()->::NFMsg::Ident::MergeFrom(from._internal_control_id());
  }
  if (from.has_command_value_object()) {
    _internal_mutable_command_value_object()->::NFMsg::Ident::MergeFrom(from._internal_command_value_object());
  }
  if (from.command_value_int() != 0) {
    _internal_set_command_value_int(from._internal_command_value_int());
  }
  if (!(from.command_value_float() <= 0 && from.command_value_float() >= 0)) {
    _internal_set_command_value_float(from._internal_command_value_float());
  }
  if (from.command_id() != 0) {
    _internal_set_command_id(from._internal_command_id());
  }
  if (from.row() != 0) {
    _internal_set_row(from._internal_row());
  }
  if (from.col() != 0) {
    _internal_set_col(from._internal_col());
  }
}

void ReqCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCommand::CopyFrom(const ReqCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCommand::IsInitialized() const {
  return true;
}

void ReqCommand::InternalSwap(ReqCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  command_str_value_.Swap(&other->command_str_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  command_value_str_.Swap(&other->command_value_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqCommand, col_)
      + sizeof(ReqCommand::col_)
      - PROTOBUF_FIELD_OFFSET(ReqCommand, control_id_)>(
          reinterpret_cast<char*>(&control_id_),
          reinterpret_cast<char*>(&other->control_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NFMsg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NFMsg::Ident* Arena::CreateMaybeMessage< ::NFMsg::Ident >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::Ident >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::Vector2* Arena::CreateMaybeMessage< ::NFMsg::Vector2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::Vector2 >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::Vector3* Arena::CreateMaybeMessage< ::NFMsg::Vector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::Vector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::PropertyInt* Arena::CreateMaybeMessage< ::NFMsg::PropertyInt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::PropertyInt >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::PropertyFloat* Arena::CreateMaybeMessage< ::NFMsg::PropertyFloat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::PropertyFloat >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::PropertyString* Arena::CreateMaybeMessage< ::NFMsg::PropertyString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::PropertyString >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::PropertyObject* Arena::CreateMaybeMessage< ::NFMsg::PropertyObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::PropertyObject >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::PropertyVector2* Arena::CreateMaybeMessage< ::NFMsg::PropertyVector2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::PropertyVector2 >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::PropertyVector3* Arena::CreateMaybeMessage< ::NFMsg::PropertyVector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::PropertyVector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::RecordInt* Arena::CreateMaybeMessage< ::NFMsg::RecordInt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::RecordInt >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::RecordFloat* Arena::CreateMaybeMessage< ::NFMsg::RecordFloat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::RecordFloat >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::RecordString* Arena::CreateMaybeMessage< ::NFMsg::RecordString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::RecordString >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::RecordObject* Arena::CreateMaybeMessage< ::NFMsg::RecordObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::RecordObject >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::RecordVector2* Arena::CreateMaybeMessage< ::NFMsg::RecordVector2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::RecordVector2 >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::RecordVector3* Arena::CreateMaybeMessage< ::NFMsg::RecordVector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::RecordVector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::RecordAddRowStruct* Arena::CreateMaybeMessage< ::NFMsg::RecordAddRowStruct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::RecordAddRowStruct >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ObjectRecordBase* Arena::CreateMaybeMessage< ::NFMsg::ObjectRecordBase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::ObjectRecordBase >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ObjectPropertyInt* Arena::CreateMaybeMessage< ::NFMsg::ObjectPropertyInt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::ObjectPropertyInt >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ObjectPropertyFloat* Arena::CreateMaybeMessage< ::NFMsg::ObjectPropertyFloat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::ObjectPropertyFloat >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ObjectPropertyString* Arena::CreateMaybeMessage< ::NFMsg::ObjectPropertyString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::ObjectPropertyString >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ObjectPropertyObject* Arena::CreateMaybeMessage< ::NFMsg::ObjectPropertyObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::ObjectPropertyObject >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ObjectPropertyVector2* Arena::CreateMaybeMessage< ::NFMsg::ObjectPropertyVector2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::ObjectPropertyVector2 >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ObjectPropertyVector3* Arena::CreateMaybeMessage< ::NFMsg::ObjectPropertyVector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::ObjectPropertyVector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ObjectRecordInt* Arena::CreateMaybeMessage< ::NFMsg::ObjectRecordInt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::ObjectRecordInt >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ObjectRecordFloat* Arena::CreateMaybeMessage< ::NFMsg::ObjectRecordFloat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::ObjectRecordFloat >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ObjectRecordString* Arena::CreateMaybeMessage< ::NFMsg::ObjectRecordString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::ObjectRecordString >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ObjectRecordObject* Arena::CreateMaybeMessage< ::NFMsg::ObjectRecordObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::ObjectRecordObject >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ObjectRecordVector2* Arena::CreateMaybeMessage< ::NFMsg::ObjectRecordVector2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::ObjectRecordVector2 >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ObjectRecordVector3* Arena::CreateMaybeMessage< ::NFMsg::ObjectRecordVector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::ObjectRecordVector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ObjectRecordSwap* Arena::CreateMaybeMessage< ::NFMsg::ObjectRecordSwap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::ObjectRecordSwap >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ObjectRecordAddRow* Arena::CreateMaybeMessage< ::NFMsg::ObjectRecordAddRow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::ObjectRecordAddRow >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ObjectRecordRemove* Arena::CreateMaybeMessage< ::NFMsg::ObjectRecordRemove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::ObjectRecordRemove >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ObjectPropertyList* Arena::CreateMaybeMessage< ::NFMsg::ObjectPropertyList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::ObjectPropertyList >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::MultiObjectPropertyList* Arena::CreateMaybeMessage< ::NFMsg::MultiObjectPropertyList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::MultiObjectPropertyList >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ObjectRecordList* Arena::CreateMaybeMessage< ::NFMsg::ObjectRecordList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::ObjectRecordList >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::MultiObjectRecordList* Arena::CreateMaybeMessage< ::NFMsg::MultiObjectRecordList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::MultiObjectRecordList >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::MsgBase* Arena::CreateMaybeMessage< ::NFMsg::MsgBase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::MsgBase >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckLagTest* Arena::CreateMaybeMessage< ::NFMsg::ReqAckLagTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::ReqAckLagTest >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqCommand* Arena::CreateMaybeMessage< ::NFMsg::ReqCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NFMsg::ReqCommand >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
