// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgURl.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NFMsgURl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NFMsg {

namespace {

const ::google::protobuf::Descriptor* PackSURLParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackSURLParam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_NFMsgURl_2eproto() {
  protobuf_AddDesc_NFMsgURl_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NFMsgURl.proto");
  GOOGLE_CHECK(file != NULL);
  PackSURLParam_descriptor_ = file->message_type(0);
  static const int PackSURLParam_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackSURLParam, strurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackSURLParam, strgetparams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackSURLParam, strbodydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackSURLParam, strcookies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackSURLParam, ftimeoutsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackSURLParam, strrsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackSURLParam, nret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackSURLParam, nreqid_),
  };
  PackSURLParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackSURLParam_descriptor_,
      PackSURLParam::default_instance_,
      PackSURLParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackSURLParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackSURLParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackSURLParam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NFMsgURl_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackSURLParam_descriptor_, &PackSURLParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NFMsgURl_2eproto() {
  delete PackSURLParam::default_instance_;
  delete PackSURLParam_reflection_;
}

void protobuf_AddDesc_NFMsgURl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016NFMsgURl.proto\022\005NFMsg\"\241\001\n\rPackSURLPara"
    "m\022\016\n\006strUrl\030\001 \002(\014\022\024\n\014strGetParams\030\002 \002(\014\022"
    "\023\n\013strBodyData\030\003 \002(\014\022\022\n\nstrCookies\030\004 \002(\014"
    "\022\023\n\013fTimeOutSec\030\005 \002(\001\022\016\n\006strRsp\030\006 \002(\014\022\014\n"
    "\004nRet\030\007 \002(\003\022\016\n\006nReqID\030\010 \002(\003", 187);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NFMsgURl.proto", &protobuf_RegisterTypes);
  PackSURLParam::default_instance_ = new PackSURLParam();
  PackSURLParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NFMsgURl_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NFMsgURl_2eproto {
  StaticDescriptorInitializer_NFMsgURl_2eproto() {
    protobuf_AddDesc_NFMsgURl_2eproto();
  }
} static_descriptor_initializer_NFMsgURl_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PackSURLParam::kStrUrlFieldNumber;
const int PackSURLParam::kStrGetParamsFieldNumber;
const int PackSURLParam::kStrBodyDataFieldNumber;
const int PackSURLParam::kStrCookiesFieldNumber;
const int PackSURLParam::kFTimeOutSecFieldNumber;
const int PackSURLParam::kStrRspFieldNumber;
const int PackSURLParam::kNRetFieldNumber;
const int PackSURLParam::kNReqIDFieldNumber;
#endif  // !_MSC_VER

PackSURLParam::PackSURLParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PackSURLParam::InitAsDefaultInstance() {
}

PackSURLParam::PackSURLParam(const PackSURLParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PackSURLParam::SharedCtor() {
  _cached_size_ = 0;
  strurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strgetparams_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strbodydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strcookies_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ftimeoutsec_ = 0;
  strrsp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nret_ = GOOGLE_LONGLONG(0);
  nreqid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackSURLParam::~PackSURLParam() {
  SharedDtor();
}

void PackSURLParam::SharedDtor() {
  if (strurl_ != &::google::protobuf::internal::kEmptyString) {
    delete strurl_;
  }
  if (strgetparams_ != &::google::protobuf::internal::kEmptyString) {
    delete strgetparams_;
  }
  if (strbodydata_ != &::google::protobuf::internal::kEmptyString) {
    delete strbodydata_;
  }
  if (strcookies_ != &::google::protobuf::internal::kEmptyString) {
    delete strcookies_;
  }
  if (strrsp_ != &::google::protobuf::internal::kEmptyString) {
    delete strrsp_;
  }
  if (this != default_instance_) {
  }
}

void PackSURLParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackSURLParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackSURLParam_descriptor_;
}

const PackSURLParam& PackSURLParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgURl_2eproto();
  return *default_instance_;
}

PackSURLParam* PackSURLParam::default_instance_ = NULL;

PackSURLParam* PackSURLParam::New() const {
  return new PackSURLParam;
}

void PackSURLParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strurl()) {
      if (strurl_ != &::google::protobuf::internal::kEmptyString) {
        strurl_->clear();
      }
    }
    if (has_strgetparams()) {
      if (strgetparams_ != &::google::protobuf::internal::kEmptyString) {
        strgetparams_->clear();
      }
    }
    if (has_strbodydata()) {
      if (strbodydata_ != &::google::protobuf::internal::kEmptyString) {
        strbodydata_->clear();
      }
    }
    if (has_strcookies()) {
      if (strcookies_ != &::google::protobuf::internal::kEmptyString) {
        strcookies_->clear();
      }
    }
    ftimeoutsec_ = 0;
    if (has_strrsp()) {
      if (strrsp_ != &::google::protobuf::internal::kEmptyString) {
        strrsp_->clear();
      }
    }
    nret_ = GOOGLE_LONGLONG(0);
    nreqid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackSURLParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes strUrl = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strurl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strGetParams;
        break;
      }

      // required bytes strGetParams = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strGetParams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strgetparams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strBodyData;
        break;
      }

      // required bytes strBodyData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strBodyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strbodydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strCookies;
        break;
      }

      // required bytes strCookies = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strCookies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strcookies()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_fTimeOutSec;
        break;
      }

      // required double fTimeOutSec = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fTimeOutSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ftimeoutsec_)));
          set_has_ftimeoutsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_strRsp;
        break;
      }

      // required bytes strRsp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_nRet;
        break;
      }

      // required int64 nRet = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nRet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nret_)));
          set_has_nret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_nReqID;
        break;
      }

      // required int64 nReqID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nReqID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nreqid_)));
          set_has_nreqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PackSURLParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes strUrl = 1;
  if (has_strurl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->strurl(), output);
  }

  // required bytes strGetParams = 2;
  if (has_strgetparams()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->strgetparams(), output);
  }

  // required bytes strBodyData = 3;
  if (has_strbodydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->strbodydata(), output);
  }

  // required bytes strCookies = 4;
  if (has_strcookies()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->strcookies(), output);
  }

  // required double fTimeOutSec = 5;
  if (has_ftimeoutsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ftimeoutsec(), output);
  }

  // required bytes strRsp = 6;
  if (has_strrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->strrsp(), output);
  }

  // required int64 nRet = 7;
  if (has_nret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->nret(), output);
  }

  // required int64 nReqID = 8;
  if (has_nreqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->nreqid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PackSURLParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes strUrl = 1;
  if (has_strurl()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->strurl(), target);
  }

  // required bytes strGetParams = 2;
  if (has_strgetparams()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->strgetparams(), target);
  }

  // required bytes strBodyData = 3;
  if (has_strbodydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->strbodydata(), target);
  }

  // required bytes strCookies = 4;
  if (has_strcookies()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->strcookies(), target);
  }

  // required double fTimeOutSec = 5;
  if (has_ftimeoutsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ftimeoutsec(), target);
  }

  // required bytes strRsp = 6;
  if (has_strrsp()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->strrsp(), target);
  }

  // required int64 nRet = 7;
  if (has_nret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->nret(), target);
  }

  // required int64 nReqID = 8;
  if (has_nreqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->nreqid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PackSURLParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes strUrl = 1;
    if (has_strurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strurl());
    }

    // required bytes strGetParams = 2;
    if (has_strgetparams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strgetparams());
    }

    // required bytes strBodyData = 3;
    if (has_strbodydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strbodydata());
    }

    // required bytes strCookies = 4;
    if (has_strcookies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strcookies());
    }

    // required double fTimeOutSec = 5;
    if (has_ftimeoutsec()) {
      total_size += 1 + 8;
    }

    // required bytes strRsp = 6;
    if (has_strrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strrsp());
    }

    // required int64 nRet = 7;
    if (has_nret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nret());
    }

    // required int64 nReqID = 8;
    if (has_nreqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nreqid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackSURLParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackSURLParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackSURLParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackSURLParam::MergeFrom(const PackSURLParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strurl()) {
      set_strurl(from.strurl());
    }
    if (from.has_strgetparams()) {
      set_strgetparams(from.strgetparams());
    }
    if (from.has_strbodydata()) {
      set_strbodydata(from.strbodydata());
    }
    if (from.has_strcookies()) {
      set_strcookies(from.strcookies());
    }
    if (from.has_ftimeoutsec()) {
      set_ftimeoutsec(from.ftimeoutsec());
    }
    if (from.has_strrsp()) {
      set_strrsp(from.strrsp());
    }
    if (from.has_nret()) {
      set_nret(from.nret());
    }
    if (from.has_nreqid()) {
      set_nreqid(from.nreqid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackSURLParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackSURLParam::CopyFrom(const PackSURLParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackSURLParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void PackSURLParam::Swap(PackSURLParam* other) {
  if (other != this) {
    std::swap(strurl_, other->strurl_);
    std::swap(strgetparams_, other->strgetparams_);
    std::swap(strbodydata_, other->strbodydata_);
    std::swap(strcookies_, other->strcookies_);
    std::swap(ftimeoutsec_, other->ftimeoutsec_);
    std::swap(strrsp_, other->strrsp_);
    std::swap(nret_, other->nret_);
    std::swap(nreqid_, other->nreqid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackSURLParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackSURLParam_descriptor_;
  metadata.reflection = PackSURLParam_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

// @@protoc_insertion_point(global_scope)
