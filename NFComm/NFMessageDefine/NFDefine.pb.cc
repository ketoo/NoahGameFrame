// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFDefine.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NFDefine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NFMsg {

namespace {

const ::google::protobuf::EnumDescriptor* EGameEventCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGameMsgID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_NFDefine_2eproto() {
  protobuf_AddDesc_NFDefine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NFDefine.proto");
  GOOGLE_CHECK(file != NULL);
  EGameEventCode_descriptor_ = file->enum_type(0);
  EGameMsgID_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NFDefine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_NFDefine_2eproto() {
}

void protobuf_AddDesc_NFDefine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016NFDefine.proto\022\005NFMsg*\271\010\n\016EGameEventCo"
    "de\022\025\n\021EGEC_UNKOWN_ERROR\020\000\022\020\n\014EGEC_SUCCES"
    "S\020\001\022\026\n\022EGEC_ACCOUNT_EXIST\020\002\022\033\n\027EGEC_ACCO"
    "UNTPWD_INVALID\020\003\022\026\n\022EGEC_ACCOUNT_USING\020\004"
    "\022\027\n\023EGEC_ACCOUNT_LOCKED\020\005\022\030\n\024EGEC_ACCOUN"
    "T_SUCCESS\020\006\022\030\n\024EGEC_CHARACTER_EXIST\020\n\022\032\n"
    "\026EGEC_SVRZONEID_INVALID\020\013\022\031\n\025EGEC_CHARAC"
    "TER_NUMOUT\020\014\022\032\n\026EGEC_CHARACTER_INVALID\020\r"
    "\022\033\n\027EGEC_CHARACTER_NOTEXIST\020\016\022\030\n\024EGEC_CH"
    "ARACTER_USING\020\017\022\031\n\025EGEC_CHARACTER_LOCKED"
    "\020\020\022\026\n\022EGEC_ZONE_OVERLOAD\020\021\022\023\n\017EGEC_NOT_O"
    "NLINE\020\022\022\027\n\023EGEC_ALREAY_IN_TEAM\020\023\022\034\n\030EGEC"
    "_INVALID_TEAM_INVITE\020\024\022\022\n\016EGEC_TEAM_FULL"
    "\020\025\022\032\n\026EGEC_MAIL_UPDATE_ERROR\020\026\022\034\n\030EGEC_M"
    "AIL_TONAME_INVALID\020\027\022\032\n\026EGEC_MAIL_DELETE"
    "_ERROR\020\030\022\033\n\027EGEC_MAIL_TOWNAME_EQUAL\020\031\022\023\n"
    "\017EGEC_LACK_MONEY\020\032\022\025\n\021EGEC_FULL_PACKAGE\020"
    "\033\022\025\n\021EGEC_INVALID_ITEM\020\034\022\034\n\030EGEC_INVALID"
    "_CONSIGNMENT\020\035\022\027\n\023EGEC_NOT_ENOUGH_VIP\020\036\022"
    "\023\n\017EGEC_NEED_LEVEL\020\037\022\030\n\024EGEC_MAX_FRIEND_"
    "LIST\020 \022\027\n\023EGEC_MAX_ENEMY_LIST\020!\022\027\n\023EGEC_"
    "MAX_GANGS_LSIT\020\"\022\031\n\025EGEC_LIMITS_TO_RIGHT"
    "S\020#\022\033\n\027EGEC_INVALID_GANGS_NAME\020$\022\033\n\027EGEC"
    "_REPEAT_ENTER_GANGS\020%\022\034\n\030EGEC_INVALID_GA"
    "NGSMEMBER\020&\022\033\n\027EGEC_MASTER_LEAVE_GANGS\020\'"
    "\022\032\n\026EGEC_GANGS_TITLE_OUTOF\020(\022\034\n\030EGEC_ENT"
    "ER_GATEWAY_FAILD\020)\022\027\n\023EGEC_NO_SERVER4ZON"
    "E\020*\022\026\n\022EGEC_INVALID_SKILL\020+*\246\017\n\nEGameMsg"
    "ID\022\017\n\013EGMI_UNKNOW\020\000\022\025\n\021EGMI_EVENT_RESULT"
    "\020\001\022\030\n\024EGMI_EVENT_TRANSPOND\020\002\022\025\n\021EGMI_CLO"
    "SE_SOCKET\020\003\022\035\n\031EGMI_MTL_WORLD_REGISTERED"
    "\020\n\022\037\n\033EGMI_MTL_WORLD_UNREGISTERED\020\013\022\032\n\026E"
    "GMI_MTL_WORLD_REFRESH\020\014\022\035\n\031EGMI_LTM_LOGI"
    "N_REGISTERED\020\024\022\037\n\033EGMI_LTM_LOGIN_UNREGIS"
    "TERED\020\025\022\032\n\026EGMI_LTM_LOGIN_REFRESH\020\026\022\036\n\032E"
    "GMI_PTWG_PROXY_REGISTERED\020\036\022 \n\034EGMI_PTWG"
    "_PROXY_UNREGISTERED\020\037\022\033\n\027EGMI_PTWG_PROXY"
    "_REFRESH\020 \022\034\n\030EGMI_GTW_GAME_REGISTERED\020("
    "\022\036\n\032EGMI_GTW_GAME_UNREGISTERED\020)\022\031\n\025EGMI"
    "_GTW_GAME_REFRESH\020*\022\025\n\021EGMI_STS_NET_INFO"
    "\0202\022\022\n\016EGMI_REQ_LOGIN\020e\022\022\n\016EGMI_ACK_LOGIN"
    "\020f\022\023\n\017EGMI_REQ_LOGOUT\020g\022\027\n\023EGMI_REQ_WORL"
    "D_LIST\020n\022\027\n\023EGMI_ACK_WORLS_LIST\020o\022\032\n\026EGM"
    "I_REQ_CONNECT_WORLD\020p\022\032\n\026EGMI_ACK_CONNEC"
    "T_WORLD\020q\022 \n\034EGMI_REQ_KICK_CLIENT_INWORL"
    "D\020r\022\030\n\024EGMI_REQ_CONNECT_KEY\020x\022\030\n\024EGMI_AC"
    "K_CONNECT_KEY\020z\022\033\n\026EGMI_REQ_SELECT_SERVE"
    "R\020\202\001\022\027\n\022EGMI_REQ_ROLE_LIST\020\203\001\022\027\n\022EGMI_AC"
    "K_ROLE_LIST\020\204\001\022\031\n\024EGMI_REQ_CREATE_ROLE\020\205"
    "\001\022\031\n\024EGMI_REQ_DELETE_ROLE\020\206\001\022\032\n\025EGMI_REQ"
    "_RECOVER_ROLE\020\207\001\022\025\n\020EGMI_REQ_COMMAND\020\214\001\022"
    "\030\n\023EGMI_REQ_ENTER_GAME\020\226\001\022\030\n\023EGMI_REQ_LE"
    "AVE_GAME\020\227\001\022\027\n\022EGMI_REQ_SWAP_GAME\020\230\001\022\030\n\023"
    "EGMI_REQ_SWAP_SCENE\020\231\001\022\032\n\025EGMI_ACK_OBJEC"
    "T_ENTRY\020\310\001\022\032\n\025EGMI_ACK_OBJECT_LEAVE\020\311\001\022\032"
    "\n\025EGMI_ACK_PROPERTY_INT\020\322\001\022\034\n\027EGMI_ACK_P"
    "ROPERTY_FLOAT\020\323\001\022\035\n\030EGMI_ACK_PROPERTY_ST"
    "RING\020\324\001\022\035\n\030EGMI_ACK_PROPERTY_DOUBLE\020\325\001\022\035"
    "\n\030EGMI_ACK_PROPERTY_OBJECT\020\326\001\022\025\n\020EGMI_AC"
    "K_ADD_ROW\020\334\001\022\030\n\023EGMI_ACK_REMOVE_ROW\020\335\001\022\026"
    "\n\021EGMI_ACK_SWAP_ROW\020\336\001\022\030\n\023EGMI_ACK_RECOR"
    "D_INT\020\337\001\022\032\n\025EGMI_ACK_RECORD_FLOAT\020\340\001\022\033\n\026"
    "EGMI_ACK_RECORD_DOUBLE\020\341\001\022\033\n\026EGMI_ACK_RE"
    "CORD_STRING\020\342\001\022\033\n\026EGMI_ACK_RECORD_OBJECT"
    "\020\343\001\022\022\n\rEGMI_REQ_MOVE\020\346\001\022\022\n\rEGMI_ACK_MOVE"
    "\020\347\001\022\031\n\024EGMI_REQ_MOVE_IMMUNE\020\350\001\022\031\n\024EGMI_A"
    "CK_MOVE_IMMUNE\020\351\001\022\033\n\026EGMI_REQ_SKILL_OBJE"
    "CTX\020\360\001\022\033\n\026EGMI_ACK_SKILL_OBJECTX\020\361\001\022\027\n\022E"
    "GMI_REQ_SKILL_POS\020\362\001\022\027\n\022EGMI_ACK_SKILL_P"
    "OS\020\363\001\022\031\n\024EGMI_REQ_ITEM_OBJECT\020\364\001\022\031\n\024EGMI"
    "_ACK_ITEM_OBJECT\020\365\001\022\026\n\021EGMI_REQ_ITEM_POS"
    "\020\366\001\022\026\n\021EGMI_ACK_ITEM_POS\020\367\001\022\022\n\rEGMI_REQ_"
    "CHAT\020\372\001\022\022\n\rEGMI_ACK_CHAT\020\373\001\022\027\n\022EGMI_REQ_"
    "SALE_ITEM\020\374\001\022\030\n\023EGMI_REQ_SPLIT_ITEM\020\375\001\022\032"
    "\n\025EGMI_REQ_PRODUCE_ITEM\020\376\001\022\027\n\022EGMI_REQ_P"
    "ICK_ITEM\020\377\001\022\031\n\024EGMI_REQ_ACCEPT_TASK\020\200\002\022\034"
    "\n\027EGMI_REQ_PULLDOWNCUSTOM\020\201\002", 3068);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NFDefine.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NFDefine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NFDefine_2eproto {
  StaticDescriptorInitializer_NFDefine_2eproto() {
    protobuf_AddDesc_NFDefine_2eproto();
  }
} static_descriptor_initializer_NFDefine_2eproto_;
const ::google::protobuf::EnumDescriptor* EGameEventCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGameEventCode_descriptor_;
}
bool EGameEventCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGameMsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGameMsgID_descriptor_;
}
bool EGameMsgID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
    case 20:
    case 21:
    case 22:
    case 30:
    case 31:
    case 32:
    case 40:
    case 41:
    case 42:
    case 50:
    case 101:
    case 102:
    case 103:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 120:
    case 122:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 140:
    case 150:
    case 151:
    case 152:
    case 153:
    case 200:
    case 201:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 230:
    case 231:
    case 232:
    case 233:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

// @@protoc_insertion_point(global_scope)
