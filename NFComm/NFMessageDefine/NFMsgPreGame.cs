// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: NFMsgPreGame.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NFMsg {

  /// <summary>Holder for reflection information generated from NFMsgPreGame.proto</summary>
  public static partial class NFMsgPreGameReflection {

    #region Descriptor
    /// <summary>File descriptor for NFMsgPreGame.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NFMsgPreGameReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJORk1zZ1ByZUdhbWUucHJvdG8SBU5GTXNnGg5ORkRlZmluZS5wcm90bxoP",
            "TkZNc2dCYXNlLnByb3RvItcBChBTZXJ2ZXJJbmZvUmVwb3J0EhEKCXNlcnZl",
            "cl9pZBgBIAEoBRITCgtzZXJ2ZXJfbmFtZRgCIAEoDBIRCglzZXJ2ZXJfaXAY",
            "AyABKAwSEwoLc2VydmVyX3BvcnQYBCABKAUSGQoRc2VydmVyX21heF9vbmxp",
            "bmUYBSABKAUSGAoQc2VydmVyX2N1cl9jb3VudBgGIAEoBRIpCgxzZXJ2ZXJf",
            "c3RhdGUYByABKA4yEy5ORk1zZy5FU2VydmVyU3RhdGUSEwoLc2VydmVyX3R5",
            "cGUYCCABKAUiRAoUU2VydmVySW5mb1JlcG9ydExpc3QSLAoLc2VydmVyX2xp",
            "c3QYASADKAsyFy5ORk1zZy5TZXJ2ZXJJbmZvUmVwb3J0IoMBCg5BY2tFdmVu",
            "dFJlc3VsdBIpCgpldmVudF9jb2RlGAEgASgOMhUuTkZNc2cuRUdhbWVFdmVu",
            "dENvZGUSIgoMZXZlbnRfb2JqZWN0GAIgASgLMgwuTkZNc2cuSWRlbnQSIgoM",
            "ZXZlbnRfY2xpZW50GAMgASgLMgwuTkZNc2cuSWRlbnQi/wEKD1JlcUFjY291",
            "bnRMb2dpbhIPCgdhY2NvdW50GAIgASgMEhAKCHBhc3N3b3JkGAMgASgMEhUK",
            "DXNlY3VyaXR5X2NvZGUYBCABKAwSEAoIc2lnbkJ1ZmYYBSABKAwSFQoNY2xp",
            "ZW50VmVyc2lvbhgGIAEoBRIkCglsb2dpbk1vZGUYByABKA4yES5ORk1zZy5F",
            "TG9naW5Nb2RlEhAKCGNsaWVudElQGAggASgFEhEKCWNsaWVudE1BQxgJIAEo",
            "AxITCgtkZXZpY2VfaW5mbxgKIAEoDBISCgpleHRyYV9pbmZvGAsgASgMEhUK",
            "DXBsYXRmb3JtX3R5cGUYDCABKAUiNwoQUmVxQWNjb3VudExvZ291dBIPCgdh",
            "Y2NvdW50GAIgASgMEhIKCmV4dHJhX2luZm8YAyABKAwiZgoKU2VydmVySW5m",
            "bxIRCglzZXJ2ZXJfaWQYASABKAUSDAoEbmFtZRgCIAEoDBISCgp3YWl0X2Nv",
            "dW50GAMgASgFEiMKBnN0YXR1cxgEIAEoDjITLk5GTXNnLkVTZXJ2ZXJTdGF0",
            "ZSI3Cg1SZXFTZXJ2ZXJMaXN0EiYKBHR5cGUYASABKA4yGC5ORk1zZy5SZXFT",
            "ZXJ2ZXJMaXN0VHlwZSJYCg1BY2tTZXJ2ZXJMaXN0EiYKBHR5cGUYASABKA4y",
            "GC5ORk1zZy5SZXFTZXJ2ZXJMaXN0VHlwZRIfCgRpbmZvGAIgAygLMhEuTkZN",
            "c2cuU2VydmVySW5mbyJkCg9SZXFDb25uZWN0V29ybGQSEAoId29ybGRfaWQY",
            "ASABKAUSDwoHYWNjb3VudBgCIAEoDBIcCgZzZW5kZXIYAyABKAsyDC5ORk1z",
            "Zy5JZGVudBIQCghsb2dpbl9pZBgEIAEoBSKjAQoVQWNrQ29ubmVjdFdvcmxk",
            "UmVzdWx0EhAKCHdvcmxkX2lkGAEgASgFEhwKBnNlbmRlchgCIAEoCzIMLk5G",
            "TXNnLklkZW50EhAKCGxvZ2luX2lkGAMgASgFEg8KB2FjY291bnQYBCABKAwS",
            "EAoId29ybGRfaXAYBSABKAwSEgoKd29ybGRfcG9ydBgGIAEoBRIRCgl3b3Js",
            "ZF9rZXkYByABKAwiIwoPUmVxU2VsZWN0U2VydmVyEhAKCHdvcmxkX2lkGAEg",
            "ASgFIjUKEFJlcUtpY2tGcm9tV29ybGQSEAoId29ybGRfaWQYASABKAUSDwoH",
            "YWNjb3VudBgCIAEoDCIvCgtSZXFSb2xlTGlzdBIPCgdnYW1lX2lkGAEgASgF",
            "Eg8KB2FjY291bnQYAiABKAwi+wEKDFJvbGVMaXRlSW5mbxIYCgJpZBgBIAEo",
            "CzIMLk5GTXNnLklkZW50Eg4KBmNhcmVlchgCIAEoBRILCgNzZXgYAyABKAUS",
            "DAoEcmFjZRgEIAEoBRIRCglub29iX25hbWUYBSABKAwSDwoHZ2FtZV9pZBgG",
            "IAEoBRISCgpyb2xlX2xldmVsGAcgASgFEhMKC2RlbGV0ZV90aW1lGAggASgF",
            "EhAKCHJlZ190aW1lGAkgASgFEhkKEWxhc3Rfb2ZmbGluZV90aW1lGAogASgF",
            "EhcKD2xhc3Rfb2ZmbGluZV9pcBgLIAEoBRITCgt2aWV3X3JlY29yZBgMIAEo",
            "DCJOChNBY2tSb2xlTGl0ZUluZm9MaXN0EiYKCWNoYXJfZGF0YRgBIAMoCzIT",
            "Lk5GTXNnLlJvbGVMaXRlSW5mbxIPCgdhY2NvdW50GAIgASgMIm8KDVJlcUNy",
            "ZWF0ZVJvbGUSDwoHYWNjb3VudBgBIAEoDBIOCgZjYXJlZXIYAiABKAUSCwoD",
            "c2V4GAMgASgFEgwKBHJhY2UYBCABKAUSEQoJbm9vYl9uYW1lGAUgASgMEg8K",
            "B2dhbWVfaWQYBiABKAUiPwoNUmVxRGVsZXRlUm9sZRIPCgdhY2NvdW50GAEg",
            "ASgMEgwKBG5hbWUYAiABKAwSDwoHZ2FtZV9pZBgDIAEoBSJACg5SZXFSZWNv",
            "dmVyUm9sZRIPCgdhY2NvdW50GAEgASgMEgwKBG5hbWUYAiABKAwSDwoHZ2Ft",
            "ZV9pZBgDIAEoBSIgCg9TZXJ2ZXJIZWFydEJlYXQSDQoFY291bnQYASABKAUi",
            "uwMKEFJvbGVPbmxpbmVOb3RpZnkSGgoEc2VsZhgBIAEoCzIMLk5GTXNnLklk",
            "ZW50EhoKBGNsYW4YAiABKAsyDC5ORk1zZy5JZGVudBIMCgRnYW1lGAMgASgF",
            "Eg0KBXByb3h5GAQgASgFEgwKBG5hbWUYBSABKAwSCgoCYnAYBiABKAUSLQoR",
            "cHJvcGVydHlfaW50X2xpc3QYFCADKAsyEi5ORk1zZy5Qcm9wZXJ0eUludBIx",
            "ChNwcm9wZXJ0eV9mbG9hdF9saXN0GBUgAygLMhQuTkZNc2cuUHJvcGVydHlG",
            "bG9hdBIzChRwcm9wZXJ0eV9zdHJpbmdfbGlzdBgWIAMoCzIVLk5GTXNnLlBy",
            "b3BlcnR5U3RyaW5nEjMKFHByb3BlcnR5X29iamVjdF9saXN0GBcgAygLMhUu",
            "TkZNc2cuUHJvcGVydHlPYmplY3QSNQoVcHJvcGVydHlfdmVjdG9yMl9saXN0",
            "GBggAygLMhYuTkZNc2cuUHJvcGVydHlWZWN0b3IyEjUKFXByb3BlcnR5X3Zl",
            "Y3RvcjNfbGlzdBgZIAMoCzIWLk5GTXNnLlByb3BlcnR5VmVjdG9yMyJoChFS",
            "b2xlT2ZmbGluZU5vdGlmeRIaCgRzZWxmGAEgASgLMgwuTkZNc2cuSWRlbnQS",
            "GgoEY2xhbhgCIAEoCzIMLk5GTXNnLklkZW50EgwKBGdhbWUYAyABKAUSDQoF",
            "cHJveHkYBCABKAUifgoMUm9sZURhdGFQYWNrEhgKAmlkGAEgASgLMgwuTkZN",
            "c2cuSWRlbnQSKwoIcHJvcGVydHkYAiABKAsyGS5ORk1zZy5PYmplY3RQcm9w",
            "ZXJ0eUxpc3QSJwoGcmVjb3JkGAMgASgLMhcuTkZNc2cuT2JqZWN0UmVjb3Jk",
            "TGlzdCpaCgxFU2VydmVyU3RhdGUSDQoJRVNUX0NSQVNIEAASDgoKRVNUX05B",
            "Uk1BTBABEgwKCEVTVF9CVVNZEAISDAoIRVNUX0ZJUkUQAxIPCgtFU1RfTUFJ",
            "TlRFThAEKkoKCkVMb2dpbk1vZGUSDQoJRUxNX0xPR0lOEAASEAoMRUxNX1JF",
            "R0lTVEVSEAESGwoXRUxNX0FVVE9fUkVHSVNURVJfTE9HSU4QAipAChFSZXFT",
            "ZXJ2ZXJMaXN0VHlwZRIVChFSU0xUX1dPUkxEX1NFUlZFUhAAEhQKEFJTTFRf",
            "R0FNRVNfRVJWRVIQAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::NFMsg.NFDefineReflection.Descriptor, global::NFMsg.NFMsgBaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::NFMsg.EServerState), typeof(global::NFMsg.ELoginMode), typeof(global::NFMsg.ReqServerListType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ServerInfoReport), global::NFMsg.ServerInfoReport.Parser, new[]{ "server_id", "server_name", "server_ip", "server_port", "server_max_online", "server_cur_count", "server_state", "server_type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ServerInfoReportList), global::NFMsg.ServerInfoReportList.Parser, new[]{ "server_list" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckEventResult), global::NFMsg.AckEventResult.Parser, new[]{ "event_code", "event_object", "event_client" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAccountLogin), global::NFMsg.ReqAccountLogin.Parser, new[]{ "account", "password", "security_code", "signBuff", "clientVersion", "loginMode", "clientIP", "clientMAC", "device_info", "extra_info", "platform_type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAccountLogout), global::NFMsg.ReqAccountLogout.Parser, new[]{ "account", "extra_info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ServerInfo), global::NFMsg.ServerInfo.Parser, new[]{ "server_id", "name", "wait_count", "status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqServerList), global::NFMsg.ReqServerList.Parser, new[]{ "type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckServerList), global::NFMsg.AckServerList.Parser, new[]{ "type", "info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqConnectWorld), global::NFMsg.ReqConnectWorld.Parser, new[]{ "world_id", "account", "sender", "login_id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckConnectWorldResult), global::NFMsg.AckConnectWorldResult.Parser, new[]{ "world_id", "sender", "login_id", "account", "world_ip", "world_port", "world_key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqSelectServer), global::NFMsg.ReqSelectServer.Parser, new[]{ "world_id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqKickFromWorld), global::NFMsg.ReqKickFromWorld.Parser, new[]{ "world_id", "account" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqRoleList), global::NFMsg.ReqRoleList.Parser, new[]{ "game_id", "account" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.RoleLiteInfo), global::NFMsg.RoleLiteInfo.Parser, new[]{ "id", "career", "sex", "race", "noob_name", "game_id", "role_level", "delete_time", "reg_time", "last_offline_time", "last_offline_ip", "view_record" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckRoleLiteInfoList), global::NFMsg.AckRoleLiteInfoList.Parser, new[]{ "char_data", "account" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqCreateRole), global::NFMsg.ReqCreateRole.Parser, new[]{ "account", "career", "sex", "race", "noob_name", "game_id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqDeleteRole), global::NFMsg.ReqDeleteRole.Parser, new[]{ "account", "name", "game_id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqRecoverRole), global::NFMsg.ReqRecoverRole.Parser, new[]{ "account", "name", "game_id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ServerHeartBeat), global::NFMsg.ServerHeartBeat.Parser, new[]{ "count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.RoleOnlineNotify), global::NFMsg.RoleOnlineNotify.Parser, new[]{ "self", "clan", "game", "proxy", "name", "bp", "property_int_list", "property_float_list", "property_string_list", "property_object_list", "property_vector2_list", "property_vector3_list" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.RoleOfflineNotify), global::NFMsg.RoleOfflineNotify.Parser, new[]{ "self", "clan", "game", "proxy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.RoleDataPack), global::NFMsg.RoleDataPack.Parser, new[]{ "id", "property", "record" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EServerState {
    [pbr::OriginalName("EST_CRASH")] EST_CRASH = 0,
    [pbr::OriginalName("EST_NARMAL")] EST_NARMAL = 1,
    [pbr::OriginalName("EST_BUSY")] EST_BUSY = 2,
    [pbr::OriginalName("EST_FIRE")] EST_FIRE = 3,
    [pbr::OriginalName("EST_MAINTEN")] EST_MAINTEN = 4,
  }

  public enum ELoginMode {
    [pbr::OriginalName("ELM_LOGIN")] ELM_LOGIN = 0,
    [pbr::OriginalName("ELM_REGISTER")] ELM_REGISTER = 1,
    /// <summary>
    /// login, or register if account dosen't exsit
    /// </summary>
    [pbr::OriginalName("ELM_AUTO_REGISTER_LOGIN")] ELM_AUTO_REGISTER_LOGIN = 2,
  }

  public enum ReqServerListType {
    [pbr::OriginalName("RSLT_WORLD_SERVER")] RSLT_WORLD_SERVER = 0,
    [pbr::OriginalName("RSLT_GAMES_ERVER")] RSLT_GAMES_ERVER = 1,
  }

  #endregion

  #region Messages
  public sealed partial class ServerInfoReport : pb::IMessage<ServerInfoReport> {
    private static readonly pb::MessageParser<ServerInfoReport> _parser = new pb::MessageParser<ServerInfoReport>(() => new ServerInfoReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerInfoReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgPreGameReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfoReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfoReport(ServerInfoReport other) : this() {
      serverId_ = other.serverId_;
      serverName_ = other.serverName_;
      serverIp_ = other.serverIp_;
      serverPort_ = other.serverPort_;
      serverMaxOnline_ = other.serverMaxOnline_;
      serverCurCount_ = other.serverCurCount_;
      serverState_ = other.serverState_;
      serverType_ = other.serverType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfoReport Clone() {
      return new ServerInfoReport(this);
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int server_idFieldNumber = 1;
    private int serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int server_id {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "server_name" field.</summary>
    public const int server_nameFieldNumber = 2;
    private pb::ByteString serverName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString server_name {
      get { return serverName_; }
      set {
        serverName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server_ip" field.</summary>
    public const int server_ipFieldNumber = 3;
    private pb::ByteString serverIp_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString server_ip {
      get { return serverIp_; }
      set {
        serverIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server_port" field.</summary>
    public const int server_portFieldNumber = 4;
    private int serverPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int server_port {
      get { return serverPort_; }
      set {
        serverPort_ = value;
      }
    }

    /// <summary>Field number for the "server_max_online" field.</summary>
    public const int server_max_onlineFieldNumber = 5;
    private int serverMaxOnline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int server_max_online {
      get { return serverMaxOnline_; }
      set {
        serverMaxOnline_ = value;
      }
    }

    /// <summary>Field number for the "server_cur_count" field.</summary>
    public const int server_cur_countFieldNumber = 6;
    private int serverCurCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int server_cur_count {
      get { return serverCurCount_; }
      set {
        serverCurCount_ = value;
      }
    }

    /// <summary>Field number for the "server_state" field.</summary>
    public const int server_stateFieldNumber = 7;
    private global::NFMsg.EServerState serverState_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.EServerState server_state {
      get { return serverState_; }
      set {
        serverState_ = value;
      }
    }

    /// <summary>Field number for the "server_type" field.</summary>
    public const int server_typeFieldNumber = 8;
    private int serverType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int server_type {
      get { return serverType_; }
      set {
        serverType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerInfoReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerInfoReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (server_id != other.server_id) return false;
      if (server_name != other.server_name) return false;
      if (server_ip != other.server_ip) return false;
      if (server_port != other.server_port) return false;
      if (server_max_online != other.server_max_online) return false;
      if (server_cur_count != other.server_cur_count) return false;
      if (server_state != other.server_state) return false;
      if (server_type != other.server_type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (server_id != 0) hash ^= server_id.GetHashCode();
      if (server_name.Length != 0) hash ^= server_name.GetHashCode();
      if (server_ip.Length != 0) hash ^= server_ip.GetHashCode();
      if (server_port != 0) hash ^= server_port.GetHashCode();
      if (server_max_online != 0) hash ^= server_max_online.GetHashCode();
      if (server_cur_count != 0) hash ^= server_cur_count.GetHashCode();
      if (server_state != 0) hash ^= server_state.GetHashCode();
      if (server_type != 0) hash ^= server_type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (server_id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(server_id);
      }
      if (server_name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(server_name);
      }
      if (server_ip.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(server_ip);
      }
      if (server_port != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(server_port);
      }
      if (server_max_online != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(server_max_online);
      }
      if (server_cur_count != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(server_cur_count);
      }
      if (server_state != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) server_state);
      }
      if (server_type != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(server_type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (server_id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(server_id);
      }
      if (server_name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(server_name);
      }
      if (server_ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(server_ip);
      }
      if (server_port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(server_port);
      }
      if (server_max_online != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(server_max_online);
      }
      if (server_cur_count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(server_cur_count);
      }
      if (server_state != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) server_state);
      }
      if (server_type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(server_type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerInfoReport other) {
      if (other == null) {
        return;
      }
      if (other.server_id != 0) {
        server_id = other.server_id;
      }
      if (other.server_name.Length != 0) {
        server_name = other.server_name;
      }
      if (other.server_ip.Length != 0) {
        server_ip = other.server_ip;
      }
      if (other.server_port != 0) {
        server_port = other.server_port;
      }
      if (other.server_max_online != 0) {
        server_max_online = other.server_max_online;
      }
      if (other.server_cur_count != 0) {
        server_cur_count = other.server_cur_count;
      }
      if (other.server_state != 0) {
        server_state = other.server_state;
      }
      if (other.server_type != 0) {
        server_type = other.server_type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            server_id = input.ReadInt32();
            break;
          }
          case 18: {
            server_name = input.ReadBytes();
            break;
          }
          case 26: {
            server_ip = input.ReadBytes();
            break;
          }
          case 32: {
            server_port = input.ReadInt32();
            break;
          }
          case 40: {
            server_max_online = input.ReadInt32();
            break;
          }
          case 48: {
            server_cur_count = input.ReadInt32();
            break;
          }
          case 56: {
            serverState_ = (global::NFMsg.EServerState) input.ReadEnum();
            break;
          }
          case 64: {
            server_type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServerInfoReportList : pb::IMessage<ServerInfoReportList> {
    private static readonly pb::MessageParser<ServerInfoReportList> _parser = new pb::MessageParser<ServerInfoReportList>(() => new ServerInfoReportList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerInfoReportList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgPreGameReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfoReportList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfoReportList(ServerInfoReportList other) : this() {
      serverList_ = other.serverList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfoReportList Clone() {
      return new ServerInfoReportList(this);
    }

    /// <summary>Field number for the "server_list" field.</summary>
    public const int server_listFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NFMsg.ServerInfoReport> _repeated_serverList_codec
        = pb::FieldCodec.ForMessage(10, global::NFMsg.ServerInfoReport.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.ServerInfoReport> serverList_ = new pbc::RepeatedField<global::NFMsg.ServerInfoReport>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.ServerInfoReport> server_list {
      get { return serverList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerInfoReportList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerInfoReportList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!serverList_.Equals(other.serverList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= serverList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      serverList_.WriteTo(output, _repeated_serverList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += serverList_.CalculateSize(_repeated_serverList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerInfoReportList other) {
      if (other == null) {
        return;
      }
      serverList_.Add(other.serverList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            serverList_.AddEntriesFrom(input, _repeated_serverList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AckEventResult : pb::IMessage<AckEventResult> {
    private static readonly pb::MessageParser<AckEventResult> _parser = new pb::MessageParser<AckEventResult>(() => new AckEventResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckEventResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgPreGameReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckEventResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckEventResult(AckEventResult other) : this() {
      eventCode_ = other.eventCode_;
      eventObject_ = other.eventObject_ != null ? other.eventObject_.Clone() : null;
      eventClient_ = other.eventClient_ != null ? other.eventClient_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckEventResult Clone() {
      return new AckEventResult(this);
    }

    /// <summary>Field number for the "event_code" field.</summary>
    public const int event_codeFieldNumber = 1;
    private global::NFMsg.EGameEventCode eventCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.EGameEventCode event_code {
      get { return eventCode_; }
      set {
        eventCode_ = value;
      }
    }

    /// <summary>Field number for the "event_object" field.</summary>
    public const int event_objectFieldNumber = 2;
    private global::NFMsg.Ident eventObject_;
    /// <summary>
    ///playerID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident event_object {
      get { return eventObject_; }
      set {
        eventObject_ = value;
      }
    }

    /// <summary>Field number for the "event_client" field.</summary>
    public const int event_clientFieldNumber = 3;
    private global::NFMsg.Ident eventClient_;
    /// <summary>
    ///clientID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident event_client {
      get { return eventClient_; }
      set {
        eventClient_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckEventResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckEventResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (event_code != other.event_code) return false;
      if (!object.Equals(event_object, other.event_object)) return false;
      if (!object.Equals(event_client, other.event_client)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (event_code != 0) hash ^= event_code.GetHashCode();
      if (eventObject_ != null) hash ^= event_object.GetHashCode();
      if (eventClient_ != null) hash ^= event_client.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (event_code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) event_code);
      }
      if (eventObject_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(event_object);
      }
      if (eventClient_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(event_client);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (event_code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) event_code);
      }
      if (eventObject_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(event_object);
      }
      if (eventClient_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(event_client);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckEventResult other) {
      if (other == null) {
        return;
      }
      if (other.event_code != 0) {
        event_code = other.event_code;
      }
      if (other.eventObject_ != null) {
        if (eventObject_ == null) {
          eventObject_ = new global::NFMsg.Ident();
        }
        event_object.MergeFrom(other.event_object);
      }
      if (other.eventClient_ != null) {
        if (eventClient_ == null) {
          eventClient_ = new global::NFMsg.Ident();
        }
        event_client.MergeFrom(other.event_client);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            eventCode_ = (global::NFMsg.EGameEventCode) input.ReadEnum();
            break;
          }
          case 18: {
            if (eventObject_ == null) {
              eventObject_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(eventObject_);
            break;
          }
          case 26: {
            if (eventClient_ == null) {
              eventClient_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(eventClient_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class ReqAccountLogin : pb::IMessage<ReqAccountLogin> {
    private static readonly pb::MessageParser<ReqAccountLogin> _parser = new pb::MessageParser<ReqAccountLogin>(() => new ReqAccountLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAccountLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgPreGameReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAccountLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAccountLogin(ReqAccountLogin other) : this() {
      account_ = other.account_;
      password_ = other.password_;
      securityCode_ = other.securityCode_;
      signBuff_ = other.signBuff_;
      clientVersion_ = other.clientVersion_;
      loginMode_ = other.loginMode_;
      clientIP_ = other.clientIP_;
      clientMAC_ = other.clientMAC_;
      deviceInfo_ = other.deviceInfo_;
      extraInfo_ = other.extraInfo_;
      platformType_ = other.platformType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAccountLogin Clone() {
      return new ReqAccountLogin(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int accountFieldNumber = 2;
    private pb::ByteString account_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int passwordFieldNumber = 3;
    private pb::ByteString password_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "security_code" field.</summary>
    public const int security_codeFieldNumber = 4;
    private pb::ByteString securityCode_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString security_code {
      get { return securityCode_; }
      set {
        securityCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signBuff" field.</summary>
    public const int signBuffFieldNumber = 5;
    private pb::ByteString signBuff_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString signBuff {
      get { return signBuff_; }
      set {
        signBuff_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int clientVersionFieldNumber = 6;
    private int clientVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int clientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = value;
      }
    }

    /// <summary>Field number for the "loginMode" field.</summary>
    public const int loginModeFieldNumber = 7;
    private global::NFMsg.ELoginMode loginMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ELoginMode loginMode {
      get { return loginMode_; }
      set {
        loginMode_ = value;
      }
    }

    /// <summary>Field number for the "clientIP" field.</summary>
    public const int clientIPFieldNumber = 8;
    private int clientIP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int clientIP {
      get { return clientIP_; }
      set {
        clientIP_ = value;
      }
    }

    /// <summary>Field number for the "clientMAC" field.</summary>
    public const int clientMACFieldNumber = 9;
    private long clientMAC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long clientMAC {
      get { return clientMAC_; }
      set {
        clientMAC_ = value;
      }
    }

    /// <summary>Field number for the "device_info" field.</summary>
    public const int device_infoFieldNumber = 10;
    private pb::ByteString deviceInfo_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString device_info {
      get { return deviceInfo_; }
      set {
        deviceInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extra_info" field.</summary>
    public const int extra_infoFieldNumber = 11;
    private pb::ByteString extraInfo_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString extra_info {
      get { return extraInfo_; }
      set {
        extraInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "platform_type" field.</summary>
    public const int platform_typeFieldNumber = 12;
    private int platformType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int platform_type {
      get { return platformType_; }
      set {
        platformType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAccountLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAccountLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (account != other.account) return false;
      if (password != other.password) return false;
      if (security_code != other.security_code) return false;
      if (signBuff != other.signBuff) return false;
      if (clientVersion != other.clientVersion) return false;
      if (loginMode != other.loginMode) return false;
      if (clientIP != other.clientIP) return false;
      if (clientMAC != other.clientMAC) return false;
      if (device_info != other.device_info) return false;
      if (extra_info != other.extra_info) return false;
      if (platform_type != other.platform_type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (account.Length != 0) hash ^= account.GetHashCode();
      if (password.Length != 0) hash ^= password.GetHashCode();
      if (security_code.Length != 0) hash ^= security_code.GetHashCode();
      if (signBuff.Length != 0) hash ^= signBuff.GetHashCode();
      if (clientVersion != 0) hash ^= clientVersion.GetHashCode();
      if (loginMode != 0) hash ^= loginMode.GetHashCode();
      if (clientIP != 0) hash ^= clientIP.GetHashCode();
      if (clientMAC != 0L) hash ^= clientMAC.GetHashCode();
      if (device_info.Length != 0) hash ^= device_info.GetHashCode();
      if (extra_info.Length != 0) hash ^= extra_info.GetHashCode();
      if (platform_type != 0) hash ^= platform_type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(account);
      }
      if (password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(password);
      }
      if (security_code.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(security_code);
      }
      if (signBuff.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(signBuff);
      }
      if (clientVersion != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(clientVersion);
      }
      if (loginMode != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) loginMode);
      }
      if (clientIP != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(clientIP);
      }
      if (clientMAC != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(clientMAC);
      }
      if (device_info.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(device_info);
      }
      if (extra_info.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(extra_info);
      }
      if (platform_type != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(platform_type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(account);
      }
      if (password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(password);
      }
      if (security_code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(security_code);
      }
      if (signBuff.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(signBuff);
      }
      if (clientVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(clientVersion);
      }
      if (loginMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) loginMode);
      }
      if (clientIP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(clientIP);
      }
      if (clientMAC != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(clientMAC);
      }
      if (device_info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(device_info);
      }
      if (extra_info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(extra_info);
      }
      if (platform_type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(platform_type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAccountLogin other) {
      if (other == null) {
        return;
      }
      if (other.account.Length != 0) {
        account = other.account;
      }
      if (other.password.Length != 0) {
        password = other.password;
      }
      if (other.security_code.Length != 0) {
        security_code = other.security_code;
      }
      if (other.signBuff.Length != 0) {
        signBuff = other.signBuff;
      }
      if (other.clientVersion != 0) {
        clientVersion = other.clientVersion;
      }
      if (other.loginMode != 0) {
        loginMode = other.loginMode;
      }
      if (other.clientIP != 0) {
        clientIP = other.clientIP;
      }
      if (other.clientMAC != 0L) {
        clientMAC = other.clientMAC;
      }
      if (other.device_info.Length != 0) {
        device_info = other.device_info;
      }
      if (other.extra_info.Length != 0) {
        extra_info = other.extra_info;
      }
      if (other.platform_type != 0) {
        platform_type = other.platform_type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            account = input.ReadBytes();
            break;
          }
          case 26: {
            password = input.ReadBytes();
            break;
          }
          case 34: {
            security_code = input.ReadBytes();
            break;
          }
          case 42: {
            signBuff = input.ReadBytes();
            break;
          }
          case 48: {
            clientVersion = input.ReadInt32();
            break;
          }
          case 56: {
            loginMode_ = (global::NFMsg.ELoginMode) input.ReadEnum();
            break;
          }
          case 64: {
            clientIP = input.ReadInt32();
            break;
          }
          case 72: {
            clientMAC = input.ReadInt64();
            break;
          }
          case 82: {
            device_info = input.ReadBytes();
            break;
          }
          case 90: {
            extra_info = input.ReadBytes();
            break;
          }
          case 96: {
            platform_type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAccountLogout : pb::IMessage<ReqAccountLogout> {
    private static readonly pb::MessageParser<ReqAccountLogout> _parser = new pb::MessageParser<ReqAccountLogout>(() => new ReqAccountLogout());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAccountLogout> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgPreGameReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAccountLogout() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAccountLogout(ReqAccountLogout other) : this() {
      account_ = other.account_;
      extraInfo_ = other.extraInfo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAccountLogout Clone() {
      return new ReqAccountLogout(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int accountFieldNumber = 2;
    private pb::ByteString account_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extra_info" field.</summary>
    public const int extra_infoFieldNumber = 3;
    private pb::ByteString extraInfo_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString extra_info {
      get { return extraInfo_; }
      set {
        extraInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAccountLogout);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAccountLogout other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (account != other.account) return false;
      if (extra_info != other.extra_info) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (account.Length != 0) hash ^= account.GetHashCode();
      if (extra_info.Length != 0) hash ^= extra_info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(account);
      }
      if (extra_info.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(extra_info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(account);
      }
      if (extra_info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(extra_info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAccountLogout other) {
      if (other == null) {
        return;
      }
      if (other.account.Length != 0) {
        account = other.account;
      }
      if (other.extra_info.Length != 0) {
        extra_info = other.extra_info;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            account = input.ReadBytes();
            break;
          }
          case 26: {
            extra_info = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServerInfo : pb::IMessage<ServerInfo> {
    private static readonly pb::MessageParser<ServerInfo> _parser = new pb::MessageParser<ServerInfo>(() => new ServerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgPreGameReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo(ServerInfo other) : this() {
      serverId_ = other.serverId_;
      name_ = other.name_;
      waitCount_ = other.waitCount_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo Clone() {
      return new ServerInfo(this);
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int server_idFieldNumber = 1;
    private int serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int server_id {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int nameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wait_count" field.</summary>
    public const int wait_countFieldNumber = 3;
    private int waitCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int wait_count {
      get { return waitCount_; }
      set {
        waitCount_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int statusFieldNumber = 4;
    private global::NFMsg.EServerState status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.EServerState status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (server_id != other.server_id) return false;
      if (name != other.name) return false;
      if (wait_count != other.wait_count) return false;
      if (status != other.status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (server_id != 0) hash ^= server_id.GetHashCode();
      if (name.Length != 0) hash ^= name.GetHashCode();
      if (wait_count != 0) hash ^= wait_count.GetHashCode();
      if (status != 0) hash ^= status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (server_id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(server_id);
      }
      if (name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(name);
      }
      if (wait_count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(wait_count);
      }
      if (status != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (server_id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(server_id);
      }
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(name);
      }
      if (wait_count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(wait_count);
      }
      if (status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerInfo other) {
      if (other == null) {
        return;
      }
      if (other.server_id != 0) {
        server_id = other.server_id;
      }
      if (other.name.Length != 0) {
        name = other.name;
      }
      if (other.wait_count != 0) {
        wait_count = other.wait_count;
      }
      if (other.status != 0) {
        status = other.status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            server_id = input.ReadInt32();
            break;
          }
          case 18: {
            name = input.ReadBytes();
            break;
          }
          case 24: {
            wait_count = input.ReadInt32();
            break;
          }
          case 32: {
            status_ = (global::NFMsg.EServerState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqServerList : pb::IMessage<ReqServerList> {
    private static readonly pb::MessageParser<ReqServerList> _parser = new pb::MessageParser<ReqServerList>(() => new ReqServerList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqServerList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgPreGameReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqServerList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqServerList(ReqServerList other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqServerList Clone() {
      return new ReqServerList(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int typeFieldNumber = 1;
    private global::NFMsg.ReqServerListType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ReqServerListType type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqServerList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqServerList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (type != other.type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (type != 0) hash ^= type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqServerList other) {
      if (other == null) {
        return;
      }
      if (other.type != 0) {
        type = other.type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::NFMsg.ReqServerListType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AckServerList : pb::IMessage<AckServerList> {
    private static readonly pb::MessageParser<AckServerList> _parser = new pb::MessageParser<AckServerList>(() => new AckServerList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckServerList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgPreGameReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckServerList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckServerList(AckServerList other) : this() {
      type_ = other.type_;
      info_ = other.info_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckServerList Clone() {
      return new AckServerList(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int typeFieldNumber = 1;
    private global::NFMsg.ReqServerListType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ReqServerListType type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int infoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NFMsg.ServerInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(18, global::NFMsg.ServerInfo.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.ServerInfo> info_ = new pbc::RepeatedField<global::NFMsg.ServerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.ServerInfo> info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckServerList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckServerList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (type != other.type) return false;
      if(!info_.Equals(other.info_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (type != 0) hash ^= type.GetHashCode();
      hash ^= info_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) type);
      }
      info_.WriteTo(output, _repeated_info_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) type);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckServerList other) {
      if (other == null) {
        return;
      }
      if (other.type != 0) {
        type = other.type;
      }
      info_.Add(other.info_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::NFMsg.ReqServerListType) input.ReadEnum();
            break;
          }
          case 18: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqConnectWorld : pb::IMessage<ReqConnectWorld> {
    private static readonly pb::MessageParser<ReqConnectWorld> _parser = new pb::MessageParser<ReqConnectWorld>(() => new ReqConnectWorld());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqConnectWorld> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgPreGameReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqConnectWorld() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqConnectWorld(ReqConnectWorld other) : this() {
      worldId_ = other.worldId_;
      account_ = other.account_;
      sender_ = other.sender_ != null ? other.sender_.Clone() : null;
      loginId_ = other.loginId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqConnectWorld Clone() {
      return new ReqConnectWorld(this);
    }

    /// <summary>Field number for the "world_id" field.</summary>
    public const int world_idFieldNumber = 1;
    private int worldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int world_id {
      get { return worldId_; }
      set {
        worldId_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int accountFieldNumber = 2;
    private pb::ByteString account_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sender" field.</summary>
    public const int senderFieldNumber = 3;
    private global::NFMsg.Ident sender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident sender {
      get { return sender_; }
      set {
        sender_ = value;
      }
    }

    /// <summary>Field number for the "login_id" field.</summary>
    public const int login_idFieldNumber = 4;
    private int loginId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int login_id {
      get { return loginId_; }
      set {
        loginId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqConnectWorld);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqConnectWorld other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (world_id != other.world_id) return false;
      if (account != other.account) return false;
      if (!object.Equals(sender, other.sender)) return false;
      if (login_id != other.login_id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (world_id != 0) hash ^= world_id.GetHashCode();
      if (account.Length != 0) hash ^= account.GetHashCode();
      if (sender_ != null) hash ^= sender.GetHashCode();
      if (login_id != 0) hash ^= login_id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (world_id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(world_id);
      }
      if (account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(account);
      }
      if (sender_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(sender);
      }
      if (login_id != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(login_id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (world_id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(world_id);
      }
      if (account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(account);
      }
      if (sender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(sender);
      }
      if (login_id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(login_id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqConnectWorld other) {
      if (other == null) {
        return;
      }
      if (other.world_id != 0) {
        world_id = other.world_id;
      }
      if (other.account.Length != 0) {
        account = other.account;
      }
      if (other.sender_ != null) {
        if (sender_ == null) {
          sender_ = new global::NFMsg.Ident();
        }
        sender.MergeFrom(other.sender);
      }
      if (other.login_id != 0) {
        login_id = other.login_id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            world_id = input.ReadInt32();
            break;
          }
          case 18: {
            account = input.ReadBytes();
            break;
          }
          case 26: {
            if (sender_ == null) {
              sender_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(sender_);
            break;
          }
          case 32: {
            login_id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AckConnectWorldResult : pb::IMessage<AckConnectWorldResult> {
    private static readonly pb::MessageParser<AckConnectWorldResult> _parser = new pb::MessageParser<AckConnectWorldResult>(() => new AckConnectWorldResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckConnectWorldResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgPreGameReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckConnectWorldResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckConnectWorldResult(AckConnectWorldResult other) : this() {
      worldId_ = other.worldId_;
      sender_ = other.sender_ != null ? other.sender_.Clone() : null;
      loginId_ = other.loginId_;
      account_ = other.account_;
      worldIp_ = other.worldIp_;
      worldPort_ = other.worldPort_;
      worldKey_ = other.worldKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckConnectWorldResult Clone() {
      return new AckConnectWorldResult(this);
    }

    /// <summary>Field number for the "world_id" field.</summary>
    public const int world_idFieldNumber = 1;
    private int worldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int world_id {
      get { return worldId_; }
      set {
        worldId_ = value;
      }
    }

    /// <summary>Field number for the "sender" field.</summary>
    public const int senderFieldNumber = 2;
    private global::NFMsg.Ident sender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident sender {
      get { return sender_; }
      set {
        sender_ = value;
      }
    }

    /// <summary>Field number for the "login_id" field.</summary>
    public const int login_idFieldNumber = 3;
    private int loginId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int login_id {
      get { return loginId_; }
      set {
        loginId_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int accountFieldNumber = 4;
    private pb::ByteString account_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "world_ip" field.</summary>
    public const int world_ipFieldNumber = 5;
    private pb::ByteString worldIp_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString world_ip {
      get { return worldIp_; }
      set {
        worldIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "world_port" field.</summary>
    public const int world_portFieldNumber = 6;
    private int worldPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int world_port {
      get { return worldPort_; }
      set {
        worldPort_ = value;
      }
    }

    /// <summary>Field number for the "world_key" field.</summary>
    public const int world_keyFieldNumber = 7;
    private pb::ByteString worldKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString world_key {
      get { return worldKey_; }
      set {
        worldKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckConnectWorldResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckConnectWorldResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (world_id != other.world_id) return false;
      if (!object.Equals(sender, other.sender)) return false;
      if (login_id != other.login_id) return false;
      if (account != other.account) return false;
      if (world_ip != other.world_ip) return false;
      if (world_port != other.world_port) return false;
      if (world_key != other.world_key) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (world_id != 0) hash ^= world_id.GetHashCode();
      if (sender_ != null) hash ^= sender.GetHashCode();
      if (login_id != 0) hash ^= login_id.GetHashCode();
      if (account.Length != 0) hash ^= account.GetHashCode();
      if (world_ip.Length != 0) hash ^= world_ip.GetHashCode();
      if (world_port != 0) hash ^= world_port.GetHashCode();
      if (world_key.Length != 0) hash ^= world_key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (world_id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(world_id);
      }
      if (sender_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(sender);
      }
      if (login_id != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(login_id);
      }
      if (account.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(account);
      }
      if (world_ip.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(world_ip);
      }
      if (world_port != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(world_port);
      }
      if (world_key.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(world_key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (world_id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(world_id);
      }
      if (sender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(sender);
      }
      if (login_id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(login_id);
      }
      if (account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(account);
      }
      if (world_ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(world_ip);
      }
      if (world_port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(world_port);
      }
      if (world_key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(world_key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckConnectWorldResult other) {
      if (other == null) {
        return;
      }
      if (other.world_id != 0) {
        world_id = other.world_id;
      }
      if (other.sender_ != null) {
        if (sender_ == null) {
          sender_ = new global::NFMsg.Ident();
        }
        sender.MergeFrom(other.sender);
      }
      if (other.login_id != 0) {
        login_id = other.login_id;
      }
      if (other.account.Length != 0) {
        account = other.account;
      }
      if (other.world_ip.Length != 0) {
        world_ip = other.world_ip;
      }
      if (other.world_port != 0) {
        world_port = other.world_port;
      }
      if (other.world_key.Length != 0) {
        world_key = other.world_key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            world_id = input.ReadInt32();
            break;
          }
          case 18: {
            if (sender_ == null) {
              sender_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(sender_);
            break;
          }
          case 24: {
            login_id = input.ReadInt32();
            break;
          }
          case 34: {
            account = input.ReadBytes();
            break;
          }
          case 42: {
            world_ip = input.ReadBytes();
            break;
          }
          case 48: {
            world_port = input.ReadInt32();
            break;
          }
          case 58: {
            world_key = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqSelectServer : pb::IMessage<ReqSelectServer> {
    private static readonly pb::MessageParser<ReqSelectServer> _parser = new pb::MessageParser<ReqSelectServer>(() => new ReqSelectServer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSelectServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgPreGameReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSelectServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSelectServer(ReqSelectServer other) : this() {
      worldId_ = other.worldId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSelectServer Clone() {
      return new ReqSelectServer(this);
    }

    /// <summary>Field number for the "world_id" field.</summary>
    public const int world_idFieldNumber = 1;
    private int worldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int world_id {
      get { return worldId_; }
      set {
        worldId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqSelectServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqSelectServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (world_id != other.world_id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (world_id != 0) hash ^= world_id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (world_id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(world_id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (world_id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(world_id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqSelectServer other) {
      if (other == null) {
        return;
      }
      if (other.world_id != 0) {
        world_id = other.world_id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            world_id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqKickFromWorld : pb::IMessage<ReqKickFromWorld> {
    private static readonly pb::MessageParser<ReqKickFromWorld> _parser = new pb::MessageParser<ReqKickFromWorld>(() => new ReqKickFromWorld());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqKickFromWorld> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgPreGameReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqKickFromWorld() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqKickFromWorld(ReqKickFromWorld other) : this() {
      worldId_ = other.worldId_;
      account_ = other.account_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqKickFromWorld Clone() {
      return new ReqKickFromWorld(this);
    }

    /// <summary>Field number for the "world_id" field.</summary>
    public const int world_idFieldNumber = 1;
    private int worldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int world_id {
      get { return worldId_; }
      set {
        worldId_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int accountFieldNumber = 2;
    private pb::ByteString account_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqKickFromWorld);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqKickFromWorld other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (world_id != other.world_id) return false;
      if (account != other.account) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (world_id != 0) hash ^= world_id.GetHashCode();
      if (account.Length != 0) hash ^= account.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (world_id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(world_id);
      }
      if (account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(account);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (world_id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(world_id);
      }
      if (account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(account);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqKickFromWorld other) {
      if (other == null) {
        return;
      }
      if (other.world_id != 0) {
        world_id = other.world_id;
      }
      if (other.account.Length != 0) {
        account = other.account;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            world_id = input.ReadInt32();
            break;
          }
          case 18: {
            account = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /////////////////////////////////////////////
  /// </summary>
  public sealed partial class ReqRoleList : pb::IMessage<ReqRoleList> {
    private static readonly pb::MessageParser<ReqRoleList> _parser = new pb::MessageParser<ReqRoleList>(() => new ReqRoleList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqRoleList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgPreGameReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqRoleList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqRoleList(ReqRoleList other) : this() {
      gameId_ = other.gameId_;
      account_ = other.account_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqRoleList Clone() {
      return new ReqRoleList(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int game_idFieldNumber = 1;
    private int gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int game_id {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int accountFieldNumber = 2;
    private pb::ByteString account_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqRoleList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqRoleList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (game_id != other.game_id) return false;
      if (account != other.account) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (game_id != 0) hash ^= game_id.GetHashCode();
      if (account.Length != 0) hash ^= account.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (game_id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(game_id);
      }
      if (account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(account);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (game_id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(game_id);
      }
      if (account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(account);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqRoleList other) {
      if (other == null) {
        return;
      }
      if (other.game_id != 0) {
        game_id = other.game_id;
      }
      if (other.account.Length != 0) {
        account = other.account;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            game_id = input.ReadInt32();
            break;
          }
          case 18: {
            account = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoleLiteInfo : pb::IMessage<RoleLiteInfo> {
    private static readonly pb::MessageParser<RoleLiteInfo> _parser = new pb::MessageParser<RoleLiteInfo>(() => new RoleLiteInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleLiteInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgPreGameReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleLiteInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleLiteInfo(RoleLiteInfo other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      career_ = other.career_;
      sex_ = other.sex_;
      race_ = other.race_;
      noobName_ = other.noobName_;
      gameId_ = other.gameId_;
      roleLevel_ = other.roleLevel_;
      deleteTime_ = other.deleteTime_;
      regTime_ = other.regTime_;
      lastOfflineTime_ = other.lastOfflineTime_;
      lastOfflineIp_ = other.lastOfflineIp_;
      viewRecord_ = other.viewRecord_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleLiteInfo Clone() {
      return new RoleLiteInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int idFieldNumber = 1;
    private global::NFMsg.Ident id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int careerFieldNumber = 2;
    private int career_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int sexFieldNumber = 3;
    private int sex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "race" field.</summary>
    public const int raceFieldNumber = 4;
    private int race_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int race {
      get { return race_; }
      set {
        race_ = value;
      }
    }

    /// <summary>Field number for the "noob_name" field.</summary>
    public const int noob_nameFieldNumber = 5;
    private pb::ByteString noobName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString noob_name {
      get { return noobName_; }
      set {
        noobName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int game_idFieldNumber = 6;
    private int gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int game_id {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "role_level" field.</summary>
    public const int role_levelFieldNumber = 7;
    private int roleLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int role_level {
      get { return roleLevel_; }
      set {
        roleLevel_ = value;
      }
    }

    /// <summary>Field number for the "delete_time" field.</summary>
    public const int delete_timeFieldNumber = 8;
    private int deleteTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int delete_time {
      get { return deleteTime_; }
      set {
        deleteTime_ = value;
      }
    }

    /// <summary>Field number for the "reg_time" field.</summary>
    public const int reg_timeFieldNumber = 9;
    private int regTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int reg_time {
      get { return regTime_; }
      set {
        regTime_ = value;
      }
    }

    /// <summary>Field number for the "last_offline_time" field.</summary>
    public const int last_offline_timeFieldNumber = 10;
    private int lastOfflineTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int last_offline_time {
      get { return lastOfflineTime_; }
      set {
        lastOfflineTime_ = value;
      }
    }

    /// <summary>Field number for the "last_offline_ip" field.</summary>
    public const int last_offline_ipFieldNumber = 11;
    private int lastOfflineIp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int last_offline_ip {
      get { return lastOfflineIp_; }
      set {
        lastOfflineIp_ = value;
      }
    }

    /// <summary>Field number for the "view_record" field.</summary>
    public const int view_recordFieldNumber = 12;
    private pb::ByteString viewRecord_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString view_record {
      get { return viewRecord_; }
      set {
        viewRecord_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleLiteInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleLiteInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(id, other.id)) return false;
      if (career != other.career) return false;
      if (sex != other.sex) return false;
      if (race != other.race) return false;
      if (noob_name != other.noob_name) return false;
      if (game_id != other.game_id) return false;
      if (role_level != other.role_level) return false;
      if (delete_time != other.delete_time) return false;
      if (reg_time != other.reg_time) return false;
      if (last_offline_time != other.last_offline_time) return false;
      if (last_offline_ip != other.last_offline_ip) return false;
      if (view_record != other.view_record) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= id.GetHashCode();
      if (career != 0) hash ^= career.GetHashCode();
      if (sex != 0) hash ^= sex.GetHashCode();
      if (race != 0) hash ^= race.GetHashCode();
      if (noob_name.Length != 0) hash ^= noob_name.GetHashCode();
      if (game_id != 0) hash ^= game_id.GetHashCode();
      if (role_level != 0) hash ^= role_level.GetHashCode();
      if (delete_time != 0) hash ^= delete_time.GetHashCode();
      if (reg_time != 0) hash ^= reg_time.GetHashCode();
      if (last_offline_time != 0) hash ^= last_offline_time.GetHashCode();
      if (last_offline_ip != 0) hash ^= last_offline_ip.GetHashCode();
      if (view_record.Length != 0) hash ^= view_record.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(id);
      }
      if (career != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(career);
      }
      if (sex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(sex);
      }
      if (race != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(race);
      }
      if (noob_name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(noob_name);
      }
      if (game_id != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(game_id);
      }
      if (role_level != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(role_level);
      }
      if (delete_time != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(delete_time);
      }
      if (reg_time != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(reg_time);
      }
      if (last_offline_time != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(last_offline_time);
      }
      if (last_offline_ip != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(last_offline_ip);
      }
      if (view_record.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(view_record);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(id);
      }
      if (career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(career);
      }
      if (sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(sex);
      }
      if (race != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(race);
      }
      if (noob_name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(noob_name);
      }
      if (game_id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(game_id);
      }
      if (role_level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(role_level);
      }
      if (delete_time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(delete_time);
      }
      if (reg_time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(reg_time);
      }
      if (last_offline_time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(last_offline_time);
      }
      if (last_offline_ip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(last_offline_ip);
      }
      if (view_record.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(view_record);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleLiteInfo other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::NFMsg.Ident();
        }
        id.MergeFrom(other.id);
      }
      if (other.career != 0) {
        career = other.career;
      }
      if (other.sex != 0) {
        sex = other.sex;
      }
      if (other.race != 0) {
        race = other.race;
      }
      if (other.noob_name.Length != 0) {
        noob_name = other.noob_name;
      }
      if (other.game_id != 0) {
        game_id = other.game_id;
      }
      if (other.role_level != 0) {
        role_level = other.role_level;
      }
      if (other.delete_time != 0) {
        delete_time = other.delete_time;
      }
      if (other.reg_time != 0) {
        reg_time = other.reg_time;
      }
      if (other.last_offline_time != 0) {
        last_offline_time = other.last_offline_time;
      }
      if (other.last_offline_ip != 0) {
        last_offline_ip = other.last_offline_ip;
      }
      if (other.view_record.Length != 0) {
        view_record = other.view_record;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(id_);
            break;
          }
          case 16: {
            career = input.ReadInt32();
            break;
          }
          case 24: {
            sex = input.ReadInt32();
            break;
          }
          case 32: {
            race = input.ReadInt32();
            break;
          }
          case 42: {
            noob_name = input.ReadBytes();
            break;
          }
          case 48: {
            game_id = input.ReadInt32();
            break;
          }
          case 56: {
            role_level = input.ReadInt32();
            break;
          }
          case 64: {
            delete_time = input.ReadInt32();
            break;
          }
          case 72: {
            reg_time = input.ReadInt32();
            break;
          }
          case 80: {
            last_offline_time = input.ReadInt32();
            break;
          }
          case 88: {
            last_offline_ip = input.ReadInt32();
            break;
          }
          case 98: {
            view_record = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AckRoleLiteInfoList : pb::IMessage<AckRoleLiteInfoList> {
    private static readonly pb::MessageParser<AckRoleLiteInfoList> _parser = new pb::MessageParser<AckRoleLiteInfoList>(() => new AckRoleLiteInfoList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckRoleLiteInfoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgPreGameReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckRoleLiteInfoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckRoleLiteInfoList(AckRoleLiteInfoList other) : this() {
      charData_ = other.charData_.Clone();
      account_ = other.account_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckRoleLiteInfoList Clone() {
      return new AckRoleLiteInfoList(this);
    }

    /// <summary>Field number for the "char_data" field.</summary>
    public const int char_dataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NFMsg.RoleLiteInfo> _repeated_charData_codec
        = pb::FieldCodec.ForMessage(10, global::NFMsg.RoleLiteInfo.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.RoleLiteInfo> charData_ = new pbc::RepeatedField<global::NFMsg.RoleLiteInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.RoleLiteInfo> char_data {
      get { return charData_; }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int accountFieldNumber = 2;
    private pb::ByteString account_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckRoleLiteInfoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckRoleLiteInfoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!charData_.Equals(other.charData_)) return false;
      if (account != other.account) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= charData_.GetHashCode();
      if (account.Length != 0) hash ^= account.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      charData_.WriteTo(output, _repeated_charData_codec);
      if (account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(account);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += charData_.CalculateSize(_repeated_charData_codec);
      if (account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(account);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckRoleLiteInfoList other) {
      if (other == null) {
        return;
      }
      charData_.Add(other.charData_);
      if (other.account.Length != 0) {
        account = other.account;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            charData_.AddEntriesFrom(input, _repeated_charData_codec);
            break;
          }
          case 18: {
            account = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqCreateRole : pb::IMessage<ReqCreateRole> {
    private static readonly pb::MessageParser<ReqCreateRole> _parser = new pb::MessageParser<ReqCreateRole>(() => new ReqCreateRole());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqCreateRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgPreGameReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCreateRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCreateRole(ReqCreateRole other) : this() {
      account_ = other.account_;
      career_ = other.career_;
      sex_ = other.sex_;
      race_ = other.race_;
      noobName_ = other.noobName_;
      gameId_ = other.gameId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCreateRole Clone() {
      return new ReqCreateRole(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int accountFieldNumber = 1;
    private pb::ByteString account_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "career" field.</summary>
    public const int careerFieldNumber = 2;
    private int career_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int career {
      get { return career_; }
      set {
        career_ = value;
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int sexFieldNumber = 3;
    private int sex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "race" field.</summary>
    public const int raceFieldNumber = 4;
    private int race_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int race {
      get { return race_; }
      set {
        race_ = value;
      }
    }

    /// <summary>Field number for the "noob_name" field.</summary>
    public const int noob_nameFieldNumber = 5;
    private pb::ByteString noobName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString noob_name {
      get { return noobName_; }
      set {
        noobName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int game_idFieldNumber = 6;
    private int gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int game_id {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqCreateRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqCreateRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (account != other.account) return false;
      if (career != other.career) return false;
      if (sex != other.sex) return false;
      if (race != other.race) return false;
      if (noob_name != other.noob_name) return false;
      if (game_id != other.game_id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (account.Length != 0) hash ^= account.GetHashCode();
      if (career != 0) hash ^= career.GetHashCode();
      if (sex != 0) hash ^= sex.GetHashCode();
      if (race != 0) hash ^= race.GetHashCode();
      if (noob_name.Length != 0) hash ^= noob_name.GetHashCode();
      if (game_id != 0) hash ^= game_id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(account);
      }
      if (career != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(career);
      }
      if (sex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(sex);
      }
      if (race != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(race);
      }
      if (noob_name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(noob_name);
      }
      if (game_id != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(game_id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(account);
      }
      if (career != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(career);
      }
      if (sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(sex);
      }
      if (race != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(race);
      }
      if (noob_name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(noob_name);
      }
      if (game_id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(game_id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqCreateRole other) {
      if (other == null) {
        return;
      }
      if (other.account.Length != 0) {
        account = other.account;
      }
      if (other.career != 0) {
        career = other.career;
      }
      if (other.sex != 0) {
        sex = other.sex;
      }
      if (other.race != 0) {
        race = other.race;
      }
      if (other.noob_name.Length != 0) {
        noob_name = other.noob_name;
      }
      if (other.game_id != 0) {
        game_id = other.game_id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            account = input.ReadBytes();
            break;
          }
          case 16: {
            career = input.ReadInt32();
            break;
          }
          case 24: {
            sex = input.ReadInt32();
            break;
          }
          case 32: {
            race = input.ReadInt32();
            break;
          }
          case 42: {
            noob_name = input.ReadBytes();
            break;
          }
          case 48: {
            game_id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqDeleteRole : pb::IMessage<ReqDeleteRole> {
    private static readonly pb::MessageParser<ReqDeleteRole> _parser = new pb::MessageParser<ReqDeleteRole>(() => new ReqDeleteRole());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqDeleteRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgPreGameReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqDeleteRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqDeleteRole(ReqDeleteRole other) : this() {
      account_ = other.account_;
      name_ = other.name_;
      gameId_ = other.gameId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqDeleteRole Clone() {
      return new ReqDeleteRole(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int accountFieldNumber = 1;
    private pb::ByteString account_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int nameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int game_idFieldNumber = 3;
    private int gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int game_id {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqDeleteRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqDeleteRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (account != other.account) return false;
      if (name != other.name) return false;
      if (game_id != other.game_id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (account.Length != 0) hash ^= account.GetHashCode();
      if (name.Length != 0) hash ^= name.GetHashCode();
      if (game_id != 0) hash ^= game_id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(account);
      }
      if (name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(name);
      }
      if (game_id != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(game_id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(account);
      }
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(name);
      }
      if (game_id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(game_id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqDeleteRole other) {
      if (other == null) {
        return;
      }
      if (other.account.Length != 0) {
        account = other.account;
      }
      if (other.name.Length != 0) {
        name = other.name;
      }
      if (other.game_id != 0) {
        game_id = other.game_id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            account = input.ReadBytes();
            break;
          }
          case 18: {
            name = input.ReadBytes();
            break;
          }
          case 24: {
            game_id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqRecoverRole : pb::IMessage<ReqRecoverRole> {
    private static readonly pb::MessageParser<ReqRecoverRole> _parser = new pb::MessageParser<ReqRecoverRole>(() => new ReqRecoverRole());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqRecoverRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgPreGameReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqRecoverRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqRecoverRole(ReqRecoverRole other) : this() {
      account_ = other.account_;
      name_ = other.name_;
      gameId_ = other.gameId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqRecoverRole Clone() {
      return new ReqRecoverRole(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int accountFieldNumber = 1;
    private pb::ByteString account_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int nameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int game_idFieldNumber = 3;
    private int gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int game_id {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqRecoverRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqRecoverRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (account != other.account) return false;
      if (name != other.name) return false;
      if (game_id != other.game_id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (account.Length != 0) hash ^= account.GetHashCode();
      if (name.Length != 0) hash ^= name.GetHashCode();
      if (game_id != 0) hash ^= game_id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(account);
      }
      if (name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(name);
      }
      if (game_id != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(game_id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(account);
      }
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(name);
      }
      if (game_id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(game_id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqRecoverRole other) {
      if (other == null) {
        return;
      }
      if (other.account.Length != 0) {
        account = other.account;
      }
      if (other.name.Length != 0) {
        name = other.name;
      }
      if (other.game_id != 0) {
        game_id = other.game_id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            account = input.ReadBytes();
            break;
          }
          case 18: {
            name = input.ReadBytes();
            break;
          }
          case 24: {
            game_id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServerHeartBeat : pb::IMessage<ServerHeartBeat> {
    private static readonly pb::MessageParser<ServerHeartBeat> _parser = new pb::MessageParser<ServerHeartBeat>(() => new ServerHeartBeat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerHeartBeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgPreGameReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerHeartBeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerHeartBeat(ServerHeartBeat other) : this() {
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerHeartBeat Clone() {
      return new ServerHeartBeat(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int countFieldNumber = 1;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerHeartBeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerHeartBeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (count != other.count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (count != 0) hash ^= count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerHeartBeat other) {
      if (other == null) {
        return;
      }
      if (other.count != 0) {
        count = other.count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoleOnlineNotify : pb::IMessage<RoleOnlineNotify> {
    private static readonly pb::MessageParser<RoleOnlineNotify> _parser = new pb::MessageParser<RoleOnlineNotify>(() => new RoleOnlineNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleOnlineNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgPreGameReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleOnlineNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleOnlineNotify(RoleOnlineNotify other) : this() {
      self_ = other.self_ != null ? other.self_.Clone() : null;
      clan_ = other.clan_ != null ? other.clan_.Clone() : null;
      game_ = other.game_;
      proxy_ = other.proxy_;
      name_ = other.name_;
      bp_ = other.bp_;
      propertyIntList_ = other.propertyIntList_.Clone();
      propertyFloatList_ = other.propertyFloatList_.Clone();
      propertyStringList_ = other.propertyStringList_.Clone();
      propertyObjectList_ = other.propertyObjectList_.Clone();
      propertyVector2List_ = other.propertyVector2List_.Clone();
      propertyVector3List_ = other.propertyVector3List_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleOnlineNotify Clone() {
      return new RoleOnlineNotify(this);
    }

    /// <summary>Field number for the "self" field.</summary>
    public const int selfFieldNumber = 1;
    private global::NFMsg.Ident self_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident self {
      get { return self_; }
      set {
        self_ = value;
      }
    }

    /// <summary>Field number for the "clan" field.</summary>
    public const int clanFieldNumber = 2;
    private global::NFMsg.Ident clan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident clan {
      get { return clan_; }
      set {
        clan_ = value;
      }
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int gameFieldNumber = 3;
    private int game_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int game {
      get { return game_; }
      set {
        game_ = value;
      }
    }

    /// <summary>Field number for the "proxy" field.</summary>
    public const int proxyFieldNumber = 4;
    private int proxy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int proxy {
      get { return proxy_; }
      set {
        proxy_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int nameFieldNumber = 5;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bp" field.</summary>
    public const int bpFieldNumber = 6;
    private int bp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int bp {
      get { return bp_; }
      set {
        bp_ = value;
      }
    }

    /// <summary>Field number for the "property_int_list" field.</summary>
    public const int property_int_listFieldNumber = 20;
    private static readonly pb::FieldCodec<global::NFMsg.PropertyInt> _repeated_propertyIntList_codec
        = pb::FieldCodec.ForMessage(162, global::NFMsg.PropertyInt.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.PropertyInt> propertyIntList_ = new pbc::RepeatedField<global::NFMsg.PropertyInt>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.PropertyInt> property_int_list {
      get { return propertyIntList_; }
    }

    /// <summary>Field number for the "property_float_list" field.</summary>
    public const int property_float_listFieldNumber = 21;
    private static readonly pb::FieldCodec<global::NFMsg.PropertyFloat> _repeated_propertyFloatList_codec
        = pb::FieldCodec.ForMessage(170, global::NFMsg.PropertyFloat.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.PropertyFloat> propertyFloatList_ = new pbc::RepeatedField<global::NFMsg.PropertyFloat>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.PropertyFloat> property_float_list {
      get { return propertyFloatList_; }
    }

    /// <summary>Field number for the "property_string_list" field.</summary>
    public const int property_string_listFieldNumber = 22;
    private static readonly pb::FieldCodec<global::NFMsg.PropertyString> _repeated_propertyStringList_codec
        = pb::FieldCodec.ForMessage(178, global::NFMsg.PropertyString.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.PropertyString> propertyStringList_ = new pbc::RepeatedField<global::NFMsg.PropertyString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.PropertyString> property_string_list {
      get { return propertyStringList_; }
    }

    /// <summary>Field number for the "property_object_list" field.</summary>
    public const int property_object_listFieldNumber = 23;
    private static readonly pb::FieldCodec<global::NFMsg.PropertyObject> _repeated_propertyObjectList_codec
        = pb::FieldCodec.ForMessage(186, global::NFMsg.PropertyObject.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.PropertyObject> propertyObjectList_ = new pbc::RepeatedField<global::NFMsg.PropertyObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.PropertyObject> property_object_list {
      get { return propertyObjectList_; }
    }

    /// <summary>Field number for the "property_vector2_list" field.</summary>
    public const int property_vector2_listFieldNumber = 24;
    private static readonly pb::FieldCodec<global::NFMsg.PropertyVector2> _repeated_propertyVector2List_codec
        = pb::FieldCodec.ForMessage(194, global::NFMsg.PropertyVector2.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.PropertyVector2> propertyVector2List_ = new pbc::RepeatedField<global::NFMsg.PropertyVector2>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.PropertyVector2> property_vector2_list {
      get { return propertyVector2List_; }
    }

    /// <summary>Field number for the "property_vector3_list" field.</summary>
    public const int property_vector3_listFieldNumber = 25;
    private static readonly pb::FieldCodec<global::NFMsg.PropertyVector3> _repeated_propertyVector3List_codec
        = pb::FieldCodec.ForMessage(202, global::NFMsg.PropertyVector3.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.PropertyVector3> propertyVector3List_ = new pbc::RepeatedField<global::NFMsg.PropertyVector3>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.PropertyVector3> property_vector3_list {
      get { return propertyVector3List_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleOnlineNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleOnlineNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(self, other.self)) return false;
      if (!object.Equals(clan, other.clan)) return false;
      if (game != other.game) return false;
      if (proxy != other.proxy) return false;
      if (name != other.name) return false;
      if (bp != other.bp) return false;
      if(!propertyIntList_.Equals(other.propertyIntList_)) return false;
      if(!propertyFloatList_.Equals(other.propertyFloatList_)) return false;
      if(!propertyStringList_.Equals(other.propertyStringList_)) return false;
      if(!propertyObjectList_.Equals(other.propertyObjectList_)) return false;
      if(!propertyVector2List_.Equals(other.propertyVector2List_)) return false;
      if(!propertyVector3List_.Equals(other.propertyVector3List_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (self_ != null) hash ^= self.GetHashCode();
      if (clan_ != null) hash ^= clan.GetHashCode();
      if (game != 0) hash ^= game.GetHashCode();
      if (proxy != 0) hash ^= proxy.GetHashCode();
      if (name.Length != 0) hash ^= name.GetHashCode();
      if (bp != 0) hash ^= bp.GetHashCode();
      hash ^= propertyIntList_.GetHashCode();
      hash ^= propertyFloatList_.GetHashCode();
      hash ^= propertyStringList_.GetHashCode();
      hash ^= propertyObjectList_.GetHashCode();
      hash ^= propertyVector2List_.GetHashCode();
      hash ^= propertyVector3List_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (self_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(self);
      }
      if (clan_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(clan);
      }
      if (game != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(game);
      }
      if (proxy != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(proxy);
      }
      if (name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(name);
      }
      if (bp != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(bp);
      }
      propertyIntList_.WriteTo(output, _repeated_propertyIntList_codec);
      propertyFloatList_.WriteTo(output, _repeated_propertyFloatList_codec);
      propertyStringList_.WriteTo(output, _repeated_propertyStringList_codec);
      propertyObjectList_.WriteTo(output, _repeated_propertyObjectList_codec);
      propertyVector2List_.WriteTo(output, _repeated_propertyVector2List_codec);
      propertyVector3List_.WriteTo(output, _repeated_propertyVector3List_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (self_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(self);
      }
      if (clan_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(clan);
      }
      if (game != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(game);
      }
      if (proxy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(proxy);
      }
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(name);
      }
      if (bp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(bp);
      }
      size += propertyIntList_.CalculateSize(_repeated_propertyIntList_codec);
      size += propertyFloatList_.CalculateSize(_repeated_propertyFloatList_codec);
      size += propertyStringList_.CalculateSize(_repeated_propertyStringList_codec);
      size += propertyObjectList_.CalculateSize(_repeated_propertyObjectList_codec);
      size += propertyVector2List_.CalculateSize(_repeated_propertyVector2List_codec);
      size += propertyVector3List_.CalculateSize(_repeated_propertyVector3List_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleOnlineNotify other) {
      if (other == null) {
        return;
      }
      if (other.self_ != null) {
        if (self_ == null) {
          self_ = new global::NFMsg.Ident();
        }
        self.MergeFrom(other.self);
      }
      if (other.clan_ != null) {
        if (clan_ == null) {
          clan_ = new global::NFMsg.Ident();
        }
        clan.MergeFrom(other.clan);
      }
      if (other.game != 0) {
        game = other.game;
      }
      if (other.proxy != 0) {
        proxy = other.proxy;
      }
      if (other.name.Length != 0) {
        name = other.name;
      }
      if (other.bp != 0) {
        bp = other.bp;
      }
      propertyIntList_.Add(other.propertyIntList_);
      propertyFloatList_.Add(other.propertyFloatList_);
      propertyStringList_.Add(other.propertyStringList_);
      propertyObjectList_.Add(other.propertyObjectList_);
      propertyVector2List_.Add(other.propertyVector2List_);
      propertyVector3List_.Add(other.propertyVector3List_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (self_ == null) {
              self_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(self_);
            break;
          }
          case 18: {
            if (clan_ == null) {
              clan_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(clan_);
            break;
          }
          case 24: {
            game = input.ReadInt32();
            break;
          }
          case 32: {
            proxy = input.ReadInt32();
            break;
          }
          case 42: {
            name = input.ReadBytes();
            break;
          }
          case 48: {
            bp = input.ReadInt32();
            break;
          }
          case 162: {
            propertyIntList_.AddEntriesFrom(input, _repeated_propertyIntList_codec);
            break;
          }
          case 170: {
            propertyFloatList_.AddEntriesFrom(input, _repeated_propertyFloatList_codec);
            break;
          }
          case 178: {
            propertyStringList_.AddEntriesFrom(input, _repeated_propertyStringList_codec);
            break;
          }
          case 186: {
            propertyObjectList_.AddEntriesFrom(input, _repeated_propertyObjectList_codec);
            break;
          }
          case 194: {
            propertyVector2List_.AddEntriesFrom(input, _repeated_propertyVector2List_codec);
            break;
          }
          case 202: {
            propertyVector3List_.AddEntriesFrom(input, _repeated_propertyVector3List_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoleOfflineNotify : pb::IMessage<RoleOfflineNotify> {
    private static readonly pb::MessageParser<RoleOfflineNotify> _parser = new pb::MessageParser<RoleOfflineNotify>(() => new RoleOfflineNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleOfflineNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgPreGameReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleOfflineNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleOfflineNotify(RoleOfflineNotify other) : this() {
      self_ = other.self_ != null ? other.self_.Clone() : null;
      clan_ = other.clan_ != null ? other.clan_.Clone() : null;
      game_ = other.game_;
      proxy_ = other.proxy_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleOfflineNotify Clone() {
      return new RoleOfflineNotify(this);
    }

    /// <summary>Field number for the "self" field.</summary>
    public const int selfFieldNumber = 1;
    private global::NFMsg.Ident self_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident self {
      get { return self_; }
      set {
        self_ = value;
      }
    }

    /// <summary>Field number for the "clan" field.</summary>
    public const int clanFieldNumber = 2;
    private global::NFMsg.Ident clan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident clan {
      get { return clan_; }
      set {
        clan_ = value;
      }
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int gameFieldNumber = 3;
    private int game_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int game {
      get { return game_; }
      set {
        game_ = value;
      }
    }

    /// <summary>Field number for the "proxy" field.</summary>
    public const int proxyFieldNumber = 4;
    private int proxy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int proxy {
      get { return proxy_; }
      set {
        proxy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleOfflineNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleOfflineNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(self, other.self)) return false;
      if (!object.Equals(clan, other.clan)) return false;
      if (game != other.game) return false;
      if (proxy != other.proxy) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (self_ != null) hash ^= self.GetHashCode();
      if (clan_ != null) hash ^= clan.GetHashCode();
      if (game != 0) hash ^= game.GetHashCode();
      if (proxy != 0) hash ^= proxy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (self_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(self);
      }
      if (clan_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(clan);
      }
      if (game != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(game);
      }
      if (proxy != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(proxy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (self_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(self);
      }
      if (clan_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(clan);
      }
      if (game != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(game);
      }
      if (proxy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(proxy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleOfflineNotify other) {
      if (other == null) {
        return;
      }
      if (other.self_ != null) {
        if (self_ == null) {
          self_ = new global::NFMsg.Ident();
        }
        self.MergeFrom(other.self);
      }
      if (other.clan_ != null) {
        if (clan_ == null) {
          clan_ = new global::NFMsg.Ident();
        }
        clan.MergeFrom(other.clan);
      }
      if (other.game != 0) {
        game = other.game;
      }
      if (other.proxy != 0) {
        proxy = other.proxy;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (self_ == null) {
              self_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(self_);
            break;
          }
          case 18: {
            if (clan_ == null) {
              clan_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(clan_);
            break;
          }
          case 24: {
            game = input.ReadInt32();
            break;
          }
          case 32: {
            proxy = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoleDataPack : pb::IMessage<RoleDataPack> {
    private static readonly pb::MessageParser<RoleDataPack> _parser = new pb::MessageParser<RoleDataPack>(() => new RoleDataPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleDataPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgPreGameReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleDataPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleDataPack(RoleDataPack other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      property_ = other.property_ != null ? other.property_.Clone() : null;
      record_ = other.record_ != null ? other.record_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleDataPack Clone() {
      return new RoleDataPack(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int idFieldNumber = 1;
    private global::NFMsg.Ident id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "property" field.</summary>
    public const int propertyFieldNumber = 2;
    private global::NFMsg.ObjectPropertyList property_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ObjectPropertyList property {
      get { return property_; }
      set {
        property_ = value;
      }
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int recordFieldNumber = 3;
    private global::NFMsg.ObjectRecordList record_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ObjectRecordList record {
      get { return record_; }
      set {
        record_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleDataPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleDataPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(id, other.id)) return false;
      if (!object.Equals(property, other.property)) return false;
      if (!object.Equals(record, other.record)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= id.GetHashCode();
      if (property_ != null) hash ^= property.GetHashCode();
      if (record_ != null) hash ^= record.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(id);
      }
      if (property_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(property);
      }
      if (record_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(record);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(id);
      }
      if (property_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(property);
      }
      if (record_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(record);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleDataPack other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::NFMsg.Ident();
        }
        id.MergeFrom(other.id);
      }
      if (other.property_ != null) {
        if (property_ == null) {
          property_ = new global::NFMsg.ObjectPropertyList();
        }
        property.MergeFrom(other.property);
      }
      if (other.record_ != null) {
        if (record_ == null) {
          record_ = new global::NFMsg.ObjectRecordList();
        }
        record.MergeFrom(other.record);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(id_);
            break;
          }
          case 18: {
            if (property_ == null) {
              property_ = new global::NFMsg.ObjectPropertyList();
            }
            input.ReadMessage(property_);
            break;
          }
          case 26: {
            if (record_ == null) {
              record_ = new global::NFMsg.ObjectRecordList();
            }
            input.ReadMessage(record_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
