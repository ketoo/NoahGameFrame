// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFRecordDefine.proto

#ifndef PROTOBUF_NFRecordDefine_2eproto__INCLUDED
#define PROTOBUF_NFRecordDefine_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace NFMsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_NFRecordDefine_2eproto();
void protobuf_AssignDesc_NFRecordDefine_2eproto();
void protobuf_ShutdownFile_NFRecordDefine_2eproto();


enum RCT_BuildingList {
  BuildingList_BuildingID = 0,
  BuildingList_BuildingGUID = 1,
  BuildingList_State = 2,
  BuildingList_PosX = 3,
  BuildingList_PosY = 4,
  BuildingList_PosZ = 5,
  BuildingList_StateStartTime = 6,
  BuildingList_StateEndTime = 7
};
bool RCT_BuildingList_IsValid(int value);
const RCT_BuildingList RCT_BuildingList_MIN = BuildingList_BuildingID;
const RCT_BuildingList RCT_BuildingList_MAX = BuildingList_StateEndTime;
const int RCT_BuildingList_ARRAYSIZE = RCT_BuildingList_MAX + 1;

const ::google::protobuf::EnumDescriptor* RCT_BuildingList_descriptor();
inline const ::std::string& RCT_BuildingList_Name(RCT_BuildingList value) {
  return ::google::protobuf::internal::NameOfEnum(
    RCT_BuildingList_descriptor(), value);
}
inline bool RCT_BuildingList_Parse(
    const ::std::string& name, RCT_BuildingList* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RCT_BuildingList>(
    RCT_BuildingList_descriptor(), name, value);
}
enum RCT_BuildingProduce {
  BuildingProduce_BuildingGUID = 0,
  BuildingProduce_ItemID = 1,
  BuildingProduce_LeftCount = 2,
  BuildingProduce_OnceTime = 3,
  BuildingProduce_OnceStartTime = 4
};
bool RCT_BuildingProduce_IsValid(int value);
const RCT_BuildingProduce RCT_BuildingProduce_MIN = BuildingProduce_BuildingGUID;
const RCT_BuildingProduce RCT_BuildingProduce_MAX = BuildingProduce_OnceStartTime;
const int RCT_BuildingProduce_ARRAYSIZE = RCT_BuildingProduce_MAX + 1;

const ::google::protobuf::EnumDescriptor* RCT_BuildingProduce_descriptor();
inline const ::std::string& RCT_BuildingProduce_Name(RCT_BuildingProduce value) {
  return ::google::protobuf::internal::NameOfEnum(
    RCT_BuildingProduce_descriptor(), value);
}
inline bool RCT_BuildingProduce_Parse(
    const ::std::string& name, RCT_BuildingProduce* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RCT_BuildingProduce>(
    RCT_BuildingProduce_descriptor(), name, value);
}
enum RCT_GroupMemberList {
  GroupMemberList_GUID = 0,
  GroupMemberList_Online = 1,
  GroupMemberList_GameID = 2
};
bool RCT_GroupMemberList_IsValid(int value);
const RCT_GroupMemberList RCT_GroupMemberList_MIN = GroupMemberList_GUID;
const RCT_GroupMemberList RCT_GroupMemberList_MAX = GroupMemberList_GameID;
const int RCT_GroupMemberList_ARRAYSIZE = RCT_GroupMemberList_MAX + 1;

const ::google::protobuf::EnumDescriptor* RCT_GroupMemberList_descriptor();
inline const ::std::string& RCT_GroupMemberList_Name(RCT_GroupMemberList value) {
  return ::google::protobuf::internal::NameOfEnum(
    RCT_GroupMemberList_descriptor(), value);
}
inline bool RCT_GroupMemberList_Parse(
    const ::std::string& name, RCT_GroupMemberList* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RCT_GroupMemberList>(
    RCT_GroupMemberList_descriptor(), name, value);
}
enum RCT_ChatList {
  ChatList_GUID = 0,
  ChatList_msg = 1,
  ChatList_time = 2
};
bool RCT_ChatList_IsValid(int value);
const RCT_ChatList RCT_ChatList_MIN = ChatList_GUID;
const RCT_ChatList RCT_ChatList_MAX = ChatList_time;
const int RCT_ChatList_ARRAYSIZE = RCT_ChatList_MAX + 1;

const ::google::protobuf::EnumDescriptor* RCT_ChatList_descriptor();
inline const ::std::string& RCT_ChatList_Name(RCT_ChatList value) {
  return ::google::protobuf::internal::NameOfEnum(
    RCT_ChatList_descriptor(), value);
}
inline bool RCT_ChatList_Parse(
    const ::std::string& name, RCT_ChatList* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RCT_ChatList>(
    RCT_ChatList_descriptor(), name, value);
}
enum RCT_GuildBoss {
  GuildBoss_GUID = 0,
  GuildBoss_Name = 1,
  GuildBoss_Level = 2,
  GuildBoss_Job = 3,
  GuildBoss_Donation = 4,
  GuildBoss_VIP = 5,
  GuildBoss_Offline = 6,
  GuildBoss_Power = 7
};
bool RCT_GuildBoss_IsValid(int value);
const RCT_GuildBoss RCT_GuildBoss_MIN = GuildBoss_GUID;
const RCT_GuildBoss RCT_GuildBoss_MAX = GuildBoss_Power;
const int RCT_GuildBoss_ARRAYSIZE = RCT_GuildBoss_MAX + 1;

const ::google::protobuf::EnumDescriptor* RCT_GuildBoss_descriptor();
inline const ::std::string& RCT_GuildBoss_Name(RCT_GuildBoss value) {
  return ::google::protobuf::internal::NameOfEnum(
    RCT_GuildBoss_descriptor(), value);
}
inline bool RCT_GuildBoss_Parse(
    const ::std::string& name, RCT_GuildBoss* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RCT_GuildBoss>(
    RCT_GuildBoss_descriptor(), name, value);
}
enum RCT_GuildMemberList {
  GuildMemberList_GUID = 0,
  GuildMemberList_Name = 1,
  GuildMemberList_Level = 2,
  GuildMemberList_Job = 3,
  GuildMemberList_Donation = 4,
  GuildMemberList_Receive = 5,
  GuildMemberList_VIP = 6,
  GuildMemberList_Online = 7,
  GuildMemberList_Power = 8,
  GuildMemberList_Title = 9,
  GuildMemberList_GameID = 10,
  GuildMemberList_JoinTime = 11,
  GuildMemberList_Contribution = 12,
  GuildMemberList_AllContribution = 13
};
bool RCT_GuildMemberList_IsValid(int value);
const RCT_GuildMemberList RCT_GuildMemberList_MIN = GuildMemberList_GUID;
const RCT_GuildMemberList RCT_GuildMemberList_MAX = GuildMemberList_AllContribution;
const int RCT_GuildMemberList_ARRAYSIZE = RCT_GuildMemberList_MAX + 1;

const ::google::protobuf::EnumDescriptor* RCT_GuildMemberList_descriptor();
inline const ::std::string& RCT_GuildMemberList_Name(RCT_GuildMemberList value) {
  return ::google::protobuf::internal::NameOfEnum(
    RCT_GuildMemberList_descriptor(), value);
}
inline bool RCT_GuildMemberList_Parse(
    const ::std::string& name, RCT_GuildMemberList* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RCT_GuildMemberList>(
    RCT_GuildMemberList_descriptor(), name, value);
}
enum RCT_GuildAppyList {
  GuildAppyList_GUID = 0,
  GuildAppyList_Name = 1,
  GuildAppyList_Level = 2,
  GuildAppyList_Job = 3,
  GuildAppyList_Donation = 4,
  GuildAppyList_VIP = 5,
  GuildAppyList_Power = 6
};
bool RCT_GuildAppyList_IsValid(int value);
const RCT_GuildAppyList RCT_GuildAppyList_MIN = GuildAppyList_GUID;
const RCT_GuildAppyList RCT_GuildAppyList_MAX = GuildAppyList_Power;
const int RCT_GuildAppyList_ARRAYSIZE = RCT_GuildAppyList_MAX + 1;

const ::google::protobuf::EnumDescriptor* RCT_GuildAppyList_descriptor();
inline const ::std::string& RCT_GuildAppyList_Name(RCT_GuildAppyList value) {
  return ::google::protobuf::internal::NameOfEnum(
    RCT_GuildAppyList_descriptor(), value);
}
inline bool RCT_GuildAppyList_Parse(
    const ::std::string& name, RCT_GuildAppyList* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RCT_GuildAppyList>(
    RCT_GuildAppyList_descriptor(), name, value);
}
enum RCT_GuildEvent {
  GuildEvent_GUID = 0,
  GuildEvent_Name = 1,
  GuildEvent_Level = 2,
  GuildEvent_Job = 3,
  GuildEvent_Donation = 4,
  GuildEvent_VIP = 5,
  GuildEvent_Offline = 6,
  GuildEvent_Power = 7,
  GuildEvent_EventID = 8,
  GuildEvent_EventTime = 9,
  GuildEvent_Context = 10
};
bool RCT_GuildEvent_IsValid(int value);
const RCT_GuildEvent RCT_GuildEvent_MIN = GuildEvent_GUID;
const RCT_GuildEvent RCT_GuildEvent_MAX = GuildEvent_Context;
const int RCT_GuildEvent_ARRAYSIZE = RCT_GuildEvent_MAX + 1;

const ::google::protobuf::EnumDescriptor* RCT_GuildEvent_descriptor();
inline const ::std::string& RCT_GuildEvent_Name(RCT_GuildEvent value) {
  return ::google::protobuf::internal::NameOfEnum(
    RCT_GuildEvent_descriptor(), value);
}
inline bool RCT_GuildEvent_Parse(
    const ::std::string& name, RCT_GuildEvent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RCT_GuildEvent>(
    RCT_GuildEvent_descriptor(), name, value);
}
enum RCT_GuildHouse {
  GuildHouse_GUID = 0,
  GuildHouse_Name = 1,
  GuildHouse_Level = 2,
  GuildHouse_Job = 3,
  GuildHouse_Donation = 4,
  GuildHouse_VIP = 5,
  GuildHouse_Offline = 6,
  GuildHouse_Power = 7
};
bool RCT_GuildHouse_IsValid(int value);
const RCT_GuildHouse RCT_GuildHouse_MIN = GuildHouse_GUID;
const RCT_GuildHouse RCT_GuildHouse_MAX = GuildHouse_Power;
const int RCT_GuildHouse_ARRAYSIZE = RCT_GuildHouse_MAX + 1;

const ::google::protobuf::EnumDescriptor* RCT_GuildHouse_descriptor();
inline const ::std::string& RCT_GuildHouse_Name(RCT_GuildHouse value) {
  return ::google::protobuf::internal::NameOfEnum(
    RCT_GuildHouse_descriptor(), value);
}
inline bool RCT_GuildHouse_Parse(
    const ::std::string& name, RCT_GuildHouse* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RCT_GuildHouse>(
    RCT_GuildHouse_descriptor(), name, value);
}
enum RCT_GuildSkill {
  GuildSkill_GUID = 0,
  GuildSkill_Name = 1,
  GuildSkill_Level = 2,
  GuildSkill_Job = 3,
  GuildSkill_Donation = 4,
  GuildSkill_VIP = 5,
  GuildSkill_Offline = 6,
  GuildSkill_Power = 7
};
bool RCT_GuildSkill_IsValid(int value);
const RCT_GuildSkill RCT_GuildSkill_MIN = GuildSkill_GUID;
const RCT_GuildSkill RCT_GuildSkill_MAX = GuildSkill_Power;
const int RCT_GuildSkill_ARRAYSIZE = RCT_GuildSkill_MAX + 1;

const ::google::protobuf::EnumDescriptor* RCT_GuildSkill_descriptor();
inline const ::std::string& RCT_GuildSkill_Name(RCT_GuildSkill value) {
  return ::google::protobuf::internal::NameOfEnum(
    RCT_GuildSkill_descriptor(), value);
}
inline bool RCT_GuildSkill_Parse(
    const ::std::string& name, RCT_GuildSkill* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RCT_GuildSkill>(
    RCT_GuildSkill_descriptor(), name, value);
}
enum RCT_PosList {
  PosList_X = 0,
  PosList_Y = 1,
  PosList_Z = 2,
  PosList_StayTime = 3
};
bool RCT_PosList_IsValid(int value);
const RCT_PosList RCT_PosList_MIN = PosList_X;
const RCT_PosList RCT_PosList_MAX = PosList_StayTime;
const int RCT_PosList_ARRAYSIZE = RCT_PosList_MAX + 1;

const ::google::protobuf::EnumDescriptor* RCT_PosList_descriptor();
inline const ::std::string& RCT_PosList_Name(RCT_PosList value) {
  return ::google::protobuf::internal::NameOfEnum(
    RCT_PosList_descriptor(), value);
}
inline bool RCT_PosList_Parse(
    const ::std::string& name, RCT_PosList* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RCT_PosList>(
    RCT_PosList_descriptor(), name, value);
}
enum RCT_PlayerViewItem {
  PlayerViewItem_ConfigID = 0,
  PlayerViewItem_EnhanceLevel = 1,
  PlayerViewItem_InlayStone = 2,
  PlayerViewItem_SagecraftLevel = 3
};
bool RCT_PlayerViewItem_IsValid(int value);
const RCT_PlayerViewItem RCT_PlayerViewItem_MIN = PlayerViewItem_ConfigID;
const RCT_PlayerViewItem RCT_PlayerViewItem_MAX = PlayerViewItem_SagecraftLevel;
const int RCT_PlayerViewItem_ARRAYSIZE = RCT_PlayerViewItem_MAX + 1;

const ::google::protobuf::EnumDescriptor* RCT_PlayerViewItem_descriptor();
inline const ::std::string& RCT_PlayerViewItem_Name(RCT_PlayerViewItem value) {
  return ::google::protobuf::internal::NameOfEnum(
    RCT_PlayerViewItem_descriptor(), value);
}
inline bool RCT_PlayerViewItem_Parse(
    const ::std::string& name, RCT_PlayerViewItem* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RCT_PlayerViewItem>(
    RCT_PlayerViewItem_descriptor(), name, value);
}
enum RCT_PlayerHero {
  PlayerHero_GUID = 0,
  PlayerHero_ConfigID = 1,
  PlayerHero_Level = 2,
  PlayerHero_Exp = 3,
  PlayerHero_Equip1 = 4,
  PlayerHero_Equip2 = 5,
  PlayerHero_Equip3 = 6,
  PlayerHero_Equip4 = 7,
  PlayerHero_Equip5 = 8,
  PlayerHero_Equip6 = 9
};
bool RCT_PlayerHero_IsValid(int value);
const RCT_PlayerHero RCT_PlayerHero_MIN = PlayerHero_GUID;
const RCT_PlayerHero RCT_PlayerHero_MAX = PlayerHero_Equip6;
const int RCT_PlayerHero_ARRAYSIZE = RCT_PlayerHero_MAX + 1;

const ::google::protobuf::EnumDescriptor* RCT_PlayerHero_descriptor();
inline const ::std::string& RCT_PlayerHero_Name(RCT_PlayerHero value) {
  return ::google::protobuf::internal::NameOfEnum(
    RCT_PlayerHero_descriptor(), value);
}
inline bool RCT_PlayerHero_Parse(
    const ::std::string& name, RCT_PlayerHero* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RCT_PlayerHero>(
    RCT_PlayerHero_descriptor(), name, value);
}
enum RCT_BagEquipList {
  BagEquipList_GUID = 0,
  BagEquipList_WearGUID = 1,
  BagEquipList_ConfigID = 2,
  BagEquipList_Bound = 3,
  BagEquipList_ExpiredType = 4,
  BagEquipList_RandPropertyID = 5,
  BagEquipList_Date = 6,
  BagEquipList_SlotCount = 7,
  BagEquipList_InlayStone1 = 8,
  BagEquipList_InlayStone2 = 9,
  BagEquipList_InlayStone3 = 10,
  BagEquipList_InlayStone4 = 11,
  BagEquipList_InlayStone5 = 12,
  BagEquipList_InlayStone6 = 13,
  BagEquipList_InlayStone7 = 14,
  BagEquipList_InlayStone8 = 15,
  BagEquipList_InlayStone9 = 16,
  BagEquipList_InlayStone10 = 17,
  BagEquipList_IntensifyLevel = 18,
  BagEquipList_ElementLevel1 = 19,
  BagEquipList_ElementLevel2 = 20,
  BagEquipList_ElementLevel3 = 21,
  BagEquipList_ElementLevel4 = 22,
  BagEquipList_ElementLevel5 = 23,
  BagEquipList_ElementLevel6 = 24,
  BagEquipList_ElementLevel7 = 25,
  BagEquipList_ElementLevel8 = 26,
  BagEquipList_ElementLevel9 = 27,
  BagEquipList_ElementLevel10 = 28
};
bool RCT_BagEquipList_IsValid(int value);
const RCT_BagEquipList RCT_BagEquipList_MIN = BagEquipList_GUID;
const RCT_BagEquipList RCT_BagEquipList_MAX = BagEquipList_ElementLevel10;
const int RCT_BagEquipList_ARRAYSIZE = RCT_BagEquipList_MAX + 1;

const ::google::protobuf::EnumDescriptor* RCT_BagEquipList_descriptor();
inline const ::std::string& RCT_BagEquipList_Name(RCT_BagEquipList value) {
  return ::google::protobuf::internal::NameOfEnum(
    RCT_BagEquipList_descriptor(), value);
}
inline bool RCT_BagEquipList_Parse(
    const ::std::string& name, RCT_BagEquipList* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RCT_BagEquipList>(
    RCT_BagEquipList_descriptor(), name, value);
}
enum RCT_BagItemList {
  BagItemList_ConfigID = 0,
  BagItemList_ItemCount = 1,
  BagItemList_Bound = 2,
  BagItemList_ExpiredType = 3,
  BagItemList_Date = 4
};
bool RCT_BagItemList_IsValid(int value);
const RCT_BagItemList RCT_BagItemList_MIN = BagItemList_ConfigID;
const RCT_BagItemList RCT_BagItemList_MAX = BagItemList_Date;
const int RCT_BagItemList_ARRAYSIZE = RCT_BagItemList_MAX + 1;

const ::google::protobuf::EnumDescriptor* RCT_BagItemList_descriptor();
inline const ::std::string& RCT_BagItemList_Name(RCT_BagItemList value) {
  return ::google::protobuf::internal::NameOfEnum(
    RCT_BagItemList_descriptor(), value);
}
inline bool RCT_BagItemList_Parse(
    const ::std::string& name, RCT_BagItemList* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RCT_BagItemList>(
    RCT_BagItemList_descriptor(), name, value);
}
enum RCT_CommPropertyValue {
  CommPropertyValue_MAXHP = 0,
  CommPropertyValue_MAXMP = 1,
  CommPropertyValue_MAXSP = 2,
  CommPropertyValue_HPREGEN = 3,
  CommPropertyValue_SPREGEN = 4,
  CommPropertyValue_MPREGEN = 5,
  CommPropertyValue_ATK_VALUE = 6,
  CommPropertyValue_DEF_VALUE = 7,
  CommPropertyValue_MOVE_SPEED = 8,
  CommPropertyValue_ATK_SPEED = 9,
  CommPropertyValue_ATK_FIRE = 10,
  CommPropertyValue_ATK_LIGHT = 11,
  CommPropertyValue_ATK_ICE = 12,
  CommPropertyValue_ATK_POISON = 13,
  CommPropertyValue_DEF_FIRE = 14,
  CommPropertyValue_DEF_LIGHT = 15,
  CommPropertyValue_DEF_ICE = 16,
  CommPropertyValue_DEF_POISON = 17,
  CommPropertyValue_DIZZY_GATE = 18,
  CommPropertyValue_MOVE_GATE = 19,
  CommPropertyValue_SKILL_GATE = 20,
  CommPropertyValue_PHYSICAL_GATE = 21,
  CommPropertyValue_MAGIC_GATE = 22,
  CommPropertyValue_BUFF_GATE = 23
};
bool RCT_CommPropertyValue_IsValid(int value);
const RCT_CommPropertyValue RCT_CommPropertyValue_MIN = CommPropertyValue_MAXHP;
const RCT_CommPropertyValue RCT_CommPropertyValue_MAX = CommPropertyValue_BUFF_GATE;
const int RCT_CommPropertyValue_ARRAYSIZE = RCT_CommPropertyValue_MAX + 1;

const ::google::protobuf::EnumDescriptor* RCT_CommPropertyValue_descriptor();
inline const ::std::string& RCT_CommPropertyValue_Name(RCT_CommPropertyValue value) {
  return ::google::protobuf::internal::NameOfEnum(
    RCT_CommPropertyValue_descriptor(), value);
}
inline bool RCT_CommPropertyValue_Parse(
    const ::std::string& name, RCT_CommPropertyValue* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RCT_CommPropertyValue>(
    RCT_CommPropertyValue_descriptor(), name, value);
}
enum RCT_EctypeList {
  EctypeList_EctypeID = 0,
  EctypeList_IsPass = 1,
  EctypeList_Star = 2
};
bool RCT_EctypeList_IsValid(int value);
const RCT_EctypeList RCT_EctypeList_MIN = EctypeList_EctypeID;
const RCT_EctypeList RCT_EctypeList_MAX = EctypeList_Star;
const int RCT_EctypeList_ARRAYSIZE = RCT_EctypeList_MAX + 1;

const ::google::protobuf::EnumDescriptor* RCT_EctypeList_descriptor();
inline const ::std::string& RCT_EctypeList_Name(RCT_EctypeList value) {
  return ::google::protobuf::internal::NameOfEnum(
    RCT_EctypeList_descriptor(), value);
}
inline bool RCT_EctypeList_Parse(
    const ::std::string& name, RCT_EctypeList* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RCT_EctypeList>(
    RCT_EctypeList_descriptor(), name, value);
}
enum RCT_DropItemList {
  DropItemList_MonsterID = 0,
  DropItemList_ItemID = 1,
  DropItemList_ItemCount = 2,
  DropItemList_DrawState = 3
};
bool RCT_DropItemList_IsValid(int value);
const RCT_DropItemList RCT_DropItemList_MIN = DropItemList_MonsterID;
const RCT_DropItemList RCT_DropItemList_MAX = DropItemList_DrawState;
const int RCT_DropItemList_ARRAYSIZE = RCT_DropItemList_MAX + 1;

const ::google::protobuf::EnumDescriptor* RCT_DropItemList_descriptor();
inline const ::std::string& RCT_DropItemList_Name(RCT_DropItemList value) {
  return ::google::protobuf::internal::NameOfEnum(
    RCT_DropItemList_descriptor(), value);
}
inline bool RCT_DropItemList_Parse(
    const ::std::string& name, RCT_DropItemList* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RCT_DropItemList>(
    RCT_DropItemList_descriptor(), name, value);
}
enum RCT_SkillTable {
  SkillTable_SkillID = 0,
  SkillTable_SkillLevel = 1,
  SkillTable_SkillStone = 2,
  SkillTable_SkillSoulLevel = 3
};
bool RCT_SkillTable_IsValid(int value);
const RCT_SkillTable RCT_SkillTable_MIN = SkillTable_SkillID;
const RCT_SkillTable RCT_SkillTable_MAX = SkillTable_SkillSoulLevel;
const int RCT_SkillTable_ARRAYSIZE = RCT_SkillTable_MAX + 1;

const ::google::protobuf::EnumDescriptor* RCT_SkillTable_descriptor();
inline const ::std::string& RCT_SkillTable_Name(RCT_SkillTable value) {
  return ::google::protobuf::internal::NameOfEnum(
    RCT_SkillTable_descriptor(), value);
}
inline bool RCT_SkillTable_Parse(
    const ::std::string& name, RCT_SkillTable* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RCT_SkillTable>(
    RCT_SkillTable_descriptor(), name, value);
}
enum RCT_TaskMonsterList {
  TaskMonsterList_MonsterID = 0,
  TaskMonsterList_CurrentKillCount = 1,
  TaskMonsterList_RequireKillCount = 2,
  TaskMonsterList_TaskID = 3
};
bool RCT_TaskMonsterList_IsValid(int value);
const RCT_TaskMonsterList RCT_TaskMonsterList_MIN = TaskMonsterList_MonsterID;
const RCT_TaskMonsterList RCT_TaskMonsterList_MAX = TaskMonsterList_TaskID;
const int RCT_TaskMonsterList_ARRAYSIZE = RCT_TaskMonsterList_MAX + 1;

const ::google::protobuf::EnumDescriptor* RCT_TaskMonsterList_descriptor();
inline const ::std::string& RCT_TaskMonsterList_Name(RCT_TaskMonsterList value) {
  return ::google::protobuf::internal::NameOfEnum(
    RCT_TaskMonsterList_descriptor(), value);
}
inline bool RCT_TaskMonsterList_Parse(
    const ::std::string& name, RCT_TaskMonsterList* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RCT_TaskMonsterList>(
    RCT_TaskMonsterList_descriptor(), name, value);
}
enum RCT_TaskList {
  TaskList_TaskID = 0,
  TaskList_TaskStatus = 1,
  TaskList_Process = 2
};
bool RCT_TaskList_IsValid(int value);
const RCT_TaskList RCT_TaskList_MIN = TaskList_TaskID;
const RCT_TaskList RCT_TaskList_MAX = TaskList_Process;
const int RCT_TaskList_ARRAYSIZE = RCT_TaskList_MAX + 1;

const ::google::protobuf::EnumDescriptor* RCT_TaskList_descriptor();
inline const ::std::string& RCT_TaskList_Name(RCT_TaskList value) {
  return ::google::protobuf::internal::NameOfEnum(
    RCT_TaskList_descriptor(), value);
}
inline bool RCT_TaskList_Parse(
    const ::std::string& name, RCT_TaskList* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RCT_TaskList>(
    RCT_TaskList_descriptor(), name, value);
}
enum RCT_PVPList {
  PVPList_ID = 0,
  PVPList_Name = 1,
  PVPList_Level = 2
};
bool RCT_PVPList_IsValid(int value);
const RCT_PVPList RCT_PVPList_MIN = PVPList_ID;
const RCT_PVPList RCT_PVPList_MAX = PVPList_Level;
const int RCT_PVPList_ARRAYSIZE = RCT_PVPList_MAX + 1;

const ::google::protobuf::EnumDescriptor* RCT_PVPList_descriptor();
inline const ::std::string& RCT_PVPList_Name(RCT_PVPList value) {
  return ::google::protobuf::internal::NameOfEnum(
    RCT_PVPList_descriptor(), value);
}
inline bool RCT_PVPList_Parse(
    const ::std::string& name, RCT_PVPList* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RCT_PVPList>(
    RCT_PVPList_descriptor(), name, value);
}
enum RCT_ChatGroup {
  ChatGroup_ChatType = 0,
  ChatGroup_GroupGUID = 1
};
bool RCT_ChatGroup_IsValid(int value);
const RCT_ChatGroup RCT_ChatGroup_MIN = ChatGroup_ChatType;
const RCT_ChatGroup RCT_ChatGroup_MAX = ChatGroup_GroupGUID;
const int RCT_ChatGroup_ARRAYSIZE = RCT_ChatGroup_MAX + 1;

const ::google::protobuf::EnumDescriptor* RCT_ChatGroup_descriptor();
inline const ::std::string& RCT_ChatGroup_Name(RCT_ChatGroup value) {
  return ::google::protobuf::internal::NameOfEnum(
    RCT_ChatGroup_descriptor(), value);
}
inline bool RCT_ChatGroup_Parse(
    const ::std::string& name, RCT_ChatGroup* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RCT_ChatGroup>(
    RCT_ChatGroup_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::RCT_BuildingList>() {
  return ::NFMsg::RCT_BuildingList_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::RCT_BuildingProduce>() {
  return ::NFMsg::RCT_BuildingProduce_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::RCT_GroupMemberList>() {
  return ::NFMsg::RCT_GroupMemberList_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::RCT_ChatList>() {
  return ::NFMsg::RCT_ChatList_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::RCT_GuildBoss>() {
  return ::NFMsg::RCT_GuildBoss_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::RCT_GuildMemberList>() {
  return ::NFMsg::RCT_GuildMemberList_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::RCT_GuildAppyList>() {
  return ::NFMsg::RCT_GuildAppyList_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::RCT_GuildEvent>() {
  return ::NFMsg::RCT_GuildEvent_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::RCT_GuildHouse>() {
  return ::NFMsg::RCT_GuildHouse_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::RCT_GuildSkill>() {
  return ::NFMsg::RCT_GuildSkill_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::RCT_PosList>() {
  return ::NFMsg::RCT_PosList_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::RCT_PlayerViewItem>() {
  return ::NFMsg::RCT_PlayerViewItem_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::RCT_PlayerHero>() {
  return ::NFMsg::RCT_PlayerHero_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::RCT_BagEquipList>() {
  return ::NFMsg::RCT_BagEquipList_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::RCT_BagItemList>() {
  return ::NFMsg::RCT_BagItemList_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::RCT_CommPropertyValue>() {
  return ::NFMsg::RCT_CommPropertyValue_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::RCT_EctypeList>() {
  return ::NFMsg::RCT_EctypeList_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::RCT_DropItemList>() {
  return ::NFMsg::RCT_DropItemList_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::RCT_SkillTable>() {
  return ::NFMsg::RCT_SkillTable_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::RCT_TaskMonsterList>() {
  return ::NFMsg::RCT_TaskMonsterList_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::RCT_TaskList>() {
  return ::NFMsg::RCT_TaskList_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::RCT_PVPList>() {
  return ::NFMsg::RCT_PVPList_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::RCT_ChatGroup>() {
  return ::NFMsg::RCT_ChatGroup_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NFRecordDefine_2eproto__INCLUDED
