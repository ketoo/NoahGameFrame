// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgTeam.proto

#ifndef PROTOBUF_INCLUDED_NFMsgTeam_2eproto
#define PROTOBUF_INCLUDED_NFMsgTeam_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "NFMsgBase.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgTeam_2eproto LIBPROTOC_EXPORT

namespace protobuf_NFMsgTeam_2eproto {
// Internal implementation detail -- do not use these members.
struct LIBPROTOC_EXPORT TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void LIBPROTOC_EXPORT AddDescriptors();
}  // namespace protobuf_NFMsgTeam_2eproto
namespace NFMsg {
class AckInviteToTeam;
class AckInviteToTeamDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckInviteToTeamDefaultTypeInternal _AckInviteToTeam_default_instance_;
class AckTeamMemberAdd;
class AckTeamMemberAddDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckTeamMemberAddDefaultTypeInternal _AckTeamMemberAdd_default_instance_;
class AckTeamMemberLeave;
class AckTeamMemberLeaveDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckTeamMemberLeaveDefaultTypeInternal _AckTeamMemberLeave_default_instance_;
class ReqAckAcceptTeamInvite;
class ReqAckAcceptTeamInviteDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckAcceptTeamInviteDefaultTypeInternal _ReqAckAcceptTeamInvite_default_instance_;
class ReqAckRejectTeamInvite;
class ReqAckRejectTeamInviteDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckRejectTeamInviteDefaultTypeInternal _ReqAckRejectTeamInvite_default_instance_;
class ReqAckTeamMemberList;
class ReqAckTeamMemberListDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckTeamMemberListDefaultTypeInternal _ReqAckTeamMemberList_default_instance_;
class ReqCancelInviteToTeam;
class ReqCancelInviteToTeamDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqCancelInviteToTeamDefaultTypeInternal _ReqCancelInviteToTeam_default_instance_;
class ReqInviteToTeam;
class ReqInviteToTeamDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqInviteToTeamDefaultTypeInternal _ReqInviteToTeam_default_instance_;
class TeamMemberInfo;
class TeamMemberInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern TeamMemberInfoDefaultTypeInternal _TeamMemberInfo_default_instance_;
}  // namespace NFMsg
namespace google {
namespace protobuf {
template<> LIBPROTOC_EXPORT ::NFMsg::AckInviteToTeam* Arena::CreateMaybeMessage<::NFMsg::AckInviteToTeam>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::AckTeamMemberAdd* Arena::CreateMaybeMessage<::NFMsg::AckTeamMemberAdd>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::AckTeamMemberLeave* Arena::CreateMaybeMessage<::NFMsg::AckTeamMemberLeave>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckAcceptTeamInvite* Arena::CreateMaybeMessage<::NFMsg::ReqAckAcceptTeamInvite>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckRejectTeamInvite* Arena::CreateMaybeMessage<::NFMsg::ReqAckRejectTeamInvite>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckTeamMemberList* Arena::CreateMaybeMessage<::NFMsg::ReqAckTeamMemberList>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqCancelInviteToTeam* Arena::CreateMaybeMessage<::NFMsg::ReqCancelInviteToTeam>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqInviteToTeam* Arena::CreateMaybeMessage<::NFMsg::ReqInviteToTeam>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::TeamMemberInfo* Arena::CreateMaybeMessage<::NFMsg::TeamMemberInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace NFMsg {

// ===================================================================

class LIBPROTOC_EXPORT TeamMemberInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.TeamMemberInfo) */ {
 public:
  TeamMemberInfo();
  virtual ~TeamMemberInfo();

  TeamMemberInfo(const TeamMemberInfo& from);

  inline TeamMemberInfo& operator=(const TeamMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamMemberInfo(TeamMemberInfo&& from) noexcept
    : TeamMemberInfo() {
    *this = ::std::move(from);
  }

  inline TeamMemberInfo& operator=(TeamMemberInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamMemberInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamMemberInfo* internal_default_instance() {
    return reinterpret_cast<const TeamMemberInfo*>(
               &_TeamMemberInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TeamMemberInfo* other);
  friend void swap(TeamMemberInfo& a, TeamMemberInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamMemberInfo* New() const final {
    return CreateMaybeMessage<TeamMemberInfo>(NULL);
  }

  TeamMemberInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TeamMemberInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TeamMemberInfo& from);
  void MergeFrom(const TeamMemberInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamMemberInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .NFMsg.Ident id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_id() const;
  public:
  const ::NFMsg::Ident& id() const;
  ::NFMsg::Ident* release_id();
  ::NFMsg::Ident* mutable_id();
  void set_allocated_id(::NFMsg::Ident* id);

  // int32 bp = 3;
  void clear_bp();
  static const int kBpFieldNumber = 3;
  ::google::protobuf::int32 bp() const;
  void set_bp(::google::protobuf::int32 value);

  // int32 leader = 4;
  void clear_leader();
  static const int kLeaderFieldNumber = 4;
  ::google::protobuf::int32 leader() const;
  void set_leader(::google::protobuf::int32 value);

  // int32 pending = 5;
  void clear_pending();
  static const int kPendingFieldNumber = 5;
  ::google::protobuf::int32 pending() const;
  void set_pending(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.TeamMemberInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::NFMsg::Ident* id_;
  ::google::protobuf::int32 bp_;
  ::google::protobuf::int32 leader_;
  ::google::protobuf::int32 pending_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgTeam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckTeamMemberList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckTeamMemberList) */ {
 public:
  ReqAckTeamMemberList();
  virtual ~ReqAckTeamMemberList();

  ReqAckTeamMemberList(const ReqAckTeamMemberList& from);

  inline ReqAckTeamMemberList& operator=(const ReqAckTeamMemberList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckTeamMemberList(ReqAckTeamMemberList&& from) noexcept
    : ReqAckTeamMemberList() {
    *this = ::std::move(from);
  }

  inline ReqAckTeamMemberList& operator=(ReqAckTeamMemberList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckTeamMemberList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckTeamMemberList* internal_default_instance() {
    return reinterpret_cast<const ReqAckTeamMemberList*>(
               &_ReqAckTeamMemberList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ReqAckTeamMemberList* other);
  friend void swap(ReqAckTeamMemberList& a, ReqAckTeamMemberList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckTeamMemberList* New() const final {
    return CreateMaybeMessage<ReqAckTeamMemberList>(NULL);
  }

  ReqAckTeamMemberList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckTeamMemberList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqAckTeamMemberList& from);
  void MergeFrom(const ReqAckTeamMemberList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckTeamMemberList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.TeamMemberInfo memberList = 2;
  int memberlist_size() const;
  void clear_memberlist();
  static const int kMemberListFieldNumber = 2;
  ::NFMsg::TeamMemberInfo* mutable_memberlist(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::TeamMemberInfo >*
      mutable_memberlist();
  const ::NFMsg::TeamMemberInfo& memberlist(int index) const;
  ::NFMsg::TeamMemberInfo* add_memberlist();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::TeamMemberInfo >&
      memberlist() const;

  // .NFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_team_id() const;
  public:
  const ::NFMsg::Ident& team_id() const;
  ::NFMsg::Ident* release_team_id();
  ::NFMsg::Ident* mutable_team_id();
  void set_allocated_team_id(::NFMsg::Ident* team_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckTeamMemberList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::TeamMemberInfo > memberlist_;
  ::NFMsg::Ident* team_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgTeam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckTeamMemberAdd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.AckTeamMemberAdd) */ {
 public:
  AckTeamMemberAdd();
  virtual ~AckTeamMemberAdd();

  AckTeamMemberAdd(const AckTeamMemberAdd& from);

  inline AckTeamMemberAdd& operator=(const AckTeamMemberAdd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckTeamMemberAdd(AckTeamMemberAdd&& from) noexcept
    : AckTeamMemberAdd() {
    *this = ::std::move(from);
  }

  inline AckTeamMemberAdd& operator=(AckTeamMemberAdd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckTeamMemberAdd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckTeamMemberAdd* internal_default_instance() {
    return reinterpret_cast<const AckTeamMemberAdd*>(
               &_AckTeamMemberAdd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(AckTeamMemberAdd* other);
  friend void swap(AckTeamMemberAdd& a, AckTeamMemberAdd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckTeamMemberAdd* New() const final {
    return CreateMaybeMessage<AckTeamMemberAdd>(NULL);
  }

  AckTeamMemberAdd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AckTeamMemberAdd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AckTeamMemberAdd& from);
  void MergeFrom(const AckTeamMemberAdd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckTeamMemberAdd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.TeamMemberInfo member = 2;
  int member_size() const;
  void clear_member();
  static const int kMemberFieldNumber = 2;
  ::NFMsg::TeamMemberInfo* mutable_member(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::TeamMemberInfo >*
      mutable_member();
  const ::NFMsg::TeamMemberInfo& member(int index) const;
  ::NFMsg::TeamMemberInfo* add_member();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::TeamMemberInfo >&
      member() const;

  // .NFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_team_id() const;
  public:
  const ::NFMsg::Ident& team_id() const;
  ::NFMsg::Ident* release_team_id();
  ::NFMsg::Ident* mutable_team_id();
  void set_allocated_team_id(::NFMsg::Ident* team_id);

  // @@protoc_insertion_point(class_scope:NFMsg.AckTeamMemberAdd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::TeamMemberInfo > member_;
  ::NFMsg::Ident* team_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgTeam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckTeamMemberLeave : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.AckTeamMemberLeave) */ {
 public:
  AckTeamMemberLeave();
  virtual ~AckTeamMemberLeave();

  AckTeamMemberLeave(const AckTeamMemberLeave& from);

  inline AckTeamMemberLeave& operator=(const AckTeamMemberLeave& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckTeamMemberLeave(AckTeamMemberLeave&& from) noexcept
    : AckTeamMemberLeave() {
    *this = ::std::move(from);
  }

  inline AckTeamMemberLeave& operator=(AckTeamMemberLeave&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckTeamMemberLeave& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckTeamMemberLeave* internal_default_instance() {
    return reinterpret_cast<const AckTeamMemberLeave*>(
               &_AckTeamMemberLeave_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AckTeamMemberLeave* other);
  friend void swap(AckTeamMemberLeave& a, AckTeamMemberLeave& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckTeamMemberLeave* New() const final {
    return CreateMaybeMessage<AckTeamMemberLeave>(NULL);
  }

  AckTeamMemberLeave* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AckTeamMemberLeave>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AckTeamMemberLeave& from);
  void MergeFrom(const AckTeamMemberLeave& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckTeamMemberLeave* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.Ident member = 2;
  int member_size() const;
  void clear_member();
  static const int kMemberFieldNumber = 2;
  ::NFMsg::Ident* mutable_member(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >*
      mutable_member();
  const ::NFMsg::Ident& member(int index) const;
  ::NFMsg::Ident* add_member();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >&
      member() const;

  // .NFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_team_id() const;
  public:
  const ::NFMsg::Ident& team_id() const;
  ::NFMsg::Ident* release_team_id();
  ::NFMsg::Ident* mutable_team_id();
  void set_allocated_team_id(::NFMsg::Ident* team_id);

  // @@protoc_insertion_point(class_scope:NFMsg.AckTeamMemberLeave)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident > member_;
  ::NFMsg::Ident* team_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgTeam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqInviteToTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqInviteToTeam) */ {
 public:
  ReqInviteToTeam();
  virtual ~ReqInviteToTeam();

  ReqInviteToTeam(const ReqInviteToTeam& from);

  inline ReqInviteToTeam& operator=(const ReqInviteToTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqInviteToTeam(ReqInviteToTeam&& from) noexcept
    : ReqInviteToTeam() {
    *this = ::std::move(from);
  }

  inline ReqInviteToTeam& operator=(ReqInviteToTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqInviteToTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqInviteToTeam* internal_default_instance() {
    return reinterpret_cast<const ReqInviteToTeam*>(
               &_ReqInviteToTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ReqInviteToTeam* other);
  friend void swap(ReqInviteToTeam& a, ReqInviteToTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqInviteToTeam* New() const final {
    return CreateMaybeMessage<ReqInviteToTeam>(NULL);
  }

  ReqInviteToTeam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqInviteToTeam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqInviteToTeam& from);
  void MergeFrom(const ReqInviteToTeam& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqInviteToTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFMsg.Ident stranger = 1;
  bool has_stranger() const;
  void clear_stranger();
  static const int kStrangerFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_stranger() const;
  public:
  const ::NFMsg::Ident& stranger() const;
  ::NFMsg::Ident* release_stranger();
  ::NFMsg::Ident* mutable_stranger();
  void set_allocated_stranger(::NFMsg::Ident* stranger);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqInviteToTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* stranger_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgTeam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqCancelInviteToTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqCancelInviteToTeam) */ {
 public:
  ReqCancelInviteToTeam();
  virtual ~ReqCancelInviteToTeam();

  ReqCancelInviteToTeam(const ReqCancelInviteToTeam& from);

  inline ReqCancelInviteToTeam& operator=(const ReqCancelInviteToTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqCancelInviteToTeam(ReqCancelInviteToTeam&& from) noexcept
    : ReqCancelInviteToTeam() {
    *this = ::std::move(from);
  }

  inline ReqCancelInviteToTeam& operator=(ReqCancelInviteToTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqCancelInviteToTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqCancelInviteToTeam* internal_default_instance() {
    return reinterpret_cast<const ReqCancelInviteToTeam*>(
               &_ReqCancelInviteToTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ReqCancelInviteToTeam* other);
  friend void swap(ReqCancelInviteToTeam& a, ReqCancelInviteToTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqCancelInviteToTeam* New() const final {
    return CreateMaybeMessage<ReqCancelInviteToTeam>(NULL);
  }

  ReqCancelInviteToTeam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqCancelInviteToTeam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqCancelInviteToTeam& from);
  void MergeFrom(const ReqCancelInviteToTeam& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCancelInviteToTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFMsg.Ident stranger = 1;
  bool has_stranger() const;
  void clear_stranger();
  static const int kStrangerFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_stranger() const;
  public:
  const ::NFMsg::Ident& stranger() const;
  ::NFMsg::Ident* release_stranger();
  ::NFMsg::Ident* mutable_stranger();
  void set_allocated_stranger(::NFMsg::Ident* stranger);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqCancelInviteToTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* stranger_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgTeam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckInviteToTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.AckInviteToTeam) */ {
 public:
  AckInviteToTeam();
  virtual ~AckInviteToTeam();

  AckInviteToTeam(const AckInviteToTeam& from);

  inline AckInviteToTeam& operator=(const AckInviteToTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckInviteToTeam(AckInviteToTeam&& from) noexcept
    : AckInviteToTeam() {
    *this = ::std::move(from);
  }

  inline AckInviteToTeam& operator=(AckInviteToTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckInviteToTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckInviteToTeam* internal_default_instance() {
    return reinterpret_cast<const AckInviteToTeam*>(
               &_AckInviteToTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(AckInviteToTeam* other);
  friend void swap(AckInviteToTeam& a, AckInviteToTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckInviteToTeam* New() const final {
    return CreateMaybeMessage<AckInviteToTeam>(NULL);
  }

  AckInviteToTeam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AckInviteToTeam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AckInviteToTeam& from);
  void MergeFrom(const AckInviteToTeam& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckInviteToTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .NFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_team_id() const;
  public:
  const ::NFMsg::Ident& team_id() const;
  ::NFMsg::Ident* release_team_id();
  ::NFMsg::Ident* mutable_team_id();
  void set_allocated_team_id(::NFMsg::Ident* team_id);

  // .NFMsg.Ident inviter = 2;
  bool has_inviter() const;
  void clear_inviter();
  static const int kInviterFieldNumber = 2;
  private:
  const ::NFMsg::Ident& _internal_inviter() const;
  public:
  const ::NFMsg::Ident& inviter() const;
  ::NFMsg::Ident* release_inviter();
  ::NFMsg::Ident* mutable_inviter();
  void set_allocated_inviter(::NFMsg::Ident* inviter);

  // .NFMsg.Ident stranger = 4;
  bool has_stranger() const;
  void clear_stranger();
  static const int kStrangerFieldNumber = 4;
  private:
  const ::NFMsg::Ident& _internal_stranger() const;
  public:
  const ::NFMsg::Ident& stranger() const;
  ::NFMsg::Ident* release_stranger();
  ::NFMsg::Ident* mutable_stranger();
  void set_allocated_stranger(::NFMsg::Ident* stranger);

  // @@protoc_insertion_point(class_scope:NFMsg.AckInviteToTeam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::NFMsg::Ident* team_id_;
  ::NFMsg::Ident* inviter_;
  ::NFMsg::Ident* stranger_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgTeam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckAcceptTeamInvite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckAcceptTeamInvite) */ {
 public:
  ReqAckAcceptTeamInvite();
  virtual ~ReqAckAcceptTeamInvite();

  ReqAckAcceptTeamInvite(const ReqAckAcceptTeamInvite& from);

  inline ReqAckAcceptTeamInvite& operator=(const ReqAckAcceptTeamInvite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckAcceptTeamInvite(ReqAckAcceptTeamInvite&& from) noexcept
    : ReqAckAcceptTeamInvite() {
    *this = ::std::move(from);
  }

  inline ReqAckAcceptTeamInvite& operator=(ReqAckAcceptTeamInvite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckAcceptTeamInvite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckAcceptTeamInvite* internal_default_instance() {
    return reinterpret_cast<const ReqAckAcceptTeamInvite*>(
               &_ReqAckAcceptTeamInvite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ReqAckAcceptTeamInvite* other);
  friend void swap(ReqAckAcceptTeamInvite& a, ReqAckAcceptTeamInvite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckAcceptTeamInvite* New() const final {
    return CreateMaybeMessage<ReqAckAcceptTeamInvite>(NULL);
  }

  ReqAckAcceptTeamInvite* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckAcceptTeamInvite>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqAckAcceptTeamInvite& from);
  void MergeFrom(const ReqAckAcceptTeamInvite& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckAcceptTeamInvite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_team_id() const;
  public:
  const ::NFMsg::Ident& team_id() const;
  ::NFMsg::Ident* release_team_id();
  ::NFMsg::Ident* mutable_team_id();
  void set_allocated_team_id(::NFMsg::Ident* team_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckAcceptTeamInvite)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* team_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgTeam_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckRejectTeamInvite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckRejectTeamInvite) */ {
 public:
  ReqAckRejectTeamInvite();
  virtual ~ReqAckRejectTeamInvite();

  ReqAckRejectTeamInvite(const ReqAckRejectTeamInvite& from);

  inline ReqAckRejectTeamInvite& operator=(const ReqAckRejectTeamInvite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckRejectTeamInvite(ReqAckRejectTeamInvite&& from) noexcept
    : ReqAckRejectTeamInvite() {
    *this = ::std::move(from);
  }

  inline ReqAckRejectTeamInvite& operator=(ReqAckRejectTeamInvite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckRejectTeamInvite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckRejectTeamInvite* internal_default_instance() {
    return reinterpret_cast<const ReqAckRejectTeamInvite*>(
               &_ReqAckRejectTeamInvite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ReqAckRejectTeamInvite* other);
  friend void swap(ReqAckRejectTeamInvite& a, ReqAckRejectTeamInvite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckRejectTeamInvite* New() const final {
    return CreateMaybeMessage<ReqAckRejectTeamInvite>(NULL);
  }

  ReqAckRejectTeamInvite* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckRejectTeamInvite>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqAckRejectTeamInvite& from);
  void MergeFrom(const ReqAckRejectTeamInvite& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckRejectTeamInvite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_team_id() const;
  public:
  const ::NFMsg::Ident& team_id() const;
  ::NFMsg::Ident* release_team_id();
  ::NFMsg::Ident* mutable_team_id();
  void set_allocated_team_id(::NFMsg::Ident* team_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckRejectTeamInvite)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* team_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgTeam_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TeamMemberInfo

// .NFMsg.Ident id = 1;
inline bool TeamMemberInfo::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::NFMsg::Ident& TeamMemberInfo::_internal_id() const {
  return *id_;
}
inline const ::NFMsg::Ident& TeamMemberInfo::id() const {
  const ::NFMsg::Ident* p = id_;
  // @@protoc_insertion_point(field_get:NFMsg.TeamMemberInfo.id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* TeamMemberInfo::release_id() {
  // @@protoc_insertion_point(field_release:NFMsg.TeamMemberInfo.id)
  
  ::NFMsg::Ident* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* TeamMemberInfo::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.TeamMemberInfo.id)
  return id_;
}
inline void TeamMemberInfo::set_allocated_id(::NFMsg::Ident* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.TeamMemberInfo.id)
}

// bytes name = 2;
inline void TeamMemberInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TeamMemberInfo::name() const {
  // @@protoc_insertion_point(field_get:NFMsg.TeamMemberInfo.name)
  return name_.GetNoArena();
}
inline void TeamMemberInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.TeamMemberInfo.name)
}
#if LANG_CXX11
inline void TeamMemberInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.TeamMemberInfo.name)
}
#endif
inline void TeamMemberInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.TeamMemberInfo.name)
}
inline void TeamMemberInfo::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.TeamMemberInfo.name)
}
inline ::std::string* TeamMemberInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.TeamMemberInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamMemberInfo::release_name() {
  // @@protoc_insertion_point(field_release:NFMsg.TeamMemberInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamMemberInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.TeamMemberInfo.name)
}

// int32 bp = 3;
inline void TeamMemberInfo::clear_bp() {
  bp_ = 0;
}
inline ::google::protobuf::int32 TeamMemberInfo::bp() const {
  // @@protoc_insertion_point(field_get:NFMsg.TeamMemberInfo.bp)
  return bp_;
}
inline void TeamMemberInfo::set_bp(::google::protobuf::int32 value) {
  
  bp_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.TeamMemberInfo.bp)
}

// int32 leader = 4;
inline void TeamMemberInfo::clear_leader() {
  leader_ = 0;
}
inline ::google::protobuf::int32 TeamMemberInfo::leader() const {
  // @@protoc_insertion_point(field_get:NFMsg.TeamMemberInfo.leader)
  return leader_;
}
inline void TeamMemberInfo::set_leader(::google::protobuf::int32 value) {
  
  leader_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.TeamMemberInfo.leader)
}

// int32 pending = 5;
inline void TeamMemberInfo::clear_pending() {
  pending_ = 0;
}
inline ::google::protobuf::int32 TeamMemberInfo::pending() const {
  // @@protoc_insertion_point(field_get:NFMsg.TeamMemberInfo.pending)
  return pending_;
}
inline void TeamMemberInfo::set_pending(::google::protobuf::int32 value) {
  
  pending_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.TeamMemberInfo.pending)
}

// -------------------------------------------------------------------

// ReqAckTeamMemberList

// .NFMsg.Ident team_id = 1;
inline bool ReqAckTeamMemberList::has_team_id() const {
  return this != internal_default_instance() && team_id_ != NULL;
}
inline const ::NFMsg::Ident& ReqAckTeamMemberList::_internal_team_id() const {
  return *team_id_;
}
inline const ::NFMsg::Ident& ReqAckTeamMemberList::team_id() const {
  const ::NFMsg::Ident* p = team_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckTeamMemberList.team_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAckTeamMemberList::release_team_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckTeamMemberList.team_id)
  
  ::NFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAckTeamMemberList::mutable_team_id() {
  
  if (team_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    team_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckTeamMemberList.team_id)
  return team_id_;
}
inline void ReqAckTeamMemberList::set_allocated_team_id(::NFMsg::Ident* team_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(team_id_);
  }
  if (team_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_id, submessage_arena);
    }
    
  } else {
    
  }
  team_id_ = team_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckTeamMemberList.team_id)
}

// repeated .NFMsg.TeamMemberInfo memberList = 2;
inline int ReqAckTeamMemberList::memberlist_size() const {
  return memberlist_.size();
}
inline void ReqAckTeamMemberList::clear_memberlist() {
  memberlist_.Clear();
}
inline ::NFMsg::TeamMemberInfo* ReqAckTeamMemberList::mutable_memberlist(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckTeamMemberList.memberList)
  return memberlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::TeamMemberInfo >*
ReqAckTeamMemberList::mutable_memberlist() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ReqAckTeamMemberList.memberList)
  return &memberlist_;
}
inline const ::NFMsg::TeamMemberInfo& ReqAckTeamMemberList::memberlist(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckTeamMemberList.memberList)
  return memberlist_.Get(index);
}
inline ::NFMsg::TeamMemberInfo* ReqAckTeamMemberList::add_memberlist() {
  // @@protoc_insertion_point(field_add:NFMsg.ReqAckTeamMemberList.memberList)
  return memberlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::TeamMemberInfo >&
ReqAckTeamMemberList::memberlist() const {
  // @@protoc_insertion_point(field_list:NFMsg.ReqAckTeamMemberList.memberList)
  return memberlist_;
}

// -------------------------------------------------------------------

// AckTeamMemberAdd

// .NFMsg.Ident team_id = 1;
inline bool AckTeamMemberAdd::has_team_id() const {
  return this != internal_default_instance() && team_id_ != NULL;
}
inline const ::NFMsg::Ident& AckTeamMemberAdd::_internal_team_id() const {
  return *team_id_;
}
inline const ::NFMsg::Ident& AckTeamMemberAdd::team_id() const {
  const ::NFMsg::Ident* p = team_id_;
  // @@protoc_insertion_point(field_get:NFMsg.AckTeamMemberAdd.team_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* AckTeamMemberAdd::release_team_id() {
  // @@protoc_insertion_point(field_release:NFMsg.AckTeamMemberAdd.team_id)
  
  ::NFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* AckTeamMemberAdd::mutable_team_id() {
  
  if (team_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    team_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.AckTeamMemberAdd.team_id)
  return team_id_;
}
inline void AckTeamMemberAdd::set_allocated_team_id(::NFMsg::Ident* team_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(team_id_);
  }
  if (team_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_id, submessage_arena);
    }
    
  } else {
    
  }
  team_id_ = team_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.AckTeamMemberAdd.team_id)
}

// repeated .NFMsg.TeamMemberInfo member = 2;
inline int AckTeamMemberAdd::member_size() const {
  return member_.size();
}
inline void AckTeamMemberAdd::clear_member() {
  member_.Clear();
}
inline ::NFMsg::TeamMemberInfo* AckTeamMemberAdd::mutable_member(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.AckTeamMemberAdd.member)
  return member_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::TeamMemberInfo >*
AckTeamMemberAdd::mutable_member() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.AckTeamMemberAdd.member)
  return &member_;
}
inline const ::NFMsg::TeamMemberInfo& AckTeamMemberAdd::member(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.AckTeamMemberAdd.member)
  return member_.Get(index);
}
inline ::NFMsg::TeamMemberInfo* AckTeamMemberAdd::add_member() {
  // @@protoc_insertion_point(field_add:NFMsg.AckTeamMemberAdd.member)
  return member_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::TeamMemberInfo >&
AckTeamMemberAdd::member() const {
  // @@protoc_insertion_point(field_list:NFMsg.AckTeamMemberAdd.member)
  return member_;
}

// -------------------------------------------------------------------

// AckTeamMemberLeave

// .NFMsg.Ident team_id = 1;
inline bool AckTeamMemberLeave::has_team_id() const {
  return this != internal_default_instance() && team_id_ != NULL;
}
inline const ::NFMsg::Ident& AckTeamMemberLeave::_internal_team_id() const {
  return *team_id_;
}
inline const ::NFMsg::Ident& AckTeamMemberLeave::team_id() const {
  const ::NFMsg::Ident* p = team_id_;
  // @@protoc_insertion_point(field_get:NFMsg.AckTeamMemberLeave.team_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* AckTeamMemberLeave::release_team_id() {
  // @@protoc_insertion_point(field_release:NFMsg.AckTeamMemberLeave.team_id)
  
  ::NFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* AckTeamMemberLeave::mutable_team_id() {
  
  if (team_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    team_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.AckTeamMemberLeave.team_id)
  return team_id_;
}
inline void AckTeamMemberLeave::set_allocated_team_id(::NFMsg::Ident* team_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(team_id_);
  }
  if (team_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_id, submessage_arena);
    }
    
  } else {
    
  }
  team_id_ = team_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.AckTeamMemberLeave.team_id)
}

// repeated .NFMsg.Ident member = 2;
inline int AckTeamMemberLeave::member_size() const {
  return member_.size();
}
inline ::NFMsg::Ident* AckTeamMemberLeave::mutable_member(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.AckTeamMemberLeave.member)
  return member_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >*
AckTeamMemberLeave::mutable_member() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.AckTeamMemberLeave.member)
  return &member_;
}
inline const ::NFMsg::Ident& AckTeamMemberLeave::member(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.AckTeamMemberLeave.member)
  return member_.Get(index);
}
inline ::NFMsg::Ident* AckTeamMemberLeave::add_member() {
  // @@protoc_insertion_point(field_add:NFMsg.AckTeamMemberLeave.member)
  return member_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >&
AckTeamMemberLeave::member() const {
  // @@protoc_insertion_point(field_list:NFMsg.AckTeamMemberLeave.member)
  return member_;
}

// -------------------------------------------------------------------

// ReqInviteToTeam

// .NFMsg.Ident stranger = 1;
inline bool ReqInviteToTeam::has_stranger() const {
  return this != internal_default_instance() && stranger_ != NULL;
}
inline const ::NFMsg::Ident& ReqInviteToTeam::_internal_stranger() const {
  return *stranger_;
}
inline const ::NFMsg::Ident& ReqInviteToTeam::stranger() const {
  const ::NFMsg::Ident* p = stranger_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqInviteToTeam.stranger)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqInviteToTeam::release_stranger() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqInviteToTeam.stranger)
  
  ::NFMsg::Ident* temp = stranger_;
  stranger_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqInviteToTeam::mutable_stranger() {
  
  if (stranger_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    stranger_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqInviteToTeam.stranger)
  return stranger_;
}
inline void ReqInviteToTeam::set_allocated_stranger(::NFMsg::Ident* stranger) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(stranger_);
  }
  if (stranger) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stranger = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stranger, submessage_arena);
    }
    
  } else {
    
  }
  stranger_ = stranger;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqInviteToTeam.stranger)
}

// -------------------------------------------------------------------

// ReqCancelInviteToTeam

// .NFMsg.Ident stranger = 1;
inline bool ReqCancelInviteToTeam::has_stranger() const {
  return this != internal_default_instance() && stranger_ != NULL;
}
inline const ::NFMsg::Ident& ReqCancelInviteToTeam::_internal_stranger() const {
  return *stranger_;
}
inline const ::NFMsg::Ident& ReqCancelInviteToTeam::stranger() const {
  const ::NFMsg::Ident* p = stranger_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqCancelInviteToTeam.stranger)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqCancelInviteToTeam::release_stranger() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqCancelInviteToTeam.stranger)
  
  ::NFMsg::Ident* temp = stranger_;
  stranger_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqCancelInviteToTeam::mutable_stranger() {
  
  if (stranger_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    stranger_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqCancelInviteToTeam.stranger)
  return stranger_;
}
inline void ReqCancelInviteToTeam::set_allocated_stranger(::NFMsg::Ident* stranger) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(stranger_);
  }
  if (stranger) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stranger = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stranger, submessage_arena);
    }
    
  } else {
    
  }
  stranger_ = stranger;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqCancelInviteToTeam.stranger)
}

// -------------------------------------------------------------------

// AckInviteToTeam

// .NFMsg.Ident team_id = 1;
inline bool AckInviteToTeam::has_team_id() const {
  return this != internal_default_instance() && team_id_ != NULL;
}
inline const ::NFMsg::Ident& AckInviteToTeam::_internal_team_id() const {
  return *team_id_;
}
inline const ::NFMsg::Ident& AckInviteToTeam::team_id() const {
  const ::NFMsg::Ident* p = team_id_;
  // @@protoc_insertion_point(field_get:NFMsg.AckInviteToTeam.team_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* AckInviteToTeam::release_team_id() {
  // @@protoc_insertion_point(field_release:NFMsg.AckInviteToTeam.team_id)
  
  ::NFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* AckInviteToTeam::mutable_team_id() {
  
  if (team_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    team_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.AckInviteToTeam.team_id)
  return team_id_;
}
inline void AckInviteToTeam::set_allocated_team_id(::NFMsg::Ident* team_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(team_id_);
  }
  if (team_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_id, submessage_arena);
    }
    
  } else {
    
  }
  team_id_ = team_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.AckInviteToTeam.team_id)
}

// .NFMsg.Ident inviter = 2;
inline bool AckInviteToTeam::has_inviter() const {
  return this != internal_default_instance() && inviter_ != NULL;
}
inline const ::NFMsg::Ident& AckInviteToTeam::_internal_inviter() const {
  return *inviter_;
}
inline const ::NFMsg::Ident& AckInviteToTeam::inviter() const {
  const ::NFMsg::Ident* p = inviter_;
  // @@protoc_insertion_point(field_get:NFMsg.AckInviteToTeam.inviter)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* AckInviteToTeam::release_inviter() {
  // @@protoc_insertion_point(field_release:NFMsg.AckInviteToTeam.inviter)
  
  ::NFMsg::Ident* temp = inviter_;
  inviter_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* AckInviteToTeam::mutable_inviter() {
  
  if (inviter_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    inviter_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.AckInviteToTeam.inviter)
  return inviter_;
}
inline void AckInviteToTeam::set_allocated_inviter(::NFMsg::Ident* inviter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(inviter_);
  }
  if (inviter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inviter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inviter, submessage_arena);
    }
    
  } else {
    
  }
  inviter_ = inviter;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.AckInviteToTeam.inviter)
}

// bytes name = 3;
inline void AckInviteToTeam::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AckInviteToTeam::name() const {
  // @@protoc_insertion_point(field_get:NFMsg.AckInviteToTeam.name)
  return name_.GetNoArena();
}
inline void AckInviteToTeam::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.AckInviteToTeam.name)
}
#if LANG_CXX11
inline void AckInviteToTeam::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.AckInviteToTeam.name)
}
#endif
inline void AckInviteToTeam::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.AckInviteToTeam.name)
}
inline void AckInviteToTeam::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.AckInviteToTeam.name)
}
inline ::std::string* AckInviteToTeam::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.AckInviteToTeam.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AckInviteToTeam::release_name() {
  // @@protoc_insertion_point(field_release:NFMsg.AckInviteToTeam.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckInviteToTeam::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.AckInviteToTeam.name)
}

// .NFMsg.Ident stranger = 4;
inline bool AckInviteToTeam::has_stranger() const {
  return this != internal_default_instance() && stranger_ != NULL;
}
inline const ::NFMsg::Ident& AckInviteToTeam::_internal_stranger() const {
  return *stranger_;
}
inline const ::NFMsg::Ident& AckInviteToTeam::stranger() const {
  const ::NFMsg::Ident* p = stranger_;
  // @@protoc_insertion_point(field_get:NFMsg.AckInviteToTeam.stranger)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* AckInviteToTeam::release_stranger() {
  // @@protoc_insertion_point(field_release:NFMsg.AckInviteToTeam.stranger)
  
  ::NFMsg::Ident* temp = stranger_;
  stranger_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* AckInviteToTeam::mutable_stranger() {
  
  if (stranger_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    stranger_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.AckInviteToTeam.stranger)
  return stranger_;
}
inline void AckInviteToTeam::set_allocated_stranger(::NFMsg::Ident* stranger) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(stranger_);
  }
  if (stranger) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stranger = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stranger, submessage_arena);
    }
    
  } else {
    
  }
  stranger_ = stranger;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.AckInviteToTeam.stranger)
}

// -------------------------------------------------------------------

// ReqAckAcceptTeamInvite

// .NFMsg.Ident team_id = 1;
inline bool ReqAckAcceptTeamInvite::has_team_id() const {
  return this != internal_default_instance() && team_id_ != NULL;
}
inline const ::NFMsg::Ident& ReqAckAcceptTeamInvite::_internal_team_id() const {
  return *team_id_;
}
inline const ::NFMsg::Ident& ReqAckAcceptTeamInvite::team_id() const {
  const ::NFMsg::Ident* p = team_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckAcceptTeamInvite.team_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAckAcceptTeamInvite::release_team_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckAcceptTeamInvite.team_id)
  
  ::NFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAckAcceptTeamInvite::mutable_team_id() {
  
  if (team_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    team_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckAcceptTeamInvite.team_id)
  return team_id_;
}
inline void ReqAckAcceptTeamInvite::set_allocated_team_id(::NFMsg::Ident* team_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(team_id_);
  }
  if (team_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_id, submessage_arena);
    }
    
  } else {
    
  }
  team_id_ = team_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckAcceptTeamInvite.team_id)
}

// -------------------------------------------------------------------

// ReqAckRejectTeamInvite

// .NFMsg.Ident team_id = 1;
inline bool ReqAckRejectTeamInvite::has_team_id() const {
  return this != internal_default_instance() && team_id_ != NULL;
}
inline const ::NFMsg::Ident& ReqAckRejectTeamInvite::_internal_team_id() const {
  return *team_id_;
}
inline const ::NFMsg::Ident& ReqAckRejectTeamInvite::team_id() const {
  const ::NFMsg::Ident* p = team_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckRejectTeamInvite.team_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAckRejectTeamInvite::release_team_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckRejectTeamInvite.team_id)
  
  ::NFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAckRejectTeamInvite::mutable_team_id() {
  
  if (team_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    team_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckRejectTeamInvite.team_id)
  return team_id_;
}
inline void ReqAckRejectTeamInvite::set_allocated_team_id(::NFMsg::Ident* team_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(team_id_);
  }
  if (team_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_id, submessage_arena);
    }
    
  } else {
    
  }
  team_id_ = team_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckRejectTeamInvite.team_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_NFMsgTeam_2eproto
