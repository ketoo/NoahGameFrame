// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFRecordDefine.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NFRecordDefine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NFMsg {

namespace {

const ::google::protobuf::EnumDescriptor* RCT_BuildingList_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RCT_BuildingProduce_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RCT_GroupMemberList_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RCT_ChatList_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RCT_GuildBoss_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RCT_GuildMemberList_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RCT_GuildAppyList_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RCT_GuildEvent_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RCT_GuildHouse_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RCT_GuildSkill_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RCT_PosList_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RCT_PlayerViewItem_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RCT_PlayerHero_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RCT_BagEquipList_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RCT_BagItemList_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RCT_CommPropertyValue_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RCT_EctypeList_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RCT_DropItemList_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RCT_SkillTable_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RCT_TaskMonsterList_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RCT_TaskList_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RCT_PVPList_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RCT_ChatGroup_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_NFRecordDefine_2eproto() {
  protobuf_AddDesc_NFRecordDefine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NFRecordDefine.proto");
  GOOGLE_CHECK(file != NULL);
  RCT_BuildingList_descriptor_ = file->enum_type(0);
  RCT_BuildingProduce_descriptor_ = file->enum_type(1);
  RCT_GroupMemberList_descriptor_ = file->enum_type(2);
  RCT_ChatList_descriptor_ = file->enum_type(3);
  RCT_GuildBoss_descriptor_ = file->enum_type(4);
  RCT_GuildMemberList_descriptor_ = file->enum_type(5);
  RCT_GuildAppyList_descriptor_ = file->enum_type(6);
  RCT_GuildEvent_descriptor_ = file->enum_type(7);
  RCT_GuildHouse_descriptor_ = file->enum_type(8);
  RCT_GuildSkill_descriptor_ = file->enum_type(9);
  RCT_PosList_descriptor_ = file->enum_type(10);
  RCT_PlayerViewItem_descriptor_ = file->enum_type(11);
  RCT_PlayerHero_descriptor_ = file->enum_type(12);
  RCT_BagEquipList_descriptor_ = file->enum_type(13);
  RCT_BagItemList_descriptor_ = file->enum_type(14);
  RCT_CommPropertyValue_descriptor_ = file->enum_type(15);
  RCT_EctypeList_descriptor_ = file->enum_type(16);
  RCT_DropItemList_descriptor_ = file->enum_type(17);
  RCT_SkillTable_descriptor_ = file->enum_type(18);
  RCT_TaskMonsterList_descriptor_ = file->enum_type(19);
  RCT_TaskList_descriptor_ = file->enum_type(20);
  RCT_PVPList_descriptor_ = file->enum_type(21);
  RCT_ChatGroup_descriptor_ = file->enum_type(22);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NFRecordDefine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_NFRecordDefine_2eproto() {
}

void protobuf_AddDesc_NFRecordDefine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024NFRecordDefine.proto\022\005NFMsg*\353\001\n\020RCT_Bu"
    "ildingList\022\033\n\027BuildingList_BuildingID\020\000\022"
    "\035\n\031BuildingList_BuildingGUID\020\001\022\026\n\022Buildi"
    "ngList_State\020\002\022\025\n\021BuildingList_PosX\020\003\022\025\n"
    "\021BuildingList_PosY\020\004\022\025\n\021BuildingList_Pos"
    "Z\020\005\022\037\n\033BuildingList_StateStartTime\020\006\022\035\n\031"
    "BuildingList_StateEndTime\020\007*\263\001\n\023RCT_Buil"
    "dingProduce\022 \n\034BuildingProduce_BuildingG"
    "UID\020\000\022\032\n\026BuildingProduce_ItemID\020\001\022\035\n\031Bui"
    "ldingProduce_LeftCount\020\002\022\034\n\030BuildingProd"
    "uce_OnceTime\020\003\022!\n\035BuildingProduce_OnceSt"
    "artTime\020\004*g\n\023RCT_GroupMemberList\022\030\n\024Grou"
    "pMemberList_GUID\020\000\022\032\n\026GroupMemberList_On"
    "line\020\001\022\032\n\026GroupMemberList_GameID\020\002*F\n\014RC"
    "T_ChatList\022\021\n\rChatList_GUID\020\000\022\020\n\014ChatLis"
    "t_msg\020\001\022\021\n\rChatList_time\020\002*\266\001\n\rRCT_Guild"
    "Boss\022\022\n\016GuildBoss_GUID\020\000\022\022\n\016GuildBoss_Na"
    "me\020\001\022\023\n\017GuildBoss_Level\020\002\022\021\n\rGuildBoss_J"
    "ob\020\003\022\026\n\022GuildBoss_Donation\020\004\022\021\n\rGuildBos"
    "s_VIP\020\005\022\025\n\021GuildBoss_Offline\020\006\022\023\n\017GuildB"
    "oss_Power\020\007*\244\003\n\023RCT_GuildMemberList\022\030\n\024G"
    "uildMemberList_GUID\020\000\022\030\n\024GuildMemberList"
    "_Name\020\001\022\031\n\025GuildMemberList_Level\020\002\022\027\n\023Gu"
    "ildMemberList_Job\020\003\022\034\n\030GuildMemberList_D"
    "onation\020\004\022\033\n\027GuildMemberList_Receive\020\005\022\027"
    "\n\023GuildMemberList_VIP\020\006\022\032\n\026GuildMemberLi"
    "st_Online\020\007\022\031\n\025GuildMemberList_Power\020\010\022\031"
    "\n\025GuildMemberList_Title\020\t\022\032\n\026GuildMember"
    "List_GameID\020\n\022\034\n\030GuildMemberList_JoinTim"
    "e\020\013\022 \n\034GuildMemberList_Contribution\020\014\022#\n"
    "\037GuildMemberList_AllContribution\020\r*\277\001\n\021R"
    "CT_GuildAppyList\022\026\n\022GuildAppyList_GUID\020\000"
    "\022\026\n\022GuildAppyList_Name\020\001\022\027\n\023GuildAppyLis"
    "t_Level\020\002\022\025\n\021GuildAppyList_Job\020\003\022\032\n\026Guil"
    "dAppyList_Donation\020\004\022\025\n\021GuildAppyList_VI"
    "P\020\005\022\027\n\023GuildAppyList_Power\020\006*\211\002\n\016RCT_Gui"
    "ldEvent\022\023\n\017GuildEvent_GUID\020\000\022\023\n\017GuildEve"
    "nt_Name\020\001\022\024\n\020GuildEvent_Level\020\002\022\022\n\016Guild"
    "Event_Job\020\003\022\027\n\023GuildEvent_Donation\020\004\022\022\n\016"
    "GuildEvent_VIP\020\005\022\026\n\022GuildEvent_Offline\020\006"
    "\022\024\n\020GuildEvent_Power\020\007\022\026\n\022GuildEvent_Eve"
    "ntID\020\010\022\030\n\024GuildEvent_EventTime\020\t\022\026\n\022Guil"
    "dEvent_Context\020\n*\277\001\n\016RCT_GuildHouse\022\023\n\017G"
    "uildHouse_GUID\020\000\022\023\n\017GuildHouse_Name\020\001\022\024\n"
    "\020GuildHouse_Level\020\002\022\022\n\016GuildHouse_Job\020\003\022"
    "\027\n\023GuildHouse_Donation\020\004\022\022\n\016GuildHouse_V"
    "IP\020\005\022\026\n\022GuildHouse_Offline\020\006\022\024\n\020GuildHou"
    "se_Power\020\007*\277\001\n\016RCT_GuildSkill\022\023\n\017GuildSk"
    "ill_GUID\020\000\022\023\n\017GuildSkill_Name\020\001\022\024\n\020Guild"
    "Skill_Level\020\002\022\022\n\016GuildSkill_Job\020\003\022\027\n\023Gui"
    "ldSkill_Donation\020\004\022\022\n\016GuildSkill_VIP\020\005\022\026"
    "\n\022GuildSkill_Offline\020\006\022\024\n\020GuildSkill_Pow"
    "er\020\007*P\n\013RCT_PosList\022\r\n\tPosList_X\020\000\022\r\n\tPo"
    "sList_Y\020\001\022\r\n\tPosList_Z\020\002\022\024\n\020PosList_Stay"
    "Time\020\003*\224\001\n\022RCT_PlayerViewItem\022\033\n\027PlayerV"
    "iewItem_ConfigID\020\000\022\037\n\033PlayerViewItem_Enh"
    "anceLevel\020\001\022\035\n\031PlayerViewItem_InlayStone"
    "\020\002\022!\n\035PlayerViewItem_SagecraftLevel\020\003*\362\001"
    "\n\016RCT_PlayerHero\022\023\n\017PlayerHero_GUID\020\000\022\027\n"
    "\023PlayerHero_ConfigID\020\001\022\024\n\020PlayerHero_Lev"
    "el\020\002\022\022\n\016PlayerHero_Exp\020\003\022\025\n\021PlayerHero_E"
    "quip1\020\004\022\025\n\021PlayerHero_Equip2\020\005\022\025\n\021Player"
    "Hero_Equip3\020\006\022\025\n\021PlayerHero_Equip4\020\007\022\025\n\021"
    "PlayerHero_Equip5\020\010\022\025\n\021PlayerHero_Equip6"
    "\020\t*\370\006\n\020RCT_BagEquipList\022\025\n\021BagEquipList_"
    "GUID\020\000\022\031\n\025BagEquipList_WearGUID\020\001\022\031\n\025Bag"
    "EquipList_ConfigID\020\002\022\026\n\022BagEquipList_Bou"
    "nd\020\003\022\034\n\030BagEquipList_ExpiredType\020\004\022\037\n\033Ba"
    "gEquipList_RandPropertyID\020\005\022\025\n\021BagEquipL"
    "ist_Date\020\006\022\032\n\026BagEquipList_SlotCount\020\007\022\034"
    "\n\030BagEquipList_InlayStone1\020\010\022\034\n\030BagEquip"
    "List_InlayStone2\020\t\022\034\n\030BagEquipList_Inlay"
    "Stone3\020\n\022\034\n\030BagEquipList_InlayStone4\020\013\022\034"
    "\n\030BagEquipList_InlayStone5\020\014\022\034\n\030BagEquip"
    "List_InlayStone6\020\r\022\034\n\030BagEquipList_Inlay"
    "Stone7\020\016\022\034\n\030BagEquipList_InlayStone8\020\017\022\034"
    "\n\030BagEquipList_InlayStone9\020\020\022\035\n\031BagEquip"
    "List_InlayStone10\020\021\022\037\n\033BagEquipList_Inte"
    "nsifyLevel\020\022\022\036\n\032BagEquipList_ElementLeve"
    "l1\020\023\022\036\n\032BagEquipList_ElementLevel2\020\024\022\036\n\032"
    "BagEquipList_ElementLevel3\020\025\022\036\n\032BagEquip"
    "List_ElementLevel4\020\026\022\036\n\032BagEquipList_Ele"
    "mentLevel5\020\027\022\036\n\032BagEquipList_ElementLeve"
    "l6\020\030\022\036\n\032BagEquipList_ElementLevel7\020\031\022\036\n\032"
    "BagEquipList_ElementLevel8\020\032\022\036\n\032BagEquip"
    "List_ElementLevel9\020\033\022\037\n\033BagEquipList_Ele"
    "mentLevel10\020\034*\220\001\n\017RCT_BagItemList\022\030\n\024Bag"
    "ItemList_ConfigID\020\000\022\031\n\025BagItemList_ItemC"
    "ount\020\001\022\025\n\021BagItemList_Bound\020\002\022\033\n\027BagItem"
    "List_ExpiredType\020\003\022\024\n\020BagItemList_Date\020\004"
    "*\241\006\n\025RCT_CommPropertyValue\022\033\n\027CommProper"
    "tyValue_MAXHP\020\000\022\033\n\027CommPropertyValue_MAX"
    "MP\020\001\022\033\n\027CommPropertyValue_MAXSP\020\002\022\035\n\031Com"
    "mPropertyValue_HPREGEN\020\003\022\035\n\031CommProperty"
    "Value_SPREGEN\020\004\022\035\n\031CommPropertyValue_MPR"
    "EGEN\020\005\022\037\n\033CommPropertyValue_ATK_VALUE\020\006\022"
    "\037\n\033CommPropertyValue_DEF_VALUE\020\007\022 \n\034Comm"
    "PropertyValue_MOVE_SPEED\020\010\022\037\n\033CommProper"
    "tyValue_ATK_SPEED\020\t\022\036\n\032CommPropertyValue"
    "_ATK_FIRE\020\n\022\037\n\033CommPropertyValue_ATK_LIG"
    "HT\020\013\022\035\n\031CommPropertyValue_ATK_ICE\020\014\022 \n\034C"
    "ommPropertyValue_ATK_POISON\020\r\022\036\n\032CommPro"
    "pertyValue_DEF_FIRE\020\016\022\037\n\033CommPropertyVal"
    "ue_DEF_LIGHT\020\017\022\035\n\031CommPropertyValue_DEF_"
    "ICE\020\020\022 \n\034CommPropertyValue_DEF_POISON\020\021\022"
    " \n\034CommPropertyValue_DIZZY_GATE\020\022\022\037\n\033Com"
    "mPropertyValue_MOVE_GATE\020\023\022 \n\034CommProper"
    "tyValue_SKILL_GATE\020\024\022#\n\037CommPropertyValu"
    "e_PHYSICAL_GATE\020\025\022 \n\034CommPropertyValue_M"
    "AGIC_GATE\020\026\022\037\n\033CommPropertyValue_BUFF_GA"
    "TE\020\027*U\n\016RCT_EctypeList\022\027\n\023EctypeList_Ect"
    "ypeID\020\000\022\025\n\021EctypeList_IsPass\020\001\022\023\n\017Ectype"
    "List_Star\020\002*\177\n\020RCT_DropItemList\022\032\n\026DropI"
    "temList_MonsterID\020\000\022\027\n\023DropItemList_Item"
    "ID\020\001\022\032\n\026DropItemList_ItemCount\020\002\022\032\n\026Drop"
    "ItemList_DrawState\020\003*}\n\016RCT_SkillTable\022\026"
    "\n\022SkillTable_SkillID\020\000\022\031\n\025SkillTable_Ski"
    "llLevel\020\001\022\031\n\025SkillTable_SkillStone\020\002\022\035\n\031"
    "SkillTable_SkillSoulLevel\020\003*\234\001\n\023RCT_Task"
    "MonsterList\022\035\n\031TaskMonsterList_MonsterID"
    "\020\000\022$\n TaskMonsterList_CurrentKillCount\020\001"
    "\022$\n TaskMonsterList_RequireKillCount\020\002\022\032"
    "\n\026TaskMonsterList_TaskID\020\003*R\n\014RCT_TaskLi"
    "st\022\023\n\017TaskList_TaskID\020\000\022\027\n\023TaskList_Task"
    "Status\020\001\022\024\n\020TaskList_Process\020\002*B\n\013RCT_PV"
    "PList\022\016\n\nPVPList_ID\020\000\022\020\n\014PVPList_Name\020\001\022"
    "\021\n\rPVPList_Level\020\002*@\n\rRCT_ChatGroup\022\026\n\022C"
    "hatGroup_ChatType\020\000\022\027\n\023ChatGroup_GroupGU"
    "ID\020\001", 5124);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NFRecordDefine.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NFRecordDefine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NFRecordDefine_2eproto {
  StaticDescriptorInitializer_NFRecordDefine_2eproto() {
    protobuf_AddDesc_NFRecordDefine_2eproto();
  }
} static_descriptor_initializer_NFRecordDefine_2eproto_;
const ::google::protobuf::EnumDescriptor* RCT_BuildingList_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RCT_BuildingList_descriptor_;
}
bool RCT_BuildingList_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RCT_BuildingProduce_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RCT_BuildingProduce_descriptor_;
}
bool RCT_BuildingProduce_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RCT_GroupMemberList_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RCT_GroupMemberList_descriptor_;
}
bool RCT_GroupMemberList_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RCT_ChatList_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RCT_ChatList_descriptor_;
}
bool RCT_ChatList_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RCT_GuildBoss_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RCT_GuildBoss_descriptor_;
}
bool RCT_GuildBoss_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RCT_GuildMemberList_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RCT_GuildMemberList_descriptor_;
}
bool RCT_GuildMemberList_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RCT_GuildAppyList_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RCT_GuildAppyList_descriptor_;
}
bool RCT_GuildAppyList_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RCT_GuildEvent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RCT_GuildEvent_descriptor_;
}
bool RCT_GuildEvent_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RCT_GuildHouse_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RCT_GuildHouse_descriptor_;
}
bool RCT_GuildHouse_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RCT_GuildSkill_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RCT_GuildSkill_descriptor_;
}
bool RCT_GuildSkill_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RCT_PosList_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RCT_PosList_descriptor_;
}
bool RCT_PosList_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RCT_PlayerViewItem_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RCT_PlayerViewItem_descriptor_;
}
bool RCT_PlayerViewItem_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RCT_PlayerHero_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RCT_PlayerHero_descriptor_;
}
bool RCT_PlayerHero_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RCT_BagEquipList_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RCT_BagEquipList_descriptor_;
}
bool RCT_BagEquipList_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RCT_BagItemList_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RCT_BagItemList_descriptor_;
}
bool RCT_BagItemList_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RCT_CommPropertyValue_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RCT_CommPropertyValue_descriptor_;
}
bool RCT_CommPropertyValue_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RCT_EctypeList_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RCT_EctypeList_descriptor_;
}
bool RCT_EctypeList_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RCT_DropItemList_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RCT_DropItemList_descriptor_;
}
bool RCT_DropItemList_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RCT_SkillTable_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RCT_SkillTable_descriptor_;
}
bool RCT_SkillTable_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RCT_TaskMonsterList_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RCT_TaskMonsterList_descriptor_;
}
bool RCT_TaskMonsterList_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RCT_TaskList_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RCT_TaskList_descriptor_;
}
bool RCT_TaskList_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RCT_PVPList_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RCT_PVPList_descriptor_;
}
bool RCT_PVPList_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RCT_ChatGroup_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RCT_ChatGroup_descriptor_;
}
bool RCT_ChatGroup_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

// @@protoc_insertion_point(global_scope)
