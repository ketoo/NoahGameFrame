// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: NFMsgShare.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NFMsg {

  /// <summary>Holder for reflection information generated from NFMsgShare.proto</summary>
  public static partial class NFMsgShareReflection {

    #region Descriptor
    /// <summary>File descriptor for NFMsgShare.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NFMsgShareReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBORk1zZ1NoYXJlLnByb3RvEgVORk1zZxoOTkZEZWZpbmUucHJvdG8aD05G",
            "TXNnQmFzZS5wcm90byJeChJSZXFFbnRlckdhbWVTZXJ2ZXISGAoCaWQYASAB",
            "KAsyDC5ORk1zZy5JZGVudBIPCgdhY2NvdW50GAIgASgMEg8KB2dhbWVfaWQY",
            "AyABKAUSDAoEbmFtZRgEIAEoDCIlChZSZXFBY2tFbnRlckdhbWVTdWNjZXNz",
            "EgsKA2FyZxgBIAEoBSIbCgxSZXFIZWFydEJlYXQSCwoDYXJnGAEgASgFIiEK",
            "ElJlcUxlYXZlR2FtZVNlcnZlchILCgNhcmcYASABKAUitwEKD1BsYXllckVu",
            "dHJ5SW5mbxIhCgtvYmplY3RfZ3VpZBgBIAEoCzIMLk5GTXNnLklkZW50EgkK",
            "AXgYAiABKAISCQoBeRgDIAEoAhIJCgF6GAQgASgCEhMKC2NhcmVlcl90eXBl",
            "GAUgASgFEhQKDHBsYXllcl9zdGF0ZRgGIAEoBRIRCgljb25maWdfaWQYByAB",
            "KAwSEAoIc2NlbmVfaWQYCCABKAUSEAoIY2xhc3NfaWQYCSABKAwiQQoSQWNr",
            "UGxheWVyRW50cnlMaXN0EisKC29iamVjdF9saXN0GAEgAygLMhYuTkZNc2cu",
            "UGxheWVyRW50cnlJbmZvIjcKEkFja1BsYXllckxlYXZlTGlzdBIhCgtvYmpl",
            "Y3RfbGlzdBgBIAMoCzIMLk5GTXNnLklkZW50IuUBCgtQb3NTeW5jVW5pdBIb",
            "CgVtb3ZlchgBIAEoCzIMLk5GTXNnLklkZW50EhsKA3BvcxgCIAEoCzIOLk5G",
            "TXNnLlZlY3RvcjMSIwoLb3JpZW50YXRpb24YAyABKAsyDi5ORk1zZy5WZWN0",
            "b3IzEg4KBnN0YXR1cxgEIAEoBRIqCgR0eXBlGAUgASgOMhwuTkZNc2cuUG9z",
            "U3luY1VuaXQuRU1vdmVUeXBlIjsKCUVNb3ZlVHlwZRIMCghFTVRfV0FMSxAA",
            "Eg4KCkVFVF9TUEVFRFkQARIQCgxFRVRfVEVMRVBPUlQQAiJOChNSZXFBY2tQ",
            "bGF5ZXJQb3NTeW5jEhAKCHNlcXVlbmNlGAEgASgFEiUKCXN5bmNfdW5pdBgC",
            "IAMoCzISLk5GTXNnLlBvc1N5bmNVbml0IuEBCgpFZmZlY3REYXRhEiIKDGVm",
            "ZmVjdF9pZGVudBgBIAEoCzIMLk5GTXNnLklkZW50EhQKDGVmZmVjdF92YWx1",
            "ZRgCIAEoBRIxCgplZmZlY3Rfcmx0GAMgASgOMh0uTkZNc2cuRWZmZWN0RGF0",
            "YS5FUmVzdWx0VHlwZSJmCgtFUmVzdWx0VHlwZRIMCghFRVRfRkFJTBAAEg8K",
            "C0VFVF9TVUNDRVNTEAESDgoKRUVUX1JFRlVTRRACEgwKCEVFVF9NSVNTEAMS",
            "DAoIRUVUX0NSSVQQBBIMCghFRVRfVUxUSRAFInkKDlJlcUFja1VzZVNraWxs",
            "EhoKBHVzZXIYASABKAsyDC5ORk1zZy5JZGVudBIQCghza2lsbF9pZBgCIAEo",
            "DBIRCgl1c2VfaW5kZXgYAyABKAUSJgoLZWZmZWN0X2RhdGEYBCADKAsyES5O",
            "Rk1zZy5FZmZlY3REYXRhInoKD1JlcUFja1N3YXBTY2VuZRIVCg10cmFuc2Zl",
            "cl90eXBlGAEgASgFEhAKCHNjZW5lX2lkGAIgASgFEg8KB2xpbmVfaWQYAyAB",
            "KAUSCQoBeBgEIAEoAhIJCgF5GAUgASgCEgkKAXoYBiABKAISDAoEZGF0YRgH",
            "IAEoDCLnAgoQUmVxQWNrUGxheWVyQ2hhdBIfCglwbGF5ZXJfaWQYASABKAsy",
            "DC5ORk1zZy5JZGVudBITCgtwbGF5ZXJfbmFtZRgCIAEoDBI+CgxjaGF0X2No",
            "YW5uZWwYAyABKA4yKC5ORk1zZy5SZXFBY2tQbGF5ZXJDaGF0LkVHYW1lQ2hh",
            "dENoYW5uZWwSOAoJY2hhdF90eXBlGAQgASgOMiUuTkZNc2cuUmVxQWNrUGxh",
            "eWVyQ2hhdC5FR2FtZUNoYXRUeXBlEhEKCWNoYXRfaW5mbxgFIAEoDCJQChBF",
            "R2FtZUNoYXRDaGFubmVsEg8KC0VHQ0NfR0xPQkFMEAASDQoJRUdDQ19DTEFO",
            "EAESDQoJRUdDQ19ST09NEAISDQoJRUdDQ19URUFNEAMiPgoNRUdhbWVDaGF0",
            "VHlwZRINCglFR0NUX1RFWFQQABIOCgpFR0NUX1ZPSUNFEAESDgoKRUdDVF9F",
            "TU9KSRACYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::NFMsg.NFDefineReflection.Descriptor, global::NFMsg.NFMsgBaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqEnterGameServer), global::NFMsg.ReqEnterGameServer.Parser, new[]{ "Id", "Account", "GameId", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckEnterGameSuccess), global::NFMsg.ReqAckEnterGameSuccess.Parser, new[]{ "Arg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqHeartBeat), global::NFMsg.ReqHeartBeat.Parser, new[]{ "Arg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqLeaveGameServer), global::NFMsg.ReqLeaveGameServer.Parser, new[]{ "Arg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.PlayerEntryInfo), global::NFMsg.PlayerEntryInfo.Parser, new[]{ "ObjectGuid", "X", "Y", "Z", "CareerType", "PlayerState", "ConfigId", "SceneId", "ClassId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckPlayerEntryList), global::NFMsg.AckPlayerEntryList.Parser, new[]{ "ObjectList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckPlayerLeaveList), global::NFMsg.AckPlayerLeaveList.Parser, new[]{ "ObjectList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.PosSyncUnit), global::NFMsg.PosSyncUnit.Parser, new[]{ "Mover", "Pos", "Orientation", "Status", "Type" }, null, new[]{ typeof(global::NFMsg.PosSyncUnit.Types.EMoveType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckPlayerPosSync), global::NFMsg.ReqAckPlayerPosSync.Parser, new[]{ "Sequence", "SyncUnit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.EffectData), global::NFMsg.EffectData.Parser, new[]{ "EffectIdent", "EffectValue", "EffectRlt" }, null, new[]{ typeof(global::NFMsg.EffectData.Types.EResultType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckUseSkill), global::NFMsg.ReqAckUseSkill.Parser, new[]{ "User", "SkillId", "UseIndex", "EffectData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckSwapScene), global::NFMsg.ReqAckSwapScene.Parser, new[]{ "TransferType", "SceneId", "LineId", "X", "Y", "Z", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckPlayerChat), global::NFMsg.ReqAckPlayerChat.Parser, new[]{ "PlayerId", "PlayerName", "ChatChannel", "ChatType", "ChatInfo" }, null, new[]{ typeof(global::NFMsg.ReqAckPlayerChat.Types.EGameChatChannel), typeof(global::NFMsg.ReqAckPlayerChat.Types.EGameChatType) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///除去基础对象身上的属性外，这里全部游戏中的逻辑协议
  /// </summary>
  public sealed partial class ReqEnterGameServer : pb::IMessage<ReqEnterGameServer> {
    private static readonly pb::MessageParser<ReqEnterGameServer> _parser = new pb::MessageParser<ReqEnterGameServer>(() => new ReqEnterGameServer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqEnterGameServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEnterGameServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEnterGameServer(ReqEnterGameServer other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      account_ = other.account_;
      gameId_ = other.gameId_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEnterGameServer Clone() {
      return new ReqEnterGameServer(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::NFMsg.Ident id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private pb::ByteString account_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 3;
    private int gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqEnterGameServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqEnterGameServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (Account != other.Account) return false;
      if (GameId != other.GameId) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (GameId != 0) hash ^= GameId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Account);
      }
      if (GameId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GameId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Account);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqEnterGameServer other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::NFMsg.Ident();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::NFMsg.Ident();
            }
            input.ReadMessage(Id);
            break;
          }
          case 18: {
            Account = input.ReadBytes();
            break;
          }
          case 24: {
            GameId = input.ReadInt32();
            break;
          }
          case 34: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAckEnterGameSuccess : pb::IMessage<ReqAckEnterGameSuccess> {
    private static readonly pb::MessageParser<ReqAckEnterGameSuccess> _parser = new pb::MessageParser<ReqAckEnterGameSuccess>(() => new ReqAckEnterGameSuccess());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckEnterGameSuccess> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckEnterGameSuccess() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckEnterGameSuccess(ReqAckEnterGameSuccess other) : this() {
      arg_ = other.arg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckEnterGameSuccess Clone() {
      return new ReqAckEnterGameSuccess(this);
    }

    /// <summary>Field number for the "arg" field.</summary>
    public const int ArgFieldNumber = 1;
    private int arg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Arg {
      get { return arg_; }
      set {
        arg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckEnterGameSuccess);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckEnterGameSuccess other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Arg != other.Arg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Arg != 0) hash ^= Arg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Arg != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Arg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Arg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Arg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckEnterGameSuccess other) {
      if (other == null) {
        return;
      }
      if (other.Arg != 0) {
        Arg = other.Arg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Arg = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqHeartBeat : pb::IMessage<ReqHeartBeat> {
    private static readonly pb::MessageParser<ReqHeartBeat> _parser = new pb::MessageParser<ReqHeartBeat>(() => new ReqHeartBeat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHeartBeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHeartBeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHeartBeat(ReqHeartBeat other) : this() {
      arg_ = other.arg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHeartBeat Clone() {
      return new ReqHeartBeat(this);
    }

    /// <summary>Field number for the "arg" field.</summary>
    public const int ArgFieldNumber = 1;
    private int arg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Arg {
      get { return arg_; }
      set {
        arg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqHeartBeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqHeartBeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Arg != other.Arg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Arg != 0) hash ^= Arg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Arg != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Arg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Arg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Arg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqHeartBeat other) {
      if (other == null) {
        return;
      }
      if (other.Arg != 0) {
        Arg = other.Arg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Arg = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqLeaveGameServer : pb::IMessage<ReqLeaveGameServer> {
    private static readonly pb::MessageParser<ReqLeaveGameServer> _parser = new pb::MessageParser<ReqLeaveGameServer>(() => new ReqLeaveGameServer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqLeaveGameServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLeaveGameServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLeaveGameServer(ReqLeaveGameServer other) : this() {
      arg_ = other.arg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLeaveGameServer Clone() {
      return new ReqLeaveGameServer(this);
    }

    /// <summary>Field number for the "arg" field.</summary>
    public const int ArgFieldNumber = 1;
    private int arg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Arg {
      get { return arg_; }
      set {
        arg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqLeaveGameServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqLeaveGameServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Arg != other.Arg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Arg != 0) hash ^= Arg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Arg != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Arg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Arg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Arg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqLeaveGameServer other) {
      if (other == null) {
        return;
      }
      if (other.Arg != 0) {
        Arg = other.Arg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Arg = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerEntryInfo : pb::IMessage<PlayerEntryInfo> {
    private static readonly pb::MessageParser<PlayerEntryInfo> _parser = new pb::MessageParser<PlayerEntryInfo>(() => new PlayerEntryInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerEntryInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEntryInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEntryInfo(PlayerEntryInfo other) : this() {
      objectGuid_ = other.objectGuid_ != null ? other.objectGuid_.Clone() : null;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      careerType_ = other.careerType_;
      playerState_ = other.playerState_;
      configId_ = other.configId_;
      sceneId_ = other.sceneId_;
      classId_ = other.classId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEntryInfo Clone() {
      return new PlayerEntryInfo(this);
    }

    /// <summary>Field number for the "object_guid" field.</summary>
    public const int ObjectGuidFieldNumber = 1;
    private global::NFMsg.Ident objectGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident ObjectGuid {
      get { return objectGuid_; }
      set {
        objectGuid_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 4;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "career_type" field.</summary>
    public const int CareerTypeFieldNumber = 5;
    private int careerType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CareerType {
      get { return careerType_; }
      set {
        careerType_ = value;
      }
    }

    /// <summary>Field number for the "player_state" field.</summary>
    public const int PlayerStateFieldNumber = 6;
    private int playerState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerState {
      get { return playerState_; }
      set {
        playerState_ = value;
      }
    }

    /// <summary>Field number for the "config_id" field.</summary>
    public const int ConfigIdFieldNumber = 7;
    private pb::ByteString configId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ConfigId {
      get { return configId_; }
      set {
        configId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int SceneIdFieldNumber = 8;
    private int sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "class_id" field.</summary>
    public const int ClassIdFieldNumber = 9;
    private pb::ByteString classId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClassId {
      get { return classId_; }
      set {
        classId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerEntryInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerEntryInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ObjectGuid, other.ObjectGuid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      if (CareerType != other.CareerType) return false;
      if (PlayerState != other.PlayerState) return false;
      if (ConfigId != other.ConfigId) return false;
      if (SceneId != other.SceneId) return false;
      if (ClassId != other.ClassId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (objectGuid_ != null) hash ^= ObjectGuid.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (CareerType != 0) hash ^= CareerType.GetHashCode();
      if (PlayerState != 0) hash ^= PlayerState.GetHashCode();
      if (ConfigId.Length != 0) hash ^= ConfigId.GetHashCode();
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      if (ClassId.Length != 0) hash ^= ClassId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (objectGuid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ObjectGuid);
      }
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Z);
      }
      if (CareerType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CareerType);
      }
      if (PlayerState != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PlayerState);
      }
      if (ConfigId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(ConfigId);
      }
      if (SceneId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SceneId);
      }
      if (ClassId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(ClassId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (objectGuid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjectGuid);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (CareerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CareerType);
      }
      if (PlayerState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerState);
      }
      if (ConfigId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ConfigId);
      }
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneId);
      }
      if (ClassId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClassId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerEntryInfo other) {
      if (other == null) {
        return;
      }
      if (other.objectGuid_ != null) {
        if (objectGuid_ == null) {
          ObjectGuid = new global::NFMsg.Ident();
        }
        ObjectGuid.MergeFrom(other.ObjectGuid);
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.CareerType != 0) {
        CareerType = other.CareerType;
      }
      if (other.PlayerState != 0) {
        PlayerState = other.PlayerState;
      }
      if (other.ConfigId.Length != 0) {
        ConfigId = other.ConfigId;
      }
      if (other.SceneId != 0) {
        SceneId = other.SceneId;
      }
      if (other.ClassId.Length != 0) {
        ClassId = other.ClassId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (objectGuid_ == null) {
              ObjectGuid = new global::NFMsg.Ident();
            }
            input.ReadMessage(ObjectGuid);
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 37: {
            Z = input.ReadFloat();
            break;
          }
          case 40: {
            CareerType = input.ReadInt32();
            break;
          }
          case 48: {
            PlayerState = input.ReadInt32();
            break;
          }
          case 58: {
            ConfigId = input.ReadBytes();
            break;
          }
          case 64: {
            SceneId = input.ReadInt32();
            break;
          }
          case 74: {
            ClassId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AckPlayerEntryList : pb::IMessage<AckPlayerEntryList> {
    private static readonly pb::MessageParser<AckPlayerEntryList> _parser = new pb::MessageParser<AckPlayerEntryList>(() => new AckPlayerEntryList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckPlayerEntryList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerEntryList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerEntryList(AckPlayerEntryList other) : this() {
      objectList_ = other.objectList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerEntryList Clone() {
      return new AckPlayerEntryList(this);
    }

    /// <summary>Field number for the "object_list" field.</summary>
    public const int ObjectListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NFMsg.PlayerEntryInfo> _repeated_objectList_codec
        = pb::FieldCodec.ForMessage(10, global::NFMsg.PlayerEntryInfo.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.PlayerEntryInfo> objectList_ = new pbc::RepeatedField<global::NFMsg.PlayerEntryInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.PlayerEntryInfo> ObjectList {
      get { return objectList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckPlayerEntryList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckPlayerEntryList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!objectList_.Equals(other.objectList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= objectList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      objectList_.WriteTo(output, _repeated_objectList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objectList_.CalculateSize(_repeated_objectList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckPlayerEntryList other) {
      if (other == null) {
        return;
      }
      objectList_.Add(other.objectList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            objectList_.AddEntriesFrom(input, _repeated_objectList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AckPlayerLeaveList : pb::IMessage<AckPlayerLeaveList> {
    private static readonly pb::MessageParser<AckPlayerLeaveList> _parser = new pb::MessageParser<AckPlayerLeaveList>(() => new AckPlayerLeaveList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckPlayerLeaveList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerLeaveList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerLeaveList(AckPlayerLeaveList other) : this() {
      objectList_ = other.objectList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerLeaveList Clone() {
      return new AckPlayerLeaveList(this);
    }

    /// <summary>Field number for the "object_list" field.</summary>
    public const int ObjectListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NFMsg.Ident> _repeated_objectList_codec
        = pb::FieldCodec.ForMessage(10, global::NFMsg.Ident.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.Ident> objectList_ = new pbc::RepeatedField<global::NFMsg.Ident>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.Ident> ObjectList {
      get { return objectList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckPlayerLeaveList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckPlayerLeaveList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!objectList_.Equals(other.objectList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= objectList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      objectList_.WriteTo(output, _repeated_objectList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objectList_.CalculateSize(_repeated_objectList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckPlayerLeaveList other) {
      if (other == null) {
        return;
      }
      objectList_.Add(other.objectList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            objectList_.AddEntriesFrom(input, _repeated_objectList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PosSyncUnit : pb::IMessage<PosSyncUnit> {
    private static readonly pb::MessageParser<PosSyncUnit> _parser = new pb::MessageParser<PosSyncUnit>(() => new PosSyncUnit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PosSyncUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PosSyncUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PosSyncUnit(PosSyncUnit other) : this() {
      mover_ = other.mover_ != null ? other.mover_.Clone() : null;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      orientation_ = other.orientation_ != null ? other.orientation_.Clone() : null;
      status_ = other.status_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PosSyncUnit Clone() {
      return new PosSyncUnit(this);
    }

    /// <summary>Field number for the "mover" field.</summary>
    public const int MoverFieldNumber = 1;
    private global::NFMsg.Ident mover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Mover {
      get { return mover_; }
      set {
        mover_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::NFMsg.Vector3 pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Vector3 Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "orientation" field.</summary>
    public const int OrientationFieldNumber = 3;
    private global::NFMsg.Vector3 orientation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Vector3 Orientation {
      get { return orientation_; }
      set {
        orientation_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private global::NFMsg.PosSyncUnit.Types.EMoveType type_ = global::NFMsg.PosSyncUnit.Types.EMoveType.EmtWalk;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.PosSyncUnit.Types.EMoveType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PosSyncUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PosSyncUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Mover, other.Mover)) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Orientation, other.Orientation)) return false;
      if (Status != other.Status) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mover_ != null) hash ^= Mover.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (orientation_ != null) hash ^= Orientation.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Type != global::NFMsg.PosSyncUnit.Types.EMoveType.EmtWalk) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mover_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Mover);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (orientation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Orientation);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Status);
      }
      if (Type != global::NFMsg.PosSyncUnit.Types.EMoveType.EmtWalk) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mover_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mover);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (orientation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Orientation);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Type != global::NFMsg.PosSyncUnit.Types.EMoveType.EmtWalk) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PosSyncUnit other) {
      if (other == null) {
        return;
      }
      if (other.mover_ != null) {
        if (mover_ == null) {
          Mover = new global::NFMsg.Ident();
        }
        Mover.MergeFrom(other.Mover);
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          Pos = new global::NFMsg.Vector3();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.orientation_ != null) {
        if (orientation_ == null) {
          Orientation = new global::NFMsg.Vector3();
        }
        Orientation.MergeFrom(other.Orientation);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Type != global::NFMsg.PosSyncUnit.Types.EMoveType.EmtWalk) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (mover_ == null) {
              Mover = new global::NFMsg.Ident();
            }
            input.ReadMessage(Mover);
            break;
          }
          case 18: {
            if (pos_ == null) {
              Pos = new global::NFMsg.Vector3();
            }
            input.ReadMessage(Pos);
            break;
          }
          case 26: {
            if (orientation_ == null) {
              Orientation = new global::NFMsg.Vector3();
            }
            input.ReadMessage(Orientation);
            break;
          }
          case 32: {
            Status = input.ReadInt32();
            break;
          }
          case 40: {
            Type = (global::NFMsg.PosSyncUnit.Types.EMoveType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PosSyncUnit message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EMoveType {
        [pbr::OriginalName("EMT_WALK")] EmtWalk = 0,
        [pbr::OriginalName("EET_SPEEDY")] EetSpeedy = 1,
        [pbr::OriginalName("EET_TELEPORT")] EetTeleport = 2,
      }

    }
    #endregion

  }

  public sealed partial class ReqAckPlayerPosSync : pb::IMessage<ReqAckPlayerPosSync> {
    private static readonly pb::MessageParser<ReqAckPlayerPosSync> _parser = new pb::MessageParser<ReqAckPlayerPosSync>(() => new ReqAckPlayerPosSync());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckPlayerPosSync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerPosSync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerPosSync(ReqAckPlayerPosSync other) : this() {
      sequence_ = other.sequence_;
      syncUnit_ = other.syncUnit_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerPosSync Clone() {
      return new ReqAckPlayerPosSync(this);
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 1;
    private int sequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sequence {
      get { return sequence_; }
      set {
        sequence_ = value;
      }
    }

    /// <summary>Field number for the "sync_unit" field.</summary>
    public const int SyncUnitFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NFMsg.PosSyncUnit> _repeated_syncUnit_codec
        = pb::FieldCodec.ForMessage(18, global::NFMsg.PosSyncUnit.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.PosSyncUnit> syncUnit_ = new pbc::RepeatedField<global::NFMsg.PosSyncUnit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.PosSyncUnit> SyncUnit {
      get { return syncUnit_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckPlayerPosSync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckPlayerPosSync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sequence != other.Sequence) return false;
      if(!syncUnit_.Equals(other.syncUnit_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sequence != 0) hash ^= Sequence.GetHashCode();
      hash ^= syncUnit_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Sequence != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Sequence);
      }
      syncUnit_.WriteTo(output, _repeated_syncUnit_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sequence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sequence);
      }
      size += syncUnit_.CalculateSize(_repeated_syncUnit_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckPlayerPosSync other) {
      if (other == null) {
        return;
      }
      if (other.Sequence != 0) {
        Sequence = other.Sequence;
      }
      syncUnit_.Add(other.syncUnit_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Sequence = input.ReadInt32();
            break;
          }
          case 18: {
            syncUnit_.AddEntriesFrom(input, _repeated_syncUnit_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EffectData : pb::IMessage<EffectData> {
    private static readonly pb::MessageParser<EffectData> _parser = new pb::MessageParser<EffectData>(() => new EffectData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EffectData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectData(EffectData other) : this() {
      effectIdent_ = other.effectIdent_ != null ? other.effectIdent_.Clone() : null;
      effectValue_ = other.effectValue_;
      effectRlt_ = other.effectRlt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectData Clone() {
      return new EffectData(this);
    }

    /// <summary>Field number for the "effect_ident" field.</summary>
    public const int EffectIdentFieldNumber = 1;
    private global::NFMsg.Ident effectIdent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident EffectIdent {
      get { return effectIdent_; }
      set {
        effectIdent_ = value;
      }
    }

    /// <summary>Field number for the "effect_value" field.</summary>
    public const int EffectValueFieldNumber = 2;
    private int effectValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EffectValue {
      get { return effectValue_; }
      set {
        effectValue_ = value;
      }
    }

    /// <summary>Field number for the "effect_rlt" field.</summary>
    public const int EffectRltFieldNumber = 3;
    private global::NFMsg.EffectData.Types.EResultType effectRlt_ = global::NFMsg.EffectData.Types.EResultType.EetFail;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.EffectData.Types.EResultType EffectRlt {
      get { return effectRlt_; }
      set {
        effectRlt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EffectData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EffectData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EffectIdent, other.EffectIdent)) return false;
      if (EffectValue != other.EffectValue) return false;
      if (EffectRlt != other.EffectRlt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (effectIdent_ != null) hash ^= EffectIdent.GetHashCode();
      if (EffectValue != 0) hash ^= EffectValue.GetHashCode();
      if (EffectRlt != global::NFMsg.EffectData.Types.EResultType.EetFail) hash ^= EffectRlt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (effectIdent_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EffectIdent);
      }
      if (EffectValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EffectValue);
      }
      if (EffectRlt != global::NFMsg.EffectData.Types.EResultType.EetFail) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EffectRlt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (effectIdent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EffectIdent);
      }
      if (EffectValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectValue);
      }
      if (EffectRlt != global::NFMsg.EffectData.Types.EResultType.EetFail) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EffectRlt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EffectData other) {
      if (other == null) {
        return;
      }
      if (other.effectIdent_ != null) {
        if (effectIdent_ == null) {
          EffectIdent = new global::NFMsg.Ident();
        }
        EffectIdent.MergeFrom(other.EffectIdent);
      }
      if (other.EffectValue != 0) {
        EffectValue = other.EffectValue;
      }
      if (other.EffectRlt != global::NFMsg.EffectData.Types.EResultType.EetFail) {
        EffectRlt = other.EffectRlt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (effectIdent_ == null) {
              EffectIdent = new global::NFMsg.Ident();
            }
            input.ReadMessage(EffectIdent);
            break;
          }
          case 16: {
            EffectValue = input.ReadInt32();
            break;
          }
          case 24: {
            EffectRlt = (global::NFMsg.EffectData.Types.EResultType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EffectData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EResultType {
        [pbr::OriginalName("EET_FAIL")] EetFail = 0,
        [pbr::OriginalName("EET_SUCCESS")] EetSuccess = 1,
        [pbr::OriginalName("EET_REFUSE")] EetRefuse = 2,
        [pbr::OriginalName("EET_MISS")] EetMiss = 3,
        [pbr::OriginalName("EET_CRIT")] EetCrit = 4,
        [pbr::OriginalName("EET_ULTI")] EetUlti = 5,
      }

    }
    #endregion

  }

  public sealed partial class ReqAckUseSkill : pb::IMessage<ReqAckUseSkill> {
    private static readonly pb::MessageParser<ReqAckUseSkill> _parser = new pb::MessageParser<ReqAckUseSkill>(() => new ReqAckUseSkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckUseSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckUseSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckUseSkill(ReqAckUseSkill other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      skillId_ = other.skillId_;
      useIndex_ = other.useIndex_;
      effectData_ = other.effectData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckUseSkill Clone() {
      return new ReqAckUseSkill(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::NFMsg.Ident user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private pb::ByteString skillId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SkillId {
      get { return skillId_; }
      set {
        skillId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "use_index" field.</summary>
    public const int UseIndexFieldNumber = 3;
    private int useIndex_;
    /// <summary>
    ///因为客户端要先展示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UseIndex {
      get { return useIndex_; }
      set {
        useIndex_ = value;
      }
    }

    /// <summary>Field number for the "effect_data" field.</summary>
    public const int EffectDataFieldNumber = 4;
    private static readonly pb::FieldCodec<global::NFMsg.EffectData> _repeated_effectData_codec
        = pb::FieldCodec.ForMessage(34, global::NFMsg.EffectData.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.EffectData> effectData_ = new pbc::RepeatedField<global::NFMsg.EffectData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.EffectData> EffectData {
      get { return effectData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckUseSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckUseSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (SkillId != other.SkillId) return false;
      if (UseIndex != other.UseIndex) return false;
      if(!effectData_.Equals(other.effectData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (SkillId.Length != 0) hash ^= SkillId.GetHashCode();
      if (UseIndex != 0) hash ^= UseIndex.GetHashCode();
      hash ^= effectData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (SkillId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(SkillId);
      }
      if (UseIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UseIndex);
      }
      effectData_.WriteTo(output, _repeated_effectData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (SkillId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SkillId);
      }
      if (UseIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UseIndex);
      }
      size += effectData_.CalculateSize(_repeated_effectData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckUseSkill other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::NFMsg.Ident();
        }
        User.MergeFrom(other.User);
      }
      if (other.SkillId.Length != 0) {
        SkillId = other.SkillId;
      }
      if (other.UseIndex != 0) {
        UseIndex = other.UseIndex;
      }
      effectData_.Add(other.effectData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::NFMsg.Ident();
            }
            input.ReadMessage(User);
            break;
          }
          case 18: {
            SkillId = input.ReadBytes();
            break;
          }
          case 24: {
            UseIndex = input.ReadInt32();
            break;
          }
          case 34: {
            effectData_.AddEntriesFrom(input, _repeated_effectData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAckSwapScene : pb::IMessage<ReqAckSwapScene> {
    private static readonly pb::MessageParser<ReqAckSwapScene> _parser = new pb::MessageParser<ReqAckSwapScene>(() => new ReqAckSwapScene());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckSwapScene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSwapScene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSwapScene(ReqAckSwapScene other) : this() {
      transferType_ = other.transferType_;
      sceneId_ = other.sceneId_;
      lineId_ = other.lineId_;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSwapScene Clone() {
      return new ReqAckSwapScene(this);
    }

    /// <summary>Field number for the "transfer_type" field.</summary>
    public const int TransferTypeFieldNumber = 1;
    private int transferType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TransferType {
      get { return transferType_; }
      set {
        transferType_ = value;
      }
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int SceneIdFieldNumber = 2;
    private int sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "line_id" field.</summary>
    public const int LineIdFieldNumber = 3;
    private int lineId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LineId {
      get { return lineId_; }
      set {
        lineId_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 4;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 5;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 6;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 7;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckSwapScene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckSwapScene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransferType != other.TransferType) return false;
      if (SceneId != other.SceneId) return false;
      if (LineId != other.LineId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransferType != 0) hash ^= TransferType.GetHashCode();
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      if (LineId != 0) hash ^= LineId.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransferType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TransferType);
      }
      if (SceneId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SceneId);
      }
      if (LineId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LineId);
      }
      if (X != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Z);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransferType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TransferType);
      }
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneId);
      }
      if (LineId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineId);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckSwapScene other) {
      if (other == null) {
        return;
      }
      if (other.TransferType != 0) {
        TransferType = other.TransferType;
      }
      if (other.SceneId != 0) {
        SceneId = other.SceneId;
      }
      if (other.LineId != 0) {
        LineId = other.LineId;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TransferType = input.ReadInt32();
            break;
          }
          case 16: {
            SceneId = input.ReadInt32();
            break;
          }
          case 24: {
            LineId = input.ReadInt32();
            break;
          }
          case 37: {
            X = input.ReadFloat();
            break;
          }
          case 45: {
            Y = input.ReadFloat();
            break;
          }
          case 53: {
            Z = input.ReadFloat();
            break;
          }
          case 58: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //////////////////////////////////////////
  /// </summary>
  public sealed partial class ReqAckPlayerChat : pb::IMessage<ReqAckPlayerChat> {
    private static readonly pb::MessageParser<ReqAckPlayerChat> _parser = new pb::MessageParser<ReqAckPlayerChat>(() => new ReqAckPlayerChat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckPlayerChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerChat(ReqAckPlayerChat other) : this() {
      playerId_ = other.playerId_ != null ? other.playerId_.Clone() : null;
      playerName_ = other.playerName_;
      chatChannel_ = other.chatChannel_;
      chatType_ = other.chatType_;
      chatInfo_ = other.chatInfo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerChat Clone() {
      return new ReqAckPlayerChat(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private global::NFMsg.Ident playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "player_name" field.</summary>
    public const int PlayerNameFieldNumber = 2;
    private pb::ByteString playerName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chat_channel" field.</summary>
    public const int ChatChannelFieldNumber = 3;
    private global::NFMsg.ReqAckPlayerChat.Types.EGameChatChannel chatChannel_ = global::NFMsg.ReqAckPlayerChat.Types.EGameChatChannel.EgccGlobal;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ReqAckPlayerChat.Types.EGameChatChannel ChatChannel {
      get { return chatChannel_; }
      set {
        chatChannel_ = value;
      }
    }

    /// <summary>Field number for the "chat_type" field.</summary>
    public const int ChatTypeFieldNumber = 4;
    private global::NFMsg.ReqAckPlayerChat.Types.EGameChatType chatType_ = global::NFMsg.ReqAckPlayerChat.Types.EGameChatType.EgctText;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ReqAckPlayerChat.Types.EGameChatType ChatType {
      get { return chatType_; }
      set {
        chatType_ = value;
      }
    }

    /// <summary>Field number for the "chat_info" field.</summary>
    public const int ChatInfoFieldNumber = 5;
    private pb::ByteString chatInfo_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChatInfo {
      get { return chatInfo_; }
      set {
        chatInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckPlayerChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckPlayerChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerId, other.PlayerId)) return false;
      if (PlayerName != other.PlayerName) return false;
      if (ChatChannel != other.ChatChannel) return false;
      if (ChatType != other.ChatType) return false;
      if (ChatInfo != other.ChatInfo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerId_ != null) hash ^= PlayerId.GetHashCode();
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (ChatChannel != global::NFMsg.ReqAckPlayerChat.Types.EGameChatChannel.EgccGlobal) hash ^= ChatChannel.GetHashCode();
      if (ChatType != global::NFMsg.ReqAckPlayerChat.Types.EGameChatType.EgctText) hash ^= ChatType.GetHashCode();
      if (ChatInfo.Length != 0) hash ^= ChatInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerId);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PlayerName);
      }
      if (ChatChannel != global::NFMsg.ReqAckPlayerChat.Types.EGameChatChannel.EgccGlobal) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ChatChannel);
      }
      if (ChatType != global::NFMsg.ReqAckPlayerChat.Types.EGameChatType.EgctText) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ChatType);
      }
      if (ChatInfo.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(ChatInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerId);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PlayerName);
      }
      if (ChatChannel != global::NFMsg.ReqAckPlayerChat.Types.EGameChatChannel.EgccGlobal) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChatChannel);
      }
      if (ChatType != global::NFMsg.ReqAckPlayerChat.Types.EGameChatType.EgctText) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChatType);
      }
      if (ChatInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChatInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckPlayerChat other) {
      if (other == null) {
        return;
      }
      if (other.playerId_ != null) {
        if (playerId_ == null) {
          PlayerId = new global::NFMsg.Ident();
        }
        PlayerId.MergeFrom(other.PlayerId);
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      if (other.ChatChannel != global::NFMsg.ReqAckPlayerChat.Types.EGameChatChannel.EgccGlobal) {
        ChatChannel = other.ChatChannel;
      }
      if (other.ChatType != global::NFMsg.ReqAckPlayerChat.Types.EGameChatType.EgctText) {
        ChatType = other.ChatType;
      }
      if (other.ChatInfo.Length != 0) {
        ChatInfo = other.ChatInfo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (playerId_ == null) {
              PlayerId = new global::NFMsg.Ident();
            }
            input.ReadMessage(PlayerId);
            break;
          }
          case 18: {
            PlayerName = input.ReadBytes();
            break;
          }
          case 24: {
            ChatChannel = (global::NFMsg.ReqAckPlayerChat.Types.EGameChatChannel) input.ReadEnum();
            break;
          }
          case 32: {
            ChatType = (global::NFMsg.ReqAckPlayerChat.Types.EGameChatType) input.ReadEnum();
            break;
          }
          case 42: {
            ChatInfo = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReqAckPlayerChat message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EGameChatChannel {
        [pbr::OriginalName("EGCC_GLOBAL")] EgccGlobal = 0,
        [pbr::OriginalName("EGCC_CLAN")] EgccClan = 1,
        [pbr::OriginalName("EGCC_ROOM")] EgccRoom = 2,
        [pbr::OriginalName("EGCC_TEAM")] EgccTeam = 3,
      }

      public enum EGameChatType {
        [pbr::OriginalName("EGCT_TEXT")] EgctText = 0,
        [pbr::OriginalName("EGCT_VOICE")] EgctVoice = 1,
        [pbr::OriginalName("EGCT_EMOJI")] EgctEmoji = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
