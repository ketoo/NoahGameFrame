// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgPreGame.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NFMsgPreGame.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NFMsg {

namespace {

const ::google::protobuf::Descriptor* ServerInfoReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfoReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerInfoReportList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfoReportList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckEventResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckEventResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAccountLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAccountLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAccountLogout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAccountLogout_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqServerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqServerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckServerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckServerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqConnectWorld_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqConnectWorld_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckConnectWorldResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckConnectWorldResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqKickFromWorld_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqKickFromWorld_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRoleList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRoleList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleLiteInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleLiteInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckRoleLiteInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckRoleLiteInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCreateRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCreateRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqDeleteRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqDeleteRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRecoverRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRecoverRole_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EServerState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqServerListType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_NFMsgPreGame_2eproto() {
  protobuf_AddDesc_NFMsgPreGame_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NFMsgPreGame.proto");
  GOOGLE_CHECK(file != NULL);
  ServerInfoReport_descriptor_ = file->message_type(0);
  static const int ServerInfoReport_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, server_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, server_max_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, server_cur_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, server_state_),
  };
  ServerInfoReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfoReport_descriptor_,
      ServerInfoReport::default_instance_,
      ServerInfoReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfoReport));
  ServerInfoReportList_descriptor_ = file->message_type(1);
  static const int ServerInfoReportList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReportList, server_list_),
  };
  ServerInfoReportList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfoReportList_descriptor_,
      ServerInfoReportList::default_instance_,
      ServerInfoReportList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReportList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReportList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfoReportList));
  AckEventResult_descriptor_ = file->message_type(2);
  static const int AckEventResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEventResult, event_code_),
  };
  AckEventResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckEventResult_descriptor_,
      AckEventResult::default_instance_,
      AckEventResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEventResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEventResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckEventResult));
  ReqAccountLogin_descriptor_ = file->message_type(3);
  static const int ReqAccountLogin_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAccountLogin, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAccountLogin, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAccountLogin, security_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAccountLogin, signbuff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAccountLogin, clientversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAccountLogin, loginmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAccountLogin, clientip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAccountLogin, clientmac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAccountLogin, device_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAccountLogin, extra_info_),
  };
  ReqAccountLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAccountLogin_descriptor_,
      ReqAccountLogin::default_instance_,
      ReqAccountLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAccountLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAccountLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAccountLogin));
  ReqAccountLogout_descriptor_ = file->message_type(4);
  static const int ReqAccountLogout_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAccountLogout, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAccountLogout, extra_info_),
  };
  ReqAccountLogout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAccountLogout_descriptor_,
      ReqAccountLogout::default_instance_,
      ReqAccountLogout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAccountLogout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAccountLogout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAccountLogout));
  ServerInfo_descriptor_ = file->message_type(5);
  static const int ServerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, wait_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, status_),
  };
  ServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfo_descriptor_,
      ServerInfo::default_instance_,
      ServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfo));
  ReqServerList_descriptor_ = file->message_type(6);
  static const int ReqServerList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServerList, type_),
  };
  ReqServerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqServerList_descriptor_,
      ReqServerList::default_instance_,
      ReqServerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqServerList));
  AckServerList_descriptor_ = file->message_type(7);
  static const int AckServerList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckServerList, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckServerList, info_),
  };
  AckServerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckServerList_descriptor_,
      AckServerList::default_instance_,
      AckServerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckServerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckServerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckServerList));
  ReqConnectWorld_descriptor_ = file->message_type(8);
  static const int ReqConnectWorld_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqConnectWorld, world_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqConnectWorld, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqConnectWorld, sender_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqConnectWorld, login_id_),
  };
  ReqConnectWorld_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqConnectWorld_descriptor_,
      ReqConnectWorld::default_instance_,
      ReqConnectWorld_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqConnectWorld, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqConnectWorld, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqConnectWorld));
  AckConnectWorldResult_descriptor_ = file->message_type(9);
  static const int AckConnectWorldResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckConnectWorldResult, world_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckConnectWorldResult, sender_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckConnectWorldResult, login_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckConnectWorldResult, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckConnectWorldResult, world_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckConnectWorldResult, world_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckConnectWorldResult, world_key_),
  };
  AckConnectWorldResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckConnectWorldResult_descriptor_,
      AckConnectWorldResult::default_instance_,
      AckConnectWorldResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckConnectWorldResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckConnectWorldResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckConnectWorldResult));
  ReqKickFromWorld_descriptor_ = file->message_type(10);
  static const int ReqKickFromWorld_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqKickFromWorld, world_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqKickFromWorld, account_),
  };
  ReqKickFromWorld_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqKickFromWorld_descriptor_,
      ReqKickFromWorld::default_instance_,
      ReqKickFromWorld_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqKickFromWorld, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqKickFromWorld, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqKickFromWorld));
  ReqRoleList_descriptor_ = file->message_type(11);
  static const int ReqRoleList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoleList, game_id_),
  };
  ReqRoleList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqRoleList_descriptor_,
      ReqRoleList::default_instance_,
      ReqRoleList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoleList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoleList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqRoleList));
  RoleLiteInfo_descriptor_ = file->message_type(12);
  static const int RoleLiteInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleLiteInfo, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleLiteInfo, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleLiteInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleLiteInfo, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleLiteInfo, noob_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleLiteInfo, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleLiteInfo, char_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleLiteInfo, char_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleLiteInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleLiteInfo, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleLiteInfo, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleLiteInfo, delete_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleLiteInfo, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleLiteInfo, last_offline_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleLiteInfo, last_offline_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleLiteInfo, view_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleLiteInfo, pet_record_),
  };
  RoleLiteInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleLiteInfo_descriptor_,
      RoleLiteInfo::default_instance_,
      RoleLiteInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleLiteInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleLiteInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleLiteInfo));
  AckRoleLiteInfoList_descriptor_ = file->message_type(13);
  static const int AckRoleLiteInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRoleLiteInfoList, char_data_),
  };
  AckRoleLiteInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckRoleLiteInfoList_descriptor_,
      AckRoleLiteInfoList::default_instance_,
      AckRoleLiteInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRoleLiteInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRoleLiteInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckRoleLiteInfoList));
  ReqCreateRole_descriptor_ = file->message_type(14);
  static const int ReqCreateRole_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateRole, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateRole, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateRole, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateRole, noob_head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateRole, noob_body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateRole, noob_foot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateRole, noob_weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateRole, noob_pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateRole, noob_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateRole, game_id_),
  };
  ReqCreateRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCreateRole_descriptor_,
      ReqCreateRole::default_instance_,
      ReqCreateRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCreateRole));
  ReqDeleteRole_descriptor_ = file->message_type(15);
  static const int ReqDeleteRole_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeleteRole, char_id_),
  };
  ReqDeleteRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqDeleteRole_descriptor_,
      ReqDeleteRole::default_instance_,
      ReqDeleteRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeleteRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeleteRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqDeleteRole));
  ReqRecoverRole_descriptor_ = file->message_type(16);
  static const int ReqRecoverRole_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecoverRole, char_id_),
  };
  ReqRecoverRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqRecoverRole_descriptor_,
      ReqRecoverRole::default_instance_,
      ReqRecoverRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecoverRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRecoverRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqRecoverRole));
  EServerState_descriptor_ = file->enum_type(0);
  ReqServerListType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NFMsgPreGame_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfoReport_descriptor_, &ServerInfoReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfoReportList_descriptor_, &ServerInfoReportList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckEventResult_descriptor_, &AckEventResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAccountLogin_descriptor_, &ReqAccountLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAccountLogout_descriptor_, &ReqAccountLogout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfo_descriptor_, &ServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqServerList_descriptor_, &ReqServerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckServerList_descriptor_, &AckServerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqConnectWorld_descriptor_, &ReqConnectWorld::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckConnectWorldResult_descriptor_, &AckConnectWorldResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqKickFromWorld_descriptor_, &ReqKickFromWorld::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqRoleList_descriptor_, &ReqRoleList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleLiteInfo_descriptor_, &RoleLiteInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckRoleLiteInfoList_descriptor_, &AckRoleLiteInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCreateRole_descriptor_, &ReqCreateRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqDeleteRole_descriptor_, &ReqDeleteRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqRecoverRole_descriptor_, &ReqRecoverRole::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NFMsgPreGame_2eproto() {
  delete ServerInfoReport::default_instance_;
  delete ServerInfoReport_reflection_;
  delete ServerInfoReportList::default_instance_;
  delete ServerInfoReportList_reflection_;
  delete AckEventResult::default_instance_;
  delete AckEventResult_reflection_;
  delete ReqAccountLogin::default_instance_;
  delete ReqAccountLogin_reflection_;
  delete ReqAccountLogout::default_instance_;
  delete ReqAccountLogout_reflection_;
  delete ServerInfo::default_instance_;
  delete ServerInfo_reflection_;
  delete ReqServerList::default_instance_;
  delete ReqServerList_reflection_;
  delete AckServerList::default_instance_;
  delete AckServerList_reflection_;
  delete ReqConnectWorld::default_instance_;
  delete ReqConnectWorld_reflection_;
  delete AckConnectWorldResult::default_instance_;
  delete AckConnectWorldResult_reflection_;
  delete ReqKickFromWorld::default_instance_;
  delete ReqKickFromWorld_reflection_;
  delete ReqRoleList::default_instance_;
  delete ReqRoleList_reflection_;
  delete RoleLiteInfo::default_instance_;
  delete RoleLiteInfo_reflection_;
  delete AckRoleLiteInfoList::default_instance_;
  delete AckRoleLiteInfoList_reflection_;
  delete ReqCreateRole::default_instance_;
  delete ReqCreateRole_reflection_;
  delete ReqDeleteRole::default_instance_;
  delete ReqDeleteRole_reflection_;
  delete ReqRecoverRole::default_instance_;
  delete ReqRecoverRole_reflection_;
}

void protobuf_AddDesc_NFMsgPreGame_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::NFMsg::protobuf_AddDesc_NFDefine_2eproto();
  ::NFMsg::protobuf_AddDesc_NFMsgBase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022NFMsgPreGame.proto\022\005NFMsg\032\016NFDefine.pr"
    "oto\032\017NFMsgBase.proto\"\302\001\n\020ServerInfoRepor"
    "t\022\021\n\tserver_id\030\001 \002(\005\022\023\n\013server_name\030\002 \002("
    "\014\022\021\n\tserver_ip\030\003 \002(\014\022\023\n\013server_port\030\004 \002("
    "\005\022\031\n\021server_max_online\030\005 \002(\005\022\030\n\020server_c"
    "ur_count\030\006 \002(\005\022)\n\014server_state\030\007 \002(\0162\023.N"
    "FMsg.EServerState\"D\n\024ServerInfoReportLis"
    "t\022,\n\013server_list\030\001 \003(\0132\027.NFMsg.ServerInf"
    "oReport\";\n\016AckEventResult\022)\n\nevent_code\030"
    "\001 \002(\0162\025.NFMsg.EGameEventCode\"\325\001\n\017ReqAcco"
    "untLogin\022\017\n\007account\030\002 \002(\014\022\020\n\010password\030\003 "
    "\002(\014\022\025\n\rsecurity_code\030\004 \002(\014\022\020\n\010signBuff\030\005"
    " \002(\014\022\025\n\rclientVersion\030\006 \002(\005\022\021\n\tloginMode"
    "\030\007 \002(\005\022\020\n\010clientIP\030\010 \002(\005\022\021\n\tclientMAC\030\t "
    "\002(\003\022\023\n\013device_info\030\n \002(\014\022\022\n\nextra_info\030\013"
    " \002(\014\"7\n\020ReqAccountLogout\022\017\n\007account\030\002 \002("
    "\014\022\022\n\nextra_info\030\003 \002(\014\"f\n\nServerInfo\022\021\n\ts"
    "erver_id\030\001 \002(\005\022\014\n\004name\030\002 \002(\014\022\022\n\nwait_cou"
    "nt\030\003 \002(\005\022#\n\006status\030\004 \002(\0162\023.NFMsg.EServer"
    "State\"7\n\rReqServerList\022&\n\004type\030\001 \002(\0162\030.N"
    "FMsg.ReqServerListType\"X\n\rAckServerList\022"
    "&\n\004type\030\001 \002(\0162\030.NFMsg.ReqServerListType\022"
    "\037\n\004info\030\002 \003(\0132\021.NFMsg.ServerInfo\"Y\n\017ReqC"
    "onnectWorld\022\020\n\010world_id\030\001 \002(\005\022\017\n\007account"
    "\030\002 \001(\014\022\021\n\tsender_ip\030\003 \001(\005\022\020\n\010login_id\030\004 "
    "\001(\005\"\230\001\n\025AckConnectWorldResult\022\020\n\010world_i"
    "d\030\001 \002(\005\022\021\n\tsender_ip\030\002 \002(\005\022\020\n\010login_id\030\003"
    " \002(\005\022\017\n\007account\030\004 \002(\014\022\020\n\010world_ip\030\005 \002(\014\022"
    "\022\n\nworld_port\030\006 \002(\005\022\021\n\tworld_key\030\007 \002(\014\"5"
    "\n\020ReqKickFromWorld\022\020\n\010world_id\030\001 \002(\005\022\017\n\007"
    "account\030\002 \002(\014\"\036\n\013ReqRoleList\022\017\n\007game_id\030"
    "\001 \002(\005\"\310\002\n\014RoleLiteInfo\022\017\n\007char_id\030\001 \002(\005\022"
    "\016\n\006career\030\002 \002(\005\022\013\n\003sex\030\003 \002(\005\022\014\n\004race\030\004 \002"
    "(\005\022\021\n\tnoob_name\030\005 \002(\014\022\017\n\007game_id\030\006 \002(\005\022\022"
    "\n\nchar_level\030\007 \002(\005\022\020\n\010char_exp\030\010 \002(\005\022\r\n\005"
    "money\030\t \002(\005\022\014\n\004cash\030\n \002(\005\022\021\n\tvip_level\030\013"
    " \002(\005\022\023\n\013delete_time\030\014 \002(\005\022\020\n\010reg_time\030\r "
    "\002(\005\022\031\n\021last_offline_time\030\017 \002(\005\022\027\n\017last_o"
    "ffline_ip\030\020 \002(\005\022\023\n\013view_record\030\021 \002(\014\022\022\n\n"
    "pet_record\030\022 \002(\014\"=\n\023AckRoleLiteInfoList\022"
    "&\n\tchar_data\030\001 \003(\0132\023.NFMsg.RoleLiteInfo\""
    "\276\001\n\rReqCreateRole\022\016\n\006career\030\001 \002(\005\022\013\n\003sex"
    "\030\002 \002(\005\022\014\n\004race\030\003 \002(\005\022\021\n\tnoob_head\030\004 \002(\005\022"
    "\021\n\tnoob_body\030\005 \002(\005\022\021\n\tnoob_foot\030\006 \002(\005\022\023\n"
    "\013noob_weapon\030\007 \002(\005\022\020\n\010noob_pic\030\010 \002(\005\022\021\n\t"
    "noob_name\030\t \002(\014\022\017\n\007game_id\030\n \002(\005\" \n\rReqD"
    "eleteRole\022\017\n\007char_id\030\001 \002(\005\"!\n\016ReqRecover"
    "Role\022\017\n\007char_id\030\001 \002(\005*Z\n\014EServerState\022\r\n"
    "\tEST_CRASH\020\000\022\016\n\nEST_NARMAL\020\001\022\014\n\010EST_BUSY"
    "\020\002\022\014\n\010EST_FIRE\020\003\022\017\n\013EST_MAINTEN\020\004*@\n\021Req"
    "ServerListType\022\025\n\021RSLT_WORLD_SERVER\020\000\022\024\n"
    "\020RSLT_GAMES_ERVER\020\001", 2059);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NFMsgPreGame.proto", &protobuf_RegisterTypes);
  ServerInfoReport::default_instance_ = new ServerInfoReport();
  ServerInfoReportList::default_instance_ = new ServerInfoReportList();
  AckEventResult::default_instance_ = new AckEventResult();
  ReqAccountLogin::default_instance_ = new ReqAccountLogin();
  ReqAccountLogout::default_instance_ = new ReqAccountLogout();
  ServerInfo::default_instance_ = new ServerInfo();
  ReqServerList::default_instance_ = new ReqServerList();
  AckServerList::default_instance_ = new AckServerList();
  ReqConnectWorld::default_instance_ = new ReqConnectWorld();
  AckConnectWorldResult::default_instance_ = new AckConnectWorldResult();
  ReqKickFromWorld::default_instance_ = new ReqKickFromWorld();
  ReqRoleList::default_instance_ = new ReqRoleList();
  RoleLiteInfo::default_instance_ = new RoleLiteInfo();
  AckRoleLiteInfoList::default_instance_ = new AckRoleLiteInfoList();
  ReqCreateRole::default_instance_ = new ReqCreateRole();
  ReqDeleteRole::default_instance_ = new ReqDeleteRole();
  ReqRecoverRole::default_instance_ = new ReqRecoverRole();
  ServerInfoReport::default_instance_->InitAsDefaultInstance();
  ServerInfoReportList::default_instance_->InitAsDefaultInstance();
  AckEventResult::default_instance_->InitAsDefaultInstance();
  ReqAccountLogin::default_instance_->InitAsDefaultInstance();
  ReqAccountLogout::default_instance_->InitAsDefaultInstance();
  ServerInfo::default_instance_->InitAsDefaultInstance();
  ReqServerList::default_instance_->InitAsDefaultInstance();
  AckServerList::default_instance_->InitAsDefaultInstance();
  ReqConnectWorld::default_instance_->InitAsDefaultInstance();
  AckConnectWorldResult::default_instance_->InitAsDefaultInstance();
  ReqKickFromWorld::default_instance_->InitAsDefaultInstance();
  ReqRoleList::default_instance_->InitAsDefaultInstance();
  RoleLiteInfo::default_instance_->InitAsDefaultInstance();
  AckRoleLiteInfoList::default_instance_->InitAsDefaultInstance();
  ReqCreateRole::default_instance_->InitAsDefaultInstance();
  ReqDeleteRole::default_instance_->InitAsDefaultInstance();
  ReqRecoverRole::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NFMsgPreGame_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NFMsgPreGame_2eproto {
  StaticDescriptorInitializer_NFMsgPreGame_2eproto() {
    protobuf_AddDesc_NFMsgPreGame_2eproto();
  }
} static_descriptor_initializer_NFMsgPreGame_2eproto_;
const ::google::protobuf::EnumDescriptor* EServerState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EServerState_descriptor_;
}
bool EServerState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReqServerListType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqServerListType_descriptor_;
}
bool ReqServerListType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ServerInfoReport::kServerIdFieldNumber;
const int ServerInfoReport::kServerNameFieldNumber;
const int ServerInfoReport::kServerIpFieldNumber;
const int ServerInfoReport::kServerPortFieldNumber;
const int ServerInfoReport::kServerMaxOnlineFieldNumber;
const int ServerInfoReport::kServerCurCountFieldNumber;
const int ServerInfoReport::kServerStateFieldNumber;
#endif  // !_MSC_VER

ServerInfoReport::ServerInfoReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerInfoReport::InitAsDefaultInstance() {
}

ServerInfoReport::ServerInfoReport(const ServerInfoReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerInfoReport::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_port_ = 0;
  server_max_online_ = 0;
  server_cur_count_ = 0;
  server_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfoReport::~ServerInfoReport() {
  SharedDtor();
}

void ServerInfoReport::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete server_ip_;
  }
  if (this != default_instance_) {
  }
}

void ServerInfoReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfoReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfoReport_descriptor_;
}

const ServerInfoReport& ServerInfoReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgPreGame_2eproto();
  return *default_instance_;
}

ServerInfoReport* ServerInfoReport::default_instance_ = NULL;

ServerInfoReport* ServerInfoReport::New() const {
  return new ServerInfoReport;
}

void ServerInfoReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0;
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    if (has_server_ip()) {
      if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
        server_ip_->clear();
      }
    }
    server_port_ = 0;
    server_max_online_ = 0;
    server_cur_count_ = 0;
    server_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfoReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_name;
        break;
      }

      // required bytes server_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_server_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server_ip;
        break;
      }

      // required bytes server_ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_server_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server_port;
        break;
      }

      // required int32 server_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_port_)));
          set_has_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_server_max_online;
        break;
      }

      // required int32 server_max_online = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_max_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_max_online_)));
          set_has_server_max_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_server_cur_count;
        break;
      }

      // required int32 server_cur_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_cur_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_cur_count_)));
          set_has_server_cur_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_server_state;
        break;
      }

      // required .NFMsg.EServerState server_state = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::EServerState_IsValid(value)) {
            set_server_state(static_cast< ::NFMsg::EServerState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerInfoReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // required bytes server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->server_name(), output);
  }

  // required bytes server_ip = 3;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->server_ip(), output);
  }

  // required int32 server_port = 4;
  if (has_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->server_port(), output);
  }

  // required int32 server_max_online = 5;
  if (has_server_max_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->server_max_online(), output);
  }

  // required int32 server_cur_count = 6;
  if (has_server_cur_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->server_cur_count(), output);
  }

  // required .NFMsg.EServerState server_state = 7;
  if (has_server_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->server_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerInfoReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // required bytes server_name = 2;
  if (has_server_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->server_name(), target);
  }

  // required bytes server_ip = 3;
  if (has_server_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->server_ip(), target);
  }

  // required int32 server_port = 4;
  if (has_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->server_port(), target);
  }

  // required int32 server_max_online = 5;
  if (has_server_max_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->server_max_online(), target);
  }

  // required int32 server_cur_count = 6;
  if (has_server_cur_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->server_cur_count(), target);
  }

  // required .NFMsg.EServerState server_state = 7;
  if (has_server_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->server_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerInfoReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

    // required bytes server_name = 2;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->server_name());
    }

    // required bytes server_ip = 3;
    if (has_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->server_ip());
    }

    // required int32 server_port = 4;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_port());
    }

    // required int32 server_max_online = 5;
    if (has_server_max_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_max_online());
    }

    // required int32 server_cur_count = 6;
    if (has_server_cur_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_cur_count());
    }

    // required .NFMsg.EServerState server_state = 7;
    if (has_server_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->server_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfoReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfoReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfoReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfoReport::MergeFrom(const ServerInfoReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_server_ip()) {
      set_server_ip(from.server_ip());
    }
    if (from.has_server_port()) {
      set_server_port(from.server_port());
    }
    if (from.has_server_max_online()) {
      set_server_max_online(from.server_max_online());
    }
    if (from.has_server_cur_count()) {
      set_server_cur_count(from.server_cur_count());
    }
    if (from.has_server_state()) {
      set_server_state(from.server_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfoReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfoReport::CopyFrom(const ServerInfoReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfoReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ServerInfoReport::Swap(ServerInfoReport* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(server_name_, other->server_name_);
    std::swap(server_ip_, other->server_ip_);
    std::swap(server_port_, other->server_port_);
    std::swap(server_max_online_, other->server_max_online_);
    std::swap(server_cur_count_, other->server_cur_count_);
    std::swap(server_state_, other->server_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfoReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfoReport_descriptor_;
  metadata.reflection = ServerInfoReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerInfoReportList::kServerListFieldNumber;
#endif  // !_MSC_VER

ServerInfoReportList::ServerInfoReportList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerInfoReportList::InitAsDefaultInstance() {
}

ServerInfoReportList::ServerInfoReportList(const ServerInfoReportList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerInfoReportList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfoReportList::~ServerInfoReportList() {
  SharedDtor();
}

void ServerInfoReportList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerInfoReportList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfoReportList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfoReportList_descriptor_;
}

const ServerInfoReportList& ServerInfoReportList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgPreGame_2eproto();
  return *default_instance_;
}

ServerInfoReportList* ServerInfoReportList::default_instance_ = NULL;

ServerInfoReportList* ServerInfoReportList::New() const {
  return new ServerInfoReportList;
}

void ServerInfoReportList::Clear() {
  server_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfoReportList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFMsg.ServerInfoReport server_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_server_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerInfoReportList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NFMsg.ServerInfoReport server_list = 1;
  for (int i = 0; i < this->server_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerInfoReportList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NFMsg.ServerInfoReport server_list = 1;
  for (int i = 0; i < this->server_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->server_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerInfoReportList::ByteSize() const {
  int total_size = 0;

  // repeated .NFMsg.ServerInfoReport server_list = 1;
  total_size += 1 * this->server_list_size();
  for (int i = 0; i < this->server_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfoReportList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfoReportList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfoReportList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfoReportList::MergeFrom(const ServerInfoReportList& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_list_.MergeFrom(from.server_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfoReportList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfoReportList::CopyFrom(const ServerInfoReportList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfoReportList::IsInitialized() const {

  for (int i = 0; i < server_list_size(); i++) {
    if (!this->server_list(i).IsInitialized()) return false;
  }
  return true;
}

void ServerInfoReportList::Swap(ServerInfoReportList* other) {
  if (other != this) {
    server_list_.Swap(&other->server_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfoReportList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfoReportList_descriptor_;
  metadata.reflection = ServerInfoReportList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckEventResult::kEventCodeFieldNumber;
#endif  // !_MSC_VER

AckEventResult::AckEventResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckEventResult::InitAsDefaultInstance() {
}

AckEventResult::AckEventResult(const AckEventResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckEventResult::SharedCtor() {
  _cached_size_ = 0;
  event_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckEventResult::~AckEventResult() {
  SharedDtor();
}

void AckEventResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckEventResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckEventResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckEventResult_descriptor_;
}

const AckEventResult& AckEventResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgPreGame_2eproto();
  return *default_instance_;
}

AckEventResult* AckEventResult::default_instance_ = NULL;

AckEventResult* AckEventResult::New() const {
  return new AckEventResult;
}

void AckEventResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckEventResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.EGameEventCode event_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::EGameEventCode_IsValid(value)) {
            set_event_code(static_cast< ::NFMsg::EGameEventCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckEventResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.EGameEventCode event_code = 1;
  if (has_event_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckEventResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.EGameEventCode event_code = 1;
  if (has_event_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckEventResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.EGameEventCode event_code = 1;
    if (has_event_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckEventResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckEventResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckEventResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckEventResult::MergeFrom(const AckEventResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_code()) {
      set_event_code(from.event_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckEventResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckEventResult::CopyFrom(const AckEventResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckEventResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckEventResult::Swap(AckEventResult* other) {
  if (other != this) {
    std::swap(event_code_, other->event_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckEventResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckEventResult_descriptor_;
  metadata.reflection = AckEventResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAccountLogin::kAccountFieldNumber;
const int ReqAccountLogin::kPasswordFieldNumber;
const int ReqAccountLogin::kSecurityCodeFieldNumber;
const int ReqAccountLogin::kSignBuffFieldNumber;
const int ReqAccountLogin::kClientVersionFieldNumber;
const int ReqAccountLogin::kLoginModeFieldNumber;
const int ReqAccountLogin::kClientIPFieldNumber;
const int ReqAccountLogin::kClientMACFieldNumber;
const int ReqAccountLogin::kDeviceInfoFieldNumber;
const int ReqAccountLogin::kExtraInfoFieldNumber;
#endif  // !_MSC_VER

ReqAccountLogin::ReqAccountLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAccountLogin::InitAsDefaultInstance() {
}

ReqAccountLogin::ReqAccountLogin(const ReqAccountLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAccountLogin::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signbuff_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientversion_ = 0;
  loginmode_ = 0;
  clientip_ = 0;
  clientmac_ = GOOGLE_LONGLONG(0);
  device_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extra_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAccountLogin::~ReqAccountLogin() {
  SharedDtor();
}

void ReqAccountLogin::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (security_code_ != &::google::protobuf::internal::kEmptyString) {
    delete security_code_;
  }
  if (signbuff_ != &::google::protobuf::internal::kEmptyString) {
    delete signbuff_;
  }
  if (device_info_ != &::google::protobuf::internal::kEmptyString) {
    delete device_info_;
  }
  if (extra_info_ != &::google::protobuf::internal::kEmptyString) {
    delete extra_info_;
  }
  if (this != default_instance_) {
  }
}

void ReqAccountLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAccountLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAccountLogin_descriptor_;
}

const ReqAccountLogin& ReqAccountLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgPreGame_2eproto();
  return *default_instance_;
}

ReqAccountLogin* ReqAccountLogin::default_instance_ = NULL;

ReqAccountLogin* ReqAccountLogin::New() const {
  return new ReqAccountLogin;
}

void ReqAccountLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_security_code()) {
      if (security_code_ != &::google::protobuf::internal::kEmptyString) {
        security_code_->clear();
      }
    }
    if (has_signbuff()) {
      if (signbuff_ != &::google::protobuf::internal::kEmptyString) {
        signbuff_->clear();
      }
    }
    clientversion_ = 0;
    loginmode_ = 0;
    clientip_ = 0;
    clientmac_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_device_info()) {
      if (device_info_ != &::google::protobuf::internal::kEmptyString) {
        device_info_->clear();
      }
    }
    if (has_extra_info()) {
      if (extra_info_ != &::google::protobuf::internal::kEmptyString) {
        extra_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAccountLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // required bytes password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_security_code;
        break;
      }

      // required bytes security_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_security_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_signBuff;
        break;
      }

      // required bytes signBuff = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signBuff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signbuff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_clientVersion;
        break;
      }

      // required int32 clientVersion = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientversion_)));
          set_has_clientversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_loginMode;
        break;
      }

      // required int32 loginMode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginmode_)));
          set_has_loginmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_clientIP;
        break;
      }

      // required int32 clientIP = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientIP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientip_)));
          set_has_clientip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_clientMAC;
        break;
      }

      // required int64 clientMAC = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientMAC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clientmac_)));
          set_has_clientmac();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_device_info;
        break;
      }

      // required bytes device_info = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_device_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_extra_info;
        break;
      }

      // required bytes extra_info = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extra_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAccountLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->account(), output);
  }

  // required bytes password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->password(), output);
  }

  // required bytes security_code = 4;
  if (has_security_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->security_code(), output);
  }

  // required bytes signBuff = 5;
  if (has_signbuff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->signbuff(), output);
  }

  // required int32 clientVersion = 6;
  if (has_clientversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->clientversion(), output);
  }

  // required int32 loginMode = 7;
  if (has_loginmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->loginmode(), output);
  }

  // required int32 clientIP = 8;
  if (has_clientip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->clientip(), output);
  }

  // required int64 clientMAC = 9;
  if (has_clientmac()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->clientmac(), output);
  }

  // required bytes device_info = 10;
  if (has_device_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->device_info(), output);
  }

  // required bytes extra_info = 11;
  if (has_extra_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->extra_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAccountLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes account = 2;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->account(), target);
  }

  // required bytes password = 3;
  if (has_password()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->password(), target);
  }

  // required bytes security_code = 4;
  if (has_security_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->security_code(), target);
  }

  // required bytes signBuff = 5;
  if (has_signbuff()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->signbuff(), target);
  }

  // required int32 clientVersion = 6;
  if (has_clientversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->clientversion(), target);
  }

  // required int32 loginMode = 7;
  if (has_loginmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->loginmode(), target);
  }

  // required int32 clientIP = 8;
  if (has_clientip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->clientip(), target);
  }

  // required int64 clientMAC = 9;
  if (has_clientmac()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->clientmac(), target);
  }

  // required bytes device_info = 10;
  if (has_device_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->device_info(), target);
  }

  // required bytes extra_info = 11;
  if (has_extra_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->extra_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAccountLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // required bytes password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

    // required bytes security_code = 4;
    if (has_security_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->security_code());
    }

    // required bytes signBuff = 5;
    if (has_signbuff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signbuff());
    }

    // required int32 clientVersion = 6;
    if (has_clientversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientversion());
    }

    // required int32 loginMode = 7;
    if (has_loginmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginmode());
    }

    // required int32 clientIP = 8;
    if (has_clientip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientip());
    }

    // required int64 clientMAC = 9;
    if (has_clientmac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->clientmac());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bytes device_info = 10;
    if (has_device_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->device_info());
    }

    // required bytes extra_info = 11;
    if (has_extra_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->extra_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAccountLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAccountLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAccountLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAccountLogin::MergeFrom(const ReqAccountLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_security_code()) {
      set_security_code(from.security_code());
    }
    if (from.has_signbuff()) {
      set_signbuff(from.signbuff());
    }
    if (from.has_clientversion()) {
      set_clientversion(from.clientversion());
    }
    if (from.has_loginmode()) {
      set_loginmode(from.loginmode());
    }
    if (from.has_clientip()) {
      set_clientip(from.clientip());
    }
    if (from.has_clientmac()) {
      set_clientmac(from.clientmac());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_device_info()) {
      set_device_info(from.device_info());
    }
    if (from.has_extra_info()) {
      set_extra_info(from.extra_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAccountLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAccountLogin::CopyFrom(const ReqAccountLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAccountLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void ReqAccountLogin::Swap(ReqAccountLogin* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(security_code_, other->security_code_);
    std::swap(signbuff_, other->signbuff_);
    std::swap(clientversion_, other->clientversion_);
    std::swap(loginmode_, other->loginmode_);
    std::swap(clientip_, other->clientip_);
    std::swap(clientmac_, other->clientmac_);
    std::swap(device_info_, other->device_info_);
    std::swap(extra_info_, other->extra_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAccountLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAccountLogin_descriptor_;
  metadata.reflection = ReqAccountLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAccountLogout::kAccountFieldNumber;
const int ReqAccountLogout::kExtraInfoFieldNumber;
#endif  // !_MSC_VER

ReqAccountLogout::ReqAccountLogout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAccountLogout::InitAsDefaultInstance() {
}

ReqAccountLogout::ReqAccountLogout(const ReqAccountLogout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAccountLogout::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extra_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAccountLogout::~ReqAccountLogout() {
  SharedDtor();
}

void ReqAccountLogout::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (extra_info_ != &::google::protobuf::internal::kEmptyString) {
    delete extra_info_;
  }
  if (this != default_instance_) {
  }
}

void ReqAccountLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAccountLogout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAccountLogout_descriptor_;
}

const ReqAccountLogout& ReqAccountLogout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgPreGame_2eproto();
  return *default_instance_;
}

ReqAccountLogout* ReqAccountLogout::default_instance_ = NULL;

ReqAccountLogout* ReqAccountLogout::New() const {
  return new ReqAccountLogout;
}

void ReqAccountLogout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_extra_info()) {
      if (extra_info_ != &::google::protobuf::internal::kEmptyString) {
        extra_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAccountLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_extra_info;
        break;
      }

      // required bytes extra_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extra_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAccountLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->account(), output);
  }

  // required bytes extra_info = 3;
  if (has_extra_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->extra_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAccountLogout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes account = 2;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->account(), target);
  }

  // required bytes extra_info = 3;
  if (has_extra_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->extra_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAccountLogout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // required bytes extra_info = 3;
    if (has_extra_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->extra_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAccountLogout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAccountLogout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAccountLogout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAccountLogout::MergeFrom(const ReqAccountLogout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_extra_info()) {
      set_extra_info(from.extra_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAccountLogout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAccountLogout::CopyFrom(const ReqAccountLogout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAccountLogout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqAccountLogout::Swap(ReqAccountLogout* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(extra_info_, other->extra_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAccountLogout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAccountLogout_descriptor_;
  metadata.reflection = ReqAccountLogout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerInfo::kServerIdFieldNumber;
const int ServerInfo::kNameFieldNumber;
const int ServerInfo::kWaitCountFieldNumber;
const int ServerInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

ServerInfo::ServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerInfo::InitAsDefaultInstance() {
}

ServerInfo::ServerInfo(const ServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerInfo::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wait_count_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfo::~ServerInfo() {
  SharedDtor();
}

void ServerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfo_descriptor_;
}

const ServerInfo& ServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgPreGame_2eproto();
  return *default_instance_;
}

ServerInfo* ServerInfo::default_instance_ = NULL;

ServerInfo* ServerInfo::New() const {
  return new ServerInfo;
}

void ServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    wait_count_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wait_count;
        break;
      }

      // required int32 wait_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wait_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wait_count_)));
          set_has_wait_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required .NFMsg.EServerState status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::EServerState_IsValid(value)) {
            set_status(static_cast< ::NFMsg::EServerState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // required int32 wait_count = 3;
  if (has_wait_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wait_count(), output);
  }

  // required .NFMsg.EServerState status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required int32 wait_count = 3;
  if (has_wait_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wait_count(), target);
  }

  // required .NFMsg.EServerState status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required int32 wait_count = 3;
    if (has_wait_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wait_count());
    }

    // required .NFMsg.EServerState status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_wait_count()) {
      set_wait_count(from.wait_count());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ServerInfo::Swap(ServerInfo* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(name_, other->name_);
    std::swap(wait_count_, other->wait_count_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfo_descriptor_;
  metadata.reflection = ServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqServerList::kTypeFieldNumber;
#endif  // !_MSC_VER

ReqServerList::ReqServerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqServerList::InitAsDefaultInstance() {
}

ReqServerList::ReqServerList(const ReqServerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqServerList::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqServerList::~ReqServerList() {
  SharedDtor();
}

void ReqServerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqServerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqServerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqServerList_descriptor_;
}

const ReqServerList& ReqServerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgPreGame_2eproto();
  return *default_instance_;
}

ReqServerList* ReqServerList::default_instance_ = NULL;

ReqServerList* ReqServerList::New() const {
  return new ReqServerList;
}

void ReqServerList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqServerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.ReqServerListType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::ReqServerListType_IsValid(value)) {
            set_type(static_cast< ::NFMsg::ReqServerListType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqServerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.ReqServerListType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqServerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.ReqServerListType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqServerList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.ReqServerListType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqServerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqServerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqServerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqServerList::MergeFrom(const ReqServerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqServerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqServerList::CopyFrom(const ReqServerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqServerList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqServerList::Swap(ReqServerList* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqServerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqServerList_descriptor_;
  metadata.reflection = ReqServerList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckServerList::kTypeFieldNumber;
const int AckServerList::kInfoFieldNumber;
#endif  // !_MSC_VER

AckServerList::AckServerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckServerList::InitAsDefaultInstance() {
}

AckServerList::AckServerList(const AckServerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckServerList::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckServerList::~AckServerList() {
  SharedDtor();
}

void AckServerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckServerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckServerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckServerList_descriptor_;
}

const AckServerList& AckServerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgPreGame_2eproto();
  return *default_instance_;
}

AckServerList* AckServerList::default_instance_ = NULL;

AckServerList* AckServerList::New() const {
  return new AckServerList;
}

void AckServerList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckServerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.ReqServerListType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::ReqServerListType_IsValid(value)) {
            set_type(static_cast< ::NFMsg::ReqServerListType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .NFMsg.ServerInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckServerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.ReqServerListType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .NFMsg.ServerInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckServerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.ReqServerListType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .NFMsg.ServerInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckServerList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.ReqServerListType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .NFMsg.ServerInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckServerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckServerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckServerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckServerList::MergeFrom(const AckServerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckServerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckServerList::CopyFrom(const AckServerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckServerList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void AckServerList::Swap(AckServerList* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckServerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckServerList_descriptor_;
  metadata.reflection = AckServerList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqConnectWorld::kWorldIdFieldNumber;
const int ReqConnectWorld::kAccountFieldNumber;
const int ReqConnectWorld::kSenderIpFieldNumber;
const int ReqConnectWorld::kLoginIdFieldNumber;
#endif  // !_MSC_VER

ReqConnectWorld::ReqConnectWorld()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqConnectWorld::InitAsDefaultInstance() {
}

ReqConnectWorld::ReqConnectWorld(const ReqConnectWorld& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqConnectWorld::SharedCtor() {
  _cached_size_ = 0;
  world_id_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sender_ip_ = 0;
  login_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqConnectWorld::~ReqConnectWorld() {
  SharedDtor();
}

void ReqConnectWorld::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void ReqConnectWorld::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqConnectWorld::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqConnectWorld_descriptor_;
}

const ReqConnectWorld& ReqConnectWorld::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgPreGame_2eproto();
  return *default_instance_;
}

ReqConnectWorld* ReqConnectWorld::default_instance_ = NULL;

ReqConnectWorld* ReqConnectWorld::New() const {
  return new ReqConnectWorld;
}

void ReqConnectWorld::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    world_id_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    sender_ip_ = 0;
    login_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqConnectWorld::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 world_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_id_)));
          set_has_world_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional bytes account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sender_ip;
        break;
      }

      // optional int32 sender_ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_ip_)));
          set_has_sender_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_login_id;
        break;
      }

      // optional int32 login_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_id_)));
          set_has_login_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqConnectWorld::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 world_id = 1;
  if (has_world_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->world_id(), output);
  }

  // optional bytes account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->account(), output);
  }

  // optional int32 sender_ip = 3;
  if (has_sender_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sender_ip(), output);
  }

  // optional int32 login_id = 4;
  if (has_login_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->login_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqConnectWorld::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 world_id = 1;
  if (has_world_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->world_id(), target);
  }

  // optional bytes account = 2;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->account(), target);
  }

  // optional int32 sender_ip = 3;
  if (has_sender_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sender_ip(), target);
  }

  // optional int32 login_id = 4;
  if (has_login_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->login_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqConnectWorld::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 world_id = 1;
    if (has_world_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->world_id());
    }

    // optional bytes account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // optional int32 sender_ip = 3;
    if (has_sender_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender_ip());
    }

    // optional int32 login_id = 4;
    if (has_login_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->login_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqConnectWorld::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqConnectWorld* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqConnectWorld*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqConnectWorld::MergeFrom(const ReqConnectWorld& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_world_id()) {
      set_world_id(from.world_id());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_sender_ip()) {
      set_sender_ip(from.sender_ip());
    }
    if (from.has_login_id()) {
      set_login_id(from.login_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqConnectWorld::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqConnectWorld::CopyFrom(const ReqConnectWorld& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqConnectWorld::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqConnectWorld::Swap(ReqConnectWorld* other) {
  if (other != this) {
    std::swap(world_id_, other->world_id_);
    std::swap(account_, other->account_);
    std::swap(sender_ip_, other->sender_ip_);
    std::swap(login_id_, other->login_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqConnectWorld::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqConnectWorld_descriptor_;
  metadata.reflection = ReqConnectWorld_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckConnectWorldResult::kWorldIdFieldNumber;
const int AckConnectWorldResult::kSenderIpFieldNumber;
const int AckConnectWorldResult::kLoginIdFieldNumber;
const int AckConnectWorldResult::kAccountFieldNumber;
const int AckConnectWorldResult::kWorldIpFieldNumber;
const int AckConnectWorldResult::kWorldPortFieldNumber;
const int AckConnectWorldResult::kWorldKeyFieldNumber;
#endif  // !_MSC_VER

AckConnectWorldResult::AckConnectWorldResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckConnectWorldResult::InitAsDefaultInstance() {
}

AckConnectWorldResult::AckConnectWorldResult(const AckConnectWorldResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckConnectWorldResult::SharedCtor() {
  _cached_size_ = 0;
  world_id_ = 0;
  sender_ip_ = 0;
  login_id_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  world_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  world_port_ = 0;
  world_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckConnectWorldResult::~AckConnectWorldResult() {
  SharedDtor();
}

void AckConnectWorldResult::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (world_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete world_ip_;
  }
  if (world_key_ != &::google::protobuf::internal::kEmptyString) {
    delete world_key_;
  }
  if (this != default_instance_) {
  }
}

void AckConnectWorldResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckConnectWorldResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckConnectWorldResult_descriptor_;
}

const AckConnectWorldResult& AckConnectWorldResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgPreGame_2eproto();
  return *default_instance_;
}

AckConnectWorldResult* AckConnectWorldResult::default_instance_ = NULL;

AckConnectWorldResult* AckConnectWorldResult::New() const {
  return new AckConnectWorldResult;
}

void AckConnectWorldResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    world_id_ = 0;
    sender_ip_ = 0;
    login_id_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_world_ip()) {
      if (world_ip_ != &::google::protobuf::internal::kEmptyString) {
        world_ip_->clear();
      }
    }
    world_port_ = 0;
    if (has_world_key()) {
      if (world_key_ != &::google::protobuf::internal::kEmptyString) {
        world_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckConnectWorldResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 world_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_id_)));
          set_has_world_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sender_ip;
        break;
      }

      // required int32 sender_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_ip_)));
          set_has_sender_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_login_id;
        break;
      }

      // required int32 login_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_id_)));
          set_has_login_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_account;
        break;
      }

      // required bytes account = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_world_ip;
        break;
      }

      // required bytes world_ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_world_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_world_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_world_port;
        break;
      }

      // required int32 world_port = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_world_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_port_)));
          set_has_world_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_world_key;
        break;
      }

      // required bytes world_key = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_world_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_world_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckConnectWorldResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 world_id = 1;
  if (has_world_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->world_id(), output);
  }

  // required int32 sender_ip = 2;
  if (has_sender_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sender_ip(), output);
  }

  // required int32 login_id = 3;
  if (has_login_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->login_id(), output);
  }

  // required bytes account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->account(), output);
  }

  // required bytes world_ip = 5;
  if (has_world_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->world_ip(), output);
  }

  // required int32 world_port = 6;
  if (has_world_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->world_port(), output);
  }

  // required bytes world_key = 7;
  if (has_world_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->world_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckConnectWorldResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 world_id = 1;
  if (has_world_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->world_id(), target);
  }

  // required int32 sender_ip = 2;
  if (has_sender_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sender_ip(), target);
  }

  // required int32 login_id = 3;
  if (has_login_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->login_id(), target);
  }

  // required bytes account = 4;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->account(), target);
  }

  // required bytes world_ip = 5;
  if (has_world_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->world_ip(), target);
  }

  // required int32 world_port = 6;
  if (has_world_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->world_port(), target);
  }

  // required bytes world_key = 7;
  if (has_world_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->world_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckConnectWorldResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 world_id = 1;
    if (has_world_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->world_id());
    }

    // required int32 sender_ip = 2;
    if (has_sender_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender_ip());
    }

    // required int32 login_id = 3;
    if (has_login_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->login_id());
    }

    // required bytes account = 4;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // required bytes world_ip = 5;
    if (has_world_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->world_ip());
    }

    // required int32 world_port = 6;
    if (has_world_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->world_port());
    }

    // required bytes world_key = 7;
    if (has_world_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->world_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckConnectWorldResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckConnectWorldResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckConnectWorldResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckConnectWorldResult::MergeFrom(const AckConnectWorldResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_world_id()) {
      set_world_id(from.world_id());
    }
    if (from.has_sender_ip()) {
      set_sender_ip(from.sender_ip());
    }
    if (from.has_login_id()) {
      set_login_id(from.login_id());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_world_ip()) {
      set_world_ip(from.world_ip());
    }
    if (from.has_world_port()) {
      set_world_port(from.world_port());
    }
    if (from.has_world_key()) {
      set_world_key(from.world_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckConnectWorldResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckConnectWorldResult::CopyFrom(const AckConnectWorldResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckConnectWorldResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void AckConnectWorldResult::Swap(AckConnectWorldResult* other) {
  if (other != this) {
    std::swap(world_id_, other->world_id_);
    std::swap(sender_ip_, other->sender_ip_);
    std::swap(login_id_, other->login_id_);
    std::swap(account_, other->account_);
    std::swap(world_ip_, other->world_ip_);
    std::swap(world_port_, other->world_port_);
    std::swap(world_key_, other->world_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckConnectWorldResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckConnectWorldResult_descriptor_;
  metadata.reflection = AckConnectWorldResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqKickFromWorld::kWorldIdFieldNumber;
const int ReqKickFromWorld::kAccountFieldNumber;
#endif  // !_MSC_VER

ReqKickFromWorld::ReqKickFromWorld()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqKickFromWorld::InitAsDefaultInstance() {
}

ReqKickFromWorld::ReqKickFromWorld(const ReqKickFromWorld& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqKickFromWorld::SharedCtor() {
  _cached_size_ = 0;
  world_id_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqKickFromWorld::~ReqKickFromWorld() {
  SharedDtor();
}

void ReqKickFromWorld::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void ReqKickFromWorld::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqKickFromWorld::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqKickFromWorld_descriptor_;
}

const ReqKickFromWorld& ReqKickFromWorld::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgPreGame_2eproto();
  return *default_instance_;
}

ReqKickFromWorld* ReqKickFromWorld::default_instance_ = NULL;

ReqKickFromWorld* ReqKickFromWorld::New() const {
  return new ReqKickFromWorld;
}

void ReqKickFromWorld::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    world_id_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqKickFromWorld::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 world_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_id_)));
          set_has_world_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // required bytes account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqKickFromWorld::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 world_id = 1;
  if (has_world_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->world_id(), output);
  }

  // required bytes account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqKickFromWorld::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 world_id = 1;
  if (has_world_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->world_id(), target);
  }

  // required bytes account = 2;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqKickFromWorld::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 world_id = 1;
    if (has_world_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->world_id());
    }

    // required bytes account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqKickFromWorld::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqKickFromWorld* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqKickFromWorld*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqKickFromWorld::MergeFrom(const ReqKickFromWorld& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_world_id()) {
      set_world_id(from.world_id());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqKickFromWorld::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqKickFromWorld::CopyFrom(const ReqKickFromWorld& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqKickFromWorld::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqKickFromWorld::Swap(ReqKickFromWorld* other) {
  if (other != this) {
    std::swap(world_id_, other->world_id_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqKickFromWorld::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqKickFromWorld_descriptor_;
  metadata.reflection = ReqKickFromWorld_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqRoleList::kGameIdFieldNumber;
#endif  // !_MSC_VER

ReqRoleList::ReqRoleList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqRoleList::InitAsDefaultInstance() {
}

ReqRoleList::ReqRoleList(const ReqRoleList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqRoleList::SharedCtor() {
  _cached_size_ = 0;
  game_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqRoleList::~ReqRoleList() {
  SharedDtor();
}

void ReqRoleList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqRoleList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRoleList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRoleList_descriptor_;
}

const ReqRoleList& ReqRoleList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgPreGame_2eproto();
  return *default_instance_;
}

ReqRoleList* ReqRoleList::default_instance_ = NULL;

ReqRoleList* ReqRoleList::New() const {
  return new ReqRoleList;
}

void ReqRoleList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqRoleList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 game_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqRoleList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqRoleList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 game_id = 1;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqRoleList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 game_id = 1;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRoleList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqRoleList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqRoleList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqRoleList::MergeFrom(const ReqRoleList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqRoleList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRoleList::CopyFrom(const ReqRoleList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRoleList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqRoleList::Swap(ReqRoleList* other) {
  if (other != this) {
    std::swap(game_id_, other->game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqRoleList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRoleList_descriptor_;
  metadata.reflection = ReqRoleList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleLiteInfo::kCharIdFieldNumber;
const int RoleLiteInfo::kCareerFieldNumber;
const int RoleLiteInfo::kSexFieldNumber;
const int RoleLiteInfo::kRaceFieldNumber;
const int RoleLiteInfo::kNoobNameFieldNumber;
const int RoleLiteInfo::kGameIdFieldNumber;
const int RoleLiteInfo::kCharLevelFieldNumber;
const int RoleLiteInfo::kCharExpFieldNumber;
const int RoleLiteInfo::kMoneyFieldNumber;
const int RoleLiteInfo::kCashFieldNumber;
const int RoleLiteInfo::kVipLevelFieldNumber;
const int RoleLiteInfo::kDeleteTimeFieldNumber;
const int RoleLiteInfo::kRegTimeFieldNumber;
const int RoleLiteInfo::kLastOfflineTimeFieldNumber;
const int RoleLiteInfo::kLastOfflineIpFieldNumber;
const int RoleLiteInfo::kViewRecordFieldNumber;
const int RoleLiteInfo::kPetRecordFieldNumber;
#endif  // !_MSC_VER

RoleLiteInfo::RoleLiteInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleLiteInfo::InitAsDefaultInstance() {
}

RoleLiteInfo::RoleLiteInfo(const RoleLiteInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleLiteInfo::SharedCtor() {
  _cached_size_ = 0;
  char_id_ = 0;
  career_ = 0;
  sex_ = 0;
  race_ = 0;
  noob_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_id_ = 0;
  char_level_ = 0;
  char_exp_ = 0;
  money_ = 0;
  cash_ = 0;
  vip_level_ = 0;
  delete_time_ = 0;
  reg_time_ = 0;
  last_offline_time_ = 0;
  last_offline_ip_ = 0;
  view_record_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pet_record_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleLiteInfo::~RoleLiteInfo() {
  SharedDtor();
}

void RoleLiteInfo::SharedDtor() {
  if (noob_name_ != &::google::protobuf::internal::kEmptyString) {
    delete noob_name_;
  }
  if (view_record_ != &::google::protobuf::internal::kEmptyString) {
    delete view_record_;
  }
  if (pet_record_ != &::google::protobuf::internal::kEmptyString) {
    delete pet_record_;
  }
  if (this != default_instance_) {
  }
}

void RoleLiteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleLiteInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleLiteInfo_descriptor_;
}

const RoleLiteInfo& RoleLiteInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgPreGame_2eproto();
  return *default_instance_;
}

RoleLiteInfo* RoleLiteInfo::default_instance_ = NULL;

RoleLiteInfo* RoleLiteInfo::New() const {
  return new RoleLiteInfo;
}

void RoleLiteInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    char_id_ = 0;
    career_ = 0;
    sex_ = 0;
    race_ = 0;
    if (has_noob_name()) {
      if (noob_name_ != &::google::protobuf::internal::kEmptyString) {
        noob_name_->clear();
      }
    }
    game_id_ = 0;
    char_level_ = 0;
    char_exp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    money_ = 0;
    cash_ = 0;
    vip_level_ = 0;
    delete_time_ = 0;
    reg_time_ = 0;
    last_offline_time_ = 0;
    last_offline_ip_ = 0;
    if (has_view_record()) {
      if (view_record_ != &::google::protobuf::internal::kEmptyString) {
        view_record_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_pet_record()) {
      if (pet_record_ != &::google::protobuf::internal::kEmptyString) {
        pet_record_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleLiteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 char_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_career;
        break;
      }

      // required int32 career = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // required int32 sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_race;
        break;
      }

      // required int32 race = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_noob_name;
        break;
      }

      // required bytes noob_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_noob_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_noob_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_game_id;
        break;
      }

      // required int32 game_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_char_level;
        break;
      }

      // required int32 char_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &char_level_)));
          set_has_char_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_char_exp;
        break;
      }

      // required int32 char_exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &char_exp_)));
          set_has_char_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_money;
        break;
      }

      // required int32 money = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cash;
        break;
      }

      // required int32 cash = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_vip_level;
        break;
      }

      // required int32 vip_level = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_delete_time;
        break;
      }

      // required int32 delete_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delete_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delete_time_)));
          set_has_delete_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_reg_time;
        break;
      }

      // required int32 reg_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_last_offline_time;
        break;
      }

      // required int32 last_offline_time = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_offline_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_offline_time_)));
          set_has_last_offline_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_last_offline_ip;
        break;
      }

      // required int32 last_offline_ip = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_offline_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_offline_ip_)));
          set_has_last_offline_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_view_record;
        break;
      }

      // required bytes view_record = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_view_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_view_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_pet_record;
        break;
      }

      // required bytes pet_record = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pet_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleLiteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 char_id = 1;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->char_id(), output);
  }

  // required int32 career = 2;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->career(), output);
  }

  // required int32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sex(), output);
  }

  // required int32 race = 4;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->race(), output);
  }

  // required bytes noob_name = 5;
  if (has_noob_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->noob_name(), output);
  }

  // required int32 game_id = 6;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->game_id(), output);
  }

  // required int32 char_level = 7;
  if (has_char_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->char_level(), output);
  }

  // required int32 char_exp = 8;
  if (has_char_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->char_exp(), output);
  }

  // required int32 money = 9;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->money(), output);
  }

  // required int32 cash = 10;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cash(), output);
  }

  // required int32 vip_level = 11;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->vip_level(), output);
  }

  // required int32 delete_time = 12;
  if (has_delete_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->delete_time(), output);
  }

  // required int32 reg_time = 13;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->reg_time(), output);
  }

  // required int32 last_offline_time = 15;
  if (has_last_offline_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->last_offline_time(), output);
  }

  // required int32 last_offline_ip = 16;
  if (has_last_offline_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->last_offline_ip(), output);
  }

  // required bytes view_record = 17;
  if (has_view_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      17, this->view_record(), output);
  }

  // required bytes pet_record = 18;
  if (has_pet_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      18, this->pet_record(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleLiteInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 char_id = 1;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->char_id(), target);
  }

  // required int32 career = 2;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->career(), target);
  }

  // required int32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sex(), target);
  }

  // required int32 race = 4;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->race(), target);
  }

  // required bytes noob_name = 5;
  if (has_noob_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->noob_name(), target);
  }

  // required int32 game_id = 6;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->game_id(), target);
  }

  // required int32 char_level = 7;
  if (has_char_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->char_level(), target);
  }

  // required int32 char_exp = 8;
  if (has_char_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->char_exp(), target);
  }

  // required int32 money = 9;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->money(), target);
  }

  // required int32 cash = 10;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cash(), target);
  }

  // required int32 vip_level = 11;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->vip_level(), target);
  }

  // required int32 delete_time = 12;
  if (has_delete_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->delete_time(), target);
  }

  // required int32 reg_time = 13;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->reg_time(), target);
  }

  // required int32 last_offline_time = 15;
  if (has_last_offline_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->last_offline_time(), target);
  }

  // required int32 last_offline_ip = 16;
  if (has_last_offline_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->last_offline_ip(), target);
  }

  // required bytes view_record = 17;
  if (has_view_record()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->view_record(), target);
  }

  // required bytes pet_record = 18;
  if (has_pet_record()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->pet_record(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleLiteInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 char_id = 1;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->char_id());
    }

    // required int32 career = 2;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career());
    }

    // required int32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // required int32 race = 4;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->race());
    }

    // required bytes noob_name = 5;
    if (has_noob_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->noob_name());
    }

    // required int32 game_id = 6;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_id());
    }

    // required int32 char_level = 7;
    if (has_char_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->char_level());
    }

    // required int32 char_exp = 8;
    if (has_char_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->char_exp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 money = 9;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // required int32 cash = 10;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cash());
    }

    // required int32 vip_level = 11;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }

    // required int32 delete_time = 12;
    if (has_delete_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delete_time());
    }

    // required int32 reg_time = 13;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reg_time());
    }

    // required int32 last_offline_time = 15;
    if (has_last_offline_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_offline_time());
    }

    // required int32 last_offline_ip = 16;
    if (has_last_offline_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_offline_ip());
    }

    // required bytes view_record = 17;
    if (has_view_record()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->view_record());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required bytes pet_record = 18;
    if (has_pet_record()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pet_record());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleLiteInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleLiteInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleLiteInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleLiteInfo::MergeFrom(const RoleLiteInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_career()) {
      set_career(from.career());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_noob_name()) {
      set_noob_name(from.noob_name());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_char_level()) {
      set_char_level(from.char_level());
    }
    if (from.has_char_exp()) {
      set_char_exp(from.char_exp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_delete_time()) {
      set_delete_time(from.delete_time());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_last_offline_time()) {
      set_last_offline_time(from.last_offline_time());
    }
    if (from.has_last_offline_ip()) {
      set_last_offline_ip(from.last_offline_ip());
    }
    if (from.has_view_record()) {
      set_view_record(from.view_record());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_pet_record()) {
      set_pet_record(from.pet_record());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleLiteInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleLiteInfo::CopyFrom(const RoleLiteInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleLiteInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001ffff) != 0x0001ffff) return false;

  return true;
}

void RoleLiteInfo::Swap(RoleLiteInfo* other) {
  if (other != this) {
    std::swap(char_id_, other->char_id_);
    std::swap(career_, other->career_);
    std::swap(sex_, other->sex_);
    std::swap(race_, other->race_);
    std::swap(noob_name_, other->noob_name_);
    std::swap(game_id_, other->game_id_);
    std::swap(char_level_, other->char_level_);
    std::swap(char_exp_, other->char_exp_);
    std::swap(money_, other->money_);
    std::swap(cash_, other->cash_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(delete_time_, other->delete_time_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(last_offline_time_, other->last_offline_time_);
    std::swap(last_offline_ip_, other->last_offline_ip_);
    std::swap(view_record_, other->view_record_);
    std::swap(pet_record_, other->pet_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleLiteInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleLiteInfo_descriptor_;
  metadata.reflection = RoleLiteInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckRoleLiteInfoList::kCharDataFieldNumber;
#endif  // !_MSC_VER

AckRoleLiteInfoList::AckRoleLiteInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckRoleLiteInfoList::InitAsDefaultInstance() {
}

AckRoleLiteInfoList::AckRoleLiteInfoList(const AckRoleLiteInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckRoleLiteInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckRoleLiteInfoList::~AckRoleLiteInfoList() {
  SharedDtor();
}

void AckRoleLiteInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckRoleLiteInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckRoleLiteInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckRoleLiteInfoList_descriptor_;
}

const AckRoleLiteInfoList& AckRoleLiteInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgPreGame_2eproto();
  return *default_instance_;
}

AckRoleLiteInfoList* AckRoleLiteInfoList::default_instance_ = NULL;

AckRoleLiteInfoList* AckRoleLiteInfoList::New() const {
  return new AckRoleLiteInfoList;
}

void AckRoleLiteInfoList::Clear() {
  char_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckRoleLiteInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFMsg.RoleLiteInfo char_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_char_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_char_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_char_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckRoleLiteInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NFMsg.RoleLiteInfo char_data = 1;
  for (int i = 0; i < this->char_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->char_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckRoleLiteInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NFMsg.RoleLiteInfo char_data = 1;
  for (int i = 0; i < this->char_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->char_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckRoleLiteInfoList::ByteSize() const {
  int total_size = 0;

  // repeated .NFMsg.RoleLiteInfo char_data = 1;
  total_size += 1 * this->char_data_size();
  for (int i = 0; i < this->char_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->char_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckRoleLiteInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckRoleLiteInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckRoleLiteInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckRoleLiteInfoList::MergeFrom(const AckRoleLiteInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  char_data_.MergeFrom(from.char_data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckRoleLiteInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRoleLiteInfoList::CopyFrom(const AckRoleLiteInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRoleLiteInfoList::IsInitialized() const {

  for (int i = 0; i < char_data_size(); i++) {
    if (!this->char_data(i).IsInitialized()) return false;
  }
  return true;
}

void AckRoleLiteInfoList::Swap(AckRoleLiteInfoList* other) {
  if (other != this) {
    char_data_.Swap(&other->char_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckRoleLiteInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckRoleLiteInfoList_descriptor_;
  metadata.reflection = AckRoleLiteInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqCreateRole::kCareerFieldNumber;
const int ReqCreateRole::kSexFieldNumber;
const int ReqCreateRole::kRaceFieldNumber;
const int ReqCreateRole::kNoobHeadFieldNumber;
const int ReqCreateRole::kNoobBodyFieldNumber;
const int ReqCreateRole::kNoobFootFieldNumber;
const int ReqCreateRole::kNoobWeaponFieldNumber;
const int ReqCreateRole::kNoobPicFieldNumber;
const int ReqCreateRole::kNoobNameFieldNumber;
const int ReqCreateRole::kGameIdFieldNumber;
#endif  // !_MSC_VER

ReqCreateRole::ReqCreateRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqCreateRole::InitAsDefaultInstance() {
}

ReqCreateRole::ReqCreateRole(const ReqCreateRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqCreateRole::SharedCtor() {
  _cached_size_ = 0;
  career_ = 0;
  sex_ = 0;
  race_ = 0;
  noob_head_ = 0;
  noob_body_ = 0;
  noob_foot_ = 0;
  noob_weapon_ = 0;
  noob_pic_ = 0;
  noob_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCreateRole::~ReqCreateRole() {
  SharedDtor();
}

void ReqCreateRole::SharedDtor() {
  if (noob_name_ != &::google::protobuf::internal::kEmptyString) {
    delete noob_name_;
  }
  if (this != default_instance_) {
  }
}

void ReqCreateRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCreateRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCreateRole_descriptor_;
}

const ReqCreateRole& ReqCreateRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgPreGame_2eproto();
  return *default_instance_;
}

ReqCreateRole* ReqCreateRole::default_instance_ = NULL;

ReqCreateRole* ReqCreateRole::New() const {
  return new ReqCreateRole;
}

void ReqCreateRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    career_ = 0;
    sex_ = 0;
    race_ = 0;
    noob_head_ = 0;
    noob_body_ = 0;
    noob_foot_ = 0;
    noob_weapon_ = 0;
    noob_pic_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_noob_name()) {
      if (noob_name_ != &::google::protobuf::internal::kEmptyString) {
        noob_name_->clear();
      }
    }
    game_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCreateRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 career = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sex;
        break;
      }

      // required int32 sex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_race;
        break;
      }

      // required int32 race = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_noob_head;
        break;
      }

      // required int32 noob_head = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_noob_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noob_head_)));
          set_has_noob_head();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_noob_body;
        break;
      }

      // required int32 noob_body = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_noob_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noob_body_)));
          set_has_noob_body();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_noob_foot;
        break;
      }

      // required int32 noob_foot = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_noob_foot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noob_foot_)));
          set_has_noob_foot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_noob_weapon;
        break;
      }

      // required int32 noob_weapon = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_noob_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noob_weapon_)));
          set_has_noob_weapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_noob_pic;
        break;
      }

      // required int32 noob_pic = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_noob_pic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noob_pic_)));
          set_has_noob_pic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_noob_name;
        break;
      }

      // required bytes noob_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_noob_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_noob_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_game_id;
        break;
      }

      // required int32 game_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqCreateRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 career = 1;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->career(), output);
  }

  // required int32 sex = 2;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sex(), output);
  }

  // required int32 race = 3;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->race(), output);
  }

  // required int32 noob_head = 4;
  if (has_noob_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->noob_head(), output);
  }

  // required int32 noob_body = 5;
  if (has_noob_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->noob_body(), output);
  }

  // required int32 noob_foot = 6;
  if (has_noob_foot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->noob_foot(), output);
  }

  // required int32 noob_weapon = 7;
  if (has_noob_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->noob_weapon(), output);
  }

  // required int32 noob_pic = 8;
  if (has_noob_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->noob_pic(), output);
  }

  // required bytes noob_name = 9;
  if (has_noob_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->noob_name(), output);
  }

  // required int32 game_id = 10;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqCreateRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 career = 1;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->career(), target);
  }

  // required int32 sex = 2;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sex(), target);
  }

  // required int32 race = 3;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->race(), target);
  }

  // required int32 noob_head = 4;
  if (has_noob_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->noob_head(), target);
  }

  // required int32 noob_body = 5;
  if (has_noob_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->noob_body(), target);
  }

  // required int32 noob_foot = 6;
  if (has_noob_foot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->noob_foot(), target);
  }

  // required int32 noob_weapon = 7;
  if (has_noob_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->noob_weapon(), target);
  }

  // required int32 noob_pic = 8;
  if (has_noob_pic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->noob_pic(), target);
  }

  // required bytes noob_name = 9;
  if (has_noob_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->noob_name(), target);
  }

  // required int32 game_id = 10;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqCreateRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 career = 1;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career());
    }

    // required int32 sex = 2;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // required int32 race = 3;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->race());
    }

    // required int32 noob_head = 4;
    if (has_noob_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noob_head());
    }

    // required int32 noob_body = 5;
    if (has_noob_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noob_body());
    }

    // required int32 noob_foot = 6;
    if (has_noob_foot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noob_foot());
    }

    // required int32 noob_weapon = 7;
    if (has_noob_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noob_weapon());
    }

    // required int32 noob_pic = 8;
    if (has_noob_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noob_pic());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bytes noob_name = 9;
    if (has_noob_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->noob_name());
    }

    // required int32 game_id = 10;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCreateRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCreateRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCreateRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCreateRole::MergeFrom(const ReqCreateRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_career()) {
      set_career(from.career());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_noob_head()) {
      set_noob_head(from.noob_head());
    }
    if (from.has_noob_body()) {
      set_noob_body(from.noob_body());
    }
    if (from.has_noob_foot()) {
      set_noob_foot(from.noob_foot());
    }
    if (from.has_noob_weapon()) {
      set_noob_weapon(from.noob_weapon());
    }
    if (from.has_noob_pic()) {
      set_noob_pic(from.noob_pic());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_noob_name()) {
      set_noob_name(from.noob_name());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCreateRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCreateRole::CopyFrom(const ReqCreateRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCreateRole::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void ReqCreateRole::Swap(ReqCreateRole* other) {
  if (other != this) {
    std::swap(career_, other->career_);
    std::swap(sex_, other->sex_);
    std::swap(race_, other->race_);
    std::swap(noob_head_, other->noob_head_);
    std::swap(noob_body_, other->noob_body_);
    std::swap(noob_foot_, other->noob_foot_);
    std::swap(noob_weapon_, other->noob_weapon_);
    std::swap(noob_pic_, other->noob_pic_);
    std::swap(noob_name_, other->noob_name_);
    std::swap(game_id_, other->game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCreateRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCreateRole_descriptor_;
  metadata.reflection = ReqCreateRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqDeleteRole::kCharIdFieldNumber;
#endif  // !_MSC_VER

ReqDeleteRole::ReqDeleteRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqDeleteRole::InitAsDefaultInstance() {
}

ReqDeleteRole::ReqDeleteRole(const ReqDeleteRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqDeleteRole::SharedCtor() {
  _cached_size_ = 0;
  char_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqDeleteRole::~ReqDeleteRole() {
  SharedDtor();
}

void ReqDeleteRole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqDeleteRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqDeleteRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqDeleteRole_descriptor_;
}

const ReqDeleteRole& ReqDeleteRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgPreGame_2eproto();
  return *default_instance_;
}

ReqDeleteRole* ReqDeleteRole::default_instance_ = NULL;

ReqDeleteRole* ReqDeleteRole::New() const {
  return new ReqDeleteRole;
}

void ReqDeleteRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    char_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqDeleteRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 char_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqDeleteRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 char_id = 1;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->char_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqDeleteRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 char_id = 1;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->char_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqDeleteRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 char_id = 1;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->char_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqDeleteRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqDeleteRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqDeleteRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqDeleteRole::MergeFrom(const ReqDeleteRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqDeleteRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDeleteRole::CopyFrom(const ReqDeleteRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDeleteRole::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqDeleteRole::Swap(ReqDeleteRole* other) {
  if (other != this) {
    std::swap(char_id_, other->char_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqDeleteRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqDeleteRole_descriptor_;
  metadata.reflection = ReqDeleteRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqRecoverRole::kCharIdFieldNumber;
#endif  // !_MSC_VER

ReqRecoverRole::ReqRecoverRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqRecoverRole::InitAsDefaultInstance() {
}

ReqRecoverRole::ReqRecoverRole(const ReqRecoverRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqRecoverRole::SharedCtor() {
  _cached_size_ = 0;
  char_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqRecoverRole::~ReqRecoverRole() {
  SharedDtor();
}

void ReqRecoverRole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqRecoverRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRecoverRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRecoverRole_descriptor_;
}

const ReqRecoverRole& ReqRecoverRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgPreGame_2eproto();
  return *default_instance_;
}

ReqRecoverRole* ReqRecoverRole::default_instance_ = NULL;

ReqRecoverRole* ReqRecoverRole::New() const {
  return new ReqRecoverRole;
}

void ReqRecoverRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    char_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqRecoverRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 char_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqRecoverRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 char_id = 1;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->char_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqRecoverRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 char_id = 1;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->char_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqRecoverRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 char_id = 1;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->char_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRecoverRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqRecoverRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqRecoverRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqRecoverRole::MergeFrom(const ReqRecoverRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqRecoverRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRecoverRole::CopyFrom(const ReqRecoverRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRecoverRole::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqRecoverRole::Swap(ReqRecoverRole* other) {
  if (other != this) {
    std::swap(char_id_, other->char_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqRecoverRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRecoverRole_descriptor_;
  metadata.reflection = ReqRecoverRole_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

// @@protoc_insertion_point(global_scope)
