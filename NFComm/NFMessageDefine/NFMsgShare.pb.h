// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgShare.proto

#ifndef PROTOBUF_NFMsgShare_2eproto__INCLUDED
#define PROTOBUF_NFMsgShare_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "NFDefine.pb.h"
#include "NFMsgBase.pb.h"
#include "NFMsgBaseEx.pb.h"
// @@protoc_insertion_point(includes)

namespace NFMsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_NFMsgShare_2eproto();
void protobuf_AssignDesc_NFMsgShare_2eproto();
void protobuf_ShutdownFile_NFMsgShare_2eproto();

class ReqEnterGameServer;
class ReqHeartBeat;
class ReqLeaveGameServer;
class ReqAckPlayerMove;
class ReqAckPlayerChat;
class ReqAckUseSkill;
class ReqAckUseItem;
class ReqAckSwapScene;
class ReqPickDropItem;
class ReqAcceptTask;
class ReqCompeleteTask;
class PlayerEntryInfo;
class AckPlayerEntryList;
class AckPlayerLeaveList;

enum ReqAckPlayerChat_EGameChatType {
  ReqAckPlayerChat_EGameChatType_EGCT_NARMAL = 0,
  ReqAckPlayerChat_EGameChatType_EGCT_PRIVATE = 1,
  ReqAckPlayerChat_EGameChatType_EGCT_TEAM = 2,
  ReqAckPlayerChat_EGameChatType_EGCT_WORLD = 3
};
bool ReqAckPlayerChat_EGameChatType_IsValid(int value);
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat_EGameChatType_EGameChatType_MIN = ReqAckPlayerChat_EGameChatType_EGCT_NARMAL;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat_EGameChatType_EGameChatType_MAX = ReqAckPlayerChat_EGameChatType_EGCT_WORLD;
const int ReqAckPlayerChat_EGameChatType_EGameChatType_ARRAYSIZE = ReqAckPlayerChat_EGameChatType_EGameChatType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReqAckPlayerChat_EGameChatType_descriptor();
inline const ::std::string& ReqAckPlayerChat_EGameChatType_Name(ReqAckPlayerChat_EGameChatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqAckPlayerChat_EGameChatType_descriptor(), value);
}
inline bool ReqAckPlayerChat_EGameChatType_Parse(
    const ::std::string& name, ReqAckPlayerChat_EGameChatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqAckPlayerChat_EGameChatType>(
    ReqAckPlayerChat_EGameChatType_descriptor(), name, value);
}
enum ReqAckSwapScene_EGameSwapType {
  ReqAckSwapScene_EGameSwapType_EGST_NARMAL = 0,
  ReqAckSwapScene_EGameSwapType_EGST_CLONE = 1,
  ReqAckSwapScene_EGameSwapType_EGST_ARENA = 2,
  ReqAckSwapScene_EGameSwapType_EGST_MIRROR = 3
};
bool ReqAckSwapScene_EGameSwapType_IsValid(int value);
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene_EGameSwapType_EGameSwapType_MIN = ReqAckSwapScene_EGameSwapType_EGST_NARMAL;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene_EGameSwapType_EGameSwapType_MAX = ReqAckSwapScene_EGameSwapType_EGST_MIRROR;
const int ReqAckSwapScene_EGameSwapType_EGameSwapType_ARRAYSIZE = ReqAckSwapScene_EGameSwapType_EGameSwapType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReqAckSwapScene_EGameSwapType_descriptor();
inline const ::std::string& ReqAckSwapScene_EGameSwapType_Name(ReqAckSwapScene_EGameSwapType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqAckSwapScene_EGameSwapType_descriptor(), value);
}
inline bool ReqAckSwapScene_EGameSwapType_Parse(
    const ::std::string& name, ReqAckSwapScene_EGameSwapType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqAckSwapScene_EGameSwapType>(
    ReqAckSwapScene_EGameSwapType_descriptor(), name, value);
}
// ===================================================================

class ReqEnterGameServer : public ::google::protobuf::Message {
 public:
  ReqEnterGameServer();
  virtual ~ReqEnterGameServer();

  ReqEnterGameServer(const ReqEnterGameServer& from);

  inline ReqEnterGameServer& operator=(const ReqEnterGameServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqEnterGameServer& default_instance();

  void Swap(ReqEnterGameServer* other);

  // implements Message ----------------------------------------------

  ReqEnterGameServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqEnterGameServer& from);
  void MergeFrom(const ReqEnterGameServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const void* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required int32 game_id = 2;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 2;
  inline ::google::protobuf::int32 game_id() const;
  inline void set_game_id(::google::protobuf::int32 value);

  // required bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqEnterGameServer)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* name_;
  ::google::protobuf::int32 game_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqEnterGameServer* default_instance_;
};
// -------------------------------------------------------------------

class ReqHeartBeat : public ::google::protobuf::Message {
 public:
  ReqHeartBeat();
  virtual ~ReqHeartBeat();

  ReqHeartBeat(const ReqHeartBeat& from);

  inline ReqHeartBeat& operator=(const ReqHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqHeartBeat& default_instance();

  void Swap(ReqHeartBeat* other);

  // implements Message ----------------------------------------------

  ReqHeartBeat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqHeartBeat& from);
  void MergeFrom(const ReqHeartBeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:NFMsg.ReqHeartBeat)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqHeartBeat* default_instance_;
};
// -------------------------------------------------------------------

class ReqLeaveGameServer : public ::google::protobuf::Message {
 public:
  ReqLeaveGameServer();
  virtual ~ReqLeaveGameServer();

  ReqLeaveGameServer(const ReqLeaveGameServer& from);

  inline ReqLeaveGameServer& operator=(const ReqLeaveGameServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqLeaveGameServer& default_instance();

  void Swap(ReqLeaveGameServer* other);

  // implements Message ----------------------------------------------

  ReqLeaveGameServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqLeaveGameServer& from);
  void MergeFrom(const ReqLeaveGameServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:NFMsg.ReqLeaveGameServer)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqLeaveGameServer* default_instance_;
};
// -------------------------------------------------------------------

class ReqAckPlayerMove : public ::google::protobuf::Message {
 public:
  ReqAckPlayerMove();
  virtual ~ReqAckPlayerMove();

  ReqAckPlayerMove(const ReqAckPlayerMove& from);

  inline ReqAckPlayerMove& operator=(const ReqAckPlayerMove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckPlayerMove& default_instance();

  void Swap(ReqAckPlayerMove* other);

  // implements Message ----------------------------------------------

  ReqAckPlayerMove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckPlayerMove& from);
  void MergeFrom(const ReqAckPlayerMove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .NFMsg.Ident mover = 1;
  inline bool has_mover() const;
  inline void clear_mover();
  static const int kMoverFieldNumber = 1;
  inline const ::NFMsg::Ident& mover() const;
  inline ::NFMsg::Ident* mutable_mover();
  inline ::NFMsg::Ident* release_mover();
  inline void set_allocated_mover(::NFMsg::Ident* mover);

  // required int32 moveType = 2;
  inline bool has_movetype() const;
  inline void clear_movetype();
  static const int kMoveTypeFieldNumber = 2;
  inline ::google::protobuf::int32 movetype() const;
  inline void set_movetype(::google::protobuf::int32 value);

  // repeated .NFMsg.Position target_pos = 3;
  inline int target_pos_size() const;
  inline void clear_target_pos();
  static const int kTargetPosFieldNumber = 3;
  inline const ::NFMsg::Position& target_pos(int index) const;
  inline ::NFMsg::Position* mutable_target_pos(int index);
  inline ::NFMsg::Position* add_target_pos();
  inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::Position >&
      target_pos() const;
  inline ::google::protobuf::RepeatedPtrField< ::NFMsg::Position >*
      mutable_target_pos();

  // repeated .NFMsg.Position source_pos = 4;
  inline int source_pos_size() const;
  inline void clear_source_pos();
  static const int kSourcePosFieldNumber = 4;
  inline const ::NFMsg::Position& source_pos(int index) const;
  inline ::NFMsg::Position* mutable_source_pos(int index);
  inline ::NFMsg::Position* add_source_pos();
  inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::Position >&
      source_pos() const;
  inline ::google::protobuf::RepeatedPtrField< ::NFMsg::Position >*
      mutable_source_pos();

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckPlayerMove)
 private:
  inline void set_has_mover();
  inline void clear_has_mover();
  inline void set_has_movetype();
  inline void clear_has_movetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::NFMsg::Ident* mover_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::Position > target_pos_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::Position > source_pos_;
  ::google::protobuf::int32 movetype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckPlayerMove* default_instance_;
};
// -------------------------------------------------------------------

class ReqAckPlayerChat : public ::google::protobuf::Message {
 public:
  ReqAckPlayerChat();
  virtual ~ReqAckPlayerChat();

  ReqAckPlayerChat(const ReqAckPlayerChat& from);

  inline ReqAckPlayerChat& operator=(const ReqAckPlayerChat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckPlayerChat& default_instance();

  void Swap(ReqAckPlayerChat* other);

  // implements Message ----------------------------------------------

  ReqAckPlayerChat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckPlayerChat& from);
  void MergeFrom(const ReqAckPlayerChat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReqAckPlayerChat_EGameChatType EGameChatType;
  static const EGameChatType EGCT_NARMAL = ReqAckPlayerChat_EGameChatType_EGCT_NARMAL;
  static const EGameChatType EGCT_PRIVATE = ReqAckPlayerChat_EGameChatType_EGCT_PRIVATE;
  static const EGameChatType EGCT_TEAM = ReqAckPlayerChat_EGameChatType_EGCT_TEAM;
  static const EGameChatType EGCT_WORLD = ReqAckPlayerChat_EGameChatType_EGCT_WORLD;
  static inline bool EGameChatType_IsValid(int value) {
    return ReqAckPlayerChat_EGameChatType_IsValid(value);
  }
  static const EGameChatType EGameChatType_MIN =
    ReqAckPlayerChat_EGameChatType_EGameChatType_MIN;
  static const EGameChatType EGameChatType_MAX =
    ReqAckPlayerChat_EGameChatType_EGameChatType_MAX;
  static const int EGameChatType_ARRAYSIZE =
    ReqAckPlayerChat_EGameChatType_EGameChatType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EGameChatType_descriptor() {
    return ReqAckPlayerChat_EGameChatType_descriptor();
  }
  static inline const ::std::string& EGameChatType_Name(EGameChatType value) {
    return ReqAckPlayerChat_EGameChatType_Name(value);
  }
  static inline bool EGameChatType_Parse(const ::std::string& name,
      EGameChatType* value) {
    return ReqAckPlayerChat_EGameChatType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .NFMsg.Ident chat_id = 1;
  inline bool has_chat_id() const;
  inline void clear_chat_id();
  static const int kChatIdFieldNumber = 1;
  inline const ::NFMsg::Ident& chat_id() const;
  inline ::NFMsg::Ident* mutable_chat_id();
  inline ::NFMsg::Ident* release_chat_id();
  inline void set_allocated_chat_id(::NFMsg::Ident* chat_id);

  // required .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
  inline bool has_chat_type() const;
  inline void clear_chat_type();
  static const int kChatTypeFieldNumber = 2;
  inline ::NFMsg::ReqAckPlayerChat_EGameChatType chat_type() const;
  inline void set_chat_type(::NFMsg::ReqAckPlayerChat_EGameChatType value);

  // required bytes chat_info = 3;
  inline bool has_chat_info() const;
  inline void clear_chat_info();
  static const int kChatInfoFieldNumber = 3;
  inline const ::std::string& chat_info() const;
  inline void set_chat_info(const ::std::string& value);
  inline void set_chat_info(const char* value);
  inline void set_chat_info(const void* value, size_t size);
  inline ::std::string* mutable_chat_info();
  inline ::std::string* release_chat_info();
  inline void set_allocated_chat_info(::std::string* chat_info);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckPlayerChat)
 private:
  inline void set_has_chat_id();
  inline void clear_has_chat_id();
  inline void set_has_chat_type();
  inline void clear_has_chat_type();
  inline void set_has_chat_info();
  inline void clear_has_chat_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::NFMsg::Ident* chat_id_;
  ::std::string* chat_info_;
  int chat_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckPlayerChat* default_instance_;
};
// -------------------------------------------------------------------

class ReqAckUseSkill : public ::google::protobuf::Message {
 public:
  ReqAckUseSkill();
  virtual ~ReqAckUseSkill();

  ReqAckUseSkill(const ReqAckUseSkill& from);

  inline ReqAckUseSkill& operator=(const ReqAckUseSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckUseSkill& default_instance();

  void Swap(ReqAckUseSkill* other);

  // implements Message ----------------------------------------------

  ReqAckUseSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckUseSkill& from);
  void MergeFrom(const ReqAckUseSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .NFMsg.Ident user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::NFMsg::Ident& user() const;
  inline ::NFMsg::Ident* mutable_user();
  inline ::NFMsg::Ident* release_user();
  inline void set_allocated_user(::NFMsg::Ident* user);

  // required bytes skill_id = 2;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 2;
  inline const ::std::string& skill_id() const;
  inline void set_skill_id(const ::std::string& value);
  inline void set_skill_id(const char* value);
  inline void set_skill_id(const void* value, size_t size);
  inline ::std::string* mutable_skill_id();
  inline ::std::string* release_skill_id();
  inline void set_allocated_skill_id(::std::string* skill_id);

  // required .NFMsg.Position now_pos = 3;
  inline bool has_now_pos() const;
  inline void clear_now_pos();
  static const int kNowPosFieldNumber = 3;
  inline const ::NFMsg::Position& now_pos() const;
  inline ::NFMsg::Position* mutable_now_pos();
  inline ::NFMsg::Position* release_now_pos();
  inline void set_allocated_now_pos(::NFMsg::Position* now_pos);

  // required .NFMsg.Position tar_pos = 4;
  inline bool has_tar_pos() const;
  inline void clear_tar_pos();
  static const int kTarPosFieldNumber = 4;
  inline const ::NFMsg::Position& tar_pos() const;
  inline ::NFMsg::Position* mutable_tar_pos();
  inline ::NFMsg::Position* release_tar_pos();
  inline void set_allocated_tar_pos(::NFMsg::Position* tar_pos);

  // repeated .NFMsg.Ident effect_ident = 5;
  inline int effect_ident_size() const;
  inline void clear_effect_ident();
  static const int kEffectIdentFieldNumber = 5;
  inline const ::NFMsg::Ident& effect_ident(int index) const;
  inline ::NFMsg::Ident* mutable_effect_ident(int index);
  inline ::NFMsg::Ident* add_effect_ident();
  inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >&
      effect_ident() const;
  inline ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >*
      mutable_effect_ident();

  // repeated int32 effect_value = 6;
  inline int effect_value_size() const;
  inline void clear_effect_value();
  static const int kEffectValueFieldNumber = 6;
  inline ::google::protobuf::int32 effect_value(int index) const;
  inline void set_effect_value(int index, ::google::protobuf::int32 value);
  inline void add_effect_value(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      effect_value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_effect_value();

  // repeated int32 effect_rlt = 7;
  inline int effect_rlt_size() const;
  inline void clear_effect_rlt();
  static const int kEffectRltFieldNumber = 7;
  inline ::google::protobuf::int32 effect_rlt(int index) const;
  inline void set_effect_rlt(int index, ::google::protobuf::int32 value);
  inline void add_effect_rlt(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      effect_rlt() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_effect_rlt();

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckUseSkill)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_now_pos();
  inline void clear_has_now_pos();
  inline void set_has_tar_pos();
  inline void clear_has_tar_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::NFMsg::Ident* user_;
  ::std::string* skill_id_;
  ::NFMsg::Position* now_pos_;
  ::NFMsg::Position* tar_pos_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident > effect_ident_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > effect_value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > effect_rlt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckUseSkill* default_instance_;
};
// -------------------------------------------------------------------

class ReqAckUseItem : public ::google::protobuf::Message {
 public:
  ReqAckUseItem();
  virtual ~ReqAckUseItem();

  ReqAckUseItem(const ReqAckUseItem& from);

  inline ReqAckUseItem& operator=(const ReqAckUseItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckUseItem& default_instance();

  void Swap(ReqAckUseItem* other);

  // implements Message ----------------------------------------------

  ReqAckUseItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckUseItem& from);
  void MergeFrom(const ReqAckUseItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .NFMsg.Ident user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::NFMsg::Ident& user() const;
  inline ::NFMsg::Ident* mutable_user();
  inline ::NFMsg::Ident* release_user();
  inline void set_allocated_user(::NFMsg::Ident* user);

  // required .NFMsg.Ident item_guid = 2;
  inline bool has_item_guid() const;
  inline void clear_item_guid();
  static const int kItemGuidFieldNumber = 2;
  inline const ::NFMsg::Ident& item_guid() const;
  inline ::NFMsg::Ident* mutable_item_guid();
  inline ::NFMsg::Ident* release_item_guid();
  inline void set_allocated_item_guid(::NFMsg::Ident* item_guid);

  // repeated .NFMsg.Ident effect_ident = 3;
  inline int effect_ident_size() const;
  inline void clear_effect_ident();
  static const int kEffectIdentFieldNumber = 3;
  inline const ::NFMsg::Ident& effect_ident(int index) const;
  inline ::NFMsg::Ident* mutable_effect_ident(int index);
  inline ::NFMsg::Ident* add_effect_ident();
  inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >&
      effect_ident() const;
  inline ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >*
      mutable_effect_ident();

  // repeated int32 effect_value = 4;
  inline int effect_value_size() const;
  inline void clear_effect_value();
  static const int kEffectValueFieldNumber = 4;
  inline ::google::protobuf::int32 effect_value(int index) const;
  inline void set_effect_value(int index, ::google::protobuf::int32 value);
  inline void add_effect_value(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      effect_value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_effect_value();

  // repeated int32 effect_rlt = 5;
  inline int effect_rlt_size() const;
  inline void clear_effect_rlt();
  static const int kEffectRltFieldNumber = 5;
  inline ::google::protobuf::int32 effect_rlt(int index) const;
  inline void set_effect_rlt(int index, ::google::protobuf::int32 value);
  inline void add_effect_rlt(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      effect_rlt() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_effect_rlt();

  // optional bytes key_value = 6;
  inline bool has_key_value() const;
  inline void clear_key_value();
  static const int kKeyValueFieldNumber = 6;
  inline const ::std::string& key_value() const;
  inline void set_key_value(const ::std::string& value);
  inline void set_key_value(const char* value);
  inline void set_key_value(const void* value, size_t size);
  inline ::std::string* mutable_key_value();
  inline ::std::string* release_key_value();
  inline void set_allocated_key_value(::std::string* key_value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckUseItem)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_item_guid();
  inline void clear_has_item_guid();
  inline void set_has_key_value();
  inline void clear_has_key_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::NFMsg::Ident* user_;
  ::NFMsg::Ident* item_guid_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident > effect_ident_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > effect_value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > effect_rlt_;
  ::std::string* key_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckUseItem* default_instance_;
};
// -------------------------------------------------------------------

class ReqAckSwapScene : public ::google::protobuf::Message {
 public:
  ReqAckSwapScene();
  virtual ~ReqAckSwapScene();

  ReqAckSwapScene(const ReqAckSwapScene& from);

  inline ReqAckSwapScene& operator=(const ReqAckSwapScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckSwapScene& default_instance();

  void Swap(ReqAckSwapScene* other);

  // implements Message ----------------------------------------------

  ReqAckSwapScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckSwapScene& from);
  void MergeFrom(const ReqAckSwapScene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReqAckSwapScene_EGameSwapType EGameSwapType;
  static const EGameSwapType EGST_NARMAL = ReqAckSwapScene_EGameSwapType_EGST_NARMAL;
  static const EGameSwapType EGST_CLONE = ReqAckSwapScene_EGameSwapType_EGST_CLONE;
  static const EGameSwapType EGST_ARENA = ReqAckSwapScene_EGameSwapType_EGST_ARENA;
  static const EGameSwapType EGST_MIRROR = ReqAckSwapScene_EGameSwapType_EGST_MIRROR;
  static inline bool EGameSwapType_IsValid(int value) {
    return ReqAckSwapScene_EGameSwapType_IsValid(value);
  }
  static const EGameSwapType EGameSwapType_MIN =
    ReqAckSwapScene_EGameSwapType_EGameSwapType_MIN;
  static const EGameSwapType EGameSwapType_MAX =
    ReqAckSwapScene_EGameSwapType_EGameSwapType_MAX;
  static const int EGameSwapType_ARRAYSIZE =
    ReqAckSwapScene_EGameSwapType_EGameSwapType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EGameSwapType_descriptor() {
    return ReqAckSwapScene_EGameSwapType_descriptor();
  }
  static inline const ::std::string& EGameSwapType_Name(EGameSwapType value) {
    return ReqAckSwapScene_EGameSwapType_Name(value);
  }
  static inline bool EGameSwapType_Parse(const ::std::string& name,
      EGameSwapType* value) {
    return ReqAckSwapScene_EGameSwapType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .NFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
  inline bool has_transfer_type() const;
  inline void clear_transfer_type();
  static const int kTransferTypeFieldNumber = 1;
  inline ::NFMsg::ReqAckSwapScene_EGameSwapType transfer_type() const;
  inline void set_transfer_type(::NFMsg::ReqAckSwapScene_EGameSwapType value);

  // required int32 scene_id = 2;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);

  // required int32 line_id = 3;
  inline bool has_line_id() const;
  inline void clear_line_id();
  static const int kLineIdFieldNumber = 3;
  inline ::google::protobuf::int32 line_id() const;
  inline void set_line_id(::google::protobuf::int32 value);

  // optional float x = 4;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 4;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 5;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 5;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 6;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 6;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckSwapScene)
 private:
  inline void set_has_transfer_type();
  inline void clear_has_transfer_type();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_line_id();
  inline void clear_has_line_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int transfer_type_;
  ::google::protobuf::int32 scene_id_;
  ::google::protobuf::int32 line_id_;
  float x_;
  float y_;
  float z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckSwapScene* default_instance_;
};
// -------------------------------------------------------------------

class ReqPickDropItem : public ::google::protobuf::Message {
 public:
  ReqPickDropItem();
  virtual ~ReqPickDropItem();

  ReqPickDropItem(const ReqPickDropItem& from);

  inline ReqPickDropItem& operator=(const ReqPickDropItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqPickDropItem& default_instance();

  void Swap(ReqPickDropItem* other);

  // implements Message ----------------------------------------------

  ReqPickDropItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqPickDropItem& from);
  void MergeFrom(const ReqPickDropItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .NFMsg.Ident item_guid = 2;
  inline bool has_item_guid() const;
  inline void clear_item_guid();
  static const int kItemGuidFieldNumber = 2;
  inline const ::NFMsg::Ident& item_guid() const;
  inline ::NFMsg::Ident* mutable_item_guid();
  inline ::NFMsg::Ident* release_item_guid();
  inline void set_allocated_item_guid(::NFMsg::Ident* item_guid);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqPickDropItem)
 private:
  inline void set_has_item_guid();
  inline void clear_has_item_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::NFMsg::Ident* item_guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqPickDropItem* default_instance_;
};
// -------------------------------------------------------------------

class ReqAcceptTask : public ::google::protobuf::Message {
 public:
  ReqAcceptTask();
  virtual ~ReqAcceptTask();

  ReqAcceptTask(const ReqAcceptTask& from);

  inline ReqAcceptTask& operator=(const ReqAcceptTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAcceptTask& default_instance();

  void Swap(ReqAcceptTask* other);

  // implements Message ----------------------------------------------

  ReqAcceptTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAcceptTask& from);
  void MergeFrom(const ReqAcceptTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline const ::std::string& task_id() const;
  inline void set_task_id(const ::std::string& value);
  inline void set_task_id(const char* value);
  inline void set_task_id(const void* value, size_t size);
  inline ::std::string* mutable_task_id();
  inline ::std::string* release_task_id();
  inline void set_allocated_task_id(::std::string* task_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAcceptTask)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* task_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAcceptTask* default_instance_;
};
// -------------------------------------------------------------------

class ReqCompeleteTask : public ::google::protobuf::Message {
 public:
  ReqCompeleteTask();
  virtual ~ReqCompeleteTask();

  ReqCompeleteTask(const ReqCompeleteTask& from);

  inline ReqCompeleteTask& operator=(const ReqCompeleteTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqCompeleteTask& default_instance();

  void Swap(ReqCompeleteTask* other);

  // implements Message ----------------------------------------------

  ReqCompeleteTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqCompeleteTask& from);
  void MergeFrom(const ReqCompeleteTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline const ::std::string& task_id() const;
  inline void set_task_id(const ::std::string& value);
  inline void set_task_id(const char* value);
  inline void set_task_id(const void* value, size_t size);
  inline ::std::string* mutable_task_id();
  inline ::std::string* release_task_id();
  inline void set_allocated_task_id(::std::string* task_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqCompeleteTask)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* task_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqCompeleteTask* default_instance_;
};
// -------------------------------------------------------------------

class PlayerEntryInfo : public ::google::protobuf::Message {
 public:
  PlayerEntryInfo();
  virtual ~PlayerEntryInfo();

  PlayerEntryInfo(const PlayerEntryInfo& from);

  inline PlayerEntryInfo& operator=(const PlayerEntryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerEntryInfo& default_instance();

  void Swap(PlayerEntryInfo* other);

  // implements Message ----------------------------------------------

  PlayerEntryInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerEntryInfo& from);
  void MergeFrom(const PlayerEntryInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .NFMsg.Ident object_guid = 1;
  inline bool has_object_guid() const;
  inline void clear_object_guid();
  static const int kObjectGuidFieldNumber = 1;
  inline const ::NFMsg::Ident& object_guid() const;
  inline ::NFMsg::Ident* mutable_object_guid();
  inline ::NFMsg::Ident* release_object_guid();
  inline void set_allocated_object_guid(::NFMsg::Ident* object_guid);

  // required float x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline float y() const;
  inline void set_y(float value);

  // required float z = 4;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 4;
  inline float z() const;
  inline void set_z(float value);

  // required int32 career_type = 5;
  inline bool has_career_type() const;
  inline void clear_career_type();
  static const int kCareerTypeFieldNumber = 5;
  inline ::google::protobuf::int32 career_type() const;
  inline void set_career_type(::google::protobuf::int32 value);

  // required int32 player_state = 6;
  inline bool has_player_state() const;
  inline void clear_player_state();
  static const int kPlayerStateFieldNumber = 6;
  inline ::google::protobuf::int32 player_state() const;
  inline void set_player_state(::google::protobuf::int32 value);

  // required bytes config_id = 7;
  inline bool has_config_id() const;
  inline void clear_config_id();
  static const int kConfigIdFieldNumber = 7;
  inline const ::std::string& config_id() const;
  inline void set_config_id(const ::std::string& value);
  inline void set_config_id(const char* value);
  inline void set_config_id(const void* value, size_t size);
  inline ::std::string* mutable_config_id();
  inline ::std::string* release_config_id();
  inline void set_allocated_config_id(::std::string* config_id);

  // required int32 scene_id = 8;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 8;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);

  // required bytes class_id = 9;
  inline bool has_class_id() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 9;
  inline const ::std::string& class_id() const;
  inline void set_class_id(const ::std::string& value);
  inline void set_class_id(const char* value);
  inline void set_class_id(const void* value, size_t size);
  inline ::std::string* mutable_class_id();
  inline ::std::string* release_class_id();
  inline void set_allocated_class_id(::std::string* class_id);

  // @@protoc_insertion_point(class_scope:NFMsg.PlayerEntryInfo)
 private:
  inline void set_has_object_guid();
  inline void clear_has_object_guid();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_career_type();
  inline void clear_has_career_type();
  inline void set_has_player_state();
  inline void clear_has_player_state();
  inline void set_has_config_id();
  inline void clear_has_config_id();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_class_id();
  inline void clear_has_class_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::NFMsg::Ident* object_guid_;
  float x_;
  float y_;
  float z_;
  ::google::protobuf::int32 career_type_;
  ::std::string* config_id_;
  ::google::protobuf::int32 player_state_;
  ::google::protobuf::int32 scene_id_;
  ::std::string* class_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static PlayerEntryInfo* default_instance_;
};
// -------------------------------------------------------------------

class AckPlayerEntryList : public ::google::protobuf::Message {
 public:
  AckPlayerEntryList();
  virtual ~AckPlayerEntryList();

  AckPlayerEntryList(const AckPlayerEntryList& from);

  inline AckPlayerEntryList& operator=(const AckPlayerEntryList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckPlayerEntryList& default_instance();

  void Swap(AckPlayerEntryList* other);

  // implements Message ----------------------------------------------

  AckPlayerEntryList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckPlayerEntryList& from);
  void MergeFrom(const AckPlayerEntryList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.PlayerEntryInfo object_list = 1;
  inline int object_list_size() const;
  inline void clear_object_list();
  static const int kObjectListFieldNumber = 1;
  inline const ::NFMsg::PlayerEntryInfo& object_list(int index) const;
  inline ::NFMsg::PlayerEntryInfo* mutable_object_list(int index);
  inline ::NFMsg::PlayerEntryInfo* add_object_list();
  inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::PlayerEntryInfo >&
      object_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::NFMsg::PlayerEntryInfo >*
      mutable_object_list();

  // @@protoc_insertion_point(class_scope:NFMsg.AckPlayerEntryList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::NFMsg::PlayerEntryInfo > object_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static AckPlayerEntryList* default_instance_;
};
// -------------------------------------------------------------------

class AckPlayerLeaveList : public ::google::protobuf::Message {
 public:
  AckPlayerLeaveList();
  virtual ~AckPlayerLeaveList();

  AckPlayerLeaveList(const AckPlayerLeaveList& from);

  inline AckPlayerLeaveList& operator=(const AckPlayerLeaveList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckPlayerLeaveList& default_instance();

  void Swap(AckPlayerLeaveList* other);

  // implements Message ----------------------------------------------

  AckPlayerLeaveList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckPlayerLeaveList& from);
  void MergeFrom(const AckPlayerLeaveList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.Ident object_list = 1;
  inline int object_list_size() const;
  inline void clear_object_list();
  static const int kObjectListFieldNumber = 1;
  inline const ::NFMsg::Ident& object_list(int index) const;
  inline ::NFMsg::Ident* mutable_object_list(int index);
  inline ::NFMsg::Ident* add_object_list();
  inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >&
      object_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >*
      mutable_object_list();

  // @@protoc_insertion_point(class_scope:NFMsg.AckPlayerLeaveList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident > object_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static AckPlayerLeaveList* default_instance_;
};
// ===================================================================


// ===================================================================

// ReqEnterGameServer

// required bytes account = 1;
inline bool ReqEnterGameServer::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqEnterGameServer::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqEnterGameServer::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqEnterGameServer::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& ReqEnterGameServer::account() const {
  return *account_;
}
inline void ReqEnterGameServer::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void ReqEnterGameServer::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void ReqEnterGameServer::set_account(const void* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqEnterGameServer::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* ReqEnterGameServer::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReqEnterGameServer::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 game_id = 2;
inline bool ReqEnterGameServer::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqEnterGameServer::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqEnterGameServer::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqEnterGameServer::clear_game_id() {
  game_id_ = 0;
  clear_has_game_id();
}
inline ::google::protobuf::int32 ReqEnterGameServer::game_id() const {
  return game_id_;
}
inline void ReqEnterGameServer::set_game_id(::google::protobuf::int32 value) {
  set_has_game_id();
  game_id_ = value;
}

// required bytes name = 3;
inline bool ReqEnterGameServer::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqEnterGameServer::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqEnterGameServer::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqEnterGameServer::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ReqEnterGameServer::name() const {
  return *name_;
}
inline void ReqEnterGameServer::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ReqEnterGameServer::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ReqEnterGameServer::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqEnterGameServer::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ReqEnterGameServer::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReqEnterGameServer::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ReqHeartBeat

// -------------------------------------------------------------------

// ReqLeaveGameServer

// -------------------------------------------------------------------

// ReqAckPlayerMove

// required .NFMsg.Ident mover = 1;
inline bool ReqAckPlayerMove::has_mover() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckPlayerMove::set_has_mover() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckPlayerMove::clear_has_mover() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckPlayerMove::clear_mover() {
  if (mover_ != NULL) mover_->::NFMsg::Ident::Clear();
  clear_has_mover();
}
inline const ::NFMsg::Ident& ReqAckPlayerMove::mover() const {
  return mover_ != NULL ? *mover_ : *default_instance_->mover_;
}
inline ::NFMsg::Ident* ReqAckPlayerMove::mutable_mover() {
  set_has_mover();
  if (mover_ == NULL) mover_ = new ::NFMsg::Ident;
  return mover_;
}
inline ::NFMsg::Ident* ReqAckPlayerMove::release_mover() {
  clear_has_mover();
  ::NFMsg::Ident* temp = mover_;
  mover_ = NULL;
  return temp;
}
inline void ReqAckPlayerMove::set_allocated_mover(::NFMsg::Ident* mover) {
  delete mover_;
  mover_ = mover;
  if (mover) {
    set_has_mover();
  } else {
    clear_has_mover();
  }
}

// required int32 moveType = 2;
inline bool ReqAckPlayerMove::has_movetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckPlayerMove::set_has_movetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckPlayerMove::clear_has_movetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckPlayerMove::clear_movetype() {
  movetype_ = 0;
  clear_has_movetype();
}
inline ::google::protobuf::int32 ReqAckPlayerMove::movetype() const {
  return movetype_;
}
inline void ReqAckPlayerMove::set_movetype(::google::protobuf::int32 value) {
  set_has_movetype();
  movetype_ = value;
}

// repeated .NFMsg.Position target_pos = 3;
inline int ReqAckPlayerMove::target_pos_size() const {
  return target_pos_.size();
}
inline void ReqAckPlayerMove::clear_target_pos() {
  target_pos_.Clear();
}
inline const ::NFMsg::Position& ReqAckPlayerMove::target_pos(int index) const {
  return target_pos_.Get(index);
}
inline ::NFMsg::Position* ReqAckPlayerMove::mutable_target_pos(int index) {
  return target_pos_.Mutable(index);
}
inline ::NFMsg::Position* ReqAckPlayerMove::add_target_pos() {
  return target_pos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::Position >&
ReqAckPlayerMove::target_pos() const {
  return target_pos_;
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::Position >*
ReqAckPlayerMove::mutable_target_pos() {
  return &target_pos_;
}

// repeated .NFMsg.Position source_pos = 4;
inline int ReqAckPlayerMove::source_pos_size() const {
  return source_pos_.size();
}
inline void ReqAckPlayerMove::clear_source_pos() {
  source_pos_.Clear();
}
inline const ::NFMsg::Position& ReqAckPlayerMove::source_pos(int index) const {
  return source_pos_.Get(index);
}
inline ::NFMsg::Position* ReqAckPlayerMove::mutable_source_pos(int index) {
  return source_pos_.Mutable(index);
}
inline ::NFMsg::Position* ReqAckPlayerMove::add_source_pos() {
  return source_pos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::Position >&
ReqAckPlayerMove::source_pos() const {
  return source_pos_;
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::Position >*
ReqAckPlayerMove::mutable_source_pos() {
  return &source_pos_;
}

// -------------------------------------------------------------------

// ReqAckPlayerChat

// required .NFMsg.Ident chat_id = 1;
inline bool ReqAckPlayerChat::has_chat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckPlayerChat::set_has_chat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckPlayerChat::clear_has_chat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckPlayerChat::clear_chat_id() {
  if (chat_id_ != NULL) chat_id_->::NFMsg::Ident::Clear();
  clear_has_chat_id();
}
inline const ::NFMsg::Ident& ReqAckPlayerChat::chat_id() const {
  return chat_id_ != NULL ? *chat_id_ : *default_instance_->chat_id_;
}
inline ::NFMsg::Ident* ReqAckPlayerChat::mutable_chat_id() {
  set_has_chat_id();
  if (chat_id_ == NULL) chat_id_ = new ::NFMsg::Ident;
  return chat_id_;
}
inline ::NFMsg::Ident* ReqAckPlayerChat::release_chat_id() {
  clear_has_chat_id();
  ::NFMsg::Ident* temp = chat_id_;
  chat_id_ = NULL;
  return temp;
}
inline void ReqAckPlayerChat::set_allocated_chat_id(::NFMsg::Ident* chat_id) {
  delete chat_id_;
  chat_id_ = chat_id;
  if (chat_id) {
    set_has_chat_id();
  } else {
    clear_has_chat_id();
  }
}

// required .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
inline bool ReqAckPlayerChat::has_chat_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckPlayerChat::set_has_chat_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckPlayerChat::clear_has_chat_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckPlayerChat::clear_chat_type() {
  chat_type_ = 0;
  clear_has_chat_type();
}
inline ::NFMsg::ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::chat_type() const {
  return static_cast< ::NFMsg::ReqAckPlayerChat_EGameChatType >(chat_type_);
}
inline void ReqAckPlayerChat::set_chat_type(::NFMsg::ReqAckPlayerChat_EGameChatType value) {
  assert(::NFMsg::ReqAckPlayerChat_EGameChatType_IsValid(value));
  set_has_chat_type();
  chat_type_ = value;
}

// required bytes chat_info = 3;
inline bool ReqAckPlayerChat::has_chat_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqAckPlayerChat::set_has_chat_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqAckPlayerChat::clear_has_chat_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqAckPlayerChat::clear_chat_info() {
  if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
    chat_info_->clear();
  }
  clear_has_chat_info();
}
inline const ::std::string& ReqAckPlayerChat::chat_info() const {
  return *chat_info_;
}
inline void ReqAckPlayerChat::set_chat_info(const ::std::string& value) {
  set_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    chat_info_ = new ::std::string;
  }
  chat_info_->assign(value);
}
inline void ReqAckPlayerChat::set_chat_info(const char* value) {
  set_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    chat_info_ = new ::std::string;
  }
  chat_info_->assign(value);
}
inline void ReqAckPlayerChat::set_chat_info(const void* value, size_t size) {
  set_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    chat_info_ = new ::std::string;
  }
  chat_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqAckPlayerChat::mutable_chat_info() {
  set_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    chat_info_ = new ::std::string;
  }
  return chat_info_;
}
inline ::std::string* ReqAckPlayerChat::release_chat_info() {
  clear_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chat_info_;
    chat_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReqAckPlayerChat::set_allocated_chat_info(::std::string* chat_info) {
  if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_info_;
  }
  if (chat_info) {
    set_has_chat_info();
    chat_info_ = chat_info;
  } else {
    clear_has_chat_info();
    chat_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ReqAckUseSkill

// required .NFMsg.Ident user = 1;
inline bool ReqAckUseSkill::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckUseSkill::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckUseSkill::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckUseSkill::clear_user() {
  if (user_ != NULL) user_->::NFMsg::Ident::Clear();
  clear_has_user();
}
inline const ::NFMsg::Ident& ReqAckUseSkill::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::NFMsg::Ident* ReqAckUseSkill::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::NFMsg::Ident;
  return user_;
}
inline ::NFMsg::Ident* ReqAckUseSkill::release_user() {
  clear_has_user();
  ::NFMsg::Ident* temp = user_;
  user_ = NULL;
  return temp;
}
inline void ReqAckUseSkill::set_allocated_user(::NFMsg::Ident* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
}

// required bytes skill_id = 2;
inline bool ReqAckUseSkill::has_skill_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckUseSkill::set_has_skill_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckUseSkill::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckUseSkill::clear_skill_id() {
  if (skill_id_ != &::google::protobuf::internal::kEmptyString) {
    skill_id_->clear();
  }
  clear_has_skill_id();
}
inline const ::std::string& ReqAckUseSkill::skill_id() const {
  return *skill_id_;
}
inline void ReqAckUseSkill::set_skill_id(const ::std::string& value) {
  set_has_skill_id();
  if (skill_id_ == &::google::protobuf::internal::kEmptyString) {
    skill_id_ = new ::std::string;
  }
  skill_id_->assign(value);
}
inline void ReqAckUseSkill::set_skill_id(const char* value) {
  set_has_skill_id();
  if (skill_id_ == &::google::protobuf::internal::kEmptyString) {
    skill_id_ = new ::std::string;
  }
  skill_id_->assign(value);
}
inline void ReqAckUseSkill::set_skill_id(const void* value, size_t size) {
  set_has_skill_id();
  if (skill_id_ == &::google::protobuf::internal::kEmptyString) {
    skill_id_ = new ::std::string;
  }
  skill_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqAckUseSkill::mutable_skill_id() {
  set_has_skill_id();
  if (skill_id_ == &::google::protobuf::internal::kEmptyString) {
    skill_id_ = new ::std::string;
  }
  return skill_id_;
}
inline ::std::string* ReqAckUseSkill::release_skill_id() {
  clear_has_skill_id();
  if (skill_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = skill_id_;
    skill_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReqAckUseSkill::set_allocated_skill_id(::std::string* skill_id) {
  if (skill_id_ != &::google::protobuf::internal::kEmptyString) {
    delete skill_id_;
  }
  if (skill_id) {
    set_has_skill_id();
    skill_id_ = skill_id;
  } else {
    clear_has_skill_id();
    skill_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .NFMsg.Position now_pos = 3;
inline bool ReqAckUseSkill::has_now_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqAckUseSkill::set_has_now_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqAckUseSkill::clear_has_now_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqAckUseSkill::clear_now_pos() {
  if (now_pos_ != NULL) now_pos_->::NFMsg::Position::Clear();
  clear_has_now_pos();
}
inline const ::NFMsg::Position& ReqAckUseSkill::now_pos() const {
  return now_pos_ != NULL ? *now_pos_ : *default_instance_->now_pos_;
}
inline ::NFMsg::Position* ReqAckUseSkill::mutable_now_pos() {
  set_has_now_pos();
  if (now_pos_ == NULL) now_pos_ = new ::NFMsg::Position;
  return now_pos_;
}
inline ::NFMsg::Position* ReqAckUseSkill::release_now_pos() {
  clear_has_now_pos();
  ::NFMsg::Position* temp = now_pos_;
  now_pos_ = NULL;
  return temp;
}
inline void ReqAckUseSkill::set_allocated_now_pos(::NFMsg::Position* now_pos) {
  delete now_pos_;
  now_pos_ = now_pos;
  if (now_pos) {
    set_has_now_pos();
  } else {
    clear_has_now_pos();
  }
}

// required .NFMsg.Position tar_pos = 4;
inline bool ReqAckUseSkill::has_tar_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqAckUseSkill::set_has_tar_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqAckUseSkill::clear_has_tar_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqAckUseSkill::clear_tar_pos() {
  if (tar_pos_ != NULL) tar_pos_->::NFMsg::Position::Clear();
  clear_has_tar_pos();
}
inline const ::NFMsg::Position& ReqAckUseSkill::tar_pos() const {
  return tar_pos_ != NULL ? *tar_pos_ : *default_instance_->tar_pos_;
}
inline ::NFMsg::Position* ReqAckUseSkill::mutable_tar_pos() {
  set_has_tar_pos();
  if (tar_pos_ == NULL) tar_pos_ = new ::NFMsg::Position;
  return tar_pos_;
}
inline ::NFMsg::Position* ReqAckUseSkill::release_tar_pos() {
  clear_has_tar_pos();
  ::NFMsg::Position* temp = tar_pos_;
  tar_pos_ = NULL;
  return temp;
}
inline void ReqAckUseSkill::set_allocated_tar_pos(::NFMsg::Position* tar_pos) {
  delete tar_pos_;
  tar_pos_ = tar_pos;
  if (tar_pos) {
    set_has_tar_pos();
  } else {
    clear_has_tar_pos();
  }
}

// repeated .NFMsg.Ident effect_ident = 5;
inline int ReqAckUseSkill::effect_ident_size() const {
  return effect_ident_.size();
}
inline void ReqAckUseSkill::clear_effect_ident() {
  effect_ident_.Clear();
}
inline const ::NFMsg::Ident& ReqAckUseSkill::effect_ident(int index) const {
  return effect_ident_.Get(index);
}
inline ::NFMsg::Ident* ReqAckUseSkill::mutable_effect_ident(int index) {
  return effect_ident_.Mutable(index);
}
inline ::NFMsg::Ident* ReqAckUseSkill::add_effect_ident() {
  return effect_ident_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >&
ReqAckUseSkill::effect_ident() const {
  return effect_ident_;
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >*
ReqAckUseSkill::mutable_effect_ident() {
  return &effect_ident_;
}

// repeated int32 effect_value = 6;
inline int ReqAckUseSkill::effect_value_size() const {
  return effect_value_.size();
}
inline void ReqAckUseSkill::clear_effect_value() {
  effect_value_.Clear();
}
inline ::google::protobuf::int32 ReqAckUseSkill::effect_value(int index) const {
  return effect_value_.Get(index);
}
inline void ReqAckUseSkill::set_effect_value(int index, ::google::protobuf::int32 value) {
  effect_value_.Set(index, value);
}
inline void ReqAckUseSkill::add_effect_value(::google::protobuf::int32 value) {
  effect_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ReqAckUseSkill::effect_value() const {
  return effect_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ReqAckUseSkill::mutable_effect_value() {
  return &effect_value_;
}

// repeated int32 effect_rlt = 7;
inline int ReqAckUseSkill::effect_rlt_size() const {
  return effect_rlt_.size();
}
inline void ReqAckUseSkill::clear_effect_rlt() {
  effect_rlt_.Clear();
}
inline ::google::protobuf::int32 ReqAckUseSkill::effect_rlt(int index) const {
  return effect_rlt_.Get(index);
}
inline void ReqAckUseSkill::set_effect_rlt(int index, ::google::protobuf::int32 value) {
  effect_rlt_.Set(index, value);
}
inline void ReqAckUseSkill::add_effect_rlt(::google::protobuf::int32 value) {
  effect_rlt_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ReqAckUseSkill::effect_rlt() const {
  return effect_rlt_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ReqAckUseSkill::mutable_effect_rlt() {
  return &effect_rlt_;
}

// -------------------------------------------------------------------

// ReqAckUseItem

// required .NFMsg.Ident user = 1;
inline bool ReqAckUseItem::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckUseItem::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckUseItem::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckUseItem::clear_user() {
  if (user_ != NULL) user_->::NFMsg::Ident::Clear();
  clear_has_user();
}
inline const ::NFMsg::Ident& ReqAckUseItem::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::NFMsg::Ident* ReqAckUseItem::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::NFMsg::Ident;
  return user_;
}
inline ::NFMsg::Ident* ReqAckUseItem::release_user() {
  clear_has_user();
  ::NFMsg::Ident* temp = user_;
  user_ = NULL;
  return temp;
}
inline void ReqAckUseItem::set_allocated_user(::NFMsg::Ident* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
}

// required .NFMsg.Ident item_guid = 2;
inline bool ReqAckUseItem::has_item_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckUseItem::set_has_item_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckUseItem::clear_has_item_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckUseItem::clear_item_guid() {
  if (item_guid_ != NULL) item_guid_->::NFMsg::Ident::Clear();
  clear_has_item_guid();
}
inline const ::NFMsg::Ident& ReqAckUseItem::item_guid() const {
  return item_guid_ != NULL ? *item_guid_ : *default_instance_->item_guid_;
}
inline ::NFMsg::Ident* ReqAckUseItem::mutable_item_guid() {
  set_has_item_guid();
  if (item_guid_ == NULL) item_guid_ = new ::NFMsg::Ident;
  return item_guid_;
}
inline ::NFMsg::Ident* ReqAckUseItem::release_item_guid() {
  clear_has_item_guid();
  ::NFMsg::Ident* temp = item_guid_;
  item_guid_ = NULL;
  return temp;
}
inline void ReqAckUseItem::set_allocated_item_guid(::NFMsg::Ident* item_guid) {
  delete item_guid_;
  item_guid_ = item_guid;
  if (item_guid) {
    set_has_item_guid();
  } else {
    clear_has_item_guid();
  }
}

// repeated .NFMsg.Ident effect_ident = 3;
inline int ReqAckUseItem::effect_ident_size() const {
  return effect_ident_.size();
}
inline void ReqAckUseItem::clear_effect_ident() {
  effect_ident_.Clear();
}
inline const ::NFMsg::Ident& ReqAckUseItem::effect_ident(int index) const {
  return effect_ident_.Get(index);
}
inline ::NFMsg::Ident* ReqAckUseItem::mutable_effect_ident(int index) {
  return effect_ident_.Mutable(index);
}
inline ::NFMsg::Ident* ReqAckUseItem::add_effect_ident() {
  return effect_ident_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >&
ReqAckUseItem::effect_ident() const {
  return effect_ident_;
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >*
ReqAckUseItem::mutable_effect_ident() {
  return &effect_ident_;
}

// repeated int32 effect_value = 4;
inline int ReqAckUseItem::effect_value_size() const {
  return effect_value_.size();
}
inline void ReqAckUseItem::clear_effect_value() {
  effect_value_.Clear();
}
inline ::google::protobuf::int32 ReqAckUseItem::effect_value(int index) const {
  return effect_value_.Get(index);
}
inline void ReqAckUseItem::set_effect_value(int index, ::google::protobuf::int32 value) {
  effect_value_.Set(index, value);
}
inline void ReqAckUseItem::add_effect_value(::google::protobuf::int32 value) {
  effect_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ReqAckUseItem::effect_value() const {
  return effect_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ReqAckUseItem::mutable_effect_value() {
  return &effect_value_;
}

// repeated int32 effect_rlt = 5;
inline int ReqAckUseItem::effect_rlt_size() const {
  return effect_rlt_.size();
}
inline void ReqAckUseItem::clear_effect_rlt() {
  effect_rlt_.Clear();
}
inline ::google::protobuf::int32 ReqAckUseItem::effect_rlt(int index) const {
  return effect_rlt_.Get(index);
}
inline void ReqAckUseItem::set_effect_rlt(int index, ::google::protobuf::int32 value) {
  effect_rlt_.Set(index, value);
}
inline void ReqAckUseItem::add_effect_rlt(::google::protobuf::int32 value) {
  effect_rlt_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ReqAckUseItem::effect_rlt() const {
  return effect_rlt_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ReqAckUseItem::mutable_effect_rlt() {
  return &effect_rlt_;
}

// optional bytes key_value = 6;
inline bool ReqAckUseItem::has_key_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqAckUseItem::set_has_key_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqAckUseItem::clear_has_key_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqAckUseItem::clear_key_value() {
  if (key_value_ != &::google::protobuf::internal::kEmptyString) {
    key_value_->clear();
  }
  clear_has_key_value();
}
inline const ::std::string& ReqAckUseItem::key_value() const {
  return *key_value_;
}
inline void ReqAckUseItem::set_key_value(const ::std::string& value) {
  set_has_key_value();
  if (key_value_ == &::google::protobuf::internal::kEmptyString) {
    key_value_ = new ::std::string;
  }
  key_value_->assign(value);
}
inline void ReqAckUseItem::set_key_value(const char* value) {
  set_has_key_value();
  if (key_value_ == &::google::protobuf::internal::kEmptyString) {
    key_value_ = new ::std::string;
  }
  key_value_->assign(value);
}
inline void ReqAckUseItem::set_key_value(const void* value, size_t size) {
  set_has_key_value();
  if (key_value_ == &::google::protobuf::internal::kEmptyString) {
    key_value_ = new ::std::string;
  }
  key_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqAckUseItem::mutable_key_value() {
  set_has_key_value();
  if (key_value_ == &::google::protobuf::internal::kEmptyString) {
    key_value_ = new ::std::string;
  }
  return key_value_;
}
inline ::std::string* ReqAckUseItem::release_key_value() {
  clear_has_key_value();
  if (key_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_value_;
    key_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReqAckUseItem::set_allocated_key_value(::std::string* key_value) {
  if (key_value_ != &::google::protobuf::internal::kEmptyString) {
    delete key_value_;
  }
  if (key_value) {
    set_has_key_value();
    key_value_ = key_value;
  } else {
    clear_has_key_value();
    key_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ReqAckSwapScene

// required .NFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
inline bool ReqAckSwapScene::has_transfer_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckSwapScene::set_has_transfer_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckSwapScene::clear_has_transfer_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckSwapScene::clear_transfer_type() {
  transfer_type_ = 0;
  clear_has_transfer_type();
}
inline ::NFMsg::ReqAckSwapScene_EGameSwapType ReqAckSwapScene::transfer_type() const {
  return static_cast< ::NFMsg::ReqAckSwapScene_EGameSwapType >(transfer_type_);
}
inline void ReqAckSwapScene::set_transfer_type(::NFMsg::ReqAckSwapScene_EGameSwapType value) {
  assert(::NFMsg::ReqAckSwapScene_EGameSwapType_IsValid(value));
  set_has_transfer_type();
  transfer_type_ = value;
}

// required int32 scene_id = 2;
inline bool ReqAckSwapScene::has_scene_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckSwapScene::set_has_scene_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckSwapScene::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckSwapScene::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 ReqAckSwapScene::scene_id() const {
  return scene_id_;
}
inline void ReqAckSwapScene::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// required int32 line_id = 3;
inline bool ReqAckSwapScene::has_line_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqAckSwapScene::set_has_line_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqAckSwapScene::clear_has_line_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqAckSwapScene::clear_line_id() {
  line_id_ = 0;
  clear_has_line_id();
}
inline ::google::protobuf::int32 ReqAckSwapScene::line_id() const {
  return line_id_;
}
inline void ReqAckSwapScene::set_line_id(::google::protobuf::int32 value) {
  set_has_line_id();
  line_id_ = value;
}

// optional float x = 4;
inline bool ReqAckSwapScene::has_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqAckSwapScene::set_has_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqAckSwapScene::clear_has_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqAckSwapScene::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float ReqAckSwapScene::x() const {
  return x_;
}
inline void ReqAckSwapScene::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 5;
inline bool ReqAckSwapScene::has_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqAckSwapScene::set_has_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqAckSwapScene::clear_has_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqAckSwapScene::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float ReqAckSwapScene::y() const {
  return y_;
}
inline void ReqAckSwapScene::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float z = 6;
inline bool ReqAckSwapScene::has_z() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqAckSwapScene::set_has_z() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqAckSwapScene::clear_has_z() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqAckSwapScene::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float ReqAckSwapScene::z() const {
  return z_;
}
inline void ReqAckSwapScene::set_z(float value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// ReqPickDropItem

// required .NFMsg.Ident item_guid = 2;
inline bool ReqPickDropItem::has_item_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqPickDropItem::set_has_item_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqPickDropItem::clear_has_item_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqPickDropItem::clear_item_guid() {
  if (item_guid_ != NULL) item_guid_->::NFMsg::Ident::Clear();
  clear_has_item_guid();
}
inline const ::NFMsg::Ident& ReqPickDropItem::item_guid() const {
  return item_guid_ != NULL ? *item_guid_ : *default_instance_->item_guid_;
}
inline ::NFMsg::Ident* ReqPickDropItem::mutable_item_guid() {
  set_has_item_guid();
  if (item_guid_ == NULL) item_guid_ = new ::NFMsg::Ident;
  return item_guid_;
}
inline ::NFMsg::Ident* ReqPickDropItem::release_item_guid() {
  clear_has_item_guid();
  ::NFMsg::Ident* temp = item_guid_;
  item_guid_ = NULL;
  return temp;
}
inline void ReqPickDropItem::set_allocated_item_guid(::NFMsg::Ident* item_guid) {
  delete item_guid_;
  item_guid_ = item_guid;
  if (item_guid) {
    set_has_item_guid();
  } else {
    clear_has_item_guid();
  }
}

// -------------------------------------------------------------------

// ReqAcceptTask

// required bytes task_id = 1;
inline bool ReqAcceptTask::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAcceptTask::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAcceptTask::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAcceptTask::clear_task_id() {
  if (task_id_ != &::google::protobuf::internal::kEmptyString) {
    task_id_->clear();
  }
  clear_has_task_id();
}
inline const ::std::string& ReqAcceptTask::task_id() const {
  return *task_id_;
}
inline void ReqAcceptTask::set_task_id(const ::std::string& value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::kEmptyString) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
}
inline void ReqAcceptTask::set_task_id(const char* value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::kEmptyString) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
}
inline void ReqAcceptTask::set_task_id(const void* value, size_t size) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::kEmptyString) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqAcceptTask::mutable_task_id() {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::kEmptyString) {
    task_id_ = new ::std::string;
  }
  return task_id_;
}
inline ::std::string* ReqAcceptTask::release_task_id() {
  clear_has_task_id();
  if (task_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = task_id_;
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReqAcceptTask::set_allocated_task_id(::std::string* task_id) {
  if (task_id_ != &::google::protobuf::internal::kEmptyString) {
    delete task_id_;
  }
  if (task_id) {
    set_has_task_id();
    task_id_ = task_id;
  } else {
    clear_has_task_id();
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ReqCompeleteTask

// required bytes task_id = 1;
inline bool ReqCompeleteTask::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqCompeleteTask::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqCompeleteTask::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqCompeleteTask::clear_task_id() {
  if (task_id_ != &::google::protobuf::internal::kEmptyString) {
    task_id_->clear();
  }
  clear_has_task_id();
}
inline const ::std::string& ReqCompeleteTask::task_id() const {
  return *task_id_;
}
inline void ReqCompeleteTask::set_task_id(const ::std::string& value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::kEmptyString) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
}
inline void ReqCompeleteTask::set_task_id(const char* value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::kEmptyString) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
}
inline void ReqCompeleteTask::set_task_id(const void* value, size_t size) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::kEmptyString) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqCompeleteTask::mutable_task_id() {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::kEmptyString) {
    task_id_ = new ::std::string;
  }
  return task_id_;
}
inline ::std::string* ReqCompeleteTask::release_task_id() {
  clear_has_task_id();
  if (task_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = task_id_;
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReqCompeleteTask::set_allocated_task_id(::std::string* task_id) {
  if (task_id_ != &::google::protobuf::internal::kEmptyString) {
    delete task_id_;
  }
  if (task_id) {
    set_has_task_id();
    task_id_ = task_id;
  } else {
    clear_has_task_id();
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PlayerEntryInfo

// required .NFMsg.Ident object_guid = 1;
inline bool PlayerEntryInfo::has_object_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerEntryInfo::set_has_object_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerEntryInfo::clear_has_object_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerEntryInfo::clear_object_guid() {
  if (object_guid_ != NULL) object_guid_->::NFMsg::Ident::Clear();
  clear_has_object_guid();
}
inline const ::NFMsg::Ident& PlayerEntryInfo::object_guid() const {
  return object_guid_ != NULL ? *object_guid_ : *default_instance_->object_guid_;
}
inline ::NFMsg::Ident* PlayerEntryInfo::mutable_object_guid() {
  set_has_object_guid();
  if (object_guid_ == NULL) object_guid_ = new ::NFMsg::Ident;
  return object_guid_;
}
inline ::NFMsg::Ident* PlayerEntryInfo::release_object_guid() {
  clear_has_object_guid();
  ::NFMsg::Ident* temp = object_guid_;
  object_guid_ = NULL;
  return temp;
}
inline void PlayerEntryInfo::set_allocated_object_guid(::NFMsg::Ident* object_guid) {
  delete object_guid_;
  object_guid_ = object_guid;
  if (object_guid) {
    set_has_object_guid();
  } else {
    clear_has_object_guid();
  }
}

// required float x = 2;
inline bool PlayerEntryInfo::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerEntryInfo::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerEntryInfo::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerEntryInfo::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float PlayerEntryInfo::x() const {
  return x_;
}
inline void PlayerEntryInfo::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 3;
inline bool PlayerEntryInfo::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerEntryInfo::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerEntryInfo::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerEntryInfo::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float PlayerEntryInfo::y() const {
  return y_;
}
inline void PlayerEntryInfo::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float z = 4;
inline bool PlayerEntryInfo::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerEntryInfo::set_has_z() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerEntryInfo::clear_has_z() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerEntryInfo::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float PlayerEntryInfo::z() const {
  return z_;
}
inline void PlayerEntryInfo::set_z(float value) {
  set_has_z();
  z_ = value;
}

// required int32 career_type = 5;
inline bool PlayerEntryInfo::has_career_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerEntryInfo::set_has_career_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerEntryInfo::clear_has_career_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerEntryInfo::clear_career_type() {
  career_type_ = 0;
  clear_has_career_type();
}
inline ::google::protobuf::int32 PlayerEntryInfo::career_type() const {
  return career_type_;
}
inline void PlayerEntryInfo::set_career_type(::google::protobuf::int32 value) {
  set_has_career_type();
  career_type_ = value;
}

// required int32 player_state = 6;
inline bool PlayerEntryInfo::has_player_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerEntryInfo::set_has_player_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerEntryInfo::clear_has_player_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerEntryInfo::clear_player_state() {
  player_state_ = 0;
  clear_has_player_state();
}
inline ::google::protobuf::int32 PlayerEntryInfo::player_state() const {
  return player_state_;
}
inline void PlayerEntryInfo::set_player_state(::google::protobuf::int32 value) {
  set_has_player_state();
  player_state_ = value;
}

// required bytes config_id = 7;
inline bool PlayerEntryInfo::has_config_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerEntryInfo::set_has_config_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerEntryInfo::clear_has_config_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerEntryInfo::clear_config_id() {
  if (config_id_ != &::google::protobuf::internal::kEmptyString) {
    config_id_->clear();
  }
  clear_has_config_id();
}
inline const ::std::string& PlayerEntryInfo::config_id() const {
  return *config_id_;
}
inline void PlayerEntryInfo::set_config_id(const ::std::string& value) {
  set_has_config_id();
  if (config_id_ == &::google::protobuf::internal::kEmptyString) {
    config_id_ = new ::std::string;
  }
  config_id_->assign(value);
}
inline void PlayerEntryInfo::set_config_id(const char* value) {
  set_has_config_id();
  if (config_id_ == &::google::protobuf::internal::kEmptyString) {
    config_id_ = new ::std::string;
  }
  config_id_->assign(value);
}
inline void PlayerEntryInfo::set_config_id(const void* value, size_t size) {
  set_has_config_id();
  if (config_id_ == &::google::protobuf::internal::kEmptyString) {
    config_id_ = new ::std::string;
  }
  config_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerEntryInfo::mutable_config_id() {
  set_has_config_id();
  if (config_id_ == &::google::protobuf::internal::kEmptyString) {
    config_id_ = new ::std::string;
  }
  return config_id_;
}
inline ::std::string* PlayerEntryInfo::release_config_id() {
  clear_has_config_id();
  if (config_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = config_id_;
    config_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerEntryInfo::set_allocated_config_id(::std::string* config_id) {
  if (config_id_ != &::google::protobuf::internal::kEmptyString) {
    delete config_id_;
  }
  if (config_id) {
    set_has_config_id();
    config_id_ = config_id;
  } else {
    clear_has_config_id();
    config_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 scene_id = 8;
inline bool PlayerEntryInfo::has_scene_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerEntryInfo::set_has_scene_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerEntryInfo::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerEntryInfo::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 PlayerEntryInfo::scene_id() const {
  return scene_id_;
}
inline void PlayerEntryInfo::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// required bytes class_id = 9;
inline bool PlayerEntryInfo::has_class_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerEntryInfo::set_has_class_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerEntryInfo::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerEntryInfo::clear_class_id() {
  if (class_id_ != &::google::protobuf::internal::kEmptyString) {
    class_id_->clear();
  }
  clear_has_class_id();
}
inline const ::std::string& PlayerEntryInfo::class_id() const {
  return *class_id_;
}
inline void PlayerEntryInfo::set_class_id(const ::std::string& value) {
  set_has_class_id();
  if (class_id_ == &::google::protobuf::internal::kEmptyString) {
    class_id_ = new ::std::string;
  }
  class_id_->assign(value);
}
inline void PlayerEntryInfo::set_class_id(const char* value) {
  set_has_class_id();
  if (class_id_ == &::google::protobuf::internal::kEmptyString) {
    class_id_ = new ::std::string;
  }
  class_id_->assign(value);
}
inline void PlayerEntryInfo::set_class_id(const void* value, size_t size) {
  set_has_class_id();
  if (class_id_ == &::google::protobuf::internal::kEmptyString) {
    class_id_ = new ::std::string;
  }
  class_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerEntryInfo::mutable_class_id() {
  set_has_class_id();
  if (class_id_ == &::google::protobuf::internal::kEmptyString) {
    class_id_ = new ::std::string;
  }
  return class_id_;
}
inline ::std::string* PlayerEntryInfo::release_class_id() {
  clear_has_class_id();
  if (class_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = class_id_;
    class_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerEntryInfo::set_allocated_class_id(::std::string* class_id) {
  if (class_id_ != &::google::protobuf::internal::kEmptyString) {
    delete class_id_;
  }
  if (class_id) {
    set_has_class_id();
    class_id_ = class_id;
  } else {
    clear_has_class_id();
    class_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AckPlayerEntryList

// repeated .NFMsg.PlayerEntryInfo object_list = 1;
inline int AckPlayerEntryList::object_list_size() const {
  return object_list_.size();
}
inline void AckPlayerEntryList::clear_object_list() {
  object_list_.Clear();
}
inline const ::NFMsg::PlayerEntryInfo& AckPlayerEntryList::object_list(int index) const {
  return object_list_.Get(index);
}
inline ::NFMsg::PlayerEntryInfo* AckPlayerEntryList::mutable_object_list(int index) {
  return object_list_.Mutable(index);
}
inline ::NFMsg::PlayerEntryInfo* AckPlayerEntryList::add_object_list() {
  return object_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::PlayerEntryInfo >&
AckPlayerEntryList::object_list() const {
  return object_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::PlayerEntryInfo >*
AckPlayerEntryList::mutable_object_list() {
  return &object_list_;
}

// -------------------------------------------------------------------

// AckPlayerLeaveList

// repeated .NFMsg.Ident object_list = 1;
inline int AckPlayerLeaveList::object_list_size() const {
  return object_list_.size();
}
inline void AckPlayerLeaveList::clear_object_list() {
  object_list_.Clear();
}
inline const ::NFMsg::Ident& AckPlayerLeaveList::object_list(int index) const {
  return object_list_.Get(index);
}
inline ::NFMsg::Ident* AckPlayerLeaveList::mutable_object_list(int index) {
  return object_list_.Mutable(index);
}
inline ::NFMsg::Ident* AckPlayerLeaveList::add_object_list() {
  return object_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >&
AckPlayerLeaveList::object_list() const {
  return object_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >*
AckPlayerLeaveList::mutable_object_list() {
  return &object_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::ReqAckPlayerChat_EGameChatType>() {
  return ::NFMsg::ReqAckPlayerChat_EGameChatType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::ReqAckSwapScene_EGameSwapType>() {
  return ::NFMsg::ReqAckSwapScene_EGameSwapType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NFMsgShare_2eproto__INCLUDED
