// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgShare.proto

#ifndef PROTOBUF_NFMsgShare_2eproto__INCLUDED
#define PROTOBUF_NFMsgShare_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "NFDefine.pb.h"
#include "NFMsgBase.pb.h"
#include "NFMsgBaseEx.pb.h"
// @@protoc_insertion_point(includes)

namespace NFMsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_NFMsgShare_2eproto();
void protobuf_AssignDesc_NFMsgShare_2eproto();
void protobuf_ShutdownFile_NFMsgShare_2eproto();

class ReqEnterGameServer;
class ReqAckPlayerMove;
class ReqAckPlayerChat;
class ReqAckUseSkill;
class ReqAckUseItem;
class ReqAckSwapScene;
class ReqSellItem;
class ReqSplitItem;
class ReqProduceItem;
class ReqPickDropItem;
class ReqAcceptTask;
class ReqPullDownTask;
class CloneCustomItem;
class ReqPullDownCustoms;
class PlayerEntryInfo;
class AckPlayerEntryList;
class AckPlayerLeaveList;

enum ReqAckPlayerChat_EGameChatType {
  ReqAckPlayerChat_EGameChatType_EGCT_NARMAL = 0,
  ReqAckPlayerChat_EGameChatType_EGCT_PRIVATE = 1,
  ReqAckPlayerChat_EGameChatType_EGCT_TEAM = 2,
  ReqAckPlayerChat_EGameChatType_EGCT_WORLD = 3
};
bool ReqAckPlayerChat_EGameChatType_IsValid(int value);
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat_EGameChatType_EGameChatType_MIN = ReqAckPlayerChat_EGameChatType_EGCT_NARMAL;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat_EGameChatType_EGameChatType_MAX = ReqAckPlayerChat_EGameChatType_EGCT_WORLD;
const int ReqAckPlayerChat_EGameChatType_EGameChatType_ARRAYSIZE = ReqAckPlayerChat_EGameChatType_EGameChatType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReqAckPlayerChat_EGameChatType_descriptor();
inline const ::std::string& ReqAckPlayerChat_EGameChatType_Name(ReqAckPlayerChat_EGameChatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqAckPlayerChat_EGameChatType_descriptor(), value);
}
inline bool ReqAckPlayerChat_EGameChatType_Parse(
    const ::std::string& name, ReqAckPlayerChat_EGameChatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqAckPlayerChat_EGameChatType>(
    ReqAckPlayerChat_EGameChatType_descriptor(), name, value);
}
enum ReqAckSwapScene_EGameSwapType {
  ReqAckSwapScene_EGameSwapType_EGST_NARMAL = 0,
  ReqAckSwapScene_EGameSwapType_EGST_CLONE = 1,
  ReqAckSwapScene_EGameSwapType_EGST_ARENA = 2,
  ReqAckSwapScene_EGameSwapType_EGST_MIRROR = 3
};
bool ReqAckSwapScene_EGameSwapType_IsValid(int value);
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene_EGameSwapType_EGameSwapType_MIN = ReqAckSwapScene_EGameSwapType_EGST_NARMAL;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene_EGameSwapType_EGameSwapType_MAX = ReqAckSwapScene_EGameSwapType_EGST_MIRROR;
const int ReqAckSwapScene_EGameSwapType_EGameSwapType_ARRAYSIZE = ReqAckSwapScene_EGameSwapType_EGameSwapType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReqAckSwapScene_EGameSwapType_descriptor();
inline const ::std::string& ReqAckSwapScene_EGameSwapType_Name(ReqAckSwapScene_EGameSwapType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqAckSwapScene_EGameSwapType_descriptor(), value);
}
inline bool ReqAckSwapScene_EGameSwapType_Parse(
    const ::std::string& name, ReqAckSwapScene_EGameSwapType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqAckSwapScene_EGameSwapType>(
    ReqAckSwapScene_EGameSwapType_descriptor(), name, value);
}
enum ReqPullDownCustoms_EGameCloneResult {
  ReqPullDownCustoms_EGameCloneResult_EGCR_SUCCESS = 0,
  ReqPullDownCustoms_EGameCloneResult_EGCR_FAILED = 1
};
bool ReqPullDownCustoms_EGameCloneResult_IsValid(int value);
const ReqPullDownCustoms_EGameCloneResult ReqPullDownCustoms_EGameCloneResult_EGameCloneResult_MIN = ReqPullDownCustoms_EGameCloneResult_EGCR_SUCCESS;
const ReqPullDownCustoms_EGameCloneResult ReqPullDownCustoms_EGameCloneResult_EGameCloneResult_MAX = ReqPullDownCustoms_EGameCloneResult_EGCR_FAILED;
const int ReqPullDownCustoms_EGameCloneResult_EGameCloneResult_ARRAYSIZE = ReqPullDownCustoms_EGameCloneResult_EGameCloneResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReqPullDownCustoms_EGameCloneResult_descriptor();
inline const ::std::string& ReqPullDownCustoms_EGameCloneResult_Name(ReqPullDownCustoms_EGameCloneResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqPullDownCustoms_EGameCloneResult_descriptor(), value);
}
inline bool ReqPullDownCustoms_EGameCloneResult_Parse(
    const ::std::string& name, ReqPullDownCustoms_EGameCloneResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqPullDownCustoms_EGameCloneResult>(
    ReqPullDownCustoms_EGameCloneResult_descriptor(), name, value);
}
// ===================================================================

class ReqEnterGameServer : public ::google::protobuf::Message {
 public:
  ReqEnterGameServer();
  virtual ~ReqEnterGameServer();

  ReqEnterGameServer(const ReqEnterGameServer& from);

  inline ReqEnterGameServer& operator=(const ReqEnterGameServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqEnterGameServer& default_instance();

  void Swap(ReqEnterGameServer* other);

  // implements Message ----------------------------------------------

  ReqEnterGameServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqEnterGameServer& from);
  void MergeFrom(const ReqEnterGameServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);

  // optional int32 gate_id = 2;
  inline bool has_gate_id() const;
  inline void clear_gate_id();
  static const int kGateIdFieldNumber = 2;
  inline ::google::protobuf::int32 gate_id() const;
  inline void set_gate_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqEnterGameServer)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_gate_id();
  inline void clear_has_gate_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 gate_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqEnterGameServer* default_instance_;
};
// -------------------------------------------------------------------

class ReqAckPlayerMove : public ::google::protobuf::Message {
 public:
  ReqAckPlayerMove();
  virtual ~ReqAckPlayerMove();

  ReqAckPlayerMove(const ReqAckPlayerMove& from);

  inline ReqAckPlayerMove& operator=(const ReqAckPlayerMove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckPlayerMove& default_instance();

  void Swap(ReqAckPlayerMove* other);

  // implements Message ----------------------------------------------

  ReqAckPlayerMove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckPlayerMove& from);
  void MergeFrom(const ReqAckPlayerMove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 mover = 1;
  inline bool has_mover() const;
  inline void clear_mover();
  static const int kMoverFieldNumber = 1;
  inline ::google::protobuf::int64 mover() const;
  inline void set_mover(::google::protobuf::int64 value);

  // required int32 moveType = 2;
  inline bool has_movetype() const;
  inline void clear_movetype();
  static const int kMoveTypeFieldNumber = 2;
  inline ::google::protobuf::int32 movetype() const;
  inline void set_movetype(::google::protobuf::int32 value);

  // required float target_x = 3;
  inline bool has_target_x() const;
  inline void clear_target_x();
  static const int kTargetXFieldNumber = 3;
  inline float target_x() const;
  inline void set_target_x(float value);

  // optional float target_y = 4;
  inline bool has_target_y() const;
  inline void clear_target_y();
  static const int kTargetYFieldNumber = 4;
  inline float target_y() const;
  inline void set_target_y(float value);

  // required float target_z = 5;
  inline bool has_target_z() const;
  inline void clear_target_z();
  static const int kTargetZFieldNumber = 5;
  inline float target_z() const;
  inline void set_target_z(float value);

  // required float source_x = 6;
  inline bool has_source_x() const;
  inline void clear_source_x();
  static const int kSourceXFieldNumber = 6;
  inline float source_x() const;
  inline void set_source_x(float value);

  // optional float source_y = 7;
  inline bool has_source_y() const;
  inline void clear_source_y();
  static const int kSourceYFieldNumber = 7;
  inline float source_y() const;
  inline void set_source_y(float value);

  // required float source_z = 8;
  inline bool has_source_z() const;
  inline void clear_source_z();
  static const int kSourceZFieldNumber = 8;
  inline float source_z() const;
  inline void set_source_z(float value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckPlayerMove)
 private:
  inline void set_has_mover();
  inline void clear_has_mover();
  inline void set_has_movetype();
  inline void clear_has_movetype();
  inline void set_has_target_x();
  inline void clear_has_target_x();
  inline void set_has_target_y();
  inline void clear_has_target_y();
  inline void set_has_target_z();
  inline void clear_has_target_z();
  inline void set_has_source_x();
  inline void clear_has_source_x();
  inline void set_has_source_y();
  inline void clear_has_source_y();
  inline void set_has_source_z();
  inline void clear_has_source_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 mover_;
  ::google::protobuf::int32 movetype_;
  float target_x_;
  float target_y_;
  float target_z_;
  float source_x_;
  float source_y_;
  float source_z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckPlayerMove* default_instance_;
};
// -------------------------------------------------------------------

class ReqAckPlayerChat : public ::google::protobuf::Message {
 public:
  ReqAckPlayerChat();
  virtual ~ReqAckPlayerChat();

  ReqAckPlayerChat(const ReqAckPlayerChat& from);

  inline ReqAckPlayerChat& operator=(const ReqAckPlayerChat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckPlayerChat& default_instance();

  void Swap(ReqAckPlayerChat* other);

  // implements Message ----------------------------------------------

  ReqAckPlayerChat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckPlayerChat& from);
  void MergeFrom(const ReqAckPlayerChat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReqAckPlayerChat_EGameChatType EGameChatType;
  static const EGameChatType EGCT_NARMAL = ReqAckPlayerChat_EGameChatType_EGCT_NARMAL;
  static const EGameChatType EGCT_PRIVATE = ReqAckPlayerChat_EGameChatType_EGCT_PRIVATE;
  static const EGameChatType EGCT_TEAM = ReqAckPlayerChat_EGameChatType_EGCT_TEAM;
  static const EGameChatType EGCT_WORLD = ReqAckPlayerChat_EGameChatType_EGCT_WORLD;
  static inline bool EGameChatType_IsValid(int value) {
    return ReqAckPlayerChat_EGameChatType_IsValid(value);
  }
  static const EGameChatType EGameChatType_MIN =
    ReqAckPlayerChat_EGameChatType_EGameChatType_MIN;
  static const EGameChatType EGameChatType_MAX =
    ReqAckPlayerChat_EGameChatType_EGameChatType_MAX;
  static const int EGameChatType_ARRAYSIZE =
    ReqAckPlayerChat_EGameChatType_EGameChatType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EGameChatType_descriptor() {
    return ReqAckPlayerChat_EGameChatType_descriptor();
  }
  static inline const ::std::string& EGameChatType_Name(EGameChatType value) {
    return ReqAckPlayerChat_EGameChatType_Name(value);
  }
  static inline bool EGameChatType_Parse(const ::std::string& name,
      EGameChatType* value) {
    return ReqAckPlayerChat_EGameChatType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int64 chat_id = 1;
  inline bool has_chat_id() const;
  inline void clear_chat_id();
  static const int kChatIdFieldNumber = 1;
  inline ::google::protobuf::int64 chat_id() const;
  inline void set_chat_id(::google::protobuf::int64 value);

  // required .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
  inline bool has_chat_type() const;
  inline void clear_chat_type();
  static const int kChatTypeFieldNumber = 2;
  inline ::NFMsg::ReqAckPlayerChat_EGameChatType chat_type() const;
  inline void set_chat_type(::NFMsg::ReqAckPlayerChat_EGameChatType value);

  // required bytes chat_info = 3;
  inline bool has_chat_info() const;
  inline void clear_chat_info();
  static const int kChatInfoFieldNumber = 3;
  inline const ::std::string& chat_info() const;
  inline void set_chat_info(const ::std::string& value);
  inline void set_chat_info(const char* value);
  inline void set_chat_info(const void* value, size_t size);
  inline ::std::string* mutable_chat_info();
  inline ::std::string* release_chat_info();
  inline void set_allocated_chat_info(::std::string* chat_info);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckPlayerChat)
 private:
  inline void set_has_chat_id();
  inline void clear_has_chat_id();
  inline void set_has_chat_type();
  inline void clear_has_chat_type();
  inline void set_has_chat_info();
  inline void clear_has_chat_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 chat_id_;
  ::std::string* chat_info_;
  int chat_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckPlayerChat* default_instance_;
};
// -------------------------------------------------------------------

class ReqAckUseSkill : public ::google::protobuf::Message {
 public:
  ReqAckUseSkill();
  virtual ~ReqAckUseSkill();

  ReqAckUseSkill(const ReqAckUseSkill& from);

  inline ReqAckUseSkill& operator=(const ReqAckUseSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckUseSkill& default_instance();

  void Swap(ReqAckUseSkill* other);

  // implements Message ----------------------------------------------

  ReqAckUseSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckUseSkill& from);
  void MergeFrom(const ReqAckUseSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes skill_id = 1;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 1;
  inline const ::std::string& skill_id() const;
  inline void set_skill_id(const ::std::string& value);
  inline void set_skill_id(const char* value);
  inline void set_skill_id(const void* value, size_t size);
  inline ::std::string* mutable_skill_id();
  inline ::std::string* release_skill_id();
  inline void set_allocated_skill_id(::std::string* skill_id);

  // repeated int64 effect_ident = 2;
  inline int effect_ident_size() const;
  inline void clear_effect_ident();
  static const int kEffectIdentFieldNumber = 2;
  inline ::google::protobuf::int64 effect_ident(int index) const;
  inline void set_effect_ident(int index, ::google::protobuf::int64 value);
  inline void add_effect_ident(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      effect_ident() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_effect_ident();

  // repeated int32 effect_value = 3;
  inline int effect_value_size() const;
  inline void clear_effect_value();
  static const int kEffectValueFieldNumber = 3;
  inline ::google::protobuf::int32 effect_value(int index) const;
  inline void set_effect_value(int index, ::google::protobuf::int32 value);
  inline void add_effect_value(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      effect_value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_effect_value();

  // repeated int32 effect_rlt = 4;
  inline int effect_rlt_size() const;
  inline void clear_effect_rlt();
  static const int kEffectRltFieldNumber = 4;
  inline ::google::protobuf::int32 effect_rlt(int index) const;
  inline void set_effect_rlt(int index, ::google::protobuf::int32 value);
  inline void add_effect_rlt(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      effect_rlt() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_effect_rlt();

  // optional bytes key_value = 5;
  inline bool has_key_value() const;
  inline void clear_key_value();
  static const int kKeyValueFieldNumber = 5;
  inline const ::std::string& key_value() const;
  inline void set_key_value(const ::std::string& value);
  inline void set_key_value(const char* value);
  inline void set_key_value(const void* value, size_t size);
  inline ::std::string* mutable_key_value();
  inline ::std::string* release_key_value();
  inline void set_allocated_key_value(::std::string* key_value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckUseSkill)
 private:
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_key_value();
  inline void clear_has_key_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* skill_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > effect_ident_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > effect_value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > effect_rlt_;
  ::std::string* key_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckUseSkill* default_instance_;
};
// -------------------------------------------------------------------

class ReqAckUseItem : public ::google::protobuf::Message {
 public:
  ReqAckUseItem();
  virtual ~ReqAckUseItem();

  ReqAckUseItem(const ReqAckUseItem& from);

  inline ReqAckUseItem& operator=(const ReqAckUseItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckUseItem& default_instance();

  void Swap(ReqAckUseItem* other);

  // implements Message ----------------------------------------------

  ReqAckUseItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckUseItem& from);
  void MergeFrom(const ReqAckUseItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 row = 1;
  inline bool has_row() const;
  inline void clear_row();
  static const int kRowFieldNumber = 1;
  inline ::google::protobuf::int32 row() const;
  inline void set_row(::google::protobuf::int32 value);

  // required int64 item_guid = 2;
  inline bool has_item_guid() const;
  inline void clear_item_guid();
  static const int kItemGuidFieldNumber = 2;
  inline ::google::protobuf::int64 item_guid() const;
  inline void set_item_guid(::google::protobuf::int64 value);

  // repeated int64 effect_ident = 3;
  inline int effect_ident_size() const;
  inline void clear_effect_ident();
  static const int kEffectIdentFieldNumber = 3;
  inline ::google::protobuf::int64 effect_ident(int index) const;
  inline void set_effect_ident(int index, ::google::protobuf::int64 value);
  inline void add_effect_ident(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      effect_ident() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_effect_ident();

  // repeated int32 effect_value = 4;
  inline int effect_value_size() const;
  inline void clear_effect_value();
  static const int kEffectValueFieldNumber = 4;
  inline ::google::protobuf::int32 effect_value(int index) const;
  inline void set_effect_value(int index, ::google::protobuf::int32 value);
  inline void add_effect_value(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      effect_value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_effect_value();

  // repeated int32 effect_rlt = 5;
  inline int effect_rlt_size() const;
  inline void clear_effect_rlt();
  static const int kEffectRltFieldNumber = 5;
  inline ::google::protobuf::int32 effect_rlt(int index) const;
  inline void set_effect_rlt(int index, ::google::protobuf::int32 value);
  inline void add_effect_rlt(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      effect_rlt() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_effect_rlt();

  // optional bytes key_value = 6;
  inline bool has_key_value() const;
  inline void clear_key_value();
  static const int kKeyValueFieldNumber = 6;
  inline const ::std::string& key_value() const;
  inline void set_key_value(const ::std::string& value);
  inline void set_key_value(const char* value);
  inline void set_key_value(const void* value, size_t size);
  inline ::std::string* mutable_key_value();
  inline ::std::string* release_key_value();
  inline void set_allocated_key_value(::std::string* key_value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckUseItem)
 private:
  inline void set_has_row();
  inline void clear_has_row();
  inline void set_has_item_guid();
  inline void clear_has_item_guid();
  inline void set_has_key_value();
  inline void clear_has_key_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 item_guid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > effect_ident_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > effect_value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > effect_rlt_;
  ::std::string* key_value_;
  ::google::protobuf::int32 row_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckUseItem* default_instance_;
};
// -------------------------------------------------------------------

class ReqAckSwapScene : public ::google::protobuf::Message {
 public:
  ReqAckSwapScene();
  virtual ~ReqAckSwapScene();

  ReqAckSwapScene(const ReqAckSwapScene& from);

  inline ReqAckSwapScene& operator=(const ReqAckSwapScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckSwapScene& default_instance();

  void Swap(ReqAckSwapScene* other);

  // implements Message ----------------------------------------------

  ReqAckSwapScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckSwapScene& from);
  void MergeFrom(const ReqAckSwapScene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReqAckSwapScene_EGameSwapType EGameSwapType;
  static const EGameSwapType EGST_NARMAL = ReqAckSwapScene_EGameSwapType_EGST_NARMAL;
  static const EGameSwapType EGST_CLONE = ReqAckSwapScene_EGameSwapType_EGST_CLONE;
  static const EGameSwapType EGST_ARENA = ReqAckSwapScene_EGameSwapType_EGST_ARENA;
  static const EGameSwapType EGST_MIRROR = ReqAckSwapScene_EGameSwapType_EGST_MIRROR;
  static inline bool EGameSwapType_IsValid(int value) {
    return ReqAckSwapScene_EGameSwapType_IsValid(value);
  }
  static const EGameSwapType EGameSwapType_MIN =
    ReqAckSwapScene_EGameSwapType_EGameSwapType_MIN;
  static const EGameSwapType EGameSwapType_MAX =
    ReqAckSwapScene_EGameSwapType_EGameSwapType_MAX;
  static const int EGameSwapType_ARRAYSIZE =
    ReqAckSwapScene_EGameSwapType_EGameSwapType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EGameSwapType_descriptor() {
    return ReqAckSwapScene_EGameSwapType_descriptor();
  }
  static inline const ::std::string& EGameSwapType_Name(EGameSwapType value) {
    return ReqAckSwapScene_EGameSwapType_Name(value);
  }
  static inline bool EGameSwapType_Parse(const ::std::string& name,
      EGameSwapType* value) {
    return ReqAckSwapScene_EGameSwapType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .NFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
  inline bool has_transfer_type() const;
  inline void clear_transfer_type();
  static const int kTransferTypeFieldNumber = 1;
  inline ::NFMsg::ReqAckSwapScene_EGameSwapType transfer_type() const;
  inline void set_transfer_type(::NFMsg::ReqAckSwapScene_EGameSwapType value);

  // required int32 scene_id = 2;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);

  // required int32 line_id = 3;
  inline bool has_line_id() const;
  inline void clear_line_id();
  static const int kLineIdFieldNumber = 3;
  inline ::google::protobuf::int32 line_id() const;
  inline void set_line_id(::google::protobuf::int32 value);

  // optional float x = 4;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 4;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 5;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 5;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 6;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 6;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckSwapScene)
 private:
  inline void set_has_transfer_type();
  inline void clear_has_transfer_type();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_line_id();
  inline void clear_has_line_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int transfer_type_;
  ::google::protobuf::int32 scene_id_;
  ::google::protobuf::int32 line_id_;
  float x_;
  float y_;
  float z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckSwapScene* default_instance_;
};
// -------------------------------------------------------------------

class ReqSellItem : public ::google::protobuf::Message {
 public:
  ReqSellItem();
  virtual ~ReqSellItem();

  ReqSellItem(const ReqSellItem& from);

  inline ReqSellItem& operator=(const ReqSellItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSellItem& default_instance();

  void Swap(ReqSellItem* other);

  // implements Message ----------------------------------------------

  ReqSellItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqSellItem& from);
  void MergeFrom(const ReqSellItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 item_guid = 1;
  inline bool has_item_guid() const;
  inline void clear_item_guid();
  static const int kItemGuidFieldNumber = 1;
  inline ::google::protobuf::int64 item_guid() const;
  inline void set_item_guid(::google::protobuf::int64 value);

  // required int64 item_count = 2;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 2;
  inline ::google::protobuf::int64 item_count() const;
  inline void set_item_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqSellItem)
 private:
  inline void set_has_item_guid();
  inline void clear_has_item_guid();
  inline void set_has_item_count();
  inline void clear_has_item_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 item_guid_;
  ::google::protobuf::int64 item_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqSellItem* default_instance_;
};
// -------------------------------------------------------------------

class ReqSplitItem : public ::google::protobuf::Message {
 public:
  ReqSplitItem();
  virtual ~ReqSplitItem();

  ReqSplitItem(const ReqSplitItem& from);

  inline ReqSplitItem& operator=(const ReqSplitItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSplitItem& default_instance();

  void Swap(ReqSplitItem* other);

  // implements Message ----------------------------------------------

  ReqSplitItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqSplitItem& from);
  void MergeFrom(const ReqSplitItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 item_guid = 1;
  inline bool has_item_guid() const;
  inline void clear_item_guid();
  static const int kItemGuidFieldNumber = 1;
  inline ::google::protobuf::int64 item_guid() const;
  inline void set_item_guid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqSplitItem)
 private:
  inline void set_has_item_guid();
  inline void clear_has_item_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 item_guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqSplitItem* default_instance_;
};
// -------------------------------------------------------------------

class ReqProduceItem : public ::google::protobuf::Message {
 public:
  ReqProduceItem();
  virtual ~ReqProduceItem();

  ReqProduceItem(const ReqProduceItem& from);

  inline ReqProduceItem& operator=(const ReqProduceItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqProduceItem& default_instance();

  void Swap(ReqProduceItem* other);

  // implements Message ----------------------------------------------

  ReqProduceItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqProduceItem& from);
  void MergeFrom(const ReqProduceItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline const ::std::string& item_id() const;
  inline void set_item_id(const ::std::string& value);
  inline void set_item_id(const char* value);
  inline void set_item_id(const void* value, size_t size);
  inline ::std::string* mutable_item_id();
  inline ::std::string* release_item_id();
  inline void set_allocated_item_id(::std::string* item_id);

  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqProduceItem)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* item_id_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqProduceItem* default_instance_;
};
// -------------------------------------------------------------------

class ReqPickDropItem : public ::google::protobuf::Message {
 public:
  ReqPickDropItem();
  virtual ~ReqPickDropItem();

  ReqPickDropItem(const ReqPickDropItem& from);

  inline ReqPickDropItem& operator=(const ReqPickDropItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqPickDropItem& default_instance();

  void Swap(ReqPickDropItem* other);

  // implements Message ----------------------------------------------

  ReqPickDropItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqPickDropItem& from);
  void MergeFrom(const ReqPickDropItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 npc_guid = 1;
  inline bool has_npc_guid() const;
  inline void clear_npc_guid();
  static const int kNpcGuidFieldNumber = 1;
  inline ::google::protobuf::int64 npc_guid() const;
  inline void set_npc_guid(::google::protobuf::int64 value);

  // required int64 item_guid = 2;
  inline bool has_item_guid() const;
  inline void clear_item_guid();
  static const int kItemGuidFieldNumber = 2;
  inline ::google::protobuf::int64 item_guid() const;
  inline void set_item_guid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqPickDropItem)
 private:
  inline void set_has_npc_guid();
  inline void clear_has_npc_guid();
  inline void set_has_item_guid();
  inline void clear_has_item_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 npc_guid_;
  ::google::protobuf::int64 item_guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqPickDropItem* default_instance_;
};
// -------------------------------------------------------------------

class ReqAcceptTask : public ::google::protobuf::Message {
 public:
  ReqAcceptTask();
  virtual ~ReqAcceptTask();

  ReqAcceptTask(const ReqAcceptTask& from);

  inline ReqAcceptTask& operator=(const ReqAcceptTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAcceptTask& default_instance();

  void Swap(ReqAcceptTask* other);

  // implements Message ----------------------------------------------

  ReqAcceptTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAcceptTask& from);
  void MergeFrom(const ReqAcceptTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline const ::std::string& task_id() const;
  inline void set_task_id(const ::std::string& value);
  inline void set_task_id(const char* value);
  inline void set_task_id(const void* value, size_t size);
  inline ::std::string* mutable_task_id();
  inline ::std::string* release_task_id();
  inline void set_allocated_task_id(::std::string* task_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAcceptTask)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* task_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAcceptTask* default_instance_;
};
// -------------------------------------------------------------------

class ReqPullDownTask : public ::google::protobuf::Message {
 public:
  ReqPullDownTask();
  virtual ~ReqPullDownTask();

  ReqPullDownTask(const ReqPullDownTask& from);

  inline ReqPullDownTask& operator=(const ReqPullDownTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqPullDownTask& default_instance();

  void Swap(ReqPullDownTask* other);

  // implements Message ----------------------------------------------

  ReqPullDownTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqPullDownTask& from);
  void MergeFrom(const ReqPullDownTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline const ::std::string& task_id() const;
  inline void set_task_id(const ::std::string& value);
  inline void set_task_id(const char* value);
  inline void set_task_id(const void* value, size_t size);
  inline ::std::string* mutable_task_id();
  inline ::std::string* release_task_id();
  inline void set_allocated_task_id(::std::string* task_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqPullDownTask)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* task_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqPullDownTask* default_instance_;
};
// -------------------------------------------------------------------

class CloneCustomItem : public ::google::protobuf::Message {
 public:
  CloneCustomItem();
  virtual ~CloneCustomItem();

  CloneCustomItem(const CloneCustomItem& from);

  inline CloneCustomItem& operator=(const CloneCustomItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloneCustomItem& default_instance();

  void Swap(CloneCustomItem* other);

  // implements Message ----------------------------------------------

  CloneCustomItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloneCustomItem& from);
  void MergeFrom(const CloneCustomItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 object_guid = 1;
  inline bool has_object_guid() const;
  inline void clear_object_guid();
  static const int kObjectGuidFieldNumber = 1;
  inline ::google::protobuf::int64 object_guid() const;
  inline void set_object_guid(::google::protobuf::int64 value);

  // repeated bytes item_id = 2;
  inline int item_id_size() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline const ::std::string& item_id(int index) const;
  inline ::std::string* mutable_item_id(int index);
  inline void set_item_id(int index, const ::std::string& value);
  inline void set_item_id(int index, const char* value);
  inline void set_item_id(int index, const void* value, size_t size);
  inline ::std::string* add_item_id();
  inline void add_item_id(const ::std::string& value);
  inline void add_item_id(const char* value);
  inline void add_item_id(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& item_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_item_id();

  // @@protoc_insertion_point(class_scope:NFMsg.CloneCustomItem)
 private:
  inline void set_has_object_guid();
  inline void clear_has_object_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 object_guid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> item_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static CloneCustomItem* default_instance_;
};
// -------------------------------------------------------------------

class ReqPullDownCustoms : public ::google::protobuf::Message {
 public:
  ReqPullDownCustoms();
  virtual ~ReqPullDownCustoms();

  ReqPullDownCustoms(const ReqPullDownCustoms& from);

  inline ReqPullDownCustoms& operator=(const ReqPullDownCustoms& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqPullDownCustoms& default_instance();

  void Swap(ReqPullDownCustoms* other);

  // implements Message ----------------------------------------------

  ReqPullDownCustoms* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqPullDownCustoms& from);
  void MergeFrom(const ReqPullDownCustoms& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReqPullDownCustoms_EGameCloneResult EGameCloneResult;
  static const EGameCloneResult EGCR_SUCCESS = ReqPullDownCustoms_EGameCloneResult_EGCR_SUCCESS;
  static const EGameCloneResult EGCR_FAILED = ReqPullDownCustoms_EGameCloneResult_EGCR_FAILED;
  static inline bool EGameCloneResult_IsValid(int value) {
    return ReqPullDownCustoms_EGameCloneResult_IsValid(value);
  }
  static const EGameCloneResult EGameCloneResult_MIN =
    ReqPullDownCustoms_EGameCloneResult_EGameCloneResult_MIN;
  static const EGameCloneResult EGameCloneResult_MAX =
    ReqPullDownCustoms_EGameCloneResult_EGameCloneResult_MAX;
  static const int EGameCloneResult_ARRAYSIZE =
    ReqPullDownCustoms_EGameCloneResult_EGameCloneResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EGameCloneResult_descriptor() {
    return ReqPullDownCustoms_EGameCloneResult_descriptor();
  }
  static inline const ::std::string& EGameCloneResult_Name(EGameCloneResult value) {
    return ReqPullDownCustoms_EGameCloneResult_Name(value);
  }
  static inline bool EGameCloneResult_Parse(const ::std::string& name,
      EGameCloneResult* value) {
    return ReqPullDownCustoms_EGameCloneResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .NFMsg.ReqPullDownCustoms.EGameCloneResult result_value = 1;
  inline bool has_result_value() const;
  inline void clear_result_value();
  static const int kResultValueFieldNumber = 1;
  inline ::NFMsg::ReqPullDownCustoms_EGameCloneResult result_value() const;
  inline void set_result_value(::NFMsg::ReqPullDownCustoms_EGameCloneResult value);

  // repeated .NFMsg.CloneCustomItem item_list = 2;
  inline int item_list_size() const;
  inline void clear_item_list();
  static const int kItemListFieldNumber = 2;
  inline const ::NFMsg::CloneCustomItem& item_list(int index) const;
  inline ::NFMsg::CloneCustomItem* mutable_item_list(int index);
  inline ::NFMsg::CloneCustomItem* add_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::CloneCustomItem >&
      item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::NFMsg::CloneCustomItem >*
      mutable_item_list();

  // @@protoc_insertion_point(class_scope:NFMsg.ReqPullDownCustoms)
 private:
  inline void set_has_result_value();
  inline void clear_has_result_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::NFMsg::CloneCustomItem > item_list_;
  int result_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqPullDownCustoms* default_instance_;
};
// -------------------------------------------------------------------

class PlayerEntryInfo : public ::google::protobuf::Message {
 public:
  PlayerEntryInfo();
  virtual ~PlayerEntryInfo();

  PlayerEntryInfo(const PlayerEntryInfo& from);

  inline PlayerEntryInfo& operator=(const PlayerEntryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerEntryInfo& default_instance();

  void Swap(PlayerEntryInfo* other);

  // implements Message ----------------------------------------------

  PlayerEntryInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerEntryInfo& from);
  void MergeFrom(const PlayerEntryInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 object_guid = 1;
  inline bool has_object_guid() const;
  inline void clear_object_guid();
  static const int kObjectGuidFieldNumber = 1;
  inline ::google::protobuf::int64 object_guid() const;
  inline void set_object_guid(::google::protobuf::int64 value);

  // required int32 char_type = 2;
  inline bool has_char_type() const;
  inline void clear_char_type();
  static const int kCharTypeFieldNumber = 2;
  inline ::google::protobuf::int32 char_type() const;
  inline void set_char_type(::google::protobuf::int32 value);

  // required float x = 3;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 4;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  inline float y() const;
  inline void set_y(float value);

  // required float z = 5;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 5;
  inline float z() const;
  inline void set_z(float value);

  // required int32 career_type = 6;
  inline bool has_career_type() const;
  inline void clear_career_type();
  static const int kCareerTypeFieldNumber = 6;
  inline ::google::protobuf::int32 career_type() const;
  inline void set_career_type(::google::protobuf::int32 value);

  // required int32 player_state = 7;
  inline bool has_player_state() const;
  inline void clear_player_state();
  static const int kPlayerStateFieldNumber = 7;
  inline ::google::protobuf::int32 player_state() const;
  inline void set_player_state(::google::protobuf::int32 value);

  // required bytes config_id = 8;
  inline bool has_config_id() const;
  inline void clear_config_id();
  static const int kConfigIdFieldNumber = 8;
  inline const ::std::string& config_id() const;
  inline void set_config_id(const ::std::string& value);
  inline void set_config_id(const char* value);
  inline void set_config_id(const void* value, size_t size);
  inline ::std::string* mutable_config_id();
  inline ::std::string* release_config_id();
  inline void set_allocated_config_id(::std::string* config_id);

  // optional bytes class_name = 9;
  inline bool has_class_name() const;
  inline void clear_class_name();
  static const int kClassNameFieldNumber = 9;
  inline const ::std::string& class_name() const;
  inline void set_class_name(const ::std::string& value);
  inline void set_class_name(const char* value);
  inline void set_class_name(const void* value, size_t size);
  inline ::std::string* mutable_class_name();
  inline ::std::string* release_class_name();
  inline void set_allocated_class_name(::std::string* class_name);

  // optional int32 scene_id = 10;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 10;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.PlayerEntryInfo)
 private:
  inline void set_has_object_guid();
  inline void clear_has_object_guid();
  inline void set_has_char_type();
  inline void clear_has_char_type();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_career_type();
  inline void clear_has_career_type();
  inline void set_has_player_state();
  inline void clear_has_player_state();
  inline void set_has_config_id();
  inline void clear_has_config_id();
  inline void set_has_class_name();
  inline void clear_has_class_name();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 object_guid_;
  ::google::protobuf::int32 char_type_;
  float x_;
  float y_;
  float z_;
  ::google::protobuf::int32 career_type_;
  ::google::protobuf::int32 player_state_;
  ::std::string* config_id_;
  ::std::string* class_name_;
  ::google::protobuf::int32 scene_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static PlayerEntryInfo* default_instance_;
};
// -------------------------------------------------------------------

class AckPlayerEntryList : public ::google::protobuf::Message {
 public:
  AckPlayerEntryList();
  virtual ~AckPlayerEntryList();

  AckPlayerEntryList(const AckPlayerEntryList& from);

  inline AckPlayerEntryList& operator=(const AckPlayerEntryList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckPlayerEntryList& default_instance();

  void Swap(AckPlayerEntryList* other);

  // implements Message ----------------------------------------------

  AckPlayerEntryList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckPlayerEntryList& from);
  void MergeFrom(const AckPlayerEntryList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.PlayerEntryInfo object_list = 1;
  inline int object_list_size() const;
  inline void clear_object_list();
  static const int kObjectListFieldNumber = 1;
  inline const ::NFMsg::PlayerEntryInfo& object_list(int index) const;
  inline ::NFMsg::PlayerEntryInfo* mutable_object_list(int index);
  inline ::NFMsg::PlayerEntryInfo* add_object_list();
  inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::PlayerEntryInfo >&
      object_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::NFMsg::PlayerEntryInfo >*
      mutable_object_list();

  // @@protoc_insertion_point(class_scope:NFMsg.AckPlayerEntryList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::NFMsg::PlayerEntryInfo > object_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static AckPlayerEntryList* default_instance_;
};
// -------------------------------------------------------------------

class AckPlayerLeaveList : public ::google::protobuf::Message {
 public:
  AckPlayerLeaveList();
  virtual ~AckPlayerLeaveList();

  AckPlayerLeaveList(const AckPlayerLeaveList& from);

  inline AckPlayerLeaveList& operator=(const AckPlayerLeaveList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckPlayerLeaveList& default_instance();

  void Swap(AckPlayerLeaveList* other);

  // implements Message ----------------------------------------------

  AckPlayerLeaveList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckPlayerLeaveList& from);
  void MergeFrom(const AckPlayerLeaveList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 object_list = 1;
  inline int object_list_size() const;
  inline void clear_object_list();
  static const int kObjectListFieldNumber = 1;
  inline ::google::protobuf::int64 object_list(int index) const;
  inline void set_object_list(int index, ::google::protobuf::int64 value);
  inline void add_object_list(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      object_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_object_list();

  // @@protoc_insertion_point(class_scope:NFMsg.AckPlayerLeaveList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > object_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_NFMsgShare_2eproto();
  friend void protobuf_AssignDesc_NFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_NFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static AckPlayerLeaveList* default_instance_;
};
// ===================================================================


// ===================================================================

// ReqEnterGameServer

// required int32 server_id = 1;
inline bool ReqEnterGameServer::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqEnterGameServer::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqEnterGameServer::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqEnterGameServer::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 ReqEnterGameServer::server_id() const {
  return server_id_;
}
inline void ReqEnterGameServer::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional int32 gate_id = 2;
inline bool ReqEnterGameServer::has_gate_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqEnterGameServer::set_has_gate_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqEnterGameServer::clear_has_gate_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqEnterGameServer::clear_gate_id() {
  gate_id_ = 0;
  clear_has_gate_id();
}
inline ::google::protobuf::int32 ReqEnterGameServer::gate_id() const {
  return gate_id_;
}
inline void ReqEnterGameServer::set_gate_id(::google::protobuf::int32 value) {
  set_has_gate_id();
  gate_id_ = value;
}

// -------------------------------------------------------------------

// ReqAckPlayerMove

// optional int64 mover = 1;
inline bool ReqAckPlayerMove::has_mover() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckPlayerMove::set_has_mover() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckPlayerMove::clear_has_mover() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckPlayerMove::clear_mover() {
  mover_ = GOOGLE_LONGLONG(0);
  clear_has_mover();
}
inline ::google::protobuf::int64 ReqAckPlayerMove::mover() const {
  return mover_;
}
inline void ReqAckPlayerMove::set_mover(::google::protobuf::int64 value) {
  set_has_mover();
  mover_ = value;
}

// required int32 moveType = 2;
inline bool ReqAckPlayerMove::has_movetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckPlayerMove::set_has_movetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckPlayerMove::clear_has_movetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckPlayerMove::clear_movetype() {
  movetype_ = 0;
  clear_has_movetype();
}
inline ::google::protobuf::int32 ReqAckPlayerMove::movetype() const {
  return movetype_;
}
inline void ReqAckPlayerMove::set_movetype(::google::protobuf::int32 value) {
  set_has_movetype();
  movetype_ = value;
}

// required float target_x = 3;
inline bool ReqAckPlayerMove::has_target_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqAckPlayerMove::set_has_target_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqAckPlayerMove::clear_has_target_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqAckPlayerMove::clear_target_x() {
  target_x_ = 0;
  clear_has_target_x();
}
inline float ReqAckPlayerMove::target_x() const {
  return target_x_;
}
inline void ReqAckPlayerMove::set_target_x(float value) {
  set_has_target_x();
  target_x_ = value;
}

// optional float target_y = 4;
inline bool ReqAckPlayerMove::has_target_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqAckPlayerMove::set_has_target_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqAckPlayerMove::clear_has_target_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqAckPlayerMove::clear_target_y() {
  target_y_ = 0;
  clear_has_target_y();
}
inline float ReqAckPlayerMove::target_y() const {
  return target_y_;
}
inline void ReqAckPlayerMove::set_target_y(float value) {
  set_has_target_y();
  target_y_ = value;
}

// required float target_z = 5;
inline bool ReqAckPlayerMove::has_target_z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqAckPlayerMove::set_has_target_z() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqAckPlayerMove::clear_has_target_z() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqAckPlayerMove::clear_target_z() {
  target_z_ = 0;
  clear_has_target_z();
}
inline float ReqAckPlayerMove::target_z() const {
  return target_z_;
}
inline void ReqAckPlayerMove::set_target_z(float value) {
  set_has_target_z();
  target_z_ = value;
}

// required float source_x = 6;
inline bool ReqAckPlayerMove::has_source_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqAckPlayerMove::set_has_source_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqAckPlayerMove::clear_has_source_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqAckPlayerMove::clear_source_x() {
  source_x_ = 0;
  clear_has_source_x();
}
inline float ReqAckPlayerMove::source_x() const {
  return source_x_;
}
inline void ReqAckPlayerMove::set_source_x(float value) {
  set_has_source_x();
  source_x_ = value;
}

// optional float source_y = 7;
inline bool ReqAckPlayerMove::has_source_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReqAckPlayerMove::set_has_source_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReqAckPlayerMove::clear_has_source_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReqAckPlayerMove::clear_source_y() {
  source_y_ = 0;
  clear_has_source_y();
}
inline float ReqAckPlayerMove::source_y() const {
  return source_y_;
}
inline void ReqAckPlayerMove::set_source_y(float value) {
  set_has_source_y();
  source_y_ = value;
}

// required float source_z = 8;
inline bool ReqAckPlayerMove::has_source_z() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReqAckPlayerMove::set_has_source_z() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReqAckPlayerMove::clear_has_source_z() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReqAckPlayerMove::clear_source_z() {
  source_z_ = 0;
  clear_has_source_z();
}
inline float ReqAckPlayerMove::source_z() const {
  return source_z_;
}
inline void ReqAckPlayerMove::set_source_z(float value) {
  set_has_source_z();
  source_z_ = value;
}

// -------------------------------------------------------------------

// ReqAckPlayerChat

// required int64 chat_id = 1;
inline bool ReqAckPlayerChat::has_chat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckPlayerChat::set_has_chat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckPlayerChat::clear_has_chat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckPlayerChat::clear_chat_id() {
  chat_id_ = GOOGLE_LONGLONG(0);
  clear_has_chat_id();
}
inline ::google::protobuf::int64 ReqAckPlayerChat::chat_id() const {
  return chat_id_;
}
inline void ReqAckPlayerChat::set_chat_id(::google::protobuf::int64 value) {
  set_has_chat_id();
  chat_id_ = value;
}

// required .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
inline bool ReqAckPlayerChat::has_chat_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckPlayerChat::set_has_chat_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckPlayerChat::clear_has_chat_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckPlayerChat::clear_chat_type() {
  chat_type_ = 0;
  clear_has_chat_type();
}
inline ::NFMsg::ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::chat_type() const {
  return static_cast< ::NFMsg::ReqAckPlayerChat_EGameChatType >(chat_type_);
}
inline void ReqAckPlayerChat::set_chat_type(::NFMsg::ReqAckPlayerChat_EGameChatType value) {
  assert(::NFMsg::ReqAckPlayerChat_EGameChatType_IsValid(value));
  set_has_chat_type();
  chat_type_ = value;
}

// required bytes chat_info = 3;
inline bool ReqAckPlayerChat::has_chat_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqAckPlayerChat::set_has_chat_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqAckPlayerChat::clear_has_chat_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqAckPlayerChat::clear_chat_info() {
  if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
    chat_info_->clear();
  }
  clear_has_chat_info();
}
inline const ::std::string& ReqAckPlayerChat::chat_info() const {
  return *chat_info_;
}
inline void ReqAckPlayerChat::set_chat_info(const ::std::string& value) {
  set_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    chat_info_ = new ::std::string;
  }
  chat_info_->assign(value);
}
inline void ReqAckPlayerChat::set_chat_info(const char* value) {
  set_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    chat_info_ = new ::std::string;
  }
  chat_info_->assign(value);
}
inline void ReqAckPlayerChat::set_chat_info(const void* value, size_t size) {
  set_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    chat_info_ = new ::std::string;
  }
  chat_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqAckPlayerChat::mutable_chat_info() {
  set_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    chat_info_ = new ::std::string;
  }
  return chat_info_;
}
inline ::std::string* ReqAckPlayerChat::release_chat_info() {
  clear_has_chat_info();
  if (chat_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chat_info_;
    chat_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReqAckPlayerChat::set_allocated_chat_info(::std::string* chat_info) {
  if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_info_;
  }
  if (chat_info) {
    set_has_chat_info();
    chat_info_ = chat_info;
  } else {
    clear_has_chat_info();
    chat_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ReqAckUseSkill

// required bytes skill_id = 1;
inline bool ReqAckUseSkill::has_skill_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckUseSkill::set_has_skill_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckUseSkill::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckUseSkill::clear_skill_id() {
  if (skill_id_ != &::google::protobuf::internal::kEmptyString) {
    skill_id_->clear();
  }
  clear_has_skill_id();
}
inline const ::std::string& ReqAckUseSkill::skill_id() const {
  return *skill_id_;
}
inline void ReqAckUseSkill::set_skill_id(const ::std::string& value) {
  set_has_skill_id();
  if (skill_id_ == &::google::protobuf::internal::kEmptyString) {
    skill_id_ = new ::std::string;
  }
  skill_id_->assign(value);
}
inline void ReqAckUseSkill::set_skill_id(const char* value) {
  set_has_skill_id();
  if (skill_id_ == &::google::protobuf::internal::kEmptyString) {
    skill_id_ = new ::std::string;
  }
  skill_id_->assign(value);
}
inline void ReqAckUseSkill::set_skill_id(const void* value, size_t size) {
  set_has_skill_id();
  if (skill_id_ == &::google::protobuf::internal::kEmptyString) {
    skill_id_ = new ::std::string;
  }
  skill_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqAckUseSkill::mutable_skill_id() {
  set_has_skill_id();
  if (skill_id_ == &::google::protobuf::internal::kEmptyString) {
    skill_id_ = new ::std::string;
  }
  return skill_id_;
}
inline ::std::string* ReqAckUseSkill::release_skill_id() {
  clear_has_skill_id();
  if (skill_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = skill_id_;
    skill_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReqAckUseSkill::set_allocated_skill_id(::std::string* skill_id) {
  if (skill_id_ != &::google::protobuf::internal::kEmptyString) {
    delete skill_id_;
  }
  if (skill_id) {
    set_has_skill_id();
    skill_id_ = skill_id;
  } else {
    clear_has_skill_id();
    skill_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int64 effect_ident = 2;
inline int ReqAckUseSkill::effect_ident_size() const {
  return effect_ident_.size();
}
inline void ReqAckUseSkill::clear_effect_ident() {
  effect_ident_.Clear();
}
inline ::google::protobuf::int64 ReqAckUseSkill::effect_ident(int index) const {
  return effect_ident_.Get(index);
}
inline void ReqAckUseSkill::set_effect_ident(int index, ::google::protobuf::int64 value) {
  effect_ident_.Set(index, value);
}
inline void ReqAckUseSkill::add_effect_ident(::google::protobuf::int64 value) {
  effect_ident_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ReqAckUseSkill::effect_ident() const {
  return effect_ident_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ReqAckUseSkill::mutable_effect_ident() {
  return &effect_ident_;
}

// repeated int32 effect_value = 3;
inline int ReqAckUseSkill::effect_value_size() const {
  return effect_value_.size();
}
inline void ReqAckUseSkill::clear_effect_value() {
  effect_value_.Clear();
}
inline ::google::protobuf::int32 ReqAckUseSkill::effect_value(int index) const {
  return effect_value_.Get(index);
}
inline void ReqAckUseSkill::set_effect_value(int index, ::google::protobuf::int32 value) {
  effect_value_.Set(index, value);
}
inline void ReqAckUseSkill::add_effect_value(::google::protobuf::int32 value) {
  effect_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ReqAckUseSkill::effect_value() const {
  return effect_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ReqAckUseSkill::mutable_effect_value() {
  return &effect_value_;
}

// repeated int32 effect_rlt = 4;
inline int ReqAckUseSkill::effect_rlt_size() const {
  return effect_rlt_.size();
}
inline void ReqAckUseSkill::clear_effect_rlt() {
  effect_rlt_.Clear();
}
inline ::google::protobuf::int32 ReqAckUseSkill::effect_rlt(int index) const {
  return effect_rlt_.Get(index);
}
inline void ReqAckUseSkill::set_effect_rlt(int index, ::google::protobuf::int32 value) {
  effect_rlt_.Set(index, value);
}
inline void ReqAckUseSkill::add_effect_rlt(::google::protobuf::int32 value) {
  effect_rlt_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ReqAckUseSkill::effect_rlt() const {
  return effect_rlt_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ReqAckUseSkill::mutable_effect_rlt() {
  return &effect_rlt_;
}

// optional bytes key_value = 5;
inline bool ReqAckUseSkill::has_key_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqAckUseSkill::set_has_key_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqAckUseSkill::clear_has_key_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqAckUseSkill::clear_key_value() {
  if (key_value_ != &::google::protobuf::internal::kEmptyString) {
    key_value_->clear();
  }
  clear_has_key_value();
}
inline const ::std::string& ReqAckUseSkill::key_value() const {
  return *key_value_;
}
inline void ReqAckUseSkill::set_key_value(const ::std::string& value) {
  set_has_key_value();
  if (key_value_ == &::google::protobuf::internal::kEmptyString) {
    key_value_ = new ::std::string;
  }
  key_value_->assign(value);
}
inline void ReqAckUseSkill::set_key_value(const char* value) {
  set_has_key_value();
  if (key_value_ == &::google::protobuf::internal::kEmptyString) {
    key_value_ = new ::std::string;
  }
  key_value_->assign(value);
}
inline void ReqAckUseSkill::set_key_value(const void* value, size_t size) {
  set_has_key_value();
  if (key_value_ == &::google::protobuf::internal::kEmptyString) {
    key_value_ = new ::std::string;
  }
  key_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqAckUseSkill::mutable_key_value() {
  set_has_key_value();
  if (key_value_ == &::google::protobuf::internal::kEmptyString) {
    key_value_ = new ::std::string;
  }
  return key_value_;
}
inline ::std::string* ReqAckUseSkill::release_key_value() {
  clear_has_key_value();
  if (key_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_value_;
    key_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReqAckUseSkill::set_allocated_key_value(::std::string* key_value) {
  if (key_value_ != &::google::protobuf::internal::kEmptyString) {
    delete key_value_;
  }
  if (key_value) {
    set_has_key_value();
    key_value_ = key_value;
  } else {
    clear_has_key_value();
    key_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ReqAckUseItem

// required int32 row = 1;
inline bool ReqAckUseItem::has_row() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckUseItem::set_has_row() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckUseItem::clear_has_row() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckUseItem::clear_row() {
  row_ = 0;
  clear_has_row();
}
inline ::google::protobuf::int32 ReqAckUseItem::row() const {
  return row_;
}
inline void ReqAckUseItem::set_row(::google::protobuf::int32 value) {
  set_has_row();
  row_ = value;
}

// required int64 item_guid = 2;
inline bool ReqAckUseItem::has_item_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckUseItem::set_has_item_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckUseItem::clear_has_item_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckUseItem::clear_item_guid() {
  item_guid_ = GOOGLE_LONGLONG(0);
  clear_has_item_guid();
}
inline ::google::protobuf::int64 ReqAckUseItem::item_guid() const {
  return item_guid_;
}
inline void ReqAckUseItem::set_item_guid(::google::protobuf::int64 value) {
  set_has_item_guid();
  item_guid_ = value;
}

// repeated int64 effect_ident = 3;
inline int ReqAckUseItem::effect_ident_size() const {
  return effect_ident_.size();
}
inline void ReqAckUseItem::clear_effect_ident() {
  effect_ident_.Clear();
}
inline ::google::protobuf::int64 ReqAckUseItem::effect_ident(int index) const {
  return effect_ident_.Get(index);
}
inline void ReqAckUseItem::set_effect_ident(int index, ::google::protobuf::int64 value) {
  effect_ident_.Set(index, value);
}
inline void ReqAckUseItem::add_effect_ident(::google::protobuf::int64 value) {
  effect_ident_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ReqAckUseItem::effect_ident() const {
  return effect_ident_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ReqAckUseItem::mutable_effect_ident() {
  return &effect_ident_;
}

// repeated int32 effect_value = 4;
inline int ReqAckUseItem::effect_value_size() const {
  return effect_value_.size();
}
inline void ReqAckUseItem::clear_effect_value() {
  effect_value_.Clear();
}
inline ::google::protobuf::int32 ReqAckUseItem::effect_value(int index) const {
  return effect_value_.Get(index);
}
inline void ReqAckUseItem::set_effect_value(int index, ::google::protobuf::int32 value) {
  effect_value_.Set(index, value);
}
inline void ReqAckUseItem::add_effect_value(::google::protobuf::int32 value) {
  effect_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ReqAckUseItem::effect_value() const {
  return effect_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ReqAckUseItem::mutable_effect_value() {
  return &effect_value_;
}

// repeated int32 effect_rlt = 5;
inline int ReqAckUseItem::effect_rlt_size() const {
  return effect_rlt_.size();
}
inline void ReqAckUseItem::clear_effect_rlt() {
  effect_rlt_.Clear();
}
inline ::google::protobuf::int32 ReqAckUseItem::effect_rlt(int index) const {
  return effect_rlt_.Get(index);
}
inline void ReqAckUseItem::set_effect_rlt(int index, ::google::protobuf::int32 value) {
  effect_rlt_.Set(index, value);
}
inline void ReqAckUseItem::add_effect_rlt(::google::protobuf::int32 value) {
  effect_rlt_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ReqAckUseItem::effect_rlt() const {
  return effect_rlt_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ReqAckUseItem::mutable_effect_rlt() {
  return &effect_rlt_;
}

// optional bytes key_value = 6;
inline bool ReqAckUseItem::has_key_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqAckUseItem::set_has_key_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqAckUseItem::clear_has_key_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqAckUseItem::clear_key_value() {
  if (key_value_ != &::google::protobuf::internal::kEmptyString) {
    key_value_->clear();
  }
  clear_has_key_value();
}
inline const ::std::string& ReqAckUseItem::key_value() const {
  return *key_value_;
}
inline void ReqAckUseItem::set_key_value(const ::std::string& value) {
  set_has_key_value();
  if (key_value_ == &::google::protobuf::internal::kEmptyString) {
    key_value_ = new ::std::string;
  }
  key_value_->assign(value);
}
inline void ReqAckUseItem::set_key_value(const char* value) {
  set_has_key_value();
  if (key_value_ == &::google::protobuf::internal::kEmptyString) {
    key_value_ = new ::std::string;
  }
  key_value_->assign(value);
}
inline void ReqAckUseItem::set_key_value(const void* value, size_t size) {
  set_has_key_value();
  if (key_value_ == &::google::protobuf::internal::kEmptyString) {
    key_value_ = new ::std::string;
  }
  key_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqAckUseItem::mutable_key_value() {
  set_has_key_value();
  if (key_value_ == &::google::protobuf::internal::kEmptyString) {
    key_value_ = new ::std::string;
  }
  return key_value_;
}
inline ::std::string* ReqAckUseItem::release_key_value() {
  clear_has_key_value();
  if (key_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_value_;
    key_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReqAckUseItem::set_allocated_key_value(::std::string* key_value) {
  if (key_value_ != &::google::protobuf::internal::kEmptyString) {
    delete key_value_;
  }
  if (key_value) {
    set_has_key_value();
    key_value_ = key_value;
  } else {
    clear_has_key_value();
    key_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ReqAckSwapScene

// required .NFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
inline bool ReqAckSwapScene::has_transfer_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckSwapScene::set_has_transfer_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckSwapScene::clear_has_transfer_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckSwapScene::clear_transfer_type() {
  transfer_type_ = 0;
  clear_has_transfer_type();
}
inline ::NFMsg::ReqAckSwapScene_EGameSwapType ReqAckSwapScene::transfer_type() const {
  return static_cast< ::NFMsg::ReqAckSwapScene_EGameSwapType >(transfer_type_);
}
inline void ReqAckSwapScene::set_transfer_type(::NFMsg::ReqAckSwapScene_EGameSwapType value) {
  assert(::NFMsg::ReqAckSwapScene_EGameSwapType_IsValid(value));
  set_has_transfer_type();
  transfer_type_ = value;
}

// required int32 scene_id = 2;
inline bool ReqAckSwapScene::has_scene_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckSwapScene::set_has_scene_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckSwapScene::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckSwapScene::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 ReqAckSwapScene::scene_id() const {
  return scene_id_;
}
inline void ReqAckSwapScene::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// required int32 line_id = 3;
inline bool ReqAckSwapScene::has_line_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqAckSwapScene::set_has_line_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqAckSwapScene::clear_has_line_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqAckSwapScene::clear_line_id() {
  line_id_ = 0;
  clear_has_line_id();
}
inline ::google::protobuf::int32 ReqAckSwapScene::line_id() const {
  return line_id_;
}
inline void ReqAckSwapScene::set_line_id(::google::protobuf::int32 value) {
  set_has_line_id();
  line_id_ = value;
}

// optional float x = 4;
inline bool ReqAckSwapScene::has_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqAckSwapScene::set_has_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqAckSwapScene::clear_has_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqAckSwapScene::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float ReqAckSwapScene::x() const {
  return x_;
}
inline void ReqAckSwapScene::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 5;
inline bool ReqAckSwapScene::has_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqAckSwapScene::set_has_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqAckSwapScene::clear_has_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqAckSwapScene::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float ReqAckSwapScene::y() const {
  return y_;
}
inline void ReqAckSwapScene::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float z = 6;
inline bool ReqAckSwapScene::has_z() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqAckSwapScene::set_has_z() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqAckSwapScene::clear_has_z() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqAckSwapScene::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float ReqAckSwapScene::z() const {
  return z_;
}
inline void ReqAckSwapScene::set_z(float value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// ReqSellItem

// required int64 item_guid = 1;
inline bool ReqSellItem::has_item_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqSellItem::set_has_item_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqSellItem::clear_has_item_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqSellItem::clear_item_guid() {
  item_guid_ = GOOGLE_LONGLONG(0);
  clear_has_item_guid();
}
inline ::google::protobuf::int64 ReqSellItem::item_guid() const {
  return item_guid_;
}
inline void ReqSellItem::set_item_guid(::google::protobuf::int64 value) {
  set_has_item_guid();
  item_guid_ = value;
}

// required int64 item_count = 2;
inline bool ReqSellItem::has_item_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqSellItem::set_has_item_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqSellItem::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqSellItem::clear_item_count() {
  item_count_ = GOOGLE_LONGLONG(0);
  clear_has_item_count();
}
inline ::google::protobuf::int64 ReqSellItem::item_count() const {
  return item_count_;
}
inline void ReqSellItem::set_item_count(::google::protobuf::int64 value) {
  set_has_item_count();
  item_count_ = value;
}

// -------------------------------------------------------------------

// ReqSplitItem

// required int64 item_guid = 1;
inline bool ReqSplitItem::has_item_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqSplitItem::set_has_item_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqSplitItem::clear_has_item_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqSplitItem::clear_item_guid() {
  item_guid_ = GOOGLE_LONGLONG(0);
  clear_has_item_guid();
}
inline ::google::protobuf::int64 ReqSplitItem::item_guid() const {
  return item_guid_;
}
inline void ReqSplitItem::set_item_guid(::google::protobuf::int64 value) {
  set_has_item_guid();
  item_guid_ = value;
}

// -------------------------------------------------------------------

// ReqProduceItem

// required bytes item_id = 1;
inline bool ReqProduceItem::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqProduceItem::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqProduceItem::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqProduceItem::clear_item_id() {
  if (item_id_ != &::google::protobuf::internal::kEmptyString) {
    item_id_->clear();
  }
  clear_has_item_id();
}
inline const ::std::string& ReqProduceItem::item_id() const {
  return *item_id_;
}
inline void ReqProduceItem::set_item_id(const ::std::string& value) {
  set_has_item_id();
  if (item_id_ == &::google::protobuf::internal::kEmptyString) {
    item_id_ = new ::std::string;
  }
  item_id_->assign(value);
}
inline void ReqProduceItem::set_item_id(const char* value) {
  set_has_item_id();
  if (item_id_ == &::google::protobuf::internal::kEmptyString) {
    item_id_ = new ::std::string;
  }
  item_id_->assign(value);
}
inline void ReqProduceItem::set_item_id(const void* value, size_t size) {
  set_has_item_id();
  if (item_id_ == &::google::protobuf::internal::kEmptyString) {
    item_id_ = new ::std::string;
  }
  item_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqProduceItem::mutable_item_id() {
  set_has_item_id();
  if (item_id_ == &::google::protobuf::internal::kEmptyString) {
    item_id_ = new ::std::string;
  }
  return item_id_;
}
inline ::std::string* ReqProduceItem::release_item_id() {
  clear_has_item_id();
  if (item_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = item_id_;
    item_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReqProduceItem::set_allocated_item_id(::std::string* item_id) {
  if (item_id_ != &::google::protobuf::internal::kEmptyString) {
    delete item_id_;
  }
  if (item_id) {
    set_has_item_id();
    item_id_ = item_id;
  } else {
    clear_has_item_id();
    item_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 count = 2;
inline bool ReqProduceItem::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqProduceItem::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqProduceItem::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqProduceItem::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 ReqProduceItem::count() const {
  return count_;
}
inline void ReqProduceItem::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// ReqPickDropItem

// required int64 npc_guid = 1;
inline bool ReqPickDropItem::has_npc_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqPickDropItem::set_has_npc_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqPickDropItem::clear_has_npc_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqPickDropItem::clear_npc_guid() {
  npc_guid_ = GOOGLE_LONGLONG(0);
  clear_has_npc_guid();
}
inline ::google::protobuf::int64 ReqPickDropItem::npc_guid() const {
  return npc_guid_;
}
inline void ReqPickDropItem::set_npc_guid(::google::protobuf::int64 value) {
  set_has_npc_guid();
  npc_guid_ = value;
}

// required int64 item_guid = 2;
inline bool ReqPickDropItem::has_item_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqPickDropItem::set_has_item_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqPickDropItem::clear_has_item_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqPickDropItem::clear_item_guid() {
  item_guid_ = GOOGLE_LONGLONG(0);
  clear_has_item_guid();
}
inline ::google::protobuf::int64 ReqPickDropItem::item_guid() const {
  return item_guid_;
}
inline void ReqPickDropItem::set_item_guid(::google::protobuf::int64 value) {
  set_has_item_guid();
  item_guid_ = value;
}

// -------------------------------------------------------------------

// ReqAcceptTask

// required bytes task_id = 1;
inline bool ReqAcceptTask::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAcceptTask::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAcceptTask::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAcceptTask::clear_task_id() {
  if (task_id_ != &::google::protobuf::internal::kEmptyString) {
    task_id_->clear();
  }
  clear_has_task_id();
}
inline const ::std::string& ReqAcceptTask::task_id() const {
  return *task_id_;
}
inline void ReqAcceptTask::set_task_id(const ::std::string& value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::kEmptyString) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
}
inline void ReqAcceptTask::set_task_id(const char* value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::kEmptyString) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
}
inline void ReqAcceptTask::set_task_id(const void* value, size_t size) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::kEmptyString) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqAcceptTask::mutable_task_id() {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::kEmptyString) {
    task_id_ = new ::std::string;
  }
  return task_id_;
}
inline ::std::string* ReqAcceptTask::release_task_id() {
  clear_has_task_id();
  if (task_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = task_id_;
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReqAcceptTask::set_allocated_task_id(::std::string* task_id) {
  if (task_id_ != &::google::protobuf::internal::kEmptyString) {
    delete task_id_;
  }
  if (task_id) {
    set_has_task_id();
    task_id_ = task_id;
  } else {
    clear_has_task_id();
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ReqPullDownTask

// required bytes task_id = 1;
inline bool ReqPullDownTask::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqPullDownTask::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqPullDownTask::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqPullDownTask::clear_task_id() {
  if (task_id_ != &::google::protobuf::internal::kEmptyString) {
    task_id_->clear();
  }
  clear_has_task_id();
}
inline const ::std::string& ReqPullDownTask::task_id() const {
  return *task_id_;
}
inline void ReqPullDownTask::set_task_id(const ::std::string& value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::kEmptyString) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
}
inline void ReqPullDownTask::set_task_id(const char* value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::kEmptyString) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
}
inline void ReqPullDownTask::set_task_id(const void* value, size_t size) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::kEmptyString) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqPullDownTask::mutable_task_id() {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::kEmptyString) {
    task_id_ = new ::std::string;
  }
  return task_id_;
}
inline ::std::string* ReqPullDownTask::release_task_id() {
  clear_has_task_id();
  if (task_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = task_id_;
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReqPullDownTask::set_allocated_task_id(::std::string* task_id) {
  if (task_id_ != &::google::protobuf::internal::kEmptyString) {
    delete task_id_;
  }
  if (task_id) {
    set_has_task_id();
    task_id_ = task_id;
  } else {
    clear_has_task_id();
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CloneCustomItem

// required int64 object_guid = 1;
inline bool CloneCustomItem::has_object_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloneCustomItem::set_has_object_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CloneCustomItem::clear_has_object_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CloneCustomItem::clear_object_guid() {
  object_guid_ = GOOGLE_LONGLONG(0);
  clear_has_object_guid();
}
inline ::google::protobuf::int64 CloneCustomItem::object_guid() const {
  return object_guid_;
}
inline void CloneCustomItem::set_object_guid(::google::protobuf::int64 value) {
  set_has_object_guid();
  object_guid_ = value;
}

// repeated bytes item_id = 2;
inline int CloneCustomItem::item_id_size() const {
  return item_id_.size();
}
inline void CloneCustomItem::clear_item_id() {
  item_id_.Clear();
}
inline const ::std::string& CloneCustomItem::item_id(int index) const {
  return item_id_.Get(index);
}
inline ::std::string* CloneCustomItem::mutable_item_id(int index) {
  return item_id_.Mutable(index);
}
inline void CloneCustomItem::set_item_id(int index, const ::std::string& value) {
  item_id_.Mutable(index)->assign(value);
}
inline void CloneCustomItem::set_item_id(int index, const char* value) {
  item_id_.Mutable(index)->assign(value);
}
inline void CloneCustomItem::set_item_id(int index, const void* value, size_t size) {
  item_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CloneCustomItem::add_item_id() {
  return item_id_.Add();
}
inline void CloneCustomItem::add_item_id(const ::std::string& value) {
  item_id_.Add()->assign(value);
}
inline void CloneCustomItem::add_item_id(const char* value) {
  item_id_.Add()->assign(value);
}
inline void CloneCustomItem::add_item_id(const void* value, size_t size) {
  item_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CloneCustomItem::item_id() const {
  return item_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CloneCustomItem::mutable_item_id() {
  return &item_id_;
}

// -------------------------------------------------------------------

// ReqPullDownCustoms

// required .NFMsg.ReqPullDownCustoms.EGameCloneResult result_value = 1;
inline bool ReqPullDownCustoms::has_result_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqPullDownCustoms::set_has_result_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqPullDownCustoms::clear_has_result_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqPullDownCustoms::clear_result_value() {
  result_value_ = 0;
  clear_has_result_value();
}
inline ::NFMsg::ReqPullDownCustoms_EGameCloneResult ReqPullDownCustoms::result_value() const {
  return static_cast< ::NFMsg::ReqPullDownCustoms_EGameCloneResult >(result_value_);
}
inline void ReqPullDownCustoms::set_result_value(::NFMsg::ReqPullDownCustoms_EGameCloneResult value) {
  assert(::NFMsg::ReqPullDownCustoms_EGameCloneResult_IsValid(value));
  set_has_result_value();
  result_value_ = value;
}

// repeated .NFMsg.CloneCustomItem item_list = 2;
inline int ReqPullDownCustoms::item_list_size() const {
  return item_list_.size();
}
inline void ReqPullDownCustoms::clear_item_list() {
  item_list_.Clear();
}
inline const ::NFMsg::CloneCustomItem& ReqPullDownCustoms::item_list(int index) const {
  return item_list_.Get(index);
}
inline ::NFMsg::CloneCustomItem* ReqPullDownCustoms::mutable_item_list(int index) {
  return item_list_.Mutable(index);
}
inline ::NFMsg::CloneCustomItem* ReqPullDownCustoms::add_item_list() {
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::CloneCustomItem >&
ReqPullDownCustoms::item_list() const {
  return item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::CloneCustomItem >*
ReqPullDownCustoms::mutable_item_list() {
  return &item_list_;
}

// -------------------------------------------------------------------

// PlayerEntryInfo

// required int64 object_guid = 1;
inline bool PlayerEntryInfo::has_object_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerEntryInfo::set_has_object_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerEntryInfo::clear_has_object_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerEntryInfo::clear_object_guid() {
  object_guid_ = GOOGLE_LONGLONG(0);
  clear_has_object_guid();
}
inline ::google::protobuf::int64 PlayerEntryInfo::object_guid() const {
  return object_guid_;
}
inline void PlayerEntryInfo::set_object_guid(::google::protobuf::int64 value) {
  set_has_object_guid();
  object_guid_ = value;
}

// required int32 char_type = 2;
inline bool PlayerEntryInfo::has_char_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerEntryInfo::set_has_char_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerEntryInfo::clear_has_char_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerEntryInfo::clear_char_type() {
  char_type_ = 0;
  clear_has_char_type();
}
inline ::google::protobuf::int32 PlayerEntryInfo::char_type() const {
  return char_type_;
}
inline void PlayerEntryInfo::set_char_type(::google::protobuf::int32 value) {
  set_has_char_type();
  char_type_ = value;
}

// required float x = 3;
inline bool PlayerEntryInfo::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerEntryInfo::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerEntryInfo::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerEntryInfo::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float PlayerEntryInfo::x() const {
  return x_;
}
inline void PlayerEntryInfo::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 4;
inline bool PlayerEntryInfo::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerEntryInfo::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerEntryInfo::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerEntryInfo::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float PlayerEntryInfo::y() const {
  return y_;
}
inline void PlayerEntryInfo::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float z = 5;
inline bool PlayerEntryInfo::has_z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerEntryInfo::set_has_z() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerEntryInfo::clear_has_z() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerEntryInfo::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float PlayerEntryInfo::z() const {
  return z_;
}
inline void PlayerEntryInfo::set_z(float value) {
  set_has_z();
  z_ = value;
}

// required int32 career_type = 6;
inline bool PlayerEntryInfo::has_career_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerEntryInfo::set_has_career_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerEntryInfo::clear_has_career_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerEntryInfo::clear_career_type() {
  career_type_ = 0;
  clear_has_career_type();
}
inline ::google::protobuf::int32 PlayerEntryInfo::career_type() const {
  return career_type_;
}
inline void PlayerEntryInfo::set_career_type(::google::protobuf::int32 value) {
  set_has_career_type();
  career_type_ = value;
}

// required int32 player_state = 7;
inline bool PlayerEntryInfo::has_player_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerEntryInfo::set_has_player_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerEntryInfo::clear_has_player_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerEntryInfo::clear_player_state() {
  player_state_ = 0;
  clear_has_player_state();
}
inline ::google::protobuf::int32 PlayerEntryInfo::player_state() const {
  return player_state_;
}
inline void PlayerEntryInfo::set_player_state(::google::protobuf::int32 value) {
  set_has_player_state();
  player_state_ = value;
}

// required bytes config_id = 8;
inline bool PlayerEntryInfo::has_config_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerEntryInfo::set_has_config_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerEntryInfo::clear_has_config_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerEntryInfo::clear_config_id() {
  if (config_id_ != &::google::protobuf::internal::kEmptyString) {
    config_id_->clear();
  }
  clear_has_config_id();
}
inline const ::std::string& PlayerEntryInfo::config_id() const {
  return *config_id_;
}
inline void PlayerEntryInfo::set_config_id(const ::std::string& value) {
  set_has_config_id();
  if (config_id_ == &::google::protobuf::internal::kEmptyString) {
    config_id_ = new ::std::string;
  }
  config_id_->assign(value);
}
inline void PlayerEntryInfo::set_config_id(const char* value) {
  set_has_config_id();
  if (config_id_ == &::google::protobuf::internal::kEmptyString) {
    config_id_ = new ::std::string;
  }
  config_id_->assign(value);
}
inline void PlayerEntryInfo::set_config_id(const void* value, size_t size) {
  set_has_config_id();
  if (config_id_ == &::google::protobuf::internal::kEmptyString) {
    config_id_ = new ::std::string;
  }
  config_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerEntryInfo::mutable_config_id() {
  set_has_config_id();
  if (config_id_ == &::google::protobuf::internal::kEmptyString) {
    config_id_ = new ::std::string;
  }
  return config_id_;
}
inline ::std::string* PlayerEntryInfo::release_config_id() {
  clear_has_config_id();
  if (config_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = config_id_;
    config_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerEntryInfo::set_allocated_config_id(::std::string* config_id) {
  if (config_id_ != &::google::protobuf::internal::kEmptyString) {
    delete config_id_;
  }
  if (config_id) {
    set_has_config_id();
    config_id_ = config_id;
  } else {
    clear_has_config_id();
    config_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes class_name = 9;
inline bool PlayerEntryInfo::has_class_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerEntryInfo::set_has_class_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerEntryInfo::clear_has_class_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerEntryInfo::clear_class_name() {
  if (class_name_ != &::google::protobuf::internal::kEmptyString) {
    class_name_->clear();
  }
  clear_has_class_name();
}
inline const ::std::string& PlayerEntryInfo::class_name() const {
  return *class_name_;
}
inline void PlayerEntryInfo::set_class_name(const ::std::string& value) {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  class_name_->assign(value);
}
inline void PlayerEntryInfo::set_class_name(const char* value) {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  class_name_->assign(value);
}
inline void PlayerEntryInfo::set_class_name(const void* value, size_t size) {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  class_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerEntryInfo::mutable_class_name() {
  set_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    class_name_ = new ::std::string;
  }
  return class_name_;
}
inline ::std::string* PlayerEntryInfo::release_class_name() {
  clear_has_class_name();
  if (class_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = class_name_;
    class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerEntryInfo::set_allocated_class_name(::std::string* class_name) {
  if (class_name_ != &::google::protobuf::internal::kEmptyString) {
    delete class_name_;
  }
  if (class_name) {
    set_has_class_name();
    class_name_ = class_name;
  } else {
    clear_has_class_name();
    class_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 scene_id = 10;
inline bool PlayerEntryInfo::has_scene_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerEntryInfo::set_has_scene_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerEntryInfo::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerEntryInfo::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 PlayerEntryInfo::scene_id() const {
  return scene_id_;
}
inline void PlayerEntryInfo::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// -------------------------------------------------------------------

// AckPlayerEntryList

// repeated .NFMsg.PlayerEntryInfo object_list = 1;
inline int AckPlayerEntryList::object_list_size() const {
  return object_list_.size();
}
inline void AckPlayerEntryList::clear_object_list() {
  object_list_.Clear();
}
inline const ::NFMsg::PlayerEntryInfo& AckPlayerEntryList::object_list(int index) const {
  return object_list_.Get(index);
}
inline ::NFMsg::PlayerEntryInfo* AckPlayerEntryList::mutable_object_list(int index) {
  return object_list_.Mutable(index);
}
inline ::NFMsg::PlayerEntryInfo* AckPlayerEntryList::add_object_list() {
  return object_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::PlayerEntryInfo >&
AckPlayerEntryList::object_list() const {
  return object_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::PlayerEntryInfo >*
AckPlayerEntryList::mutable_object_list() {
  return &object_list_;
}

// -------------------------------------------------------------------

// AckPlayerLeaveList

// repeated int64 object_list = 1;
inline int AckPlayerLeaveList::object_list_size() const {
  return object_list_.size();
}
inline void AckPlayerLeaveList::clear_object_list() {
  object_list_.Clear();
}
inline ::google::protobuf::int64 AckPlayerLeaveList::object_list(int index) const {
  return object_list_.Get(index);
}
inline void AckPlayerLeaveList::set_object_list(int index, ::google::protobuf::int64 value) {
  object_list_.Set(index, value);
}
inline void AckPlayerLeaveList::add_object_list(::google::protobuf::int64 value) {
  object_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
AckPlayerLeaveList::object_list() const {
  return object_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
AckPlayerLeaveList::mutable_object_list() {
  return &object_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::ReqAckPlayerChat_EGameChatType>() {
  return ::NFMsg::ReqAckPlayerChat_EGameChatType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::ReqAckSwapScene_EGameSwapType>() {
  return ::NFMsg::ReqAckSwapScene_EGameSwapType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::ReqPullDownCustoms_EGameCloneResult>() {
  return ::NFMsg::ReqPullDownCustoms_EGameCloneResult_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NFMsgShare_2eproto__INCLUDED
