// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgShare.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NFMsgShare.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NFMsg {

namespace {

const ::google::protobuf::Descriptor* ReqEnterGameServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqEnterGameServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqHeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqHeartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLeaveGameServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLeaveGameServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckPlayerMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckPlayerMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckPlayerChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckPlayerChat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqAckPlayerChat_EGameChatType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqAckUseSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckUseSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckUseItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckUseItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckSwapScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckSwapScene_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqAckSwapScene_EGameSwapType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqPickDropItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqPickDropItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAcceptTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAcceptTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCompeleteTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCompeleteTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerEntryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerEntryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPlayerEntryList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPlayerEntryList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPlayerLeaveList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPlayerLeaveList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_NFMsgShare_2eproto() {
  protobuf_AddDesc_NFMsgShare_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NFMsgShare.proto");
  GOOGLE_CHECK(file != NULL);
  ReqEnterGameServer_descriptor_ = file->message_type(0);
  static const int ReqEnterGameServer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGameServer, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGameServer, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGameServer, name_),
  };
  ReqEnterGameServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqEnterGameServer_descriptor_,
      ReqEnterGameServer::default_instance_,
      ReqEnterGameServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGameServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGameServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqEnterGameServer));
  ReqHeartBeat_descriptor_ = file->message_type(1);
  static const int ReqHeartBeat_offsets_[1] = {
  };
  ReqHeartBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqHeartBeat_descriptor_,
      ReqHeartBeat::default_instance_,
      ReqHeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeartBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeartBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqHeartBeat));
  ReqLeaveGameServer_descriptor_ = file->message_type(2);
  static const int ReqLeaveGameServer_offsets_[1] = {
  };
  ReqLeaveGameServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLeaveGameServer_descriptor_,
      ReqLeaveGameServer::default_instance_,
      ReqLeaveGameServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaveGameServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaveGameServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLeaveGameServer));
  ReqAckPlayerMove_descriptor_ = file->message_type(3);
  static const int ReqAckPlayerMove_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerMove, mover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerMove, movetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerMove, target_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerMove, source_pos_),
  };
  ReqAckPlayerMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckPlayerMove_descriptor_,
      ReqAckPlayerMove::default_instance_,
      ReqAckPlayerMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckPlayerMove));
  ReqAckPlayerChat_descriptor_ = file->message_type(4);
  static const int ReqAckPlayerChat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerChat, chat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerChat, chat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerChat, chat_info_),
  };
  ReqAckPlayerChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckPlayerChat_descriptor_,
      ReqAckPlayerChat::default_instance_,
      ReqAckPlayerChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckPlayerChat));
  ReqAckPlayerChat_EGameChatType_descriptor_ = ReqAckPlayerChat_descriptor_->enum_type(0);
  ReqAckUseSkill_descriptor_ = file->message_type(5);
  static const int ReqAckUseSkill_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseSkill, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseSkill, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseSkill, now_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseSkill, tar_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseSkill, effect_ident_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseSkill, effect_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseSkill, effect_rlt_),
  };
  ReqAckUseSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckUseSkill_descriptor_,
      ReqAckUseSkill::default_instance_,
      ReqAckUseSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckUseSkill));
  ReqAckUseItem_descriptor_ = file->message_type(6);
  static const int ReqAckUseItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseItem, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseItem, item_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseItem, effect_ident_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseItem, effect_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseItem, effect_rlt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseItem, key_value_),
  };
  ReqAckUseItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckUseItem_descriptor_,
      ReqAckUseItem::default_instance_,
      ReqAckUseItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckUseItem));
  ReqAckSwapScene_descriptor_ = file->message_type(7);
  static const int ReqAckSwapScene_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSwapScene, transfer_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSwapScene, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSwapScene, line_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSwapScene, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSwapScene, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSwapScene, z_),
  };
  ReqAckSwapScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAckSwapScene_descriptor_,
      ReqAckSwapScene::default_instance_,
      ReqAckSwapScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSwapScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSwapScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAckSwapScene));
  ReqAckSwapScene_EGameSwapType_descriptor_ = ReqAckSwapScene_descriptor_->enum_type(0);
  ReqPickDropItem_descriptor_ = file->message_type(8);
  static const int ReqPickDropItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPickDropItem, item_guid_),
  };
  ReqPickDropItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqPickDropItem_descriptor_,
      ReqPickDropItem::default_instance_,
      ReqPickDropItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPickDropItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPickDropItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqPickDropItem));
  ReqAcceptTask_descriptor_ = file->message_type(9);
  static const int ReqAcceptTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAcceptTask, task_id_),
  };
  ReqAcceptTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAcceptTask_descriptor_,
      ReqAcceptTask::default_instance_,
      ReqAcceptTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAcceptTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAcceptTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAcceptTask));
  ReqCompeleteTask_descriptor_ = file->message_type(10);
  static const int ReqCompeleteTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCompeleteTask, task_id_),
  };
  ReqCompeleteTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCompeleteTask_descriptor_,
      ReqCompeleteTask::default_instance_,
      ReqCompeleteTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCompeleteTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCompeleteTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCompeleteTask));
  PlayerEntryInfo_descriptor_ = file->message_type(11);
  static const int PlayerEntryInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, object_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, career_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, player_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, class_id_),
  };
  PlayerEntryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerEntryInfo_descriptor_,
      PlayerEntryInfo::default_instance_,
      PlayerEntryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerEntryInfo));
  AckPlayerEntryList_descriptor_ = file->message_type(12);
  static const int AckPlayerEntryList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerEntryList, object_list_),
  };
  AckPlayerEntryList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckPlayerEntryList_descriptor_,
      AckPlayerEntryList::default_instance_,
      AckPlayerEntryList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerEntryList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerEntryList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckPlayerEntryList));
  AckPlayerLeaveList_descriptor_ = file->message_type(13);
  static const int AckPlayerLeaveList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerLeaveList, object_list_),
  };
  AckPlayerLeaveList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckPlayerLeaveList_descriptor_,
      AckPlayerLeaveList::default_instance_,
      AckPlayerLeaveList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerLeaveList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerLeaveList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckPlayerLeaveList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NFMsgShare_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqEnterGameServer_descriptor_, &ReqEnterGameServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqHeartBeat_descriptor_, &ReqHeartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLeaveGameServer_descriptor_, &ReqLeaveGameServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckPlayerMove_descriptor_, &ReqAckPlayerMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckPlayerChat_descriptor_, &ReqAckPlayerChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckUseSkill_descriptor_, &ReqAckUseSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckUseItem_descriptor_, &ReqAckUseItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAckSwapScene_descriptor_, &ReqAckSwapScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqPickDropItem_descriptor_, &ReqPickDropItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAcceptTask_descriptor_, &ReqAcceptTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCompeleteTask_descriptor_, &ReqCompeleteTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerEntryInfo_descriptor_, &PlayerEntryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckPlayerEntryList_descriptor_, &AckPlayerEntryList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckPlayerLeaveList_descriptor_, &AckPlayerLeaveList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NFMsgShare_2eproto() {
  delete ReqEnterGameServer::default_instance_;
  delete ReqEnterGameServer_reflection_;
  delete ReqHeartBeat::default_instance_;
  delete ReqHeartBeat_reflection_;
  delete ReqLeaveGameServer::default_instance_;
  delete ReqLeaveGameServer_reflection_;
  delete ReqAckPlayerMove::default_instance_;
  delete ReqAckPlayerMove_reflection_;
  delete ReqAckPlayerChat::default_instance_;
  delete ReqAckPlayerChat_reflection_;
  delete ReqAckUseSkill::default_instance_;
  delete ReqAckUseSkill_reflection_;
  delete ReqAckUseItem::default_instance_;
  delete ReqAckUseItem_reflection_;
  delete ReqAckSwapScene::default_instance_;
  delete ReqAckSwapScene_reflection_;
  delete ReqPickDropItem::default_instance_;
  delete ReqPickDropItem_reflection_;
  delete ReqAcceptTask::default_instance_;
  delete ReqAcceptTask_reflection_;
  delete ReqCompeleteTask::default_instance_;
  delete ReqCompeleteTask_reflection_;
  delete PlayerEntryInfo::default_instance_;
  delete PlayerEntryInfo_reflection_;
  delete AckPlayerEntryList::default_instance_;
  delete AckPlayerEntryList_reflection_;
  delete AckPlayerLeaveList::default_instance_;
  delete AckPlayerLeaveList_reflection_;
}

void protobuf_AddDesc_NFMsgShare_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::NFMsg::protobuf_AddDesc_NFDefine_2eproto();
  ::NFMsg::protobuf_AddDesc_NFMsgBase_2eproto();
  ::NFMsg::protobuf_AddDesc_NFMsgBaseEx_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020NFMsgShare.proto\022\005NFMsg\032\016NFDefine.prot"
    "o\032\017NFMsgBase.proto\032\021NFMsgBaseEx.proto\"D\n"
    "\022ReqEnterGameServer\022\017\n\007account\030\001 \002(\014\022\017\n\007"
    "game_id\030\002 \002(\005\022\014\n\004name\030\003 \002(\014\"\016\n\014ReqHeartB"
    "eat\"\024\n\022ReqLeaveGameServer\"\213\001\n\020ReqAckPlay"
    "erMove\022\033\n\005mover\030\001 \002(\0132\014.NFMsg.Ident\022\020\n\010m"
    "oveType\030\002 \002(\005\022#\n\ntarget_pos\030\003 \003(\0132\017.NFMs"
    "g.Position\022#\n\nsource_pos\030\004 \003(\0132\017.NFMsg.P"
    "osition\"\321\001\n\020ReqAckPlayerChat\022\035\n\007chat_id\030"
    "\001 \002(\0132\014.NFMsg.Ident\0228\n\tchat_type\030\002 \002(\0162%"
    ".NFMsg.ReqAckPlayerChat.EGameChatType\022\021\n"
    "\tchat_info\030\003 \002(\014\"Q\n\rEGameChatType\022\017\n\013EGC"
    "T_NARMAL\020\000\022\020\n\014EGCT_PRIVATE\020\001\022\r\n\tEGCT_TEA"
    "M\020\002\022\016\n\nEGCT_WORLD\020\003\"\320\001\n\016ReqAckUseSkill\022\032"
    "\n\004user\030\001 \002(\0132\014.NFMsg.Ident\022\020\n\010skill_id\030\002"
    " \002(\014\022 \n\007now_pos\030\003 \002(\0132\017.NFMsg.Position\022 "
    "\n\007tar_pos\030\004 \002(\0132\017.NFMsg.Position\022\"\n\014effe"
    "ct_ident\030\005 \003(\0132\014.NFMsg.Ident\022\024\n\014effect_v"
    "alue\030\006 \003(\005\022\022\n\neffect_rlt\030\007 \003(\005\"\255\001\n\rReqAc"
    "kUseItem\022\032\n\004user\030\001 \002(\0132\014.NFMsg.Ident\022\037\n\t"
    "item_guid\030\002 \002(\0132\014.NFMsg.Ident\022\"\n\014effect_"
    "ident\030\003 \003(\0132\014.NFMsg.Ident\022\024\n\014effect_valu"
    "e\030\004 \003(\005\022\022\n\neffect_rlt\030\005 \003(\005\022\021\n\tkey_value"
    "\030\006 \001(\014\"\345\001\n\017ReqAckSwapScene\022;\n\rtransfer_t"
    "ype\030\001 \002(\0162$.NFMsg.ReqAckSwapScene.EGameS"
    "wapType\022\020\n\010scene_id\030\002 \002(\005\022\017\n\007line_id\030\003 \002"
    "(\005\022\t\n\001x\030\004 \001(\002\022\t\n\001y\030\005 \001(\002\022\t\n\001z\030\006 \001(\002\"Q\n\rE"
    "GameSwapType\022\017\n\013EGST_NARMAL\020\000\022\016\n\nEGST_CL"
    "ONE\020\001\022\016\n\nEGST_ARENA\020\002\022\017\n\013EGST_MIRROR\020\003\"2"
    "\n\017ReqPickDropItem\022\037\n\titem_guid\030\002 \002(\0132\014.N"
    "FMsg.Ident\" \n\rReqAcceptTask\022\017\n\007task_id\030\001"
    " \002(\014\"#\n\020ReqCompeleteTask\022\017\n\007task_id\030\001 \002("
    "\014\"\267\001\n\017PlayerEntryInfo\022!\n\013object_guid\030\001 \002"
    "(\0132\014.NFMsg.Ident\022\t\n\001x\030\002 \002(\002\022\t\n\001y\030\003 \002(\002\022\t"
    "\n\001z\030\004 \002(\002\022\023\n\013career_type\030\005 \002(\005\022\024\n\014player"
    "_state\030\006 \002(\005\022\021\n\tconfig_id\030\007 \002(\014\022\020\n\010scene"
    "_id\030\010 \002(\005\022\020\n\010class_id\030\t \002(\014\"A\n\022AckPlayer"
    "EntryList\022+\n\013object_list\030\001 \003(\0132\026.NFMsg.P"
    "layerEntryInfo\"7\n\022AckPlayerLeaveList\022!\n\013"
    "object_list\030\001 \003(\0132\014.NFMsg.Ident", 1591);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NFMsgShare.proto", &protobuf_RegisterTypes);
  ReqEnterGameServer::default_instance_ = new ReqEnterGameServer();
  ReqHeartBeat::default_instance_ = new ReqHeartBeat();
  ReqLeaveGameServer::default_instance_ = new ReqLeaveGameServer();
  ReqAckPlayerMove::default_instance_ = new ReqAckPlayerMove();
  ReqAckPlayerChat::default_instance_ = new ReqAckPlayerChat();
  ReqAckUseSkill::default_instance_ = new ReqAckUseSkill();
  ReqAckUseItem::default_instance_ = new ReqAckUseItem();
  ReqAckSwapScene::default_instance_ = new ReqAckSwapScene();
  ReqPickDropItem::default_instance_ = new ReqPickDropItem();
  ReqAcceptTask::default_instance_ = new ReqAcceptTask();
  ReqCompeleteTask::default_instance_ = new ReqCompeleteTask();
  PlayerEntryInfo::default_instance_ = new PlayerEntryInfo();
  AckPlayerEntryList::default_instance_ = new AckPlayerEntryList();
  AckPlayerLeaveList::default_instance_ = new AckPlayerLeaveList();
  ReqEnterGameServer::default_instance_->InitAsDefaultInstance();
  ReqHeartBeat::default_instance_->InitAsDefaultInstance();
  ReqLeaveGameServer::default_instance_->InitAsDefaultInstance();
  ReqAckPlayerMove::default_instance_->InitAsDefaultInstance();
  ReqAckPlayerChat::default_instance_->InitAsDefaultInstance();
  ReqAckUseSkill::default_instance_->InitAsDefaultInstance();
  ReqAckUseItem::default_instance_->InitAsDefaultInstance();
  ReqAckSwapScene::default_instance_->InitAsDefaultInstance();
  ReqPickDropItem::default_instance_->InitAsDefaultInstance();
  ReqAcceptTask::default_instance_->InitAsDefaultInstance();
  ReqCompeleteTask::default_instance_->InitAsDefaultInstance();
  PlayerEntryInfo::default_instance_->InitAsDefaultInstance();
  AckPlayerEntryList::default_instance_->InitAsDefaultInstance();
  AckPlayerLeaveList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NFMsgShare_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NFMsgShare_2eproto {
  StaticDescriptorInitializer_NFMsgShare_2eproto() {
    protobuf_AddDesc_NFMsgShare_2eproto();
  }
} static_descriptor_initializer_NFMsgShare_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ReqEnterGameServer::kAccountFieldNumber;
const int ReqEnterGameServer::kGameIdFieldNumber;
const int ReqEnterGameServer::kNameFieldNumber;
#endif  // !_MSC_VER

ReqEnterGameServer::ReqEnterGameServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqEnterGameServer::InitAsDefaultInstance() {
}

ReqEnterGameServer::ReqEnterGameServer(const ReqEnterGameServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqEnterGameServer::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqEnterGameServer::~ReqEnterGameServer() {
  SharedDtor();
}

void ReqEnterGameServer::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ReqEnterGameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqEnterGameServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqEnterGameServer_descriptor_;
}

const ReqEnterGameServer& ReqEnterGameServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqEnterGameServer* ReqEnterGameServer::default_instance_ = NULL;

ReqEnterGameServer* ReqEnterGameServer::New() const {
  return new ReqEnterGameServer;
}

void ReqEnterGameServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    game_id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqEnterGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // required int32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqEnterGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  // required int32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game_id(), output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqEnterGameServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // required int32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->game_id(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqEnterGameServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // required int32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_id());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqEnterGameServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqEnterGameServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqEnterGameServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqEnterGameServer::MergeFrom(const ReqEnterGameServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqEnterGameServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEnterGameServer::CopyFrom(const ReqEnterGameServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEnterGameServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReqEnterGameServer::Swap(ReqEnterGameServer* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(game_id_, other->game_id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqEnterGameServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqEnterGameServer_descriptor_;
  metadata.reflection = ReqEnterGameServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqHeartBeat::ReqHeartBeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqHeartBeat::InitAsDefaultInstance() {
}

ReqHeartBeat::ReqHeartBeat(const ReqHeartBeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqHeartBeat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqHeartBeat::~ReqHeartBeat() {
  SharedDtor();
}

void ReqHeartBeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqHeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqHeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqHeartBeat_descriptor_;
}

const ReqHeartBeat& ReqHeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqHeartBeat* ReqHeartBeat::default_instance_ = NULL;

ReqHeartBeat* ReqHeartBeat::New() const {
  return new ReqHeartBeat;
}

void ReqHeartBeat::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqHeartBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqHeartBeat::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqHeartBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqHeartBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqHeartBeat::MergeFrom(const ReqHeartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqHeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHeartBeat::CopyFrom(const ReqHeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHeartBeat::IsInitialized() const {

  return true;
}

void ReqHeartBeat::Swap(ReqHeartBeat* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqHeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqHeartBeat_descriptor_;
  metadata.reflection = ReqHeartBeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqLeaveGameServer::ReqLeaveGameServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLeaveGameServer::InitAsDefaultInstance() {
}

ReqLeaveGameServer::ReqLeaveGameServer(const ReqLeaveGameServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLeaveGameServer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLeaveGameServer::~ReqLeaveGameServer() {
  SharedDtor();
}

void ReqLeaveGameServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqLeaveGameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLeaveGameServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLeaveGameServer_descriptor_;
}

const ReqLeaveGameServer& ReqLeaveGameServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqLeaveGameServer* ReqLeaveGameServer::default_instance_ = NULL;

ReqLeaveGameServer* ReqLeaveGameServer::New() const {
  return new ReqLeaveGameServer;
}

void ReqLeaveGameServer::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLeaveGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqLeaveGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLeaveGameServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLeaveGameServer::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLeaveGameServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLeaveGameServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLeaveGameServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLeaveGameServer::MergeFrom(const ReqLeaveGameServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLeaveGameServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLeaveGameServer::CopyFrom(const ReqLeaveGameServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLeaveGameServer::IsInitialized() const {

  return true;
}

void ReqLeaveGameServer::Swap(ReqLeaveGameServer* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLeaveGameServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLeaveGameServer_descriptor_;
  metadata.reflection = ReqLeaveGameServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAckPlayerMove::kMoverFieldNumber;
const int ReqAckPlayerMove::kMoveTypeFieldNumber;
const int ReqAckPlayerMove::kTargetPosFieldNumber;
const int ReqAckPlayerMove::kSourcePosFieldNumber;
#endif  // !_MSC_VER

ReqAckPlayerMove::ReqAckPlayerMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckPlayerMove::InitAsDefaultInstance() {
  mover_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqAckPlayerMove::ReqAckPlayerMove(const ReqAckPlayerMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckPlayerMove::SharedCtor() {
  _cached_size_ = 0;
  mover_ = NULL;
  movetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckPlayerMove::~ReqAckPlayerMove() {
  SharedDtor();
}

void ReqAckPlayerMove::SharedDtor() {
  if (this != default_instance_) {
    delete mover_;
  }
}

void ReqAckPlayerMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckPlayerMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckPlayerMove_descriptor_;
}

const ReqAckPlayerMove& ReqAckPlayerMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckPlayerMove* ReqAckPlayerMove::default_instance_ = NULL;

ReqAckPlayerMove* ReqAckPlayerMove::New() const {
  return new ReqAckPlayerMove;
}

void ReqAckPlayerMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mover()) {
      if (mover_ != NULL) mover_->::NFMsg::Ident::Clear();
    }
    movetype_ = 0;
  }
  target_pos_.Clear();
  source_pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckPlayerMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident mover = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mover()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moveType;
        break;
      }

      // required int32 moveType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moveType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movetype_)));
          set_has_movetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target_pos;
        break;
      }

      // repeated .NFMsg.Position target_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_target_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target_pos;
        if (input->ExpectTag(34)) goto parse_source_pos;
        break;
      }

      // repeated .NFMsg.Position source_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_source_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_source_pos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckPlayerMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident mover = 1;
  if (has_mover()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mover(), output);
  }

  // required int32 moveType = 2;
  if (has_movetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->movetype(), output);
  }

  // repeated .NFMsg.Position target_pos = 3;
  for (int i = 0; i < this->target_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->target_pos(i), output);
  }

  // repeated .NFMsg.Position source_pos = 4;
  for (int i = 0; i < this->source_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->source_pos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckPlayerMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident mover = 1;
  if (has_mover()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mover(), target);
  }

  // required int32 moveType = 2;
  if (has_movetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->movetype(), target);
  }

  // repeated .NFMsg.Position target_pos = 3;
  for (int i = 0; i < this->target_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->target_pos(i), target);
  }

  // repeated .NFMsg.Position source_pos = 4;
  for (int i = 0; i < this->source_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->source_pos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckPlayerMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident mover = 1;
    if (has_mover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mover());
    }

    // required int32 moveType = 2;
    if (has_movetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movetype());
    }

  }
  // repeated .NFMsg.Position target_pos = 3;
  total_size += 1 * this->target_pos_size();
  for (int i = 0; i < this->target_pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->target_pos(i));
  }

  // repeated .NFMsg.Position source_pos = 4;
  total_size += 1 * this->source_pos_size();
  for (int i = 0; i < this->source_pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->source_pos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckPlayerMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckPlayerMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckPlayerMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckPlayerMove::MergeFrom(const ReqAckPlayerMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  target_pos_.MergeFrom(from.target_pos_);
  source_pos_.MergeFrom(from.source_pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mover()) {
      mutable_mover()->::NFMsg::Ident::MergeFrom(from.mover());
    }
    if (from.has_movetype()) {
      set_movetype(from.movetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckPlayerMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckPlayerMove::CopyFrom(const ReqAckPlayerMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckPlayerMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_mover()) {
    if (!this->mover().IsInitialized()) return false;
  }
  for (int i = 0; i < target_pos_size(); i++) {
    if (!this->target_pos(i).IsInitialized()) return false;
  }
  for (int i = 0; i < source_pos_size(); i++) {
    if (!this->source_pos(i).IsInitialized()) return false;
  }
  return true;
}

void ReqAckPlayerMove::Swap(ReqAckPlayerMove* other) {
  if (other != this) {
    std::swap(mover_, other->mover_);
    std::swap(movetype_, other->movetype_);
    target_pos_.Swap(&other->target_pos_);
    source_pos_.Swap(&other->source_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckPlayerMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckPlayerMove_descriptor_;
  metadata.reflection = ReqAckPlayerMove_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqAckPlayerChat_EGameChatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckPlayerChat_EGameChatType_descriptor_;
}
bool ReqAckPlayerChat_EGameChatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_NARMAL;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_PRIVATE;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_TEAM;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_WORLD;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGameChatType_MIN;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGameChatType_MAX;
const int ReqAckPlayerChat::EGameChatType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReqAckPlayerChat::kChatIdFieldNumber;
const int ReqAckPlayerChat::kChatTypeFieldNumber;
const int ReqAckPlayerChat::kChatInfoFieldNumber;
#endif  // !_MSC_VER

ReqAckPlayerChat::ReqAckPlayerChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckPlayerChat::InitAsDefaultInstance() {
  chat_id_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqAckPlayerChat::ReqAckPlayerChat(const ReqAckPlayerChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckPlayerChat::SharedCtor() {
  _cached_size_ = 0;
  chat_id_ = NULL;
  chat_type_ = 0;
  chat_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckPlayerChat::~ReqAckPlayerChat() {
  SharedDtor();
}

void ReqAckPlayerChat::SharedDtor() {
  if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_info_;
  }
  if (this != default_instance_) {
    delete chat_id_;
  }
}

void ReqAckPlayerChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckPlayerChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckPlayerChat_descriptor_;
}

const ReqAckPlayerChat& ReqAckPlayerChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckPlayerChat* ReqAckPlayerChat::default_instance_ = NULL;

ReqAckPlayerChat* ReqAckPlayerChat::New() const {
  return new ReqAckPlayerChat;
}

void ReqAckPlayerChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chat_id()) {
      if (chat_id_ != NULL) chat_id_->::NFMsg::Ident::Clear();
    }
    chat_type_ = 0;
    if (has_chat_info()) {
      if (chat_info_ != &::google::protobuf::internal::kEmptyString) {
        chat_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckPlayerChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident chat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chat_type;
        break;
      }

      // required .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::ReqAckPlayerChat_EGameChatType_IsValid(value)) {
            set_chat_type(static_cast< ::NFMsg::ReqAckPlayerChat_EGameChatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chat_info;
        break;
      }

      // required bytes chat_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chat_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckPlayerChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident chat_id = 1;
  if (has_chat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chat_id(), output);
  }

  // required .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
  if (has_chat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->chat_type(), output);
  }

  // required bytes chat_info = 3;
  if (has_chat_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->chat_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckPlayerChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident chat_id = 1;
  if (has_chat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chat_id(), target);
  }

  // required .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
  if (has_chat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->chat_type(), target);
  }

  // required bytes chat_info = 3;
  if (has_chat_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->chat_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckPlayerChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident chat_id = 1;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chat_id());
    }

    // required .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
    if (has_chat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chat_type());
    }

    // required bytes chat_info = 3;
    if (has_chat_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chat_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckPlayerChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckPlayerChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckPlayerChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckPlayerChat::MergeFrom(const ReqAckPlayerChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chat_id()) {
      mutable_chat_id()->::NFMsg::Ident::MergeFrom(from.chat_id());
    }
    if (from.has_chat_type()) {
      set_chat_type(from.chat_type());
    }
    if (from.has_chat_info()) {
      set_chat_info(from.chat_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckPlayerChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckPlayerChat::CopyFrom(const ReqAckPlayerChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckPlayerChat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_chat_id()) {
    if (!this->chat_id().IsInitialized()) return false;
  }
  return true;
}

void ReqAckPlayerChat::Swap(ReqAckPlayerChat* other) {
  if (other != this) {
    std::swap(chat_id_, other->chat_id_);
    std::swap(chat_type_, other->chat_type_);
    std::swap(chat_info_, other->chat_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckPlayerChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckPlayerChat_descriptor_;
  metadata.reflection = ReqAckPlayerChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAckUseSkill::kUserFieldNumber;
const int ReqAckUseSkill::kSkillIdFieldNumber;
const int ReqAckUseSkill::kNowPosFieldNumber;
const int ReqAckUseSkill::kTarPosFieldNumber;
const int ReqAckUseSkill::kEffectIdentFieldNumber;
const int ReqAckUseSkill::kEffectValueFieldNumber;
const int ReqAckUseSkill::kEffectRltFieldNumber;
#endif  // !_MSC_VER

ReqAckUseSkill::ReqAckUseSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckUseSkill::InitAsDefaultInstance() {
  user_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  now_pos_ = const_cast< ::NFMsg::Position*>(&::NFMsg::Position::default_instance());
  tar_pos_ = const_cast< ::NFMsg::Position*>(&::NFMsg::Position::default_instance());
}

ReqAckUseSkill::ReqAckUseSkill(const ReqAckUseSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckUseSkill::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  skill_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  now_pos_ = NULL;
  tar_pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckUseSkill::~ReqAckUseSkill() {
  SharedDtor();
}

void ReqAckUseSkill::SharedDtor() {
  if (skill_id_ != &::google::protobuf::internal::kEmptyString) {
    delete skill_id_;
  }
  if (this != default_instance_) {
    delete user_;
    delete now_pos_;
    delete tar_pos_;
  }
}

void ReqAckUseSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckUseSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckUseSkill_descriptor_;
}

const ReqAckUseSkill& ReqAckUseSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckUseSkill* ReqAckUseSkill::default_instance_ = NULL;

ReqAckUseSkill* ReqAckUseSkill::New() const {
  return new ReqAckUseSkill;
}

void ReqAckUseSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != NULL) user_->::NFMsg::Ident::Clear();
    }
    if (has_skill_id()) {
      if (skill_id_ != &::google::protobuf::internal::kEmptyString) {
        skill_id_->clear();
      }
    }
    if (has_now_pos()) {
      if (now_pos_ != NULL) now_pos_->::NFMsg::Position::Clear();
    }
    if (has_tar_pos()) {
      if (tar_pos_ != NULL) tar_pos_->::NFMsg::Position::Clear();
    }
  }
  effect_ident_.Clear();
  effect_value_.Clear();
  effect_rlt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckUseSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skill_id;
        break;
      }

      // required bytes skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_skill_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_now_pos;
        break;
      }

      // required .NFMsg.Position now_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_now_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_now_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tar_pos;
        break;
      }

      // required .NFMsg.Position tar_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tar_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tar_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_effect_ident;
        break;
      }

      // repeated .NFMsg.Ident effect_ident = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effect_ident:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effect_ident()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_effect_ident;
        if (input->ExpectTag(48)) goto parse_effect_value;
        break;
      }

      // repeated int32 effect_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_effect_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_effect_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_effect_value;
        if (input->ExpectTag(56)) goto parse_effect_rlt;
        break;
      }

      // repeated int32 effect_rlt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_rlt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_effect_rlt())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_effect_rlt())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_effect_rlt;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckUseSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user(), output);
  }

  // required bytes skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->skill_id(), output);
  }

  // required .NFMsg.Position now_pos = 3;
  if (has_now_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->now_pos(), output);
  }

  // required .NFMsg.Position tar_pos = 4;
  if (has_tar_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tar_pos(), output);
  }

  // repeated .NFMsg.Ident effect_ident = 5;
  for (int i = 0; i < this->effect_ident_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->effect_ident(i), output);
  }

  // repeated int32 effect_value = 6;
  for (int i = 0; i < this->effect_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->effect_value(i), output);
  }

  // repeated int32 effect_rlt = 7;
  for (int i = 0; i < this->effect_rlt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->effect_rlt(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckUseSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident user = 1;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user(), target);
  }

  // required bytes skill_id = 2;
  if (has_skill_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->skill_id(), target);
  }

  // required .NFMsg.Position now_pos = 3;
  if (has_now_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->now_pos(), target);
  }

  // required .NFMsg.Position tar_pos = 4;
  if (has_tar_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tar_pos(), target);
  }

  // repeated .NFMsg.Ident effect_ident = 5;
  for (int i = 0; i < this->effect_ident_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->effect_ident(i), target);
  }

  // repeated int32 effect_value = 6;
  for (int i = 0; i < this->effect_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->effect_value(i), target);
  }

  // repeated int32 effect_rlt = 7;
  for (int i = 0; i < this->effect_rlt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->effect_rlt(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckUseSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // required bytes skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->skill_id());
    }

    // required .NFMsg.Position now_pos = 3;
    if (has_now_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->now_pos());
    }

    // required .NFMsg.Position tar_pos = 4;
    if (has_tar_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tar_pos());
    }

  }
  // repeated .NFMsg.Ident effect_ident = 5;
  total_size += 1 * this->effect_ident_size();
  for (int i = 0; i < this->effect_ident_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effect_ident(i));
  }

  // repeated int32 effect_value = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->effect_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->effect_value(i));
    }
    total_size += 1 * this->effect_value_size() + data_size;
  }

  // repeated int32 effect_rlt = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->effect_rlt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->effect_rlt(i));
    }
    total_size += 1 * this->effect_rlt_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckUseSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckUseSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckUseSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckUseSkill::MergeFrom(const ReqAckUseSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  effect_ident_.MergeFrom(from.effect_ident_);
  effect_value_.MergeFrom(from.effect_value_);
  effect_rlt_.MergeFrom(from.effect_rlt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::NFMsg::Ident::MergeFrom(from.user());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_now_pos()) {
      mutable_now_pos()->::NFMsg::Position::MergeFrom(from.now_pos());
    }
    if (from.has_tar_pos()) {
      mutable_tar_pos()->::NFMsg::Position::MergeFrom(from.tar_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckUseSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckUseSkill::CopyFrom(const ReqAckUseSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckUseSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  if (has_now_pos()) {
    if (!this->now_pos().IsInitialized()) return false;
  }
  if (has_tar_pos()) {
    if (!this->tar_pos().IsInitialized()) return false;
  }
  for (int i = 0; i < effect_ident_size(); i++) {
    if (!this->effect_ident(i).IsInitialized()) return false;
  }
  return true;
}

void ReqAckUseSkill::Swap(ReqAckUseSkill* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(now_pos_, other->now_pos_);
    std::swap(tar_pos_, other->tar_pos_);
    effect_ident_.Swap(&other->effect_ident_);
    effect_value_.Swap(&other->effect_value_);
    effect_rlt_.Swap(&other->effect_rlt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckUseSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckUseSkill_descriptor_;
  metadata.reflection = ReqAckUseSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAckUseItem::kUserFieldNumber;
const int ReqAckUseItem::kItemGuidFieldNumber;
const int ReqAckUseItem::kEffectIdentFieldNumber;
const int ReqAckUseItem::kEffectValueFieldNumber;
const int ReqAckUseItem::kEffectRltFieldNumber;
const int ReqAckUseItem::kKeyValueFieldNumber;
#endif  // !_MSC_VER

ReqAckUseItem::ReqAckUseItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckUseItem::InitAsDefaultInstance() {
  user_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
  item_guid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqAckUseItem::ReqAckUseItem(const ReqAckUseItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckUseItem::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  item_guid_ = NULL;
  key_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckUseItem::~ReqAckUseItem() {
  SharedDtor();
}

void ReqAckUseItem::SharedDtor() {
  if (key_value_ != &::google::protobuf::internal::kEmptyString) {
    delete key_value_;
  }
  if (this != default_instance_) {
    delete user_;
    delete item_guid_;
  }
}

void ReqAckUseItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckUseItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckUseItem_descriptor_;
}

const ReqAckUseItem& ReqAckUseItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckUseItem* ReqAckUseItem::default_instance_ = NULL;

ReqAckUseItem* ReqAckUseItem::New() const {
  return new ReqAckUseItem;
}

void ReqAckUseItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != NULL) user_->::NFMsg::Ident::Clear();
    }
    if (has_item_guid()) {
      if (item_guid_ != NULL) item_guid_->::NFMsg::Ident::Clear();
    }
    if (has_key_value()) {
      if (key_value_ != &::google::protobuf::internal::kEmptyString) {
        key_value_->clear();
      }
    }
  }
  effect_ident_.Clear();
  effect_value_.Clear();
  effect_rlt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckUseItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_guid;
        break;
      }

      // required .NFMsg.Ident item_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_guid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_effect_ident;
        break;
      }

      // repeated .NFMsg.Ident effect_ident = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effect_ident:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effect_ident()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_effect_ident;
        if (input->ExpectTag(32)) goto parse_effect_value;
        break;
      }

      // repeated int32 effect_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_effect_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_effect_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_effect_value;
        if (input->ExpectTag(40)) goto parse_effect_rlt;
        break;
      }

      // repeated int32 effect_rlt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_rlt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_effect_rlt())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_effect_rlt())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_effect_rlt;
        if (input->ExpectTag(50)) goto parse_key_value;
        break;
      }

      // optional bytes key_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckUseItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user(), output);
  }

  // required .NFMsg.Ident item_guid = 2;
  if (has_item_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_guid(), output);
  }

  // repeated .NFMsg.Ident effect_ident = 3;
  for (int i = 0; i < this->effect_ident_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->effect_ident(i), output);
  }

  // repeated int32 effect_value = 4;
  for (int i = 0; i < this->effect_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->effect_value(i), output);
  }

  // repeated int32 effect_rlt = 5;
  for (int i = 0; i < this->effect_rlt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->effect_rlt(i), output);
  }

  // optional bytes key_value = 6;
  if (has_key_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->key_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckUseItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident user = 1;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user(), target);
  }

  // required .NFMsg.Ident item_guid = 2;
  if (has_item_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_guid(), target);
  }

  // repeated .NFMsg.Ident effect_ident = 3;
  for (int i = 0; i < this->effect_ident_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->effect_ident(i), target);
  }

  // repeated int32 effect_value = 4;
  for (int i = 0; i < this->effect_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->effect_value(i), target);
  }

  // repeated int32 effect_rlt = 5;
  for (int i = 0; i < this->effect_rlt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->effect_rlt(i), target);
  }

  // optional bytes key_value = 6;
  if (has_key_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->key_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckUseItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // required .NFMsg.Ident item_guid = 2;
    if (has_item_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_guid());
    }

    // optional bytes key_value = 6;
    if (has_key_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key_value());
    }

  }
  // repeated .NFMsg.Ident effect_ident = 3;
  total_size += 1 * this->effect_ident_size();
  for (int i = 0; i < this->effect_ident_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effect_ident(i));
  }

  // repeated int32 effect_value = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->effect_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->effect_value(i));
    }
    total_size += 1 * this->effect_value_size() + data_size;
  }

  // repeated int32 effect_rlt = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->effect_rlt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->effect_rlt(i));
    }
    total_size += 1 * this->effect_rlt_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckUseItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckUseItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckUseItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckUseItem::MergeFrom(const ReqAckUseItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  effect_ident_.MergeFrom(from.effect_ident_);
  effect_value_.MergeFrom(from.effect_value_);
  effect_rlt_.MergeFrom(from.effect_rlt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::NFMsg::Ident::MergeFrom(from.user());
    }
    if (from.has_item_guid()) {
      mutable_item_guid()->::NFMsg::Ident::MergeFrom(from.item_guid());
    }
    if (from.has_key_value()) {
      set_key_value(from.key_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckUseItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckUseItem::CopyFrom(const ReqAckUseItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckUseItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  if (has_item_guid()) {
    if (!this->item_guid().IsInitialized()) return false;
  }
  for (int i = 0; i < effect_ident_size(); i++) {
    if (!this->effect_ident(i).IsInitialized()) return false;
  }
  return true;
}

void ReqAckUseItem::Swap(ReqAckUseItem* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(item_guid_, other->item_guid_);
    effect_ident_.Swap(&other->effect_ident_);
    effect_value_.Swap(&other->effect_value_);
    effect_rlt_.Swap(&other->effect_rlt_);
    std::swap(key_value_, other->key_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckUseItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckUseItem_descriptor_;
  metadata.reflection = ReqAckUseItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqAckSwapScene_EGameSwapType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckSwapScene_EGameSwapType_descriptor_;
}
bool ReqAckSwapScene_EGameSwapType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGST_NARMAL;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGST_CLONE;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGST_ARENA;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGST_MIRROR;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGameSwapType_MIN;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGameSwapType_MAX;
const int ReqAckSwapScene::EGameSwapType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReqAckSwapScene::kTransferTypeFieldNumber;
const int ReqAckSwapScene::kSceneIdFieldNumber;
const int ReqAckSwapScene::kLineIdFieldNumber;
const int ReqAckSwapScene::kXFieldNumber;
const int ReqAckSwapScene::kYFieldNumber;
const int ReqAckSwapScene::kZFieldNumber;
#endif  // !_MSC_VER

ReqAckSwapScene::ReqAckSwapScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAckSwapScene::InitAsDefaultInstance() {
}

ReqAckSwapScene::ReqAckSwapScene(const ReqAckSwapScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAckSwapScene::SharedCtor() {
  _cached_size_ = 0;
  transfer_type_ = 0;
  scene_id_ = 0;
  line_id_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckSwapScene::~ReqAckSwapScene() {
  SharedDtor();
}

void ReqAckSwapScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqAckSwapScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckSwapScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckSwapScene_descriptor_;
}

const ReqAckSwapScene& ReqAckSwapScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckSwapScene* ReqAckSwapScene::default_instance_ = NULL;

ReqAckSwapScene* ReqAckSwapScene::New() const {
  return new ReqAckSwapScene;
}

void ReqAckSwapScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    transfer_type_ = 0;
    scene_id_ = 0;
    line_id_ = 0;
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAckSwapScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::ReqAckSwapScene_EGameSwapType_IsValid(value)) {
            set_transfer_type(static_cast< ::NFMsg::ReqAckSwapScene_EGameSwapType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // required int32 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_line_id;
        break;
      }

      // required int32 line_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_line_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_id_)));
          set_has_line_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_x;
        break;
      }

      // optional float x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_y;
        break;
      }

      // optional float y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_z;
        break;
      }

      // optional float z = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAckSwapScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
  if (has_transfer_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->transfer_type(), output);
  }

  // required int32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scene_id(), output);
  }

  // required int32 line_id = 3;
  if (has_line_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->line_id(), output);
  }

  // optional float x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->x(), output);
  }

  // optional float y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->y(), output);
  }

  // optional float z = 6;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAckSwapScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
  if (has_transfer_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->transfer_type(), target);
  }

  // required int32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scene_id(), target);
  }

  // required int32 line_id = 3;
  if (has_line_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->line_id(), target);
  }

  // optional float x = 4;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->x(), target);
  }

  // optional float y = 5;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->y(), target);
  }

  // optional float z = 6;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAckSwapScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
    if (has_transfer_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->transfer_type());
    }

    // required int32 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

    // required int32 line_id = 3;
    if (has_line_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line_id());
    }

    // optional float x = 4;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 5;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 6;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckSwapScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAckSwapScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAckSwapScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAckSwapScene::MergeFrom(const ReqAckSwapScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transfer_type()) {
      set_transfer_type(from.transfer_type());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_line_id()) {
      set_line_id(from.line_id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAckSwapScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckSwapScene::CopyFrom(const ReqAckSwapScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckSwapScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReqAckSwapScene::Swap(ReqAckSwapScene* other) {
  if (other != this) {
    std::swap(transfer_type_, other->transfer_type_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(line_id_, other->line_id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAckSwapScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckSwapScene_descriptor_;
  metadata.reflection = ReqAckSwapScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqPickDropItem::kItemGuidFieldNumber;
#endif  // !_MSC_VER

ReqPickDropItem::ReqPickDropItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqPickDropItem::InitAsDefaultInstance() {
  item_guid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

ReqPickDropItem::ReqPickDropItem(const ReqPickDropItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqPickDropItem::SharedCtor() {
  _cached_size_ = 0;
  item_guid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqPickDropItem::~ReqPickDropItem() {
  SharedDtor();
}

void ReqPickDropItem::SharedDtor() {
  if (this != default_instance_) {
    delete item_guid_;
  }
}

void ReqPickDropItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPickDropItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqPickDropItem_descriptor_;
}

const ReqPickDropItem& ReqPickDropItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqPickDropItem* ReqPickDropItem::default_instance_ = NULL;

ReqPickDropItem* ReqPickDropItem::New() const {
  return new ReqPickDropItem;
}

void ReqPickDropItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item_guid()) {
      if (item_guid_ != NULL) item_guid_->::NFMsg::Ident::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqPickDropItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident item_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_guid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqPickDropItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident item_guid = 2;
  if (has_item_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqPickDropItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident item_guid = 2;
  if (has_item_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqPickDropItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident item_guid = 2;
    if (has_item_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPickDropItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqPickDropItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqPickDropItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqPickDropItem::MergeFrom(const ReqPickDropItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_guid()) {
      mutable_item_guid()->::NFMsg::Ident::MergeFrom(from.item_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqPickDropItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPickDropItem::CopyFrom(const ReqPickDropItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPickDropItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_item_guid()) {
    if (!this->item_guid().IsInitialized()) return false;
  }
  return true;
}

void ReqPickDropItem::Swap(ReqPickDropItem* other) {
  if (other != this) {
    std::swap(item_guid_, other->item_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqPickDropItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqPickDropItem_descriptor_;
  metadata.reflection = ReqPickDropItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAcceptTask::kTaskIdFieldNumber;
#endif  // !_MSC_VER

ReqAcceptTask::ReqAcceptTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAcceptTask::InitAsDefaultInstance() {
}

ReqAcceptTask::ReqAcceptTask(const ReqAcceptTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAcceptTask::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAcceptTask::~ReqAcceptTask() {
  SharedDtor();
}

void ReqAcceptTask::SharedDtor() {
  if (task_id_ != &::google::protobuf::internal::kEmptyString) {
    delete task_id_;
  }
  if (this != default_instance_) {
  }
}

void ReqAcceptTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAcceptTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAcceptTask_descriptor_;
}

const ReqAcceptTask& ReqAcceptTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqAcceptTask* ReqAcceptTask::default_instance_ = NULL;

ReqAcceptTask* ReqAcceptTask::New() const {
  return new ReqAcceptTask;
}

void ReqAcceptTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::kEmptyString) {
        task_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAcceptTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAcceptTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->task_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAcceptTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes task_id = 1;
  if (has_task_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAcceptTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAcceptTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAcceptTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAcceptTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAcceptTask::MergeFrom(const ReqAcceptTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAcceptTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAcceptTask::CopyFrom(const ReqAcceptTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAcceptTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqAcceptTask::Swap(ReqAcceptTask* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAcceptTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAcceptTask_descriptor_;
  metadata.reflection = ReqAcceptTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqCompeleteTask::kTaskIdFieldNumber;
#endif  // !_MSC_VER

ReqCompeleteTask::ReqCompeleteTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqCompeleteTask::InitAsDefaultInstance() {
}

ReqCompeleteTask::ReqCompeleteTask(const ReqCompeleteTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqCompeleteTask::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCompeleteTask::~ReqCompeleteTask() {
  SharedDtor();
}

void ReqCompeleteTask::SharedDtor() {
  if (task_id_ != &::google::protobuf::internal::kEmptyString) {
    delete task_id_;
  }
  if (this != default_instance_) {
  }
}

void ReqCompeleteTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCompeleteTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCompeleteTask_descriptor_;
}

const ReqCompeleteTask& ReqCompeleteTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

ReqCompeleteTask* ReqCompeleteTask::default_instance_ = NULL;

ReqCompeleteTask* ReqCompeleteTask::New() const {
  return new ReqCompeleteTask;
}

void ReqCompeleteTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::kEmptyString) {
        task_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCompeleteTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqCompeleteTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->task_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqCompeleteTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes task_id = 1;
  if (has_task_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqCompeleteTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCompeleteTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCompeleteTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCompeleteTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCompeleteTask::MergeFrom(const ReqCompeleteTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCompeleteTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCompeleteTask::CopyFrom(const ReqCompeleteTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCompeleteTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqCompeleteTask::Swap(ReqCompeleteTask* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCompeleteTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCompeleteTask_descriptor_;
  metadata.reflection = ReqCompeleteTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerEntryInfo::kObjectGuidFieldNumber;
const int PlayerEntryInfo::kXFieldNumber;
const int PlayerEntryInfo::kYFieldNumber;
const int PlayerEntryInfo::kZFieldNumber;
const int PlayerEntryInfo::kCareerTypeFieldNumber;
const int PlayerEntryInfo::kPlayerStateFieldNumber;
const int PlayerEntryInfo::kConfigIdFieldNumber;
const int PlayerEntryInfo::kSceneIdFieldNumber;
const int PlayerEntryInfo::kClassIdFieldNumber;
#endif  // !_MSC_VER

PlayerEntryInfo::PlayerEntryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerEntryInfo::InitAsDefaultInstance() {
  object_guid_ = const_cast< ::NFMsg::Ident*>(&::NFMsg::Ident::default_instance());
}

PlayerEntryInfo::PlayerEntryInfo(const PlayerEntryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerEntryInfo::SharedCtor() {
  _cached_size_ = 0;
  object_guid_ = NULL;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  career_type_ = 0;
  player_state_ = 0;
  config_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scene_id_ = 0;
  class_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerEntryInfo::~PlayerEntryInfo() {
  SharedDtor();
}

void PlayerEntryInfo::SharedDtor() {
  if (config_id_ != &::google::protobuf::internal::kEmptyString) {
    delete config_id_;
  }
  if (class_id_ != &::google::protobuf::internal::kEmptyString) {
    delete class_id_;
  }
  if (this != default_instance_) {
    delete object_guid_;
  }
}

void PlayerEntryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEntryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerEntryInfo_descriptor_;
}

const PlayerEntryInfo& PlayerEntryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

PlayerEntryInfo* PlayerEntryInfo::default_instance_ = NULL;

PlayerEntryInfo* PlayerEntryInfo::New() const {
  return new PlayerEntryInfo;
}

void PlayerEntryInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_object_guid()) {
      if (object_guid_ != NULL) object_guid_->::NFMsg::Ident::Clear();
    }
    x_ = 0;
    y_ = 0;
    z_ = 0;
    career_type_ = 0;
    player_state_ = 0;
    if (has_config_id()) {
      if (config_id_ != &::google::protobuf::internal::kEmptyString) {
        config_id_->clear();
      }
    }
    scene_id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_class_id()) {
      if (class_id_ != &::google::protobuf::internal::kEmptyString) {
        class_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerEntryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident object_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object_guid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }

      // required float x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // required float y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_z;
        break;
      }

      // required float z = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_career_type;
        break;
      }

      // required int32 career_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_career_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_type_)));
          set_has_career_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_player_state;
        break;
      }

      // required int32 player_state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_state_)));
          set_has_player_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_config_id;
        break;
      }

      // required bytes config_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_config_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_scene_id;
        break;
      }

      // required int32 scene_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_class_id;
        break;
      }

      // required bytes class_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_class_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerEntryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NFMsg.Ident object_guid = 1;
  if (has_object_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->object_guid(), output);
  }

  // required float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // required float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // required float z = 4;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->z(), output);
  }

  // required int32 career_type = 5;
  if (has_career_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->career_type(), output);
  }

  // required int32 player_state = 6;
  if (has_player_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->player_state(), output);
  }

  // required bytes config_id = 7;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->config_id(), output);
  }

  // required int32 scene_id = 8;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->scene_id(), output);
  }

  // required bytes class_id = 9;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->class_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerEntryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NFMsg.Ident object_guid = 1;
  if (has_object_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->object_guid(), target);
  }

  // required float x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // required float y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // required float z = 4;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->z(), target);
  }

  // required int32 career_type = 5;
  if (has_career_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->career_type(), target);
  }

  // required int32 player_state = 6;
  if (has_player_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->player_state(), target);
  }

  // required bytes config_id = 7;
  if (has_config_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->config_id(), target);
  }

  // required int32 scene_id = 8;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->scene_id(), target);
  }

  // required bytes class_id = 9;
  if (has_class_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->class_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerEntryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NFMsg.Ident object_guid = 1;
    if (has_object_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object_guid());
    }

    // required float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float z = 4;
    if (has_z()) {
      total_size += 1 + 4;
    }

    // required int32 career_type = 5;
    if (has_career_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career_type());
    }

    // required int32 player_state = 6;
    if (has_player_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_state());
    }

    // required bytes config_id = 7;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->config_id());
    }

    // required int32 scene_id = 8;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bytes class_id = 9;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->class_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEntryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerEntryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerEntryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerEntryInfo::MergeFrom(const PlayerEntryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_guid()) {
      mutable_object_guid()->::NFMsg::Ident::MergeFrom(from.object_guid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_career_type()) {
      set_career_type(from.career_type());
    }
    if (from.has_player_state()) {
      set_player_state(from.player_state());
    }
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_class_id()) {
      set_class_id(from.class_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerEntryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEntryInfo::CopyFrom(const PlayerEntryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEntryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  if (has_object_guid()) {
    if (!this->object_guid().IsInitialized()) return false;
  }
  return true;
}

void PlayerEntryInfo::Swap(PlayerEntryInfo* other) {
  if (other != this) {
    std::swap(object_guid_, other->object_guid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(career_type_, other->career_type_);
    std::swap(player_state_, other->player_state_);
    std::swap(config_id_, other->config_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(class_id_, other->class_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerEntryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerEntryInfo_descriptor_;
  metadata.reflection = PlayerEntryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckPlayerEntryList::kObjectListFieldNumber;
#endif  // !_MSC_VER

AckPlayerEntryList::AckPlayerEntryList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckPlayerEntryList::InitAsDefaultInstance() {
}

AckPlayerEntryList::AckPlayerEntryList(const AckPlayerEntryList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckPlayerEntryList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPlayerEntryList::~AckPlayerEntryList() {
  SharedDtor();
}

void AckPlayerEntryList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckPlayerEntryList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPlayerEntryList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPlayerEntryList_descriptor_;
}

const AckPlayerEntryList& AckPlayerEntryList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

AckPlayerEntryList* AckPlayerEntryList::default_instance_ = NULL;

AckPlayerEntryList* AckPlayerEntryList::New() const {
  return new AckPlayerEntryList;
}

void AckPlayerEntryList::Clear() {
  object_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckPlayerEntryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFMsg.PlayerEntryInfo object_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_object_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_object_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckPlayerEntryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NFMsg.PlayerEntryInfo object_list = 1;
  for (int i = 0; i < this->object_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->object_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckPlayerEntryList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NFMsg.PlayerEntryInfo object_list = 1;
  for (int i = 0; i < this->object_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->object_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckPlayerEntryList::ByteSize() const {
  int total_size = 0;

  // repeated .NFMsg.PlayerEntryInfo object_list = 1;
  total_size += 1 * this->object_list_size();
  for (int i = 0; i < this->object_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->object_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPlayerEntryList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckPlayerEntryList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckPlayerEntryList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckPlayerEntryList::MergeFrom(const AckPlayerEntryList& from) {
  GOOGLE_CHECK_NE(&from, this);
  object_list_.MergeFrom(from.object_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckPlayerEntryList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPlayerEntryList::CopyFrom(const AckPlayerEntryList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPlayerEntryList::IsInitialized() const {

  for (int i = 0; i < object_list_size(); i++) {
    if (!this->object_list(i).IsInitialized()) return false;
  }
  return true;
}

void AckPlayerEntryList::Swap(AckPlayerEntryList* other) {
  if (other != this) {
    object_list_.Swap(&other->object_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckPlayerEntryList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPlayerEntryList_descriptor_;
  metadata.reflection = AckPlayerEntryList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckPlayerLeaveList::kObjectListFieldNumber;
#endif  // !_MSC_VER

AckPlayerLeaveList::AckPlayerLeaveList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckPlayerLeaveList::InitAsDefaultInstance() {
}

AckPlayerLeaveList::AckPlayerLeaveList(const AckPlayerLeaveList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckPlayerLeaveList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPlayerLeaveList::~AckPlayerLeaveList() {
  SharedDtor();
}

void AckPlayerLeaveList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckPlayerLeaveList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPlayerLeaveList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPlayerLeaveList_descriptor_;
}

const AckPlayerLeaveList& AckPlayerLeaveList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NFMsgShare_2eproto();
  return *default_instance_;
}

AckPlayerLeaveList* AckPlayerLeaveList::default_instance_ = NULL;

AckPlayerLeaveList* AckPlayerLeaveList::New() const {
  return new AckPlayerLeaveList;
}

void AckPlayerLeaveList::Clear() {
  object_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckPlayerLeaveList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFMsg.Ident object_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_object_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_object_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckPlayerLeaveList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NFMsg.Ident object_list = 1;
  for (int i = 0; i < this->object_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->object_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckPlayerLeaveList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NFMsg.Ident object_list = 1;
  for (int i = 0; i < this->object_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->object_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckPlayerLeaveList::ByteSize() const {
  int total_size = 0;

  // repeated .NFMsg.Ident object_list = 1;
  total_size += 1 * this->object_list_size();
  for (int i = 0; i < this->object_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->object_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPlayerLeaveList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckPlayerLeaveList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckPlayerLeaveList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckPlayerLeaveList::MergeFrom(const AckPlayerLeaveList& from) {
  GOOGLE_CHECK_NE(&from, this);
  object_list_.MergeFrom(from.object_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckPlayerLeaveList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPlayerLeaveList::CopyFrom(const AckPlayerLeaveList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPlayerLeaveList::IsInitialized() const {

  for (int i = 0; i < object_list_size(); i++) {
    if (!this->object_list(i).IsInitialized()) return false;
  }
  return true;
}

void AckPlayerLeaveList::Swap(AckPlayerLeaveList* other) {
  if (other != this) {
    object_list_.Swap(&other->object_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckPlayerLeaveList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPlayerLeaveList_descriptor_;
  metadata.reflection = AckPlayerLeaveList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

// @@protoc_insertion_point(global_scope)
